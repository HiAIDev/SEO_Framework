Index: autodescription.php
===================================================================
--- autodescription.php	(revision 1413572)
+++ autodescription.php	(working copy)
@@ -1,174 +1,139 @@
-<?php
-/**
- * Plugin Name: The SEO Framework
- * Plugin URI: https://wordpress.org/plugins/autodescription/
- * Description: The SEO Framework makes sure your SEO is always up-to-date without any configuration needed. It's based upon the Genesis SEO.
- * Version: 2.5.2.4
- * Author: Sybre Waaijer
- * Author URI: https://cyberwire.nl/
- * License: GPLv3
- * Text Domain: autodescription
- * Domain Path: /language
- */
-
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-//* Debug. Not to be used on production websites as it dumps all kinds of stuff everywhere.
-//if ( is_admin() ) { // Warning: This allows every user to still see it.
-//	if ( is_super_admin() ) { // AntiWarning: This allows for enabling it only for the (multi-)site admin user.
-//		define( 'THE_SEO_FRAMEWORK_DEBUG', true );
-//		define( 'THE_SEO_FRAMEWORK_DEBUG_MORE', true );
-//		define( 'THE_SEO_FRAMEWORK_DEBUG_HIDDEN', true );
-//	}
-//}
-
-/**
- * CDN Cache buster. 3 point.
- * Not many caching plugins use CDN in dashboard. What a shame.
- *
- * @since 1.0.0
- *
- * New constant.
- * @since 2.3.0
- *
- * Removed previous constant.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_VERSION', '2.5.2.4' );
-
-/**
- * Plugin options filter
- * We can't change the options name without erasing the settings.
- * We can change the filter, however. So we did.
- *
- * @since 2.2.2
- *
- * New constant and filter.
- * @since 2.3.0
- *
- * Removed previous constant and filter.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_SITE_OPTIONS', (string) apply_filters( 'the_seo_framework_site_options', 'autodescription-site-settings' ) );
-
-/**
- * Plugin options filter
- * We can't change the options name without erasing the settings.
- * We can change the filter, however. So we did.
- *
- * @since 2.2.2
- *
- * New constant and filter.
- * @since 2.3.0
- *
- * Removed previous constant and filter.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_NETWORK_OPTIONS', (string) apply_filters( 'the_seo_framework_network_settings', 'autodescription-network-settings' ) );
-
-/**
- * The plugin map url.
- * Used for calling browser files.
- *
- * @since 1.0.0
- *
- * New constant.
- * @since 2.3.0
- *
- * Removed previous constant.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_DIR_URL', plugin_dir_url( __FILE__ ) );
-
-/**
- * The plugin map absolute path.
- * Used for calling php files.
- *
- * @since 1.0.0
- *
- * New constant.
- * @since 2.3.0
- *
- * Removed previous constant.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_DIR_PATH', plugin_dir_path( __FILE__ ) );
-
-/**
- * The plugin file relative to the plugins dir.
- *
- * @since 2.2.8
- */
-define( 'THE_SEO_FRAMEWORK_PLUGIN_BASENAME', plugin_basename( __FILE__ ) );
-
-/**
- * The plugin file, absolute unix path.
- * @since 2.2.9
- *
- * New constant.
- * @since 2.3.0
- *
- * Removed previous constant.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_PLUGIN_BASE_FILE', __FILE__ );
-
-/**
- * The plugin class map absolute path.
- *
- * New constant.
- * @since 2.3.0
- *
- * Removed previous constant.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_DIR_PATH_CLASS', THE_SEO_FRAMEWORK_DIR_PATH . '/inc/classes/' );
-
-/**
- * The plugin function map absolute path.
- *
- * New constant.
- * @since 2.3.0
- *
- * Removed previous constant.
- * @since 2.3.5
- */
-define( 'THE_SEO_FRAMEWORK_DIR_PATH_FUNCT', THE_SEO_FRAMEWORK_DIR_PATH . '/inc/functions/' );
-
-/**
- * Plugin locale 'autodescription'
- *
- * File located in plugin folder autodescription/language/
- *
- * @since 1.0.0
- *
- * @return void
- */
-function the_seo_framework_locale_init() {
-	load_plugin_textdomain( 'autodescription', false, basename( dirname( __FILE__ ) ) . '/language/' );
-}
-add_action( 'plugins_loaded', 'the_seo_framework_locale_init', 10 );
-
-/**
- * Load plugin files
- *
- * @since 1.0.0
- *
- * @uses THE_SEO_FRAMEWORK_DIR_PATH
- */
-require_once( THE_SEO_FRAMEWORK_DIR_PATH . '/load.class.php' );
+<?php
+/**
+ * Plugin Name: The SEO Framework
+ * Plugin URI: https://wordpress.org/plugins/autodescription/
+ * Description: An automated, advanced, accessible, unbranded and extremely fast SEO solution for any WordPress website.
+ * Version: 2.6.0
+ * Author: Sybre Waaijer
+ * Author URI: https://cyberwire.nl/
+ * License: GPLv3
+ * Text Domain: autodescription
+ * Domain Path: /language
+ */
+
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+//* Debug. Not to be used on production websites as it dumps and/or disables all kinds of stuff everywhere.
+//add_action( 'plugins_loaded', function() { if ( is_super_admin() ) {
+	//if ( is_admin() ) {
+	//		define( 'THE_SEO_FRAMEWORK_DEBUG', true );
+	//		define( 'THE_SEO_FRAMEWORK_DEBUG_HIDDEN', true );
+	//		define( 'THE_SEO_FRAMEWORK_DISABLE_TRANSIENTS', true );
+	//}
+//}},0);
+
+/**
+ * CDN Cache buster. 3 to 4 point.
+ * Not many caching plugins use CDN in dashboard. What a shame. Firefox does cache.
+ *
+ * @since 1.0.0
+ */
+define( 'THE_SEO_FRAMEWORK_VERSION', '2.6.0' );
+
+/**
+ * Plugin options filter
+ * We can't change the options name without erasing the settings.
+ * We can change the filter, however. So we did.
+ *
+ * @since 2.2.2
+ */
+define( 'THE_SEO_FRAMEWORK_SITE_OPTIONS', (string) apply_filters( 'the_seo_framework_site_options', 'autodescription-site-settings' ) );
+
+/**
+ * Plugin options filter
+ * We can't change the options name without erasing the settings.
+ * We can change the filter, however. So we did.
+ *
+ * @since 2.2.2
+ */
+define( 'THE_SEO_FRAMEWORK_NETWORK_OPTIONS', (string) apply_filters( 'the_seo_framework_network_settings', 'autodescription-network-settings' ) );
+
+/**
+ * The plugin map url.
+ * Used for calling browser files.
+ *
+ * @since 2.2.2
+ */
+define( 'THE_SEO_FRAMEWORK_DIR_URL', plugin_dir_url( __FILE__ ) );
+
+/**
+ * The plugin map absolute path.
+ * Used for calling php files.
+ *
+ * @since 2.2.2
+ */
+define( 'THE_SEO_FRAMEWORK_DIR_PATH', plugin_dir_path( __FILE__ ) );
+
+/**
+ * The plugin file relative to the plugins dir.
+ *
+ * @since 2.2.8
+ */
+define( 'THE_SEO_FRAMEWORK_PLUGIN_BASENAME', plugin_basename( __FILE__ ) );
+
+/**
+ * The plugin file, absolute unix path.
+ * @since 2.2.9
+ */
+define( 'THE_SEO_FRAMEWORK_PLUGIN_BASE_FILE', __FILE__ );
+
+/**
+ * The plugin class map absolute path.
+ * @since 2.2.9
+ */
+define( 'THE_SEO_FRAMEWORK_DIR_PATH_CLASS', THE_SEO_FRAMEWORK_DIR_PATH . '/inc/classes/' );
+
+/**
+ * The plugin function map absolute path.
+ * @since 2.2.9
+ */
+define( 'THE_SEO_FRAMEWORK_DIR_PATH_FUNCT', THE_SEO_FRAMEWORK_DIR_PATH . '/inc/functions/' );
+
+add_action( 'plugins_loaded', 'the_seo_framework_locale_init', 10 );
+/**
+ * Plugin locale 'autodescription'
+ *
+ * File located in plugin folder autodescription/language/
+ *
+ * @since 1.0.0
+ */
+function the_seo_framework_locale_init() {
+	load_plugin_textdomain( 'autodescription', false, basename( dirname( __FILE__ ) ) . '/language/' );
+}
+
+/**
+ * Load plugin files
+ *
+ * @since 1.0.0
+ *
+ * @uses THE_SEO_FRAMEWORK_DIR_PATH
+ */
+require_once( THE_SEO_FRAMEWORK_DIR_PATH . '/load.class.php' );
+
+//* Load deprecated functions.
+require_once( THE_SEO_FRAMEWORK_DIR_PATH . 'inc/deprecated/deprecated.php' );
+
+/**
+ * FLush permalinks on activation/deactivation
+ *
+ * Calls functions statically.
+ *
+ * @since 2.2.9
+ */
+register_activation_hook( THE_SEO_FRAMEWORK_PLUGIN_BASE_FILE, array( 'The_SEO_Framework_Load', 'flush_rewrite_rules_activation' ) );
+register_deactivation_hook( THE_SEO_FRAMEWORK_PLUGIN_BASE_FILE, array( 'The_SEO_Framework_Load', 'flush_rewrite_rules_deactivation' ) );
Index: inc/classes/admininit.class.php
===================================================================
--- inc/classes/admininit.class.php	(revision 1413572)
+++ inc/classes/admininit.class.php	(working copy)
@@ -1,717 +1,468 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Admin_Init
- *
- * Initializes the plugin for the wp-admin screens.
- * Enqueues css and javascript.
- *
- * @since 2.1.6
- */
-class AutoDescription_Admin_Init extends AutoDescription_Init {
-
-	/**
-	 * Constructor, load parent constructor
-	 *
-	 * Initalizes wp-admin functions
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		add_action( 'admin_init', array( $this, 'post_state' ) );
-		add_action( 'init', array( $this, 'post_type_support' ) );
-
-		/**
-		 * @since 2.2.4
-		 */
-		add_filter( 'genesis_detect_seo_plugins', array( $this, 'no_more_genesis_seo' ), 10 );
-
-		/**
-		 * @since 2.5.0
-		 * Doesn't work. ePanel filters are buggy and inconsistent.
-		 */
-		// add_filter( 'epanel_page_maintabs', array( $this, 'no_more_elegant_seo' ), 10, 1 );
-
-		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ), 10, 1 );
-
-		/**
-		 * @since 2.5.0
-		 *
-		 * PHP 5.2 compat
-		 * @since 2.5.2
-		 */
-		add_action( 'admin_footer', array( $this, 'debug_screens' ) );
-	}
-
-	/**
-	 * Add post state on edit.php to the page or post that has been altered
-	 *
-	 * Called outside autodescription_run
-	 *
-	 * Applies `hmpl_ad_states` filters.
-	 *
-	 * @uses $this->add_post_state
-	 *
-	 * @since 2.1.0
-	 */
-	public function post_state() {
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$allow_states = (bool) apply_filters( 'the_seo_framework_allow_states', true );
-
-		//* Prevent this function from running if this plugin is set to disabled.
-		if ( ! $allow_states )
-			return;
-
-		add_filter( 'display_post_states', array( $this, 'add_post_state' ) );
-
-	}
-
-	/**
-	 * Adds post states in post/page edit.php query
-	 *
-	 * @param array states 		the current post state
-	 * @param string redirected	$this->get_custom_field( 'redirect' );
-	 * @param string noindex	$this->get_custom_field( '_genesis_noindex' );
-	 *
-	 * @since 2.1.0
-	 */
-	public function add_post_state( $states = array() ) {
-
-		$post_id = $this->get_the_real_ID( false );
-
-		$searchexclude = (bool) $this->get_custom_field( 'exclude_local_search', $post_id );
-
-		if ( $searchexclude === true )
-			$states[] = __( 'No Search', 'autodescription' );
-
-		return $states;
-	}
-
-	/**
-	 * Removes the Genesis SEO meta boxes on the SEO Settings page
-	 *
-	 * @since 2.2.4
-	 */
-	public function no_more_genesis_seo() {
-
-		$plugins = array(
-				// Classes to detect.
-				'classes' => array(
-					'The_SEO_Framework_Load',
-				),
-
-				// Functions to detect.
-				'functions' => array(),
-
-				// Constants to detect.
-				'constants' => array(),
-			);
-
-		return (array) $plugins;
-	}
-
-	/**
-	 * Removes ePanel (Elegant Themes) SEO options.
-	 *
-	 * @since 2.5.0
-	 */
-	public function no_more_elegant_seo( $modules = array() ) {
-
-		//* Something went wrong here.
-		if ( ! is_array( $modules ) )
-			return $modules;
-
-		$modules = array_flip( $modules );
-		unset( $modules['seo'] );
-		//* Fill the keys back in order.
-		$modules = array_values( array_flip( $modules ) );
-
-		/**
-		 * Unset globals $options['randomkeyforseo']
-		 *
-		 * @NOTE to Elegant Themes:
-		 * Why Elegant Themes? This is why I never trusted your themes. :(
-		 * Uploading most of them in binary will crash also the layout.
-		 * And having unsanitized globals $options (great name for a global!), shouldn't be used.
-		 *
-		 * Try statically cached functions, take a look at the `the_seo_framework_init` function for a great example of countering globals.
-		 *
-		 * Please also provide more documentation for developers.
-		 *
-		 * Please rewrite your ePanel. Try to start by adding keys to options and removing globals.
-		 * More filters are also for everyone's pleasure :).
-		 *
-		 * I also recommend using Atom.io or Notepad++, because whatever you're using:
-		 * It's not working well with UTF-8.
-		 *
-		 * @global $options
-		 */
-		global $options;
-
-		if ( is_array( $options ) ) {
-			$keys = array();
-
-			foreach ( $options as $key => $array ) {
-				$seo_key = array_search( 'seo', $array );
-				if ( false !== $seo_key && 'name' === $seo_key )
-					$keys[] = $seo_key;
-			}
-
-			foreach ( $keys as $key )
-				unset( $options[$key] );
-		}
-
-		return (array) $modules;
-	}
-
-	/**
-	 * Adds post type support
-	 *
-	 * Applies filters the_seo_framework_supported_post_types : The supported post types.
-	 * @since 2.3.1
-	 *
-	 * @since 2.1.6
-	 */
-	public function post_type_support() {
-
-		$args = array();
-
-		/**
-		 * Added product post type.
-		 *
-		 * @since 2.3.1
-		 */
-		$defaults = array(
-			'post', 'page',
-			'product',
-			'forum', 'topic',
-			'jetpack-testimonial', 'jetpack-portfolio'
-		);
-		$post_types = (array) apply_filters( 'the_seo_framework_supported_post_types', $defaults, $args );
-
-		$post_types = wp_parse_args( $args, $post_types );
-
-		foreach ( $post_types as $type )
-			add_post_type_support( $type, array( 'autodescription-meta' ) );
-
-	}
-
-	/**
-	 * Enqueues scripts in the admin area on the supported screens.
-	 *
-	 * @since 2.3.3
-	 *
-	 * @param $hook the current page
-	 */
-	public function enqueue_admin_scripts( $hook ) {
-
-		/**
-		 * Check hook first.
-		 * @since 2.3.9
-		 */
-		if ( isset( $hook ) && ! empty( $hook ) && ( $hook == 'edit.php' || $hook == 'post.php' || $hook = 'edit-tags.php' ) ) {
-			/**
-			 * @uses $this->post_type_supports_custom_seo()
-			 * @since 2.3.9
-			 */
-			if ( $this->post_type_supports_custom_seo() ) {
-				add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_css' ), 11 );
-				add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_javascript' ), 11 );
-			}
-		}
-
-	}
-
-	/**
-	 * AutoDescription Javascript helper file
-	 *
-	 * @since 2.0.2
-	 *
-	 * @usedby add_inpost_seo_box
-	 * @usedby enqueue_javascript
-	 *
-	 * @param string|array|object $hook the current page
-	 */
-	public function enqueue_admin_javascript( $hook ) {
-
-		$suffix = defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ? '' : '.min';
-
-		wp_enqueue_script( 'autodescription-js', THE_SEO_FRAMEWORK_DIR_URL . "lib/js/autodescription{$suffix}.js", array( 'jquery' ), THE_SEO_FRAMEWORK_VERSION, true );
-
-		/**
-		 * i18n.
-		 */
-		$blog_name = $this->get_blogname();
-		$description = $this->get_blogdescription();
-
-		$tagline = (bool) $this->get_option( 'homepage_tagline' );
-		$home_tagline = $this->get_option( 'homepage_title_tagline' );
-		$title_location = $this->get_option( 'title_location' );
-		$title_rem_additions = (bool) $this->get_option( 'title_rem_additions' );
-
-		$separator = $this->get_separator( 'title', true );
-
-		$rtl = (bool) is_rtl();
-		$ishome = false;
-
-		/**
-		 * We're gaining UX in exchange for resource usage.
-		 *
-		 * Any way to cache this?
-		 *
-		 * @since 2.2.4
-		 */
-		if ( '' !== $hook ) {
-			// We're somewhere within default WordPress pages.
-			$post_id = $this->get_the_real_ID();
-
-			if ( $this->is_static_frontpage( $post_id ) ) {
-				$title = $blog_name;
-				$title_location = $this->get_option( 'home_title_location' );
-				$ishome = true;
-
-				if ( $tagline ) {
-					$additions = $home_tagline ? $home_tagline : $description;
-				} else {
-					$additions = '';
-				}
-			} else if ( $post_id ) {
-				//* We're on post.php
-				$title = $this->title( '', '', '', array( 'placeholder' => true, 'notagline' => true ) );
-
-				if ( ! $title_rem_additions || ! $this->theme_title_doing_it_right() ) {
-					$additions = $blog_name;
-				} else {
-					$additions = '';
-				}
-			} else {
-				//* We're in a special place.
-				// Can't fetch title.
-				$title = '';
-				$additions = $blog_name;
-			}
-
-		} else {
-			// We're on our SEO settings pages.
-			if ( 'page' === get_option( 'show_on_front' ) ) {
-				// Home is a page.
-				$inpost_title = $this->get_custom_field( '_genesis_title', get_option( 'page_on_front' ) );
-			} else {
-				// Home is a blog.
-				$inpost_title = '';
-			}
-			$title = ! empty( $inpost_title ) ? $inpost_title : $blog_name;
-			$additions = $home_tagline ? $home_tagline : $description;
-		}
-
-		$strings = array(
-			'saveAlert'		=> __( 'The changes you made will be lost if you navigate away from this page.', 'autodescription' ),
-			'confirmReset'	=> __( 'Are you sure you want to reset all SEO settings to their defaults?', 'autodescription' ),
-			'siteTitle' 	=> $title,
-			'titleAdditions' => $additions,
-			'blogDescription' => $description,
-			'titleTagline' 	=> $tagline,
-			'titleSeparator' => $separator,
-			'titleLocation' => $title_location,
-			'isRTL' => $rtl,
-			'isHome' => $ishome,
-		);
-
-		wp_localize_script( 'autodescription-js', 'autodescriptionL10n', $strings );
-
-	}
-
-	/**
-	 * CSS for the AutoDescription Bar
-	 *
-	 * @since 2.1.9
-	 *
-	 * @param $hook the current page
-	 *
-	 * @todo get_network_option
-	 */
-	public function enqueue_admin_css( $hook ) {
-
-		$rtl = '';
-
-		if ( is_rtl() )
-			$rtl = '-rtl';
-
-		$suffix = defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ? '' : '.min';
-
-		wp_enqueue_style( 'autodescription-css', THE_SEO_FRAMEWORK_DIR_URL . "lib/css/autodescription{$rtl}{$suffix}.css", array(), THE_SEO_FRAMEWORK_VERSION, 'all' );
-
-	}
-
-	/**
-	 * Mark up content with code tags.
-	 *
-	 * Escapes all HTML, so `<` gets changed to `&lt;` and displays correctly.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @param  string $content Content to be wrapped in code tags.
-	 *
-	 * @return string Content wrapped in code tags.
-	 */
-	public function code_wrap( $content ) {
-		return '<code>' . esc_html( $content ) . '</code>';
-	}
-
-	/**
-	 * Mark up content with code tags.
-	 *
-	 * Escapes no HTML.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param  string $content Content to be wrapped in code tags.
-	 *
-	 * @return string Content wrapped in code tags.
-	 */
-	public function code_wrap_noesc( $content ) {
-		return '<code>' . $content . '</code>';
-	}
-
-	/**
-	 * Return custom field post meta data.
-	 *
-	 * Return only the first value of custom field. Return false if field is
-	 * blank or not set.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @param string $field	Custom field key.
-	 * @param int $post_id	The post ID
-	 *
-	 * @return string|boolean Return value or false on failure.
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 *
-	 * @staticvar array $field_cache
-	 * @since 2.2.5
-	 */
-	public function get_custom_field( $field, $post_id = null ) {
-
-		//* No field has been provided.
-		if ( empty( $field ) )
-			return false;
-
-		//* Setup cache.
-		static $field_cache = array();
-
-		//* Check field cache.
-		if ( isset( $field_cache[$field][$post_id] ) )
-			//* Field has been cached.
-			return $field_cache[$field][$post_id];
-
-		if ( null === $post_id || empty( $post_id ) )
-			$post_id = $this->get_the_real_ID();
-
-		if ( null === $post_id || empty( $post_id ) )
-			return '';
-
-		$custom_field = get_post_meta( $post_id, $field, true );
-
-		// If custom field is empty, return null.
-		if ( ! $custom_field )
-			$field_cache[$field][$post_id] = '';
-
-		//* Render custom field, slashes stripped, sanitized if string
-		$field_cache[$field][$post_id] = is_array( $custom_field ) ? stripslashes_deep( $custom_field ) : stripslashes( wp_kses_decode_entities( $custom_field ) );
-
-		return $field_cache[$field][$post_id];
-	}
-
-	/**
-	 * Checks the screen hook.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return bool true if screen match.
-	 */
-	public function is_menu_page( $pagehook = '' ) {
-		global $page_hook;
-
-		if ( isset( $page_hook ) && $page_hook === $pagehook )
-			return true;
-
-			//* May be too early for $page_hook
-		if ( isset( $_REQUEST['page'] ) && $_REQUEST['page'] === $pagehook )
-			return true;
-
-		return false;
-	}
-
-	/**
-	 * Redirect the user to an admin page, and add query args to the URL string
-	 * for alerts, etc.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $page			Menu slug.
-	 * @param array  $query_args 	Optional. Associative array of query string arguments
-	 * 								(key => value). Default is an empty array.
-	 *
-	 * @return null Return early if first argument is false.
-	 */
-	public function admin_redirect( $page, array $query_args = array() ) {
-
-		if ( ! $page )
-			return;
-
-		$url = html_entity_decode( menu_page_url( $page, 0 ) );
-
-		foreach ( (array) $query_args as $key => $value ) {
-			if ( empty( $key ) && empty( $value ) ) {
-				unset( $query_args[$key] );
-			}
-		}
-
-		$url = add_query_arg( $query_args, $url );
-
-		wp_redirect( esc_url_raw( $url ) );
-		exit;
-
-	}
-
-	/**
-	 * Google docs language determinator.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @staticvar string $language
-	 *
-	 * @return string language code
-	 */
-	protected function google_language() {
-
-		/**
-		 * Cache value
-		 * @since 2.2.4
-		 */
-		static $language = null;
-
-		if ( isset( $language ) )
-			return $language;
-
-		//* Language shorttag to be used in Google help pages,
-		$language = _x( 'en', 'e.g. en for English, nl for Dutch, fi for Finish, de for German', 'autodescription' );
-
-		return $language;
-	}
-
-	/**
-	 * Fetch Tax labels
-	 *
-	 * @param string $tax_type the Taxonomy type.
-	 *
-	 * @since 2.3.1
-	 *
-	 * @staticvar object $labels
-	 *
-	 * @return object|null with all the labels as member variables
-	 */
-	public function get_tax_labels( $tax_type ) {
-
-		static $labels = null;
-
-		if ( isset( $labels ) )
-			return $labels;
-
-		$tax_object = get_taxonomy( $tax_type );
-
-		if ( is_object( $tax_object ) )
-			return $labels = (object) $tax_object->labels;
-
-		//* Nothing found.
-		return null;
-	}
-
-	/**
-	 * Echo debug values.
-	 *
-	 * @param mixed $values What to be output.
-	 *
-	 * @since 2.3.4
-	 */
-	public function echo_debug_information( $values ) {
-
-		if ( $this->the_seo_framework_debug ) {
-			echo "\r\n";
-
-			if ( ! $this->the_seo_framework_debug_hidden ) {
-				echo "<br>\r\n";
-				echo '<span class="code highlight">';
-			}
-
-			if ( ! isset( $values ) ) {
-				echo $this->debug_value_wrapper( "Debug message: Value isn't set." ) . "\r\n";
-				return;
-			}
-
-			if ( is_object( $values ) ) {
-				// Ugh.
-				$values = (array) $values;
-
-				if ( is_array( $values ) ) {
-					foreach ( $values as $key => $value ) {
-						if ( is_object( $value ) ) {
-							foreach ( $values as $key => $value ) {
-								$values = $value;
-								break;
-							}
-						}
-						break;
-					}
-				}
-			}
-
-			if ( is_array( $values ) ) {
-				foreach ( $values as $key => $value ) {
-					if ( '' === $value ) {
-						echo $this->debug_key_wrapper( $key ) . ' => ';
-						echo $this->debug_value_wrapper( "''" );
-						echo "\r\n";
-					} else if ( is_string( $value ) || is_int( $value ) ) {
-						echo $this->debug_key_wrapper( $key ) . ' => ' . $this->debug_value_wrapper( $value );
-						echo "\r\n";
-					} else if ( is_bool( $value ) ) {
-						echo $this->debug_key_wrapper( $key ) . ' => ';
-						echo $this->debug_value_wrapper( $value ? 'true' : 'false' );
-						echo "\r\n";
-					} else if ( is_array( $value ) ) {
-						echo $this->debug_key_wrapper( $key ) . ' => ';
-						echo "Array[\r\n";
-						foreach ( $value as $k => $v ) {
-							if ( '' === $v ) {
-								echo $this->debug_key_wrapper( $k ) . ' => ';
-								echo $this->debug_value_wrapper( "''" );
-								echo ',';
-								echo "\r\n";
-							} else if ( is_string( $v ) || is_int( $v ) ) {
-								echo $this->debug_key_wrapper( $k ) . ' => ' . $this->debug_value_wrapper( $v );
-								echo ',';
-								echo "\r\n";
-							} else if ( is_bool( $v ) ) {
-								echo $this->debug_key_wrapper( $k ) . ' => ';
-								echo $this->debug_value_wrapper( $v ? 'true' : 'false' );
-								echo ',';
-								echo "\r\n";
-							} else if ( is_array( $v ) ) {
-								echo $this->debug_key_wrapper( $k ) . ' => ';
-								echo $this->debug_value_wrapper( 'Debug message: Three+ dimensional array.' );
-								echo ',';
-							} else {
-								echo $this->debug_key_wrapper( $k ) . ' => ';
-								echo $this->debug_value_wrapper( $v );
-								echo ',';
-								echo "\r\n";
-							}
-						}
-						echo "]";
-					} else {
-						echo $this->debug_key_wrapper( $key ) . ' => ';
-						echo $this->debug_value_wrapper( $value );
-						echo "\r\n";
-					}
-				}
-			} else if ( '' === $values ) {
-				echo $this->debug_value_wrapper( "''" );
-			} else if ( is_string( $values ) || is_int( $values ) ) {
-				echo $this->debug_value_wrapper( $values );
-			} else if ( is_bool( $values ) ) {
-				echo $this->debug_value_wrapper( $values ? 'true' : 'false' );
-			} else {
-				echo $this->debug_value_wrapper( $values );
-			}
-
-			if ( ! $this->the_seo_framework_debug_hidden ) {
-				echo '</span>';
-			}
-			echo "\r\n";
-		}
-
-	}
-
-	/**
-	 * Wrap debug key in a colored span.
-	 *
-	 * @param string $key The debug key.
-	 *
-	 * @since 2.3.9
-	 *
-	 * @return string
-	 */
-	public function debug_key_wrapper( $key ) {
-		if ( ! $this->the_seo_framework_debug_hidden )
-			return '<font color="chucknorris">' . esc_attr( (string) $key ) . '</font>';
-
-		return esc_attr( (string) $key );
-	}
-
-	/**
-	 * Wrap debug value in a colored span.
-	 *
-	 * @param string $value The debug value.
-	 *
-	 * @since 2.3.9
-	 *
-	 * @return string
-	 */
-	public function debug_value_wrapper( $value ) {
-
-		if ( ! is_scalar( $value ) )
-			return 'Debug message: not scalar';
-
-		if ( ! $this->the_seo_framework_debug_hidden )
-			return '<span class="wp-ui-notification">' . esc_attr( (string) trim( $value ) ) . '</span>';
-
-		return esc_attr( (string) $value );
-	}
-
-	/**
-	 * Echo found screens in the admin footer when debugging is enabled.
-	 *
-	 * @uses bool $this->the_seo_framework_debug
-	 * @global array $current_screen
-	 *
-	 * @since 2.5.2
-	 */
-	public function debug_screens() {
-		if ( $this->the_seo_framework_debug ) {
-			global $current_screen;
-
-			?><div style="float:right;margin:3em;padding:1em;border:1px solid;background:#fff;color:#000;"><?php
-
-				foreach( $current_screen as $screen )
-					echo "<p>$screen</p>";
-
-			?></div><?php
-		}
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Admin_Init
+ *
+ * Initializes the plugin for the wp-admin screens.
+ * Enqueues css and javascript.
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_Admin_Init extends AutoDescription_Init {
+
+	/**
+	 * Page Hook.
+	 *
+	 * @since 2.5.2.2
+	 *
+	 * @var String Holds Admin Page hook.
+	 */
+	protected $page_hook;
+
+	/**
+	 * JavaScript name identifier to be used with enqueuing.
+	 *
+	 * @since 2.5.2.2
+	 *
+	 * @var array JavaScript name identifier.
+	 */
+	public $js_name;
+
+	/**
+	 * CSS script name identifier to be used with enqueuing.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @var array CSS name identifier.
+	 */
+	public $css_name;
+
+	/**
+	 * Constructor, load parent constructor
+	 *
+	 * Initalizes wp-admin functions
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ), 0, 1 );
+
+		$this->js_name = 'autodescription';
+		$this->css_name = 'autodescription';
+
+		//* Admin AJAX for counter options.
+		add_action( 'wp_ajax_the_seo_framework_update_counter', array( $this, 'the_counter_visualized' ) );
+
+	}
+
+	/**
+	 * Enqueues scripts in the admin area on the supported screens.
+	 *
+	 * @since 2.3.3
+	 *
+	 * @param $hook the current page
+	 */
+	public function enqueue_admin_scripts( $hook ) {
+
+		$enqueue_hooks = array(
+			'edit.php',
+			'post.php',
+			'post-new.php',
+			'edit-tags.php',
+			'term.php',
+		);
+
+		/**
+		 * Check hook first.
+		 * @since 2.3.9
+		 */
+		if ( isset( $hook ) && $hook && in_array( $hook, $enqueue_hooks ) ) {
+			/**
+			 * @uses $this->post_type_supports_custom_seo()
+			 * @since 2.3.9
+			 */
+			if ( $this->post_type_supports_custom_seo() )
+				$this->init_admin_scripts();
+
+		}
+
+	}
+
+	/**
+	 * Register and output Admin scripts.
+	 *
+	 * @since 2.6.0
+	 */
+	public function init_admin_scripts() {
+
+		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_css' ), 1 );
+		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_javascript' ), 1 );
+
+	}
+
+	/**
+	 * AutoDescription JavaScript helper file
+	 *
+	 * @since 2.0.2
+	 *
+	 * @usedby add_inpost_seo_box
+	 * @usedby enqueue_javascript
+	 *
+	 * @param string|array|object $hook the current page
+	 */
+	public function enqueue_admin_javascript( $hook ) {
+
+		/**
+		 * Put hook and js name in class vars.
+		 * @since 2.5.2.2
+		 */
+		$this->page_hook = $this->page_hook ? $this->page_hook : $hook;
+
+		//* Register the script.
+		$this->register_admin_javascript();
+
+		wp_enqueue_script( $this->js_name );
+
+		/**
+		 * Localize JavaScript.
+		 * @since 2.5.2.2
+		 */
+		add_action( 'admin_footer', array( $this, 'localize_admin_javascript' ) );
+
+	}
+
+	/**
+	 * Registers Admin CSS.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $registered : Prevents Re-registering of the style.
+	 *
+	 * @access private
+	 */
+	public function register_admin_javascript() {
+
+		static $registered = null;
+
+		if ( isset( $registered ) )
+			return;
+
+		$suffix = $this->script_debug ? '' : '.min';
+
+		wp_register_script( $this->js_name, THE_SEO_FRAMEWORK_DIR_URL . "lib/js/autodescription{$suffix}.js", array( 'jquery' ), THE_SEO_FRAMEWORK_VERSION, true );
+
+		$registered = true;
+
+	}
+
+	/**
+	 * Localizes admin javascript.
+	 *
+	 * @since 2.5.2.2
+	 */
+	public function localize_admin_javascript() {
+
+		static $localized = null;
+
+		if ( isset( $localized ) )
+			return;
+
+		$strings = $this->get_javascript_l10n();
+
+		wp_localize_script( $this->js_name, 'autodescriptionL10n', $strings );
+
+		$localized = true;
+
+	}
+
+	/**
+	 * Generate Javascript Localization.
+	 *
+	 * @since 2.6.0
+	 * @staticvar array $strings : The l10n strings.
+	 *
+	 * @return array $strings The l10n strings.
+	 */
+	protected function get_javascript_l10n() {
+
+		static $strings = null;
+
+		if ( isset( $strings ) )
+			return $strings;
+
+		$blog_name = $this->get_blogname();
+		$description = $this->get_blogdescription();
+		$title = '';
+		$additions = '';
+
+		$tagline = (bool) $this->get_option( 'homepage_tagline' );
+		$home_tagline = $this->get_option( 'homepage_title_tagline' );
+		$title_location = $this->get_option( 'title_location' );
+		$title_add_additions = $this->add_title_additions();
+		$counter_type = $this->get_option( 'counter_type' );
+
+		//* Enunciate the lenghts of Titles and Descriptions.
+		$good = __( 'Good', 'autodescription' );
+		$okay = __( 'Okay', 'autodescription' );
+		$bad = __( 'Bad', 'autodescription' );
+		$unknown = __( 'Unknown', 'autodescription' );
+
+		$separator = $this->get_separator( 'title', true );
+
+		$rtl = (bool) is_rtl();
+		$ishome = false;
+
+		/**
+		 * We're gaining UX in exchange for resource usage.
+		 *
+		 * Any way to cache this?
+		 *
+		 * @since 2.2.4
+		 */
+		if ( isset( $this->page_hook ) && $this->page_hook ) {
+			// We're somewhere within default WordPress pages.
+			$post_id = $this->get_the_real_ID();
+
+			if ( $this->is_static_frontpage( $post_id ) ) {
+				$title = $blog_name;
+				$title_location = $this->get_option( 'home_title_location' );
+				$ishome = true;
+
+				if ( $tagline ) {
+					$additions = $home_tagline ? $home_tagline : $description;
+				} else {
+					$additions = '';
+				}
+			} else if ( $post_id ) {
+				//* We're on post.php
+				$generated_doctitle_args = array(
+					'term_id' => $post_id,
+					'notagline' => true,
+					'get_custom_field' => false,
+				);
+
+				$title = $this->title( '', '', '', $generated_doctitle_args );
+
+				if ( $title_add_additions ) {
+					$additions = $blog_name;
+					$tagline = true;
+				} else {
+					$additions = '';
+					$tagline = false;
+				}
+			} else if ( $this->is_archive() ) {
+				//* Category or Tag.
+				global $current_screen;
+
+				if ( isset( $current_screen->taxonomy ) ) {
+
+					$term_id = $this->get_admin_term_id();
+
+					if ( $term_id ) {
+						$generated_doctitle_args = array(
+							'term_id' => $term_id,
+							'taxonomy' => $current_screen->taxonomy,
+							'notagline' => true,
+							'get_custom_field' => false
+						);
+
+						$title = $this->title( '', '', '', $generated_doctitle_args );
+						$additions = $title_add_additions ? $blog_name : '';
+					}
+				}
+
+			} else {
+				//* We're in a special place.
+				// Can't fetch title.
+				$title = '';
+				$additions = $title_add_additions ? $blog_name : '';
+			}
+
+		} else {
+			// We're on our SEO settings pages.
+			if ( $this->has_page_on_front() ) {
+				// Home is a page.
+				$inpost_title = $this->get_custom_field( '_genesis_title', get_option( 'page_on_front' ) );
+			} else {
+				// Home is a blog.
+				$inpost_title = '';
+			}
+			$title = $inpost_title ? $inpost_title : $blog_name;
+			$additions = $home_tagline ? $home_tagline : $description;
+		}
+
+		return $strings = array(
+			'saveAlert'		=> __( 'The changes you made will be lost if you navigate away from this page.', 'autodescription' ),
+			'confirmReset'	=> __( 'Are you sure you want to reset all SEO settings to their defaults?', 'autodescription' ),
+			'siteTitle' 	=> $title,
+			'titleAdditions' => $additions,
+			'blogDescription' => $description,
+			'titleTagline' 	=> $tagline,
+			'titleSeparator' => $separator,
+			'titleLocation' => $title_location,
+			'isRTL' => $rtl,
+			'isHome' => $ishome,
+			'counterType' => $counter_type,
+			'good' => $good,
+			'okay' => $okay,
+			'bad' => $bad,
+			'unknown' => $unknown,
+		);
+	}
+
+	/**
+	 * CSS for the AutoDescription Bar
+	 *
+	 * @since 2.1.9
+	 *
+	 * @param $hook the current page
+	 *
+	 * @todo get_network_option
+	 * @priority low 3.0.0
+	 */
+	public function enqueue_admin_css( $hook ) {
+
+		/**
+		 * Put hook and js name in class vars.
+		 * @since 2.5.2.2
+		 */
+		$this->page_hook = $this->page_hook ? $this->page_hook : $hook;
+
+		//* Register the script.
+		$this->register_admin_css();
+
+		wp_enqueue_style( $this->css_name );
+
+	}
+
+	/**
+	 * Registers Admin CSS.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $registered : Prevents Re-registering of the style.
+	 *
+	 * @access private
+	 */
+	protected function register_admin_css() {
+
+		static $registered = null;
+
+		if ( isset( $registered ) )
+			return;
+
+		$rtl = '';
+
+		if ( is_rtl() )
+			$rtl = '-rtl';
+
+		$suffix = $this->script_debug ? '' : '.min';
+
+		wp_register_style( $this->css_name, THE_SEO_FRAMEWORK_DIR_URL . "lib/css/autodescription{$rtl}{$suffix}.css", array(), THE_SEO_FRAMEWORK_VERSION, 'all' );
+
+		$registered = true;
+
+	}
+
+	/**
+	 * Checks the screen hook.
+	 *
+	 * @since 2.2.2
+	 * @global string $page_hook the current page hook.
+	 *
+	 * @return bool true if screen match.
+	 */
+	public function is_menu_page( $pagehook = '' ) {
+		global $page_hook;
+
+		if ( isset( $page_hook ) && $page_hook === $pagehook )
+			return true;
+
+		//* May be too early for $page_hook
+		if ( isset( $_REQUEST['page'] ) && $_REQUEST['page'] === $pagehook )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Redirect the user to an admin page, and add query args to the URL string
+	 * for alerts, etc.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $page			Menu slug.
+	 * @param array  $query_args 	Optional. Associative array of query string arguments
+	 * 								(key => value). Default is an empty array.
+	 *
+	 * @credits StudioPress for some code.
+	 *
+	 * @return null Return early if first argument is false.
+	 */
+	public function admin_redirect( $page, array $query_args = array() ) {
+
+		if ( empty( $page ) )
+			return;
+
+		$url = html_entity_decode( menu_page_url( $page, 0 ) );
+
+		foreach ( $query_args as $key => $value ) {
+			if ( empty( $key ) || empty( $value ) )
+				unset( $query_args[$key] );
+		}
+
+		$url = add_query_arg( $query_args, $url );
+
+		wp_redirect( esc_url_raw( $url ) );
+		exit;
+	}
+
+
+	/**
+	 * Handles counter option update on AJAX request.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 */
+	public function the_counter_visualized() {
+
+		if ( $this->is_admin() && defined( 'DOING_AJAX' ) && DOING_AJAX ) {
+			//* If current user isn't allowed to edit posts, don't do anything.
+			if ( ! current_user_can( 'publish_posts' ) )
+				exit;
+
+			$options = $this->get_all_options();
+
+			/**
+			 * Count up, reset to 0 if needed. We have 4 options: 0, 1, 2, 3
+			 * We're not accepting any $_POST values. Keeping it clean.
+			 * Yet we should for consistency. @TODO
+			 * @priority high 2.6.2
+			 */
+			$options['counter_type'] = $options['counter_type'] + 1;
+			if ( $options['counter_type'] > 3 )
+				$options['counter_type'] = 0;
+
+			update_option( $this->settings_field, $options );
+
+			//* Kill PHP.
+			exit;
+		}
+
+	}
+
+}
Index: inc/classes/adminpages.class.php
===================================================================
--- inc/classes/adminpages.class.php	(revision 1413572)
+++ inc/classes/adminpages.class.php	(working copy)
@@ -1,879 +1,889 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Siteoptions
- *
- * Renders admin pages content for AutoDescription.
- *
- * @since 2.2.2
- */
-class AutoDescription_Adminpages extends AutoDescription_Inpost {
-
-	/**
-	 * Page Defaults.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var array Holds Page output defaults.
-	 */
-	public $page_defaults = array();
-
-	/**
-	 * Name of the page hook when the menu is registered.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var string Page hook
-	 */
-	public $pagehook;
-
-	/**
-	 * Name of the network page hook when the menu is registered.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var string Page hook
-	 */
-	public $network_pagehook;
-
-	/**
-	 * Constructor, load parent constructor
-	 *
-	 * Cache various variables
-	 *
-	 * @applies filters the_seo_framework_load_options : Allows the options page to be removed
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$load_options = (bool) apply_filters( 'the_seo_framework_load_options', true );
-
-		if ( $load_options ) {
-
-			add_action( 'admin_init', array( $this, 'enqueue_page_defaults' ), 1 );
-
-			// Add menu links and register $this->pagehook
-			add_action( 'admin_menu', array( $this, 'add_menu_link' ) );
-
-			/**
-			 * Add specific Multisite options
-			 * @TODO
-			 */
-			// if ( is_multisite() ) add_action( 'network_admin_menu', array( $this, 'add_network_menu_link' ) );
-
-			//* Load the page content
-			add_action( 'admin_init', array( $this, 'settings_init' ) );
-
-			// Set up notices
-			add_action( 'admin_notices', array( $this, 'notices' ) );
-
-			// Load nessecary assets
-			add_action( 'admin_init', array( $this, 'load_assets' ) );
-
-		}
-	}
-
-	/**
-	 * Enqueue page defaults early.
-	 *
-	 * Applies filter `the_seo_framework_admin_page_defaults`.
-	 * This filter adds i18n support for buttons and notices.
-	 *
-	 * @since 2.3.1
-	 * @return void
-	 */
-	public function enqueue_page_defaults() {
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$this->page_defaults = (array) apply_filters(
-			'the_seo_framework_admin_page_defaults',
-			array(
-				'save_button_text'  => __( 'Save Settings', 'autodescription' ),
-				'reset_button_text' => __( 'Reset Settings', 'autodescription' ),
-				'saved_notice_text' => __( 'Settings saved.', 'autodescription' ),
-				'reset_notice_text' => __( 'Settings reset.', 'autodescription' ),
-				'error_notice_text' => __( 'Error saving settings.', 'autodescription' ),
-			)
-		);
-
-	}
-
-	/**
-	 * Adds menu links under "settings" in the wp-admin dashboard
-	 *
-	 * Applies filter `the_seo_framework_settings_capability`.
-	 * This filter changes the minimum role for viewing and editing the plugin's settings.
-	 *
-	 * @since 2.2.2
-	 * @return void
-	 */
-	public function add_menu_link() {
-
-		$menu = array(
-			'pagetitle'		=> __( 'SEO Settings', 'autodescription' ),
-			'menutitle'		=> __( 'SEO', 'autodescription' ),
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			'capability'	=> (string) apply_filters( 'the_seo_framework_settings_capability', 'manage_options' ),
-
-			'menu_slug'		=> 'autodescription-settings',
-			'callback'		=> array( $this, 'admin' ),
-			'icon'			=> 'dashicons-search',
-			'position'		=> '90.9001',
-		);
-
-		$this->pagehook = add_menu_page(
-			$menu['pagetitle'],
-			$menu['menutitle'],
-			$menu['capability'],
-			$menu['menu_slug'],
-			$menu['callback'],
-			$menu['icon'],
-			$menu['position']
-		);
-
-		// Enqueue styles
-		// Doesn't pass the $hook argument
-		add_action( 'admin_print_styles-' . $this->pagehook, array( $this, 'enqueue_admin_css' ), 11 );
-
-		// Enqueue scripts
-		// Doesn't pass the $hook argument
-		add_action( 'admin_print_scripts-' . $this->pagehook, array( $this, 'enqueue_admin_javascript' ), 11 );
-	}
-
-	/**
-	 * Adds menu links under "settings" in the wp-admin dashboard
-	 *
-	 * Applies `autodescription_settings_capability` filters.
-	 * This filter changes the minimum role for viewing and editing the plugin's settings.
-	 *
-	 * @since 2.2.2
-	 * @return void
-	 *
-	 * @TODO Everything.
-	 */
-	public function add_network_menu_link() {
-
-		$menu = array(
-			'pagetitle'		=> __( 'Network SEO Settings', 'autodescription' ),
-			'menutitle'		=> __( 'Network SEO', 'autodescription' ),
-
-			'capability'	=> 'manage_network',
-
-			'menu_slug'		=> 'autodescription-network-settings',
-			'callback'		=> array( $this, 'network_admin' ),
-			'icon'			=> 'dashicons-search',
-			'position'		=> '99.9001',
-		);
-
-		$this->network_pagehook = add_menu_page(
-			$menu['pagetitle'],
-			$menu['menutitle'],
-			$menu['capability'],
-			$menu['menu_slug'],
-			$menu['callback'],
-			$menu['icon'],
-			$menu['position']
-		);
-
-		// Enqueue styles
-		add_action( 'admin_print_styles-' . $this->network_pagehook, array( $this, 'enqueue_admin_css' ), 11 );
-
-		// Enqueue scripts
-		add_action( 'admin_print_scripts-' . $this->network_pagehook, array( $this, 'enqueue_admin_javascript' ), 11 );
-	}
-
-	/**
-	 * Initialize the settings page.
-	 *
-	 * @since 2.2.2
-	 */
-	public function settings_init() {
-
-		add_action( $this->pagehook . '_settings_page_boxes', array( $this, 'do_metaboxes' ) );
-		add_action( 'load-' . $this->pagehook, array( $this, 'metaboxes' ) );
-
-	}
-
-	/**
-	 * Echo out the do_metaboxes() and wrapping markup.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @global array $wp_meta_boxes Holds all metaboxes data.
-	 */
-	public function do_metaboxes() {
-		global $wp_meta_boxes;
-
-		?>
-		<div class="metabox-holder columns-2">
-			<div class="postbox-container-1">
-				<?php
-				//* @since 2.3.0 action.
-				do_action( 'the_seo_framework_before_siteadmin_metaboxes', $this->pagehook );
-
-				do_meta_boxes( $this->pagehook, 'main', null );
-
-				if ( isset( $wp_meta_boxes[$this->pagehook]['main_extra'] ) )
-					do_meta_boxes( $this->pagehook, 'main_extra', null );
-
-				//* @since 2.3.0 action.
-				do_action( 'the_seo_framework_after_siteadmin_metaboxes', $this->pagehook );
-				?>
-			</div>
-			<div class="postbox-container-2">
-				<?php
-				//* @since 2.3.0 action.
-				do_action( 'the_seo_framework_before_siteadmin_metaboxes_side', $this->pagehook );
-
-				// @TODO fill this in
-
-				//* @since 2.3.0 action.
-				do_action( 'the_seo_framework_after_siteadmin_metaboxes_side', $this->pagehook );
-				?>
-			</div>
-		</div>
-		<?php
-	}
-
-	/**
-	 * Use this as the settings admin callback to create an admin page with sortable metaboxes.
-	 * Create a 'settings_boxes' method to add metaboxes.
-	 *
-	 * @since 2.2.2
-	 */
-	public function admin() {
-		?>
-		<div class="wrap autodescription-metaboxes">
-		<form method="post" action="options.php">
-
-			<?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?>
-			<?php wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?>
-			<?php settings_fields( $this->settings_field ); ?>
-
-			<div class="top-wrap">
-				<h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
-				<p class="top-buttons">
-					<?php
-					submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
-					submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
-					?>
-				</p>
-			</div>
-
-			<?php do_action( "{$this->pagehook}_settings_page_boxes", $this->pagehook ); ?>
-
-			<div class="bottom-buttons">
-				<?php
-				submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
-				submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
-				?>
-			</div>
-		</form>
-		</div>
-		<?php // Add postbox listeners ?>
-		<script type="text/javascript">
-			//<![CDATA[
-			jQuery(document).ready( function ($) {
-				// close postboxes that should be closed
-				$('.if-js-closed').removeClass('if-js-closed').addClass('closed');
-				// postboxes setup
-				postboxes.add_postbox_toggles('<?php echo $this->pagehook; ?>');
-			});
-			//]]>
-		</script>
-		<?php
-	}
-
-	/**
-	 * Use this as the settings admin callback to create an admin page with sortable metaboxes.
-	 * Create a 'settings_boxes' method to add metaboxes.
-	 *
-	 * @since 2.2.2
-	 */
-	public function network_admin() {
-		?>
-		<div class="wrap autodescription-metaboxes">
-		<form method="post" action="options.php">
-
-			<?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?>
-			<?php wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?>
-			<?php settings_fields( $this->network_settings_field ); ?>
-
-			<h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
-			<p class="top-buttons">
-				<?php
-				submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
-				submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
-				?>
-			</p>
-
-			<?php do_action( "{$this->network_pagehook}_settings_page_boxes", $this->network_pagehook ); ?>
-
-			<div class="bottom-buttons">
-				<?php
-				submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
-				submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
-				?>
-			</div>
-		</form>
-		</div>
-		<?php // Add postbox listeners ?>
-		<script type="text/javascript">
-			//<![CDATA[
-			jQuery(document).ready( function ($) {
-				// close postboxes that should be closed
-				$('.if-js-closed').removeClass('if-js-closed').addClass('closed');
-				// postboxes setup
-				postboxes.add_postbox_toggles('<?php echo $this->network_pagehook; ?>');
-			});
-			//]]>
-		</script>
-		<?php
-	}
-
-	/**
-	 * Display notices on the save or reset of settings.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return void
-	 */
-	public function notices() {
-
-		if ( ! $this->is_menu_page( $this->pagehook ) )
-			return;
-
-		if ( isset( $_REQUEST['settings-updated'] ) && 'true' === $_REQUEST['settings-updated'] )
-			echo '<div id="message" class="updated"><p><strong>' . $this->page_defaults['saved_notice_text'] . '</strong></p></div>';
-		else if ( isset( $_REQUEST['reset'] ) && 'true' === $_REQUEST['reset'] )
-			echo '<div id="message" class="notice notice-warning"><p><strong>' . $this->page_defaults['reset_notice_text'] . '</strong></p></div>';
-		else if ( isset( $_REQUEST['error'] ) && 'true' === $_REQUEST['error'] )
-			echo '<div id="message" class="error"><p><strong>' . $this->page_defaults['error_notice_text'] . '</strong></p></div>';
-
-	}
-
-	/**
-	 * Register meta boxes on the Site SEO Settings page.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @see $this->title_metabox()		Callback for Title Settings box.
-	 * @see $this->robots_metabox()		Callback for Robots Settings box.
-	 * @see $this->homepage_metabox()	Callback for Home Page Settings box.
-	 * @see $this->social_metabox()		Callback for Social Settings box.
-	 * @see $this->webmaster_metabox()	Callback for Webmaster Settings box.
-	 */
-	public function metaboxes() {
-
-		/**
-		 * Various metabox filters.
-		 * Set any to false if you wish the meta box to be removed.
-		 *
-		 * @since 2.2.4
-		 *
-		 * New filters.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filters.
-		 * @since 2.3.5
-		 */
-		$title 			= (bool) apply_filters( 'the_seo_framework_title_metabox', true );
-		$description 	= (bool) apply_filters( 'the_seo_framework_description_metabox', true );
-		$robots 		= (bool) apply_filters( 'the_seo_framework_robots_metabox', true );
-		$home 			= (bool) apply_filters( 'the_seo_framework_home_metabox', true );
-		$social 		= (bool) apply_filters( 'the_seo_framework_social_metabox', true );
-		$knowledge 		= (bool) apply_filters( 'the_seo_framework_knowledge_metabox', true );
-		$webmaster 		= (bool) apply_filters( 'the_seo_framework_webmaster_metabox', true );
-		$sitemap 		= (bool) apply_filters( 'the_seo_framework_sitemap_metabox', true );
-		$feed 			= (bool) apply_filters( 'the_seo_framework_feed_metabox', true );
-
-		//* Title Meta Box
-		if ( $title )
-			add_meta_box(
-				'autodescription-title-settings',
-				__( 'Title Settings', 'autodescription' ),
-				array( $this, 'title_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Description Meta Box
-		if ( $description )
-			add_meta_box(
-				'autodescription-description-settings',
-				__( 'Description Meta Settings', 'autodescription' ),
-				array( $this, 'description_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Home Page Meta Box
-		if ( $home )
-			add_meta_box(
-				'autodescription-homepage-settings',
-				__( 'Home Page Settings', 'autodescription' ),
-				array( $this, 'homepage_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Social Meta Box
-		if ( $social )
-			add_meta_box(
-				'autodescription-social-settings',
-				__( 'Social Meta Settings', 'autodescription' ),
-				array( $this, 'social_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Knowledge Graph Meta Box
-		if ( $knowledge )
-			add_meta_box(
-				'autodescription-knowledgegraph-settings',
-				__( 'Knowledge Graph Settings', 'autodescription' ),
-				array( $this, 'knowledge_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Robots Meta Box
-		if ( $robots )
-			add_meta_box(
-				'autodescription-robots-settings',
-				__( 'Robots Meta Settings', 'autodescription' ),
-				array( $this, 'robots_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Webmaster Meta Box
-		if ( $webmaster )
-			add_meta_box(
-				'autodescription-webmaster-settings',
-				__( 'Webmaster Meta Settings', 'autodescription' ),
-				array( $this, 'webmaster_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Sitemaps Meta Box
-		if ( $sitemap )
-			add_meta_box(
-				'autodescription-sitemap-settings',
-				__( 'Sitemaps Settings', 'autodescription' ),
-				array( $this, 'sitemaps_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-		//* Feed Meta Box
-		if ( $feed )
-			add_meta_box(
-				'autodescription-feed-settings',
-				__( 'Feed Settings', 'autodescription' ),
-				array( $this, 'feed_metabox' ),
-				$this->pagehook,
-				'main'
-			);
-
-	}
-
-	/**
-	 * Return option from the options table and cache result.
-	 *
-	 * Applies `the_seo_framework_get_options` filters.
-	 * This filter retrieves the (previous) values from Genesis if exists.
-	 *
-	 * Values pulled from the database are cached on each request, so a second request for the same value won't cause a
-	 * second DB interaction.
-	 * @staticvar array $settings_cache
-	 * @staticvar array $options_cache
-	 *
-	 * @since 2.0.0
-	 *
-	 * @param string  $key        Option name.
-	 * @param string  $setting    Optional. Settings field name. Eventually defaults to null if not passed as an argument.
-	 * @param boolean $use_cache  Optional. Whether to use the cache value or not. Default is true.
-	 *
-	 * @return mixed The value of this $key in the database.
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	public function the_seo_framework_get_option( $key, $setting = null, $use_cache = true ) {
-
-		//* If we need to bypass the cache
-		if ( ! $use_cache ) {
-			$options = get_option( $setting );
-
-			if ( ! is_array( $options ) || ! array_key_exists( $key, $options ) )
-				return '';
-
-			return is_array( $options[$key] ) ? stripslashes_deep( $options[$key] ) : stripslashes( wp_kses_decode_entities( $options[$key] ) );
-		}
-
-		//* Setup caches
-		static $settings_cache = array();
-		static $options_cache  = array();
-
-		//* Check options cache
-		if ( isset( $options_cache[$setting][$key] ) )
-			//* Option has been cached
-			return $options_cache[$setting][$key];
-
-		//* Check settings cache
-		if ( isset( $settings_cache[$setting] ) ) {
-			//* Setting has been cached
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$options = apply_filters( 'the_seo_framework_get_options', $settings_cache[$setting], $setting );
-		} else {
-			//* Set value and cache setting
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$options = $settings_cache[$setting] = apply_filters( 'the_seo_framework_get_options', get_option( $setting ), $setting );
-		}
-
-		//* Check for non-existent option
-		if ( ! is_array( $options ) || ! array_key_exists( $key, (array) $options ) ) {
-			//* Cache non-existent option
-			$options_cache[$setting][$key] = '';
-		} else {
-			//* Option has not been previously been cached, so cache now
-			$options_cache[$setting][$key] = is_array( $options[$key] ) ? stripslashes_deep( $options[$key] ) : stripslashes( wp_kses_decode_entities( $options[$key] ) );
-		}
-
-		return $options_cache[$setting][$key];
-	}
-
-	/**
-	 * Helper function that constructs name attributes for use in form fields.
-	 *
-	 * Other page implementation classes may wish to construct and use a
-	 * get_field_id() method, if the naming format needs to be different.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $name Field name base
-	 * @return string Full field name
-	 */
-	public function get_field_name( $name ) {
-		return sprintf( '%s[%s]', $this->settings_field, $name );
-	}
-
-	/**
-	 * Echo constructed name attributes in form fields.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses $this->get_field_name() Construct name attributes for use in form fields.
-	 *
-	 * @param string $name Field name base
-	 */
-	public function field_name( $name ) {
-		echo $this->get_field_name( $name );
-	}
-
-	/**
-	 * Helper function that constructs id attributes for use in form fields.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $id Field id base
-	 * @return string Full field id
-	 */
-	public function get_field_id( $id ) {
-		return sprintf( '%s[%s]', $this->settings_field, $id );
-	}
-
-	/**
-	 * Echo constructed id attributes in form fields.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses $this->get_field_id() Constructs id attributes for use in form fields.
-	 *
-	 * @param string $id Field id base
-	 * @param boolean $echo echo or return
-	 * @return string Full field id
-	 */
-	public function field_id( $id, $echo = true ) {
-		if ( $echo ) {
-			echo $this->get_field_id( $id );
-		} else {
-			return $this->get_field_id( $id );
-		}
-	}
-
-	/**
-	 * Helper function that returns a setting value from this form's settings
-	 * field for use in form fields.
-	 *
-	 * Fetches blog option.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $key Field key
-	 * @return string Field value
-	 */
-	public function get_field_value( $key ) {
-		$option = $this->get_option( $key, $this->settings_field );
-
-		return $option;
-	}
-
-	/**
-	 * Helper function that returns a setting value from this form's settings
-	 * field for use in form fields.
-	 *
-	 * Fetches network option.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $key Field key
-	 * @return string Field value
-	 */
-	public function get_field_value_network( $key ) {
-		$option = $this->get_site_option( $key, $this->settings_field );
-
-		return $option;
-	}
-
-	/**
-	 * Echo a setting value from this form's settings field for use in form fields.
-	 *
-	 * @uses $this->get_field_value() Constructs value attributes for use in form fields.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $key Field key
-	 */
-	public function field_value( $key ) {
-		echo $this->get_field_value( $key );
-	}
-
-	/**
-	 * Load script and stylesheet assets via scripts() methods.
-	 *
-	 * @since 2.2.2
-	 */
-	public function load_assets() {
-		//* Hook scripts method
-		add_action( "load-{$this->pagehook}", array( $this, 'metabox_scripts' ) );
-	}
-
-	/**
-	 * Include the necessary sortable metabox scripts.
-	 *
-	 * @since 2.2.2
-	 */
-	public function metabox_scripts() {
-		wp_enqueue_script( 'common' );
-		wp_enqueue_script( 'wp-lists' );
-		wp_enqueue_script( 'postbox' );
-	}
-
-	/**
-	 * Returns the HTML class wrap for default Checkbox options.
-	 *
-	 * This function does nothing special. But is merely a simple wrapper.
-	 * Just like code_wrap.
-	 *
-	 * @param string $key required The option name which returns boolean.
-	 * @param string $setting optional The settings field
-	 * @param bool $wrap optional output class="" or just the class name.
-	 * @param bool $echo optional echo or return the output.
-	 *
-	 * @since 2.2.5
-	 */
-	public function is_default_checked( $key, $setting = '', $wrap = true, $echo = true ) {
-
-		$class = '';
-
-		$default = $this->get_default_settings( $key, $setting );
-
-		if ( ! is_string( $default ) && $default != -1 && $default )
-			$class = 'seoframework-default-selected';
-
-		if ( $echo ) {
-			if ( $wrap ) {
-				echo sprintf( 'class="%s"', $class );
-			} else {
-				echo $class;
-			}
-		} else {
-			if ( $wrap )
-				return sprintf( 'class="%s"', $class );
-
-			return $class;
-		}
-
-		return '';
-	}
-
-	/**
-	 * Returns the HTML class wrap for warning Checkbox options.
-	 *
-	 * This function does nothing special. But is merely a simple wrapper.
-	 * Just like code_wrap.
-	 *
-	 * @param string $key required The option name which returns boolean.
-	 * @param string $setting optional The settings field
-	 * @param bool $wrap optional output class="" or just the class name.
-	 * @param bool $echo optional echo or return the output.
-	 *
-	 * @since 2.3.4
-	 */
-	public function is_warning_checked( $key, $setting = '', $wrap = true, $echo = true ) {
-
-		$class = '';
-
-		$warned = $this->get_warned_settings( $key, $setting );
-
-		if ( $warned )
-			$class = 'seoframework-warning-selected';
-
-		if ( $echo ) {
-			if ( $wrap ) {
-				echo sprintf( 'class="%s"', $class );
-			} else {
-				echo $class;
-			}
-		} else {
-			if ( $wrap )
-				return sprintf( 'class="%s"', $class );
-
-			return $class;
-		}
-
-		return '';
-	}
-
-	/**
-	 * Returns the HTML class wrap for warning/default Checkbox options.
-	 *
-	 * This function does nothing special. But is merely a simple wrapper.
-	 * Just like code_wrap.
-	 *
-	 * @param string $key required The option name which returns boolean.
-	 * @param string $setting optional The settings field
-	 * @param bool $wrap optional output class="" or just the class name.
-	 * @param bool $echo optional echo or return the output.
-	 *
-	 * @since 2.3.4
-	 */
-	public function is_conditional_checked( $key, $setting = '', $wrap = true, $echo = true ) {
-
-		$class = '';
-
-		$default = $this->is_default_checked( $key, $setting, false, false );
-		$warned = $this->is_warning_checked( $key, $setting, false, false );
-
-		if ( ! empty( $default ) && ! empty( $warned ) ) {
-			$class = $default . ' ' . $warned;
-		} else if ( ! empty( $default ) ) {
-			$class = $default;
-		} else if ( ! empty( $warned ) ) {
-			$class = $warned;
-		}
-
-		if ( $echo ) {
-			if ( $wrap ) {
-				echo sprintf( 'class="%s"', $class );
-			} else {
-				echo $class;
-			}
-		} else {
-			if ( $wrap ) {
-				return sprintf( 'class="%s"', $class );
-			} else {
-				return $class;
-			}
-		}
-	}
-
-	/**
-	 * Returns the HTML class wrap for default radio options.
-	 *
-	 * @param string $key required The option name which returns boolean.
-	 * @param string $value required The option value which returns boolean.
-	 * @param string $setting optional The settings field
-	 * @param bool $wrap optional output class="" or just the class name.
-	 * @param bool $echo optional echo or return the output.
-	 *
-	 * @since 2.2.5
-	 *
-	 * @return string|null the default selected class.
-	 */
-	public function is_default_radio( $key, $value, $setting = '', $wrap = true, $echo = true ) {
-
-		$class = '';
-
-		$default = $this->get_default_settings( $key, $setting );
-
-		if ( $default && $default === $value )
-			$class = 'seoframework-default-selected';
-
-		if ( $echo ) {
-			if ( $wrap ) {
-				echo sprintf( 'class="%s"', $class );
-			} else {
-				echo $class;
-			}
-		} else {
-			if ( $wrap )
-				return sprintf( 'class="%s"', $class );
-
-			return $class;
-		}
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Siteoptions
+ *
+ * Renders admin pages content for AutoDescription.
+ *
+ * @since 2.2.2
+ */
+class AutoDescription_Adminpages extends AutoDescription_Inpost {
+
+	/**
+	 * Page Defaults.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @var array Holds Page output defaults.
+	 */
+	public $page_defaults = array();
+
+	/**
+	 * Name of the page hook when the menu is registered.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @var string Page hook
+	 */
+	public $pagehook;
+
+	/**
+	 * Name of the network page hook when the menu is registered.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @var string Page hook
+	 */
+	public $network_pagehook;
+
+	/**
+	 * Load the options.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @var bool Load options.
+	 */
+	public $load_options;
+
+	/**
+	 * Constructor, load parent constructor and set up variables.
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		/**
+		* Applies filters the_seo_framework_load_options : Boolean Allows the options page to be removed
+		* @since 2.2.2
+		*/
+		$this->load_options = (bool) apply_filters( 'the_seo_framework_load_options', true );
+
+		if ( $this->load_options ) {
+			add_action( 'admin_init', array( $this, 'enqueue_page_defaults' ), 1 );
+
+			// Add menu links and register $this->pagehook
+			add_action( 'admin_menu', array( $this, 'add_menu_link' ) );
+
+			/**
+			 * Add specific Multisite options
+			 * @TODO
+			 * @priority low 3.0.0
+			 */
+			// if ( is_multisite() ) add_action( 'network_admin_menu', array( $this, 'add_network_menu_link' ) );
+
+			//* Load the page content
+			add_action( 'admin_init', array( $this, 'settings_init' ) );
+
+			// Set up notices
+			add_action( 'admin_notices', array( $this, 'notices' ) );
+
+			// Load nessecary assets
+			add_action( 'admin_init', array( $this, 'load_assets' ) );
+		}
+
+	}
+
+	/**
+	 * Enqueue page defaults early.
+	 *
+	 * Applies filter 'the_seo_framework_admin_page_defaults' : Array
+	 * This filter adds i18n support for buttons and notices.
+	 *
+	 * @since 2.3.1
+	 */
+	public function enqueue_page_defaults() {
+
+		$this->page_defaults = (array) apply_filters(
+			'the_seo_framework_admin_page_defaults',
+			array(
+				'save_button_text'		=> __( 'Save Settings', 'autodescription' ),
+				'reset_button_text'		=> __( 'Reset Settings', 'autodescription' ),
+				'saved_notice_text'		=> __( 'Settings are saved.', 'autodescription' ),
+				'reset_notice_text'		=> __( 'Settings are reset.', 'autodescription' ),
+				'error_notice_text'		=> __( 'Error saving settings.', 'autodescription' ),
+				'plugin_update_text'	=> __( 'New SEO Settings have been updated.', 'autodescription' ),
+			)
+		);
+
+	}
+
+	/**
+	 * Adds menu links under "settings" in the wp-admin dashboard
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return void
+	 */
+	public function add_menu_link() {
+
+		$menu = array(
+			'pagetitle'		=> __( 'SEO Settings', 'autodescription' ),
+			'menutitle'		=> __( 'SEO', 'autodescription' ),
+			'capability'	=> $this->settings_capability(),
+			'menu_slug'		=> 'autodescription-settings',
+			'callback'		=> array( $this, 'admin' ),
+			'icon'			=> 'dashicons-search',
+			'position'		=> '90.9001',
+		);
+
+		$this->pagehook = add_menu_page(
+			$menu['pagetitle'],
+			$menu['menutitle'],
+			$menu['capability'],
+			$menu['menu_slug'],
+			$menu['callback'],
+			$menu['icon'],
+			$menu['position']
+		);
+
+		//* Enqueue styles
+		add_action( 'admin_print_styles-' . $this->pagehook, array( $this, 'enqueue_admin_css' ), 11 );
+
+		//* Enqueue scripts
+		add_action( 'admin_print_scripts-' . $this->pagehook, array( $this, 'enqueue_admin_javascript' ), 11 );
+
+	}
+
+	/**
+	 * Adds menu links under "settings" in the wp-admin dashboard
+	 *
+	 * Applies `autodescription_settings_capability` filters.
+	 * This filter changes the minimum role for viewing and editing the plugin's settings.
+	 *
+	 * @since 2.2.2
+	 * @return void
+	 *
+	 * @TODO Everything.
+	 * @priority low 3.0.0
+	 */
+	public function add_network_menu_link() {
+
+		$menu = array(
+			'pagetitle'		=> __( 'Network SEO Settings', 'autodescription' ),
+			'menutitle'		=> __( 'Network SEO', 'autodescription' ),
+
+			'capability'	=> 'manage_network',
+
+			'menu_slug'		=> 'autodescription-network-settings',
+			'callback'		=> array( $this, 'network_admin' ),
+			'icon'			=> 'dashicons-search',
+			'position'		=> '99.9001',
+		);
+
+		$this->network_pagehook = add_menu_page(
+			$menu['pagetitle'],
+			$menu['menutitle'],
+			$menu['capability'],
+			$menu['menu_slug'],
+			$menu['callback'],
+			$menu['icon'],
+			$menu['position']
+		);
+
+		// Enqueue styles
+		add_action( 'admin_print_styles-' . $this->network_pagehook, array( $this, 'enqueue_admin_css' ), 11 );
+
+		// Enqueue scripts
+		add_action( 'admin_print_scripts-' . $this->network_pagehook, array( $this, 'enqueue_admin_javascript' ), 11 );
+
+	}
+
+	/**
+	 * Initialize the settings page.
+	 *
+	 * @since 2.2.2
+	 */
+	public function settings_init() {
+
+		add_action( $this->pagehook . '_settings_page_boxes', array( $this, 'do_metaboxes' ) );
+		add_action( 'load-' . $this->pagehook, array( $this, 'metaboxes' ) );
+
+	}
+
+	/**
+	 * Echo out the do_metaboxes() and wrapping markup.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @global array $wp_meta_boxes Holds all metaboxes data.
+	 */
+	public function do_metaboxes() {
+		global $wp_meta_boxes;
+
+		?>
+		<div class="metabox-holder columns-2">
+			<div class="postbox-container-1">
+				<?php
+				do_action( 'the_seo_framework_before_siteadmin_metaboxes', $this->pagehook );
+
+				do_meta_boxes( $this->pagehook, 'main', null );
+
+				if ( isset( $wp_meta_boxes[$this->pagehook]['main_extra'] ) )
+					do_meta_boxes( $this->pagehook, 'main_extra', null );
+
+				do_action( 'the_seo_framework_after_siteadmin_metaboxes', $this->pagehook );
+				?>
+			</div>
+			<div class="postbox-container-2">
+				<?php
+				do_action( 'the_seo_framework_before_siteadmin_metaboxes_side', $this->pagehook );
+
+				/**
+				 * @TODO fill this in
+				 * @priority low 2.9.0
+				 */
+
+				do_action( 'the_seo_framework_after_siteadmin_metaboxes_side', $this->pagehook );
+				?>
+			</div>
+		</div>
+		<?php
+	}
+
+	/**
+	 * Register meta boxes on the Site SEO Settings page.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @see $this->title_metabox()			Callback for Title Settings box.
+	 * @see $this->description_metabox()	Callback for Description Settings box.
+	 * @see $this->robots_metabox()			Callback for Robots Settings box.
+	 * @see $this->homepage_metabox()		Callback for Home Page Settings box.
+	 * @see $this->social_metabox()			Callback for Social Settings box.
+	 * @see $this->knowledge_metabox()		Callback for Knowledge Graph Settings box.
+	 * @see $this->schema_metabox()			Callback for Schema Settings box.
+	 * @see $this->webmaster_metabox()		Callback for Webmaster Settings box.
+	 * @see $this->sitemaps_metabox()		Callback for Sitemap Settings box.
+	 * @see $this->feed_metabox()			Callback for Feed Settings box.
+	 */
+	public function metaboxes() {
+
+		/**
+		 * Various metabox filters.
+		 * Set any to false if you wish the meta box to be removed.
+		 *
+		 * @since 2.2.4
+		 */
+		$title 			= (bool) apply_filters( 'the_seo_framework_title_metabox', true );
+		$description 	= (bool) apply_filters( 'the_seo_framework_description_metabox', true );
+		$robots 		= (bool) apply_filters( 'the_seo_framework_robots_metabox', true );
+		$home 			= (bool) apply_filters( 'the_seo_framework_home_metabox', true );
+		$social 		= (bool) apply_filters( 'the_seo_framework_social_metabox', true );
+		$knowledge 		= (bool) apply_filters( 'the_seo_framework_knowledge_metabox', true );
+		$schema 		= (bool) apply_filters( 'the_seo_framework_schema_metabox', true );
+		$webmaster 		= (bool) apply_filters( 'the_seo_framework_webmaster_metabox', true );
+		$sitemap 		= (bool) apply_filters( 'the_seo_framework_sitemap_metabox', true );
+		$feed 			= (bool) apply_filters( 'the_seo_framework_feed_metabox', true );
+
+		//* Title Meta Box
+		if ( $title )
+			add_meta_box(
+				'autodescription-title-settings',
+				__( 'Title Settings', 'autodescription' ),
+				array( $this, 'title_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Description Meta Box
+		if ( $description )
+			add_meta_box(
+				'autodescription-description-settings',
+				__( 'Description Meta Settings', 'autodescription' ),
+				array( $this, 'description_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Home Page Meta Box
+		if ( $home )
+			add_meta_box(
+				'autodescription-homepage-settings',
+				__( 'Home Page Settings', 'autodescription' ),
+				array( $this, 'homepage_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Social Meta Box
+		if ( $social )
+			add_meta_box(
+				'autodescription-social-settings',
+				__( 'Social Meta Settings', 'autodescription' ),
+				array( $this, 'social_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Knowledge Graph Meta Box
+		if ( $knowledge )
+			add_meta_box(
+				'autodescription-knowledgegraph-settings',
+				__( 'Knowledge Graph Settings', 'autodescription' ),
+				array( $this, 'knowledge_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Title Meta Box
+		if ( $schema )
+			add_meta_box(
+				'autodescription-schema-settings',
+				__( 'Schema Settings', 'autodescription' ),
+				array( $this, 'schema_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Robots Meta Box
+		if ( $robots )
+			add_meta_box(
+				'autodescription-robots-settings',
+				__( 'Robots Meta Settings', 'autodescription' ),
+				array( $this, 'robots_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Webmaster Meta Box
+		if ( $webmaster )
+			add_meta_box(
+				'autodescription-webmaster-settings',
+				__( 'Webmaster Meta Settings', 'autodescription' ),
+				array( $this, 'webmaster_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Sitemaps Meta Box
+		if ( $sitemap )
+			add_meta_box(
+				'autodescription-sitemap-settings',
+				__( 'Sitemap Settings', 'autodescription' ),
+				array( $this, 'sitemaps_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+		//* Feed Meta Box
+		if ( $feed )
+			add_meta_box(
+				'autodescription-feed-settings',
+				__( 'Feed Settings', 'autodescription' ),
+				array( $this, 'feed_metabox' ),
+				$this->pagehook,
+				'main'
+			);
+
+	}
+
+	/**
+	 * Use this as the settings admin callback to create an admin page with sortable metaboxes.
+	 * Create a 'settings_boxes' method to add metaboxes.
+	 *
+	 * @since 2.2.2
+	 */
+	public function admin() {
+
+		?>
+		<div class="wrap autodescription-metaboxes">
+		<form method="post" action="options.php">
+
+			<?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?>
+			<?php wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?>
+			<?php settings_fields( $this->settings_field ); ?>
+
+			<div class="top-wrap">
+				<h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
+				<p class="top-buttons">
+					<?php
+					submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
+					submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
+					?>
+				</p>
+			</div>
+
+			<?php do_action( "{$this->pagehook}_settings_page_boxes", $this->pagehook ); ?>
+
+			<div class="bottom-buttons">
+				<?php
+				submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
+				submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
+				?>
+			</div>
+		</form>
+		</div>
+		<?php // Add postbox listeners ?>
+		<script type="text/javascript">
+			//<![CDATA[
+			jQuery(document).ready( function ($) {
+				// close postboxes that should be closed
+				$('.if-js-closed').removeClass('if-js-closed').addClass('closed');
+				// postboxes setup
+				postboxes.add_postbox_toggles('<?php echo $this->pagehook; ?>');
+			});
+			//]]>
+		</script>
+		<?php
+
+	}
+
+	/**
+	 * Use this as the settings admin callback to create an admin page with sortable metaboxes.
+	 * Create a 'settings_boxes' method to add metaboxes.
+	 *
+	 * @since 2.2.2
+	 */
+	public function network_admin() {
+
+		?>
+		<div class="wrap autodescription-metaboxes">
+		<form method="post" action="options.php">
+
+			<?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?>
+			<?php wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?>
+			<?php settings_fields( $this->network_settings_field ); ?>
+
+			<h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
+			<p class="top-buttons">
+				<?php
+				submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
+				submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
+				?>
+			</p>
+
+			<?php do_action( "{$this->network_pagehook}_settings_page_boxes", $this->network_pagehook ); ?>
+
+			<div class="bottom-buttons">
+				<?php
+				submit_button( $this->page_defaults['save_button_text'], 'primary', 'submit', false, array( 'id' => '' ) );
+				submit_button( $this->page_defaults['reset_button_text'], 'secondary autodescription-js-confirm-reset', $this->get_field_name( 'reset' ), false, array( 'id' => '' ) );
+				?>
+			</div>
+		</form>
+		</div>
+		<?php // Add postbox listeners ?>
+		<script type="text/javascript">
+			//<![CDATA[
+			jQuery(document).ready( function ($) {
+				// close postboxes that should be closed
+				$('.if-js-closed').removeClass('if-js-closed').addClass('closed');
+				// postboxes setup
+				postboxes.add_postbox_toggles('<?php echo $this->network_pagehook; ?>');
+			});
+			//]]>
+		</script>
+		<?php
+
+	}
+
+	/**
+	 * Display notices on the save or reset of settings.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return void
+	 */
+	public function notices() {
+
+		if ( false === $this->is_seo_settings_page() )
+			return;
+
+		if ( isset( $_REQUEST['settings-updated'] ) && 'true' === $_REQUEST['settings-updated'] )
+			echo $this->generate_dismissible_notice( $this->page_defaults['saved_notice_text'], 'updated' );
+		else if ( isset( $_REQUEST['reset'] ) && 'true' === $_REQUEST['reset'] )
+			echo $this->generate_dismissible_notice( $this->page_defaults['reset_notice_text'], 'warning' );
+		else if ( isset( $_REQUEST['error'] ) && 'true' === $_REQUEST['error'] )
+			echo $this->generate_dismissible_notice( $this->page_defaults['error_notice_text'], 'error' );
+		else if ( isset( $_REQUEST['seo-updated'] ) && 'true' === $_REQUEST['seo-updated'] )
+			echo $this->generate_dismissible_notice( $this->page_defaults['plugin_update_text'], 'updated' );
+
+	}
+
+	/**
+	 * Helper function that constructs name attributes for use in form fields.
+	 *
+	 * Other page implementation classes may wish to construct and use a
+	 * get_field_id() method, if the naming format needs to be different.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $name Field name base
+	 * @return string Full field name
+	 */
+	public function get_field_name( $name ) {
+		return sprintf( '%s[%s]', $this->settings_field, $name );
+	}
+
+	/**
+	 * Echo constructed name attributes in form fields.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses $this->get_field_name() Construct name attributes for use in form fields.
+	 *
+	 * @param string $name Field name base
+	 */
+	public function field_name( $name ) {
+		echo $this->get_field_name( $name );
+	}
+
+	/**
+	 * Helper function that constructs id attributes for use in form fields.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $id Field id base
+	 * @return string Full field id
+	 */
+	public function get_field_id( $id ) {
+		return sprintf( '%s[%s]', $this->settings_field, $id );
+	}
+
+	/**
+	 * Echo constructed id attributes in form fields.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses $this->get_field_id() Constructs id attributes for use in form fields.
+	 *
+	 * @param string $id Field id base
+	 * @param boolean $echo echo or return
+	 * @return string Full field id
+	 */
+	public function field_id( $id, $echo = true ) {
+
+		if ( $echo ) {
+			echo $this->get_field_id( $id );
+		} else {
+			return $this->get_field_id( $id );
+		}
+	}
+
+	/**
+	 * Helper function that returns a setting value from this form's settings
+	 * field for use in form fields.
+	 *
+	 * Fetches blog option.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $key Field key
+	 * @return string Field value
+	 */
+	public function get_field_value( $key ) {
+		return $this->get_option( $key, $this->settings_field );
+	}
+
+	/**
+	 * Helper function that returns a setting value from this form's settings
+	 * field for use in form fields.
+	 *
+	 * Fetches network option.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $key Field key
+	 * @return string Field value
+	 */
+	public function get_field_value_network( $key ) {
+		return $this->get_site_option( $key, $this->settings_field );
+	}
+
+	/**
+	 * Echo a setting value from this form's settings field for use in form fields.
+	 *
+	 * @uses $this->get_field_value() Constructs value attributes for use in form fields.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $key Field key
+	 */
+	public function field_value( $key ) {
+		echo $this->get_field_value( $key );
+	}
+
+	/**
+	 * Echo or return a chechbox fields wrapper.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $input The input to wrap.
+	 * @param bool $echo Whether to echo or return.
+	 *
+	 * @return Wrapped $input.
+	 */
+	public function wrap_fields( $input = '', $echo = false ) {
+
+		if ( is_array( $input ) )
+			$input = implode( "\r\n", $input );
+
+		if ( $echo )
+			echo '<div class="theseoframework-fields">' . "\r\n" . $input . "\r\n" . '</div>';
+		else
+			return '<div class="theseoframework-fields">' . "\r\n" . $input . "\r\n" . '</div>';
+	}
+
+	/**
+	 * Return a chechbox wrapper.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $field_id The option ID. Must be within the Autodescription settings.
+	 * @param string $label The checkbox description label
+	 * @param string $description Addition description to place beneath the checkbox.
+	 *
+	 * @return HTML checkbox output.
+	 */
+	public function make_checkbox( $field_id = '', $label = '', $description = '' ) {
+
+		$description = $description ? '<p class="description theseoframework-option-spacer">' . $description . '</p>' : '';
+
+		$output = '<span class="toblock">'
+					. '<label for="' . $this->get_field_id( $field_id ) . '">'
+						. '<input '
+							. 'type="checkbox" '
+							. 'name="' . $this->get_field_name( $field_id ) . '" '
+							. 'id="' . $this->get_field_id( $field_id ) . '" '
+							. $this->get_is_conditional_checked( $field_id ) . ' '
+							. 'value="1" '
+							. checked( $this->get_field_value( $field_id ), true, false ) .
+						' />'
+						. $label
+					. '</label>'
+				. '</span>'
+				. $description
+				;
+
+		return $output;
+	}
+
+	/**
+	 * Return a wrapped question mark.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $description The descriptive on-hover title.
+	 * @param string $link The non-escaped link.
+	 * @param bool $echo Whether to echo or return.
+	 *
+	 * @return HTML checkbox output.
+	 */
+	public function make_info( $description = '', $link = '', $echo = true ) {
+
+		if ( $link )
+			$output = '<a href="' . esc_url( $link ) . '" target="_blank" title="' . esc_attr( $description ) . '">[?]</a>';
+		else
+			$output = '<span title="' . esc_attr( $description ) . '">[?]</span>';
+
+		if ( $echo )
+			echo $output;
+		else
+			return $output;
+	}
+
+	/**
+	 * Load script and stylesheet assets via metabox_scripts() methods.
+	 *
+	 * @since 2.2.2
+	 */
+	public function load_assets() {
+		//* Hook scripts method
+		add_action( "load-{$this->pagehook}", array( $this, 'metabox_scripts' ) );
+	}
+
+	/**
+	 * Include the necessary sortable metabox scripts.
+	 *
+	 * @since 2.2.2
+	 */
+	public function metabox_scripts() {
+		wp_enqueue_script( 'common' );
+		wp_enqueue_script( 'wp-lists' );
+		wp_enqueue_script( 'postbox' );
+	}
+
+	/**
+	 * Returns the HTML class wrap for default Checkbox options.
+	 *
+	 * This function does nothing special. But is merely a simple wrapper.
+	 * Just like code_wrap.
+	 *
+	 * @param string $key required The option name which returns boolean.
+	 * @param string $setting optional The settings field
+	 * @param bool $wrap optional output class="" or just the class name.
+	 * @param bool $echo optional echo or return the output.
+	 *
+	 * @since 2.2.5
+	 */
+	public function is_default_checked( $key, $setting = '', $wrap = true, $echo = true ) {
+
+		$class = '';
+
+		$default = $this->get_default_settings( $key, $setting );
+
+		if ( 1 === $default )
+			$class = 'seoframework-default-selected';
+
+		if ( $echo ) {
+			if ( $wrap )
+				printf( 'class="%s"', $class );
+			else
+				echo $class;
+		} else {
+			if ( $wrap )
+				return sprintf( 'class="%s"', $class );
+
+			return $class;
+		}
+	}
+
+	/**
+	 * Returns the HTML class wrap for warning Checkbox options.
+	 *
+	 * This function does nothing special. But is merely a simple wrapper.
+	 * Just like code_wrap.
+	 *
+	 * @param string $key required The option name which returns boolean.
+	 * @param string $setting optional The settings field
+	 * @param bool $wrap optional output class="" or just the class name.
+	 * @param bool $echo optional echo or return the output.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @return string Empty on echo or The class with an optional wrapper.
+	 */
+	public function is_warning_checked( $key, $setting = '', $wrap = true, $echo = true ) {
+
+		$class = '';
+
+		$warned = $this->get_warned_settings( $key, $setting );
+
+		if ( 1 === $warned )
+			$class = 'seoframework-warning-selected';
+
+		if ( $echo ) {
+			if ( $wrap ) {
+				printf( 'class="%s"', $class );
+			} else {
+				echo $class;
+			}
+		} else {
+			if ( $wrap )
+				return sprintf( 'class="%s"', $class );
+
+			return $class;
+		}
+	}
+
+	/**
+	 * Helper function that constructs id attributes for use in form fields.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $key The option name which returns boolean.
+	 */
+	public function get_is_conditional_checked( $key ) {
+		return $this->is_conditional_checked( $key, $this->settings_field, true, false );
+	}
+
+	/**
+	 * Returns the HTML class wrap for warning/default Checkbox options.
+	 *
+	 * This function does nothing special. But is merely a simple wrapper.
+	 * Just like code_wrap.
+	 *
+	 * @param string $key required The option name which returns boolean.
+	 * @param string $setting optional The settings field
+	 * @param bool $wrap optional output class="" or just the class name.
+	 * @param bool $echo optional echo or return the output.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @return string Empty on echo or The class with an optional wrapper.
+	 */
+	public function is_conditional_checked( $key, $setting = '', $wrap = true, $echo = true ) {
+
+		$class = '';
+
+		$default = $this->is_default_checked( $key, $setting, false, false );
+		$warned = $this->is_warning_checked( $key, $setting, false, false );
+
+		if ( '' !== $default && '' !== $warned ) {
+			$class = $default . ' ' . $warned;
+		} else if ( '' !== $default ) {
+			$class = $default;
+		} else if ( '' !== $warned ) {
+			$class = $warned;
+		}
+
+		if ( $echo ) {
+			if ( $wrap ) {
+				printf( 'class="%s"', $class );
+			} else {
+				echo $class;
+			}
+		} else {
+			if ( $wrap ) {
+				return sprintf( 'class="%s"', $class );
+			} else {
+				return $class;
+			}
+		}
+	}
+
+	/**
+	 * Returns the HTML class wrap for default radio options.
+	 *
+	 * @param string $key required The option name which returns boolean.
+	 * @param string $value required The option value which returns boolean.
+	 * @param string $setting optional The settings field
+	 * @param bool $wrap optional output class="" or just the class name.
+	 * @param bool $echo optional echo or return the output.
+	 *
+	 * @since 2.2.5
+	 *
+	 * @TODO use this
+	 * @priority low 2.8.0+
+	 *
+	 * @return string|null the default selected class.
+	 */
+	public function is_default_radio( $key, $value, $setting = '', $wrap = true, $echo = true ) {
+
+		$class = '';
+
+		$default = $this->get_default_settings( $key, $setting );
+
+		if ( $value === $default )
+			$class = 'seoframework-default-selected';
+
+		if ( $echo ) {
+			if ( $wrap ) {
+				echo sprintf( 'class="%s"', $class );
+			} else {
+				echo $class;
+			}
+		} else {
+			if ( $wrap )
+				return sprintf( 'class="%s"', $class );
+
+			return $class;
+		}
+	}
+
+}
Index: inc/classes/compat.class.php
===================================================================
--- inc/classes/compat.class.php	(nonexistent)
+++ inc/classes/compat.class.php	(working copy)
@@ -0,0 +1,100 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Compat
+ *
+ * Adds theme/plugin compatibility.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Compat extends AutoDescription_Debug {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		//* Genesis compat.
+		add_action( 'init', array( $this, 'genesis_compat' ) );
+		add_filter( 'genesis_detect_seo_plugins', array( $this, 'no_more_genesis_seo' ), 10 );
+
+		//* Headway compat.
+		add_filter( 'headway_seo_disabled', '__return_true' );
+
+		//* Jetpack compat.
+		add_action( 'init', array( $this, 'jetpack_compat' ) );
+
+	}
+
+	/**
+	 * Adds Genesis SEO compatibility.
+	 *
+	 * @since 2.6.0
+	 */
+	public function genesis_compat() {
+
+		//* Nothing to do on admin.
+		if ( $this->is_admin() )
+			return;
+
+		//* Reverse the removal of head attributes, this shouldn't affect SEO.
+		remove_filter( 'genesis_attr_head', 'genesis_attributes_empty_class' );
+		add_filter( 'genesis_attr_head', 'genesis_attributes_head' );
+
+	}
+
+	/**
+	 * Removes the Genesis SEO meta boxes on the SEO Settings page
+	 *
+	 * @since 2.2.4
+	 * @param array $plugins, overwritten as this filter will fire the
+	 * detection, regardless of other SEO plugins.
+	 *
+	 * @return array Plugins to detect.
+	 */
+	public function no_more_genesis_seo( $plugins ) {
+
+		$plugins = array(
+				'classes' => array(
+					'The_SEO_Framework_Load',
+				),
+				'functions' => array(),
+				'constants' => array(),
+			);
+
+		return $plugins;
+	}
+
+	/**
+	 * Adds compatibility with various JetPack modules.
+	 *
+	 * @since 2.6.0
+	 */
+	public function jetpack_compat() {
+
+		if ( $this->use_og_tags() ) {
+			//* Disable Jetpack Publicize's Open Graph.
+			add_filter( 'jetpack_enable_open_graph', '__return_false', 99 );
+		}
+
+	}
+
+
+}
Index: inc/classes/core.class.php
===================================================================
--- inc/classes/core.class.php	(nonexistent)
+++ inc/classes/core.class.php	(working copy)
@@ -0,0 +1,578 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Core
+ *
+ * Initializes the plugin & Holds plugin core functions.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Core {
+
+	/**
+	 * Constructor, just be there for me when I need you.
+	 * Latest Class. Doesn't have parent.
+	 */
+	public function __construct() {
+
+		add_action( 'current_screen', array( $this, 'post_type_support' ), 0 );
+
+		/**
+		 * Add plugin links to the plugin activation page.
+		 * @since 2.2.8
+		 */
+		add_filter( 'plugin_action_links_' . THE_SEO_FRAMEWORK_PLUGIN_BASENAME, array( $this, 'plugin_action_links' ), 10, 2 );
+
+	}
+
+	/**
+	 * Proportionate dimensions based on Width and Height.
+	 * AKA Aspect Ratio.
+	 *
+	 * @param int $i The dimension to resize.
+	 * @param int $r1 The deminsion that determines the ratio.
+	 * @param int $r2 The dimension to proportionate to.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return int The proportional dimension, rounded.
+	 */
+	public function proportionate_dimensions( $i, $r1, $r2 ) {
+
+		//* Get aspect ratio.
+		$ar = $r1 / $r2;
+
+		$i = $i / $ar;
+		return round( $i );
+	}
+
+	/**
+	 * Adds post type support
+	 *
+	 * Applies filters the_seo_framework_supported_post_types : The supported post types.
+	 * @since 2.3.1
+	 *
+	 * @since 2.1.6
+	 */
+	public function post_type_support() {
+
+		/**
+		 * Added product post type.
+		 *
+		 * @since 2.3.1
+		 */
+		$defaults = array(
+			'post', 'page',
+			'product',
+			'forum', 'topic',
+			'jetpack-testimonial', 'jetpack-portfolio',
+		);
+
+		$post_types = (array) apply_filters( 'the_seo_framework_supported_post_types', $defaults );
+
+		$types = wp_parse_args( $defaults, $post_types );
+
+		foreach ( $types as $type )
+			add_post_type_support( $type, array( 'autodescription-meta' ) );
+
+	}
+
+	/**
+	 * Adds link from plugins page to SEO Settings page.
+	 *
+	 * @param array $links The current links.
+	 *
+	 * @since 2.2.8
+	 */
+	public function plugin_action_links( $links = array() ) {
+
+		$framework_links = array();
+
+		if ( $this->load_options )
+			$framework_links['settings'] = '<a href="' . esc_url( admin_url( 'admin.php?page=' . $this->page_id ) ) . '">' . __( 'SEO Settings', 'autodescription' ) . '</a>';
+
+		$framework_links['home'] = '<a href="'. esc_url( 'https://theseoframework.com/' ) . '" target="_blank">' . _x( 'Plugin Home', 'As in: The Plugin Home Page', 'autodescription' ) . '</a>';
+
+		return array_merge( $framework_links, $links );
+	}
+
+	/**
+	 * Returns the front page ID, if home is a page.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return int the ID.
+	 */
+	public function get_the_front_page_ID() {
+
+		static $front_id = null;
+
+		if ( isset( $front_id ) )
+			return $front_id;
+
+		return $front_id = $this->has_page_on_front() ? (int) get_option( 'page_on_front' ) : 0;
+	}
+
+	/**
+	 * Generate dismissible notice.
+	 *
+	 * @param $message The notice message.
+	 * @param $type The notice type : 'updated', 'error', 'warning'
+	 *
+	 * @since 2.6.0
+	 */
+	public function generate_dismissible_notice( $message = '', $type = 'updated' ) {
+
+		if ( empty( $message ) )
+			return '';
+
+		if ( 'warning' === $type )
+			$type = 'notice-warning';
+
+		$notice = '<div class="notice ' . $type . ' seo-notice"><p>';
+		$notice .= '<a class="hide-if-no-js autodescription-dismiss" title="' . __( 'Dismiss', 'AutoDescription' ) . '"></a>';
+		$notice .= '<strong>' . $message . '</strong>';
+		$notice .= '</p></div>';
+
+		return $notice;
+	}
+
+	/**
+	 * Mark up content with code tags.
+	 *
+	 * Escapes all HTML, so `<` gets changed to `&lt;` and displays correctly.
+	 *
+	 * @since 2.0.0
+	 *
+	 * @param string $content Content to be wrapped in code tags.
+	 *
+	 * @return string Content wrapped in code tags.
+	 */
+	public function code_wrap( $content ) {
+		return '<code>' . esc_html( $content ) . '</code>';
+	}
+
+	/**
+	 * Mark up content with code tags.
+	 *
+	 * Escapes no HTML.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $content Content to be wrapped in code tags.
+	 *
+	 * @return string Content wrapped in code tags.
+	 */
+	public function code_wrap_noesc( $content ) {
+		return '<code>' . $content . '</code>';
+	}
+
+	/**
+	 * Return custom field post meta data.
+	 *
+	 * Return only the first value of custom field. Return false if field is
+	 * blank or not set.
+	 *
+	 * @since 2.0.0
+	 *
+	 * @param string $field	Custom field key.
+	 * @param int $post_id	The post ID
+	 *
+	 * @return string|boolean Return value or false on failure.
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 *
+	 * @staticvar array $field_cache
+	 * @since 2.2.5
+	 */
+	public function get_custom_field( $field, $post_id = null ) {
+
+		//* No field has been provided.
+		if ( empty( $field ) )
+			return false;
+
+		//* Setup cache.
+		static $field_cache = array();
+
+		//* Check field cache.
+		if ( isset( $field_cache[$field][$post_id] ) )
+			//* Field has been cached.
+			return $field_cache[$field][$post_id];
+
+		if ( null === $post_id || empty( $post_id ) )
+			$post_id = $this->get_the_real_ID();
+
+		if ( null === $post_id || empty( $post_id ) )
+			return '';
+
+		$custom_field = get_post_meta( $post_id, $field, true );
+
+		// If custom field is empty, return null.
+		if ( empty( $custom_field ) )
+			$field_cache[$field][$post_id] = '';
+
+		//* Render custom field, slashes stripped, sanitized if string
+		$field_cache[$field][$post_id] = is_array( $custom_field ) ? stripslashes_deep( $custom_field ) : stripslashes( wp_kses_decode_entities( $custom_field ) );
+
+		return $field_cache[$field][$post_id];
+	}
+
+	/**
+	 * Google docs language determinator.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @staticvar string $language
+	 *
+	 * @return string language code
+	 */
+	protected function google_language() {
+
+		/**
+		 * Cache value
+		 * @since 2.2.4
+		 */
+		static $language = null;
+
+		if ( isset( $language ) )
+			return $language;
+
+		//* Language shorttag to be used in Google help pages,
+		$language = _x( 'en', 'e.g. en for English, nl for Dutch, fi for Finish, de for German', 'autodescription' );
+
+		return $language;
+	}
+
+	/**
+	 * Whether to allow external redirect through the 301 redirect option.
+	 *
+	 * Applies filters the_seo_framework_allow_external_redirect : bool
+	 * @staticvar bool $allowed
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool Whether external redirect is allowed.
+	 */
+	public function allow_external_redirect() {
+
+		static $allowed = null;
+
+		if ( isset( $allowed ) )
+			return $allowed;
+
+		return $allowed = (bool) apply_filters( 'the_seo_framework_allow_external_redirect', true );
+	}
+
+	/**
+	 * Object cache set wrapper.
+	 * Applies filters 'the_seo_framework_use_object_cache' : Disable object
+	 * caching for this plugin, when applicable.
+	 *
+	 * @param string $key The Object cache key.
+	 * @param mixed $data The Object cache data.
+	 * @param int $expire The Object cache expire time.
+	 * @param string $group The Object cache group.
+	 *
+	 * @since 2.4.3
+	 *
+	 * @return bool true on set, false when disabled.
+	 */
+	public function object_cache_set( $key, $data, $expire = 0, $group = 'the_seo_framework' ) {
+
+		if ( $this->use_object_cache )
+			return wp_cache_set( $key, $data, $group, $expire );
+
+		return false;
+	}
+
+	/**
+	 * Object cache get wrapper.
+	 * Applies filters 'the_seo_framework_use_object_cache' : Disable object
+	 * caching for this plugin, when applicable.
+	 *
+	 * @param string $key The Object cache key.
+	 * @param string $group The Object cache group.
+	 * @param bool $force Whether to force an update of the local cache.
+	 * @param bool $found Whether the key was found in the cache. Disambiguates a return of false, a storable value.
+	 *
+	 * @since 2.4.3
+	 *
+	 * @return mixed wp_cache_get if object caching is allowed. False otherwise.
+	 */
+	public function object_cache_get( $key, $group = 'the_seo_framework', $force = false, &$found = null ) {
+
+		if ( $this->use_object_cache )
+			return wp_cache_get( $key, $group, $force, $found );
+
+		return false;
+	}
+
+	/**
+	 * Faster way of doing an in_array search compared to default PHP behavior.
+	 * @NOTE only to show improvement with large arrays. Might slow down with small arrays.
+	 * @NOTE can't do type checks. Always assume the comparing value is a string.
+	 *
+	 * @uses array_flip()
+	 * @uses isset()
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param string|array $needle The needle(s) to search for
+	 * @param array $array The single dimensional array to search in.
+	 *
+	 * @return bool true if value is in array.
+	 */
+	public function in_array( $needle, $array ) {
+
+		$array = array_flip( $array );
+
+		if ( is_string( $needle ) ) {
+			if ( isset( $array[$needle] ) )
+				return true;
+		} else if ( is_array( $needle ) ) {
+			foreach ( $needle as $str ) {
+				if ( isset( $array[$str] ) )
+					return true;
+			}
+		}
+
+		return false;
+	}
+
+	/**
+	 * Checks if the string input is exactly '1'.
+	 *
+	 * @param string $value The value to check.
+	 *
+	 * @since 2.6.0
+	 * @return bool true if value is '1'
+	 */
+	public function is_checked( $value ) {
+
+		if ( '1' === $value )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Checks if the option is used and checked.
+	 *
+	 * @param string $option The option name.
+	 *
+	 * @since 2.6.0
+	 * @return bool Option is checked.
+	 */
+	public function is_option_checked( $option ) {
+
+		$option = $this->get_option( $option );
+
+		if ( $this->is_checked( $option ) )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Checks if blog is public through WordPress core settings.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool True is blog is public.
+	 */
+	public function is_blog_public() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( '1' === get_option( 'blog_public' ) )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Whether the current blog is spam or deleted.
+	 * Multisite Only.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @global object $current_blog. NULL on single site.
+	 *
+	 * @return bool Current blog is spam.
+	 */
+	public function current_blog_is_spam_or_deleted() {
+		global $current_blog;
+
+		if ( isset( $current_blog ) && ( '1' === $current_blog->spam || '1' === $current_blog->deleted ) )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Whether to lowercase the noun or keep it UCfirst.
+	 * Depending if language is German.
+	 *
+	 * @staticvar array $lowercase Contains nouns.
+	 * @since 2.6.0
+	 *
+	 * @return string The maybe lowercase noun.
+	 */
+	public function maybe_lowercase_noun( $noun ) {
+
+		static $lowercase = array();
+
+		if ( isset( $lowercase[$noun] ) )
+			return $lowercase[$noun];
+
+		return $lowercase[$noun] = $this->check_wp_locale( 'de' ) ? $noun : strtolower( $noun );
+	}
+
+	/**
+	 * The minimum role required to
+	 *
+	 * Applies filter 'the_seo_framework_settings_capability' : string
+	 * This filter changes the minimum role for viewing and editing the plugin's settings.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @return string The minimum required capability for SEO Settings.
+	 */
+	public function settings_capability() {
+		return (string) apply_filters( 'the_seo_framework_settings_capability', 'manage_options' );
+	}
+
+	/**
+	 * Returns the SEO Settings page URL.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The escaped SEO Settings page URL.
+	 */
+	public function seo_settings_page_url() {
+
+		if ( $this->load_options ) {
+			//* Options are allowed to be loaded.
+
+			$url = html_entity_decode( menu_page_url( $this->page_id, 0 ) );
+
+			return esc_url( $url );
+		}
+
+		return '';
+	}
+
+	/**
+	 * Returns the PHP timezone compatible string.
+	 * UTC offsets are unreliable.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param bool $guess : If true, the timezone will be guessed from the
+	 * WordPress core gmt_offset option.
+	 *
+	 * @return string|empty PHP Timezone String.
+	 */
+	public function get_timezone_string( $guess = false ) {
+
+		$tzstring = get_option( 'timezone_string' );
+
+		if ( false !== strpos( $tzstring, 'Etc/GMT' ) )
+			$tzstring = '';
+
+		if ( $guess && empty( $tzstring ) ) {
+			$offset = get_option( 'gmt_offset' );
+			$tzstring = $this->get_tzstring_from_offset( $offset );
+		}
+
+		return $tzstring;
+	}
+
+	/**
+	 * Fetches the Timezone String from given offset.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int $offset The GMT offzet.
+	 *
+	 * @return string PHP Timezone String.
+	 */
+	protected function get_tzstring_from_offset( $offset = 0 ) {
+
+		$seconds = round( $offset * 60 * 60 );
+
+		//* Try Daylight savings.
+		$tzstring = timezone_name_from_abbr( '', $seconds, 1 );
+		/**
+		 * PHP bug workaround.
+		 * @link https://bugs.php.net/bug.php?id=44780
+		 */
+		if ( false === $tzstring )
+			$tzstring = timezone_name_from_abbr( '', $seconds, 0 );
+
+		return $tzstring;
+	}
+
+	/**
+	 * Sets and resets the timezone.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $tzstring Optional. The PHP Timezone string. Best to leave empty to always get a correct one.
+	 * @link http://php.net/manual/en/timezones.php
+	 * @param bool $reset Whether to reset to default. Ignoring first parameter.
+	 *
+	 * @return bool True on success. False on failure.
+	 */
+	public function set_timezone( $tzstring = '', $reset = false ) {
+
+		static $old_tz = null;
+
+		if ( is_null( $old_tz ) ) {
+			$old_tz = date_default_timezone_get();
+			if ( empty( $old_tz ) )
+				$old_tz = 'UTC';
+		}
+
+		if ( $reset )
+			return date_default_timezone_set( $old_tz );
+
+		if ( empty( $tzstring ) )
+			$tzstring = $this->get_timezone_string( true );
+
+		return date_default_timezone_set( $tzstring );
+	}
+
+	/**
+	 * Resets the timezone to default or UTC.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool True on success. False on failure.
+	 */
+	public function reset_timezone() {
+		return $this->set_timezone( '', true );
+	}
+
+}
Index: inc/classes/debug.class.php
===================================================================
--- inc/classes/debug.class.php	(nonexistent)
+++ inc/classes/debug.class.php	(working copy)
@@ -0,0 +1,667 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Debug
+ *
+ * Holds plugin debug functions.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Debug extends AutoDescription_Core {
+
+	/**
+	 * Enqueue the debug output.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @var string The debug output.
+	 */
+	protected $debug_output = '';
+
+	/**
+	 * Constructor, load parent constructor and add actions.
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		if ( $this->the_seo_framework_debug ) {
+			add_action( 'admin_footer', array( $this, 'debug_screens' ) );
+			add_action( 'admin_footer', array( $this, 'debug_output' ) );
+		}
+
+	}
+
+	/**
+	 * Mark a function as deprecated and inform when it has been used.
+	 *
+	 * Taken from WordPress core, but added extra parameters and linguistic alterations.
+	 *
+	 * The current behavior is to trigger a user error if WP_DEBUG is true.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @param string $function		The function that was called.
+	 * @param string $version		The version of WordPress that deprecated the function.
+	 * @param string $replacement	Optional. The function that should have been called. Default null.
+	 */
+	public function _deprecated_function( $function, $version, $replacement = null ) {
+		/**
+		 * Fires when a deprecated function is called.
+		 *
+		 * @since WP Core 2.5.0
+		 *
+		 * @param string $function    The function that was called.
+		 * @param string $replacement The function that should have been called.
+		 * @param string $version     The version of WordPress that deprecated the function.
+		 */
+		do_action( 'deprecated_function_run', $function, $replacement, $version );
+
+		/**
+		 * Filter whether to trigger an error for deprecated functions.
+		 *
+		 * @since WP Core 2.5.0
+		 *
+		 * @param bool $trigger Whether to trigger the error for deprecated functions. Default true.
+		 */
+		if ( WP_DEBUG && apply_filters( 'deprecated_function_trigger_error', true ) ) {
+
+			set_error_handler( array( $this, 'error_handler_deprecated' ) );
+
+			if ( function_exists( '__' ) ) {
+				if ( isset( $replacement ) )
+					trigger_error( sprintf( __( '%1$s is <strong>deprecated</strong> since version %2$s of The SEO Framework! Use %3$s instead.', 'autodescription' ), $function, $version, $replacement ) );
+				else
+					trigger_error( sprintf( __( '%1$s is <strong>deprecated</strong> since version %2$s of The SEO Framework with no alternative available.' ), $function, $version ) );
+			} else {
+				if ( isset( $replacement ) )
+					trigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s of The SEO Framework! Use %3$s instead.', $function, $version, $replacement ) );
+				else
+					trigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s of The SEO Framework with no alternative available.', $function, $version ) );
+			}
+
+			restore_error_handler();
+		}
+	}
+
+	/**
+	 * Mark a function as deprecated and inform when it has been used.
+	 *
+	 * Taken from WordPress core, but added extra parameters and linguistic alterations.
+	 *
+	 * The current behavior is to trigger a user error if WP_DEBUG is true.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @param string $function	The function that was called.
+	 * @param string $message	A message explaining what has been done incorrectly.
+	 * @param string $version	The version of WordPress where the message was added.
+	 */
+	public function _doing_it_wrong( $function, $message, $version ) {
+		/**
+		* Fires when the given function is being used incorrectly.
+		*
+		* @since WP Core 3.1.0
+		*
+		* @param string $function The function that was called.
+		* @param string $message  A message explaining what has been done incorrectly.
+		* @param string $version  The version of WordPress where the message was added.
+		*/
+		do_action( 'doing_it_wrong_run', $function, $message, $version );
+
+		/**
+		* Filter whether to trigger an error for _doing_it_wrong() calls.
+		*
+		* @since 3.1.0
+		*
+		* @param bool $trigger Whether to trigger the error for _doing_it_wrong() calls. Default true.
+		*/
+		if ( WP_DEBUG && apply_filters( 'doing_it_wrong_trigger_error', true ) ) {
+
+			set_error_handler( array( $this, 'error_handler_doing_it_wrong' ) );
+
+			if ( function_exists( '__' ) ) {
+				$version = is_null( $version ) ? '' : sprintf( __( '(This message was added in version %s of The SEO Framework.)' ), $version );
+				/* translators: %s: Codex URL */
+				$message .= ' ' . sprintf( __( 'Please see <a href="%s">Debugging in WordPress</a> for more information.', 'autodescription' ),
+					__( 'https://codex.wordpress.org/Debugging_in_WordPress', 'autodescription' )
+				);
+				/* translators: 1: Function name, 2: Message, 3: Plugin Version notification */
+				trigger_error( sprintf( __( '%1$s was called <strong>incorrectly</strong>. %2$s %3$s', 'autodescription' ), $function, $message, $version ) );
+			} else {
+				$version = is_null( $version ) ? '' : sprintf( '(This message was added in version %s of The SEO Framework.)', $version );
+				$message .= ' ' . sprintf( 'Please see <a href="%s">Debugging in WordPress</a> for more information.',
+					'https://codex.wordpress.org/Debugging_in_WordPress'
+				);
+
+				/* translators: 1: Function name, 2: Message, 3: Plugin Version notification */
+				trigger_error( sprintf( '%1$s was called <strong>incorrectly</strong>. %2$s %3$s', $function, $message, $version ) );
+			}
+
+			restore_error_handler();
+		}
+	}
+
+	/**
+	 * The SEO Framework error handler.
+	 *
+	 * Only handles notices.
+	 * @see E_USER_NOTICE
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int Error handling code.
+	 * @param string The error message.
+	 */
+	protected function error_handler_deprecated( $code, $message ) {
+
+		//* Only do so if E_USER_NOTICE is pased.
+		if ( $code >= 1024 && isset( $message ) ) {
+
+			$backtrace = debug_backtrace();
+			/**
+			 * 0 = This function. 1 = Debug function. 2 = Error trigger. 3 = Deprecated call.
+			 */
+			$error = $backtrace[3];
+
+			$this->error_handler( $error, $message );
+		}
+
+	}
+
+	/**
+	 * The SEO Framework error handler.
+	 *
+	 * Only handles notices.
+	 * @see E_USER_NOTICE
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int Error handling code.
+	 * @param string The error message.
+	 */
+	protected function error_handler_doing_it_wrong( $code, $message ) {
+
+		//* Only do so if E_USER_NOTICE is pased.
+		if ( $code >= 1024 && isset( $message ) ) {
+
+			$backtrace = debug_backtrace();
+			/**
+			 * 0 = This function. 1 = Debug function. 2 = Error trigger.
+			 */
+			$error = $backtrace[2];
+
+			$this->error_handler( $error, $message );
+		}
+
+	}
+
+	/**
+	 * Echo's error.
+	 *
+	 * @access private
+	 * Please don't use this error handler.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $error The Error location and file.
+	 * @param string $message The error message.
+	 */
+	protected function error_handler( $error, $message ) {
+
+		$file = isset( $error['file'] ) ? $error['file'] : '';
+		$line = isset( $error['line'] ) ? $error['line'] : '';
+
+		if ( isset( $message ) ) {
+			echo "\r\n" . '<strong>Notice:</strong> ' . $message;
+			echo $file ? ' In ' . $file : '';
+			echo $line ? ' on line ' . $line : '';
+			echo ".<br>\r\n";
+		}
+	}
+
+	/**
+	 * Echo found screens in the admin footer when debugging is enabled.
+	 *
+	 * @uses bool $this->the_seo_framework_debug
+	 * @global array $current_screen
+	 *
+	 * @access private
+	 * @since 2.5.2
+	 */
+	public function debug_screens() {
+		global $current_screen;
+
+		$this->debug_init( __CLASS__, __FUNCTION__, false, '', get_defined_vars() );
+
+	}
+
+	/**
+	 * Echos debug output.
+	 *
+	 * @access private
+	 * @since 2.6.0
+	 */
+	public function debug_output() {
+
+		if ( $this->debug_output ) {
+			if ( $this->the_seo_framework_debug_hidden ) echo "<!--\r\n";
+
+			?>
+			<div style="clear: both;float: left;position: relative;width: calc( 100% - 200px );min-height: 700px;padding: 0;margin: 20px 20px 40px 180px;overflow: hidden;border: 1px solid #ccc;border-radius: 3px;">
+				<h3 style="font-size: 14px;padding: 0 12px;margin: 0;line-height: 39px;border-bottom: 2px solid #aaa;position: absolute;z-index: 1;width: 100%;right: 0;left: 0;top: 0;background: #fff;border-radius: 3px 3px 0 0;height: 39px;">SEO Debug Information</h3>
+				<div style="position: absolute;bottom: 0;right: 0;left: 0;top: 41px;margin: 0;padding: 0;background: #fff;border-radius: 3px;overflow-x: hidden;">
+					<?php echo $this->debug_output; ?>
+				</div>
+			</div>
+			<?php
+
+			if ( $this->the_seo_framework_debug_hidden ) echo "\r\n-->";
+		}
+
+	}
+
+	/**
+	 * Return debug values.
+	 *
+	 * @param mixed $values What to be output.
+	 *
+	 * @access private
+	 * @since 2.6.0
+	 */
+	public function get_debug_information( $values = null ) {
+
+		$output = '';
+
+		if ( $this->the_seo_framework_debug ) {
+
+			$output .= "\r\n";
+			$output .=  $this->the_seo_framework_debug_hidden ? '' : '<span class="code highlight">';
+
+			if ( is_null( $values ) ) {
+				$output .= $this->debug_value_wrapper( "Debug message: Value isn't set." ) . "\r\n";
+				$output .= $this->the_seo_framework_debug_hidden ? '' : '</span>';
+
+				return $output;
+			}
+
+			if ( is_object( $values ) ) {
+				//* Turn objects into arrays.
+				$values = (array) $values;
+
+				foreach ( $values as $key => $value ) {
+					if ( is_object( $value ) ) {
+						foreach ( (array) $value as $key => $v ) {
+							$values = $v;
+							break;
+						}
+					}
+					break;
+				}
+			}
+
+			if ( is_array( $values ) ) {
+				$output .= $this->the_seo_framework_debug_hidden ? '' : '<div style="margin:0;padding-left:12px">';
+				foreach ( $values as $key => $value ) {
+					if ( '' === $value ) {
+						$output .= $this->debug_key_wrapper( $key ) . ' => ';
+						$output .= $this->debug_value_wrapper( "''" );
+						$output .= "\r\n";
+					} else if ( is_string( $value ) || is_int( $value ) ) {
+						$output .= $this->debug_key_wrapper( $key ) . ' => ' . $this->debug_value_wrapper( $value );
+						$output .= "\r\n";
+					} else if ( is_bool( $value ) ) {
+						$output .= $this->debug_key_wrapper( $key ) . ' => ';
+						$output .= $this->debug_value_wrapper( $value ? 'true' : 'false' );
+						$output .= "\r\n";
+					} else if ( is_array( $value ) ) {
+						$output .= $this->debug_key_wrapper( $key ) . ' => ';
+						$output .= "Array[\r\n";
+						$output .= $this->the_seo_framework_debug_hidden ? '' : '<p style="margin:0;padding-left:12px">';
+						foreach ( $value as $k => $v ) {
+							if ( '' === $v ) {
+								$output .= $this->debug_key_wrapper( $k ) . ' => ';
+								$output .= $this->debug_value_wrapper( "''" );
+								$output .= ',';
+								$output .= "\r\n";
+							} else if ( is_string( $v ) || is_int( $v ) ) {
+								$output .= $this->debug_key_wrapper( $k ) . ' => ' . $this->debug_value_wrapper( $v );
+								$output .= ',';
+								$output .= "\r\n";
+							} else if ( is_bool( $v ) ) {
+								$output .= $this->debug_key_wrapper( $k ) . ' => ';
+								$output .= $this->debug_value_wrapper( $v ? 'true' : 'false' );
+								$output .= ',';
+								$output .= "\r\n";
+							} else if ( is_array( $v ) ) {
+								$output .= $this->debug_key_wrapper( $k ) . ' => ';
+								$output .= $this->debug_value_wrapper( 'Debug message: Three+ dimensional array' );
+								$output .= ',';
+							} else {
+								$output .= $this->debug_key_wrapper( $k ) . ' => ';
+								$output .= $this->debug_value_wrapper( $v );
+								$output .= ',';
+								$output .= "\r\n";
+							}
+							$output .= $this->the_seo_framework_debug_hidden ? '' : '<br>';
+						}
+						$output .= $this->the_seo_framework_debug_hidden ? '' : '</p>';
+						$output .= "]";
+					} else {
+						$output .= $this->debug_key_wrapper( $key ) . ' => ';
+						$output .= $this->debug_value_wrapper( $value );
+						$output .= "\r\n";
+					}
+					$output .= $this->the_seo_framework_debug_hidden ? '' : '<br>';
+				}
+				$output .= $this->the_seo_framework_debug_hidden ? '' : '</div>';
+			} else if ( '' === $values ) {
+				$output .= $this->debug_value_wrapper( "''" );
+			} else if ( is_string( $values ) || is_int( $values ) ) {
+				$output .= $this->debug_value_wrapper( $values );
+			} else if ( is_bool( $values ) ) {
+				$output .= $this->debug_value_wrapper( $values ? 'true' : 'false' );
+			} else {
+				$output .= $this->debug_value_wrapper( $values );
+			}
+
+			$output .= $this->the_seo_framework_debug_hidden ? '' : '</span>';
+			$output .= "\r\n";
+		}
+
+		return $output;
+	}
+
+	/**
+	 * Wrap debug key in a colored span.
+	 *
+	 * @param string $key The debug key.
+	 * @param bool $ignore Ignore the hidden output.
+	 *
+	 * @since 2.3.9
+	 * @access private
+	 *
+	 * @return string
+	 */
+	public function debug_key_wrapper( $key, $ignore = false ) {
+
+		if ( $ignore || false === $this->the_seo_framework_debug_hidden )
+			return '<font color="chucknorris">' . esc_attr( (string) $key ) . '</font>';
+
+		return esc_attr( (string) $key );
+	}
+
+	/**
+	 * Wrap debug value in a colored span.
+	 *
+	 * @param string $value The debug value.
+	 * @param bool $ignore Ignore the hidden output.
+	 *
+	 * @since 2.3.9
+	 * @access private
+	 *
+	 * @return string
+	 */
+	public function debug_value_wrapper( $value, $ignore = false ) {
+
+		if ( ! is_scalar( $value ) )
+			return 'Debug message: not scalar';
+
+		if ( $ignore || false === $this->the_seo_framework_debug_hidden )
+			return '<span class="wp-ui-notification">' . esc_attr( (string) trim( $value ) ) . '</span>';
+
+		return esc_attr( (string) $value );
+	}
+
+	/**
+	 * Debug init. Simplified way of debugging a function, only works in admin.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $class The class name.
+	 * @param string $method The function name.
+	 * @param bool $store Whether to store the output in cache for next run to pick up on.
+	 * @param double $debug_key Use $debug_key as variable, it's reserved.
+	 *
+	 * @param mixed function args.
+	 *
+	 * @access private
+	 *
+	 * @return void early if debugging is disabled.
+	 */
+	protected function debug_init( $class, $method, $store, $debug_key ) {
+
+		if ( false === $this->the_seo_framework_debug || false === $this->is_admin() )
+			return;
+
+		$output = '';
+
+		if ( func_num_args() >= 5 ) {
+
+			//* Cache the args for $store.
+			static $cached_args = array();
+			static $hold_args = array();
+
+			$args = array_slice( func_get_args(), 4 );
+			$key = $class . '_' . $method . '_' . $debug_key;
+
+			if ( $store ) {
+				$this->profile( false, false, 'time', $key ) . ' seconds';
+				$this->profile( false, false, 'memory', $key ) . ' bytes';
+
+				unset( $args[0]['debug_key'] );
+
+				$cached_args[$class][$method] = $args;
+				$hold_args[$class][$method] = $args;
+				return;
+			} else {
+
+				/**
+				 * Generate human-readable debug keys and echo it when it's called.
+				 * Matched value is found within the $output.
+				 *
+				 * @staticvar int $loop
+				 */
+				static $loop = 0;
+				$loop++;
+				$debug_key = '[Debug key: ' . $loop . ' - ' . $method . ']';
+
+				if ( 'admin_footer' !== current_action() )
+					echo '<p>' . $debug_key . '</p>';
+
+				$output .= '<h3>' . $debug_key . '</h3>';
+
+				if ( isset( $cached_args[$class][$method] ) ) {
+					$args[] = array(
+						'profile' => array(
+							'time' => $this->profile( false, true, 'time', $key ) . ' seconds',
+							'memory' => $this->profile( false, true, 'memory', $key ) . ' bytes'
+						)
+					);
+
+					$args = array_merge( $cached_args[$class][$method], $args );
+
+					//* Reset args for next run.
+					$cached_args[$class][$method] = null;
+				}
+			}
+
+			if ( $args ) {
+
+				if ( $class ) {
+					$output .= $class . '::' . $method . '( ';
+				} else {
+					$output .= $method . '( ';
+				}
+
+
+				if ( isset( $hold_args[$class][$method][0] ) ) {
+					if ( is_array( $hold_args[$class][$method][0] ) ) {
+						foreach ( $hold_args[$class][$method][0] as $var => $a ) {
+								$output .= '$' . $var . ', ';
+						}
+					}
+					$output = rtrim( $output, ', ' );
+					$hold_args[$class][$method] = null;
+				}
+
+				$output .= ' )' . "<br>\r\n";
+
+				foreach ( $args as $num => $a ) {
+					if ( is_array( $a ) ) {
+						foreach ( $a as $k => $v ) {
+							$output .= $this->the_seo_framework_debug_hidden ? '' : '<div style="padding-left:6px">';
+								$output .= (string) $k . ': ';
+								$output .= $this->the_seo_framework_debug_hidden ? '' : '<br>';
+								$output .= gettype( $v ) . ': [';
+								$output .= $this->the_seo_framework_debug_hidden ? '' : '<div style="padding-left:12px">';
+									$output .= $this->get_debug_information( $v );
+								$output .= $this->the_seo_framework_debug_hidden ? '' : '</div><br>';
+								$output .= ']' . "\r\n";
+							$output .= $this->the_seo_framework_debug_hidden ? '' : '</div>';
+						}
+					} else {
+						$output .= $this->the_seo_framework_debug_hidden ? '' : '<div style="padding-left:6px">';
+							$output .= (string) $num . ': ';
+							$output .= $this->the_seo_framework_debug_hidden ? '' : '<br>';
+							$output .= gettype( $a ) . ': [';
+							$output .= $this->the_seo_framework_debug_hidden ? '' : '<div style="padding-left:12px">';
+								$output .= $this->get_debug_information( $a );
+							$output .= $this->the_seo_framework_debug_hidden ? '' : '</div><br>';
+							$output .= ']' . "\r\n";
+						$output .= $this->the_seo_framework_debug_hidden ? '' : '</div>';
+					}
+				}
+			}
+		}
+
+		if ( $output ) {
+
+			static $odd = null;
+			if ( isset( $odd ) ) {
+				$bg = 'f1f1f1';
+				$odd = null;
+			} else {
+				$bg = 'dadada';
+				$odd = true;
+			}
+
+			//* Store debug output.
+			$this->debug_output .= $this->the_seo_framework_debug_hidden ? '' : '<div style="background:#' . $bg . ';margin-bottom:6px;padding:0px 14px 14px;clear:both;float:left;width:100%;display:inline-block;">';
+			$this->debug_output .= $output;
+			$this->debug_output .= $this->the_seo_framework_debug_hidden ? '' : '</div>';
+		}
+
+	}
+
+	/**
+	 * Count the timings and memory usage.
+	 * Memory usage fetching is unreliable, i.e. Opcode.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @param bool $echo Whether to echo the total plugin time.
+	 * @param bool $from_last Whether to echo the differences from the last timing.
+	 * @param string $what Whether to return the time or memory.
+	 * @param string $key When used, it will detach the profiling separately.
+	 *
+	 * @staticvar bool $debug
+	 *
+	 * @return float The timer in seconds. Or memory in Bytes when $what is 'memory'.
+	 */
+	public function profile( $echo = false, $from_last = false, $what = 'time', $key = '' ) {
+
+		static $timer_start = array();
+		static $memory_start = array();
+		static $plugin_time = array();
+		static $plugin_memory = array();
+
+		$timer_start[$key] = isset( $timer_start[$key] ) ? $timer_start[$key] : 0;
+		$memory_start[$key] = isset( $memory_start[$key] ) ? $memory_start[$key] : 0;
+		$plugin_time[$key] = isset( $plugin_time[$key] ) ? $plugin_time[$key] : 0;
+		$plugin_memory[$key] = isset( $plugin_memory[$key] ) ? $plugin_memory[$key] : 0;
+
+		//* Get now.
+		$time_now = microtime( true );
+		$memory_usage_now = memory_get_usage();
+
+		//* Calculate difference.
+		$difference_time = $time_now - $timer_start[$key];
+		$difference_memory = $memory_usage_now - $memory_start[$key];
+
+		//* Add difference to total.
+		$plugin_time[$key] = $plugin_time[$key] + $difference_time;
+		$plugin_memory[$key] = $plugin_memory[$key] + $difference_memory;
+
+		//* Reset timer and memory
+		$timer_start[$key] = $time_now;
+		$memory_start[$key] = $memory_usage_now;
+
+		if ( $from_last ) {
+			if ( false === $echo ) {
+				//* Return early if not allowed to echo.
+				if ( 'time' === $what )
+					return number_format( $difference_time, 5 );
+
+				return $difference_memory;
+			}
+
+			//* Convert to string and echo if not returned yet.
+			echo (string) "\r\n" . $difference_time . "s\r\n";
+			echo (string) ( $difference_memory / 1024 ) . "kiB\r\n";
+		} else {
+			if ( false === $echo ) {
+				//* Return early if not allowed to echo.
+				if ( 'time' === $what )
+					return number_format( $plugin_time[$key], 5 );
+
+				return $plugin_memory[$key];
+			}
+
+			//* Convert to string and echo if not returned yet.
+			echo (string) "\r\n" . $plugin_time[$key] . "s\r\n";
+			echo (string) ( $plugin_memory[$key] / 1024 ) . "kiB\r\n";
+		}
+
+	}
+
+	/**
+	 * Times code until it's called again.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return float PHP Microtime for code execution.
+	 */
+	protected function timer() {
+
+		static $previous = null;
+
+		if ( isset( $previous ) ) {
+			$output = $previous - microtime( true );
+			$previous = null;
+		} else {
+			$output = $previous = microtime( true );
+		}
+
+		return $output;
+	}
+
+}
Index: inc/classes/detect.class.php
===================================================================
--- inc/classes/detect.class.php	(revision 1413572)
+++ inc/classes/detect.class.php	(working copy)
@@ -1,1295 +1,1026 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Detect
- *
- * Detects other plugins and themes
- * Returns booleans
- *
- * @since 2.1.6
- */
-class AutoDescription_Detect extends AutoDescription_Render {
-
-	/**
-	 * Constructor, load parent constructor
-	 */
-	public function __construct() {
-		parent::__construct();
-	}
-
-	/**
-	 * Detect active plugin by constant, class or function existence.
-	 *
-	 * @since 1.3.0
-	 *
-	 * @param array $plugins Array of array for constants, classes and / or functions to check for plugin existence.
-	 *
-	 * @return boolean True if plugin exists or false if plugin constant, class or function not detected.
-	 */
-	public function detect_plugin( $plugins ) {
-
-		//* Check for classes
-		if ( isset( $plugins['classes'] ) ) {
-			foreach ( $plugins['classes'] as $name ) {
-				if ( class_exists( $name ) )
-					return true;
-					break;
-			}
-		}
-
-		//* Check for functions
-		if ( isset( $plugins['functions'] ) ) {
-			foreach ( $plugins['functions'] as $name ) {
-				if ( function_exists( $name ) )
-					return true;
-					break;
-			}
-		}
-
-		//* Check for constants
-		if ( isset( $plugins['constants'] ) ) {
-			foreach ( $plugins['constants'] as $name ) {
-				if ( defined( $name ) )
-					return true;
-					break;
-			}
-		}
-
-		//* No class, function or constant found to exist
-		return false;
-	}
-
-	/**
-	 * Detect if you can use the given constants, functions and classes.
-	 * All must be available to return true.
-	 *
-	 * @param array $plugins Array of array for constants, classes and / or functions to check for plugin existence.
-	 * @param bool $use_cache Bypasses cache if false
-	 *
-	 * @staticvar array $cache
-	 * @uses $this->detect_plugin_multi()
-	 *
-	 * @since 2.5.2
-	 */
-	public function can_i_use( array $plugins = array(), $use_cache = true ) {
-
-		if ( ! $use_cache )
-			return $this->detect_plugin_multi( $plugins );
-
-		static $cache = array();
-
-		$mapped = array();
-
-		//* Prepare multidimensional array for cache.
-		foreach ( $plugins as $key => $func ) {
-			if ( ! is_array( $func ) )
-				return false;
-
-			//* Sort alphanumeric by value, put values back after sorting.
-			$func = array_flip( $func );
-			ksort( $func );
-			$func = array_flip( $func );
-
-			//* Glue with underscore and space for debugging purposes.
-			$mapped[$key] = $key . '_' . implode( ' ', $func );
-		}
-
-		ksort( $mapped );
-
-		//* Glue with dash instead of underscore for debugging purposes.
-		$plugins_cache = implode( '-', $mapped );
-
-		if ( isset( $cache[$plugins_cache] ) )
-			return $cache[$plugins_cache];
-
-		return $cache[$plugins_cache] = $this->detect_plugin_multi( $plugins );
-	}
-
-	/**
-	 * Detect active plugin by constant, class or function existence.
-	 * All parameters must match and return true.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param array $plugins Array of array for constants, classes and / or functions to check for plugin existence.
-	 *
-	 * @return boolean True if ALL functions classes and constants exists or false if plugin constant, class or function not detected.
-	 */
-	public function detect_plugin_multi( array $plugins ) {
-
-		//* Check for classes
-		if ( isset( $plugins['classes'] ) ) {
-			foreach ( $plugins['classes'] as $name ) {
-				if ( ! class_exists( $name ) ) {
-					return false;
-					break;
-				}
-			}
-		}
-
-		//* Check for functions
-		if ( isset( $plugins['functions'] ) ) {
-			foreach ( $plugins['functions'] as $name ) {
-				if ( ! function_exists( $name ) ) {
-					return false;
-					break;
-				}
-			}
-		}
-
-		//* Check for constants
-		if ( isset( $plugins['constants'] ) ) {
-			foreach ( $plugins['constants'] as $name ) {
-				if ( ! defined( $name ) ) {
-					return false;
-					break;
-				}
-			}
-		}
-
-		//* All classes, functions and constant have been found to exist
-		return true;
-	}
-
-	/**
-	 * Checks if the (parent) theme name is loaded.
-	 *
-	 * @NOTE will return true if ANY of the array values matches.
-	 *
-	 * @param string|array $themes the current theme name
-	 * @param bool $use_cache If set to false don't use cache.
-	 *
-	 * @since 2.1.0
-	 *
-	 * @staticvar array $themes_cache
-	 * @since 2.2.4
-	 *
-	 * @return bool is theme active.
-	 */
-	public function is_theme( $themes = null, $use_cache = true ) {
-
-		if ( ! isset( $themes ) )
-			return false;
-
-		if ( ! $use_cache ) {
-			//* Don't use cache.
-
-			$wp_get_theme = wp_get_theme();
-
-			$theme_parent = strtolower( $wp_get_theme->get('Template') );
-			$theme_name = strtolower( $wp_get_theme->get('Name') );
-
-			if ( is_string( $themes ) ) {
-				$themes = strtolower( $themes );
-				if ( $themes === $theme_parent || $themes === $theme_name )
-					return true;
-			} else if ( is_array( $themes ) ) {
-				foreach ( $themes as $theme ) {
-					$theme = strtolower( $theme );
-					if ( $theme === $theme_parent || $theme === $theme_name ) {
-						return true;
-						break;
-					}
-				}
-			}
-
-			return false;
-		}
-
-		static $themes_cache = array();
-
-		//* Check theme check cache
-		if ( is_string( $themes ) && isset( $themes_cache[$themes] ) ) {
-			$themes = strtolower( $themes );
-			//* Theme check has been cached
-			return $themes_cache[$themes];
-		}
-
-		if ( is_array( $themes ) ) {
-			foreach ( $themes as $theme ) {
-				$theme = strtolower( $theme );
-				if ( isset( $themes_cache[$theme] ) && in_array( $themes_cache[$theme], $themes ) && $themes_cache[$theme] ) {
-					// Feature is found and true
-					return $themes_cache[$theme];
-					break;
-				}
-			}
-		}
-
-		$wp_get_theme = wp_get_theme();
-
-		//* Fetch both themes if child theme is present.
-		$theme_parent = strtolower( $wp_get_theme->get('Template') );
-		$theme_name = strtolower( $wp_get_theme->get('Name') );
-
-		if ( is_string( $themes ) ) {
-			$themes = strtolower( $themes );
-			if ( $themes === $theme_parent || $themes === $theme_name )
-				$themes_cache[$themes] = true;
-		} else if ( is_array( $themes ) ) {
-			foreach ( $themes as $theme ) {
-				$theme = strtolower( $theme );
-				if ( $theme === $theme_parent || $theme === $theme_name ) {
-					return $themes_cache[$theme] = true;
-					break;
-				} else {
-					$themes_cache[$theme] = false;
-				}
-			}
-			return $themes_cache[$theme];
-		}
-
-		//* The theme isn't active
-		if ( is_string( $themes ) && ! isset( $themes_cache[$themes] ) )
-			$themes_cache[$themes] = false;
-
-		return $themes_cache[$themes];
-	}
-
-	/**
-	 * SEO plugin detection
-	 *
-	 * @since 1.3.0
-	 *
-	 * @staticvar bool $detected
-	 * @since 2.2.5
-	 *
-	 * @return bool SEO plugin detected.
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	public function detect_seo_plugins() {
-
-		static $detected = null;
-
-		if ( isset( $detected ) )
-			return $detected;
-
-		/**
-		 * Use this filter to adjust plugin tests.
-		 *
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$plugins_check = (array) apply_filters(
-			'the_seo_framework_detect_seo_plugins',
-			//* Add to this array to add new plugin checks.
-			array(
-
-				// Classes to detect.
-				'classes' => array(
-					'All_in_One_SEO_Pack',
-					'All_in_One_SEO_Pack_p',
-					'HeadSpace_Plugin',
-					'Platinum_SEO_Pack',
-					'wpSEO',
-					'SEO_Ultimate',
-				),
-
-				// Functions to detect.
-				'functions' => array(),
-
-				// Constants to detect.
-				'constants' => array( 'WPSEO_VERSION', ),
-			)
-		);
-
-		return $detected = $this->detect_plugin( $plugins_check );
-	}
-
-	/**
-	 * Detects if plugins outputting og:type exists
-	 *
-	 * @note isn't used in $this->og_image() Because og:image may be output multiple times.
-	 *
-	 * @uses $this->detect_plugin()
-	 *
-	 * @since 1.3.0
-	 * @return bool OG plugin detected.
-	 *
-	 * @staticvar bool $has_plugin
-	 * @since 2.2.5
-	 *
-	 * @return bool $has_plugin one of the plugins has been found.
-	 */
-	public function has_og_plugin() {
-
-		static $has_plugin = null;
-
-		if ( isset( $has_plugin ) )
-			return $has_plugin;
-
-		$plugins = array(
-			'classes' => array(
-				'WPSEO_OpenGraph',
-				'All_in_One_SEO_Pack_Opengraph'
-			),
-			'functions' => array(
-				'amt_plugin_actions'
-			)
-		);
-
-		return $has_plugin = (bool) $this->detect_plugin( $plugins );
-	}
-
-	/**
-	 * Detects if plugins outputting ld+json exists
-	 *
-	 * @uses $this->detect_plugin()
-	 *
-	 * @since 1.3.0
-	 *
-	 * @return bool LD+Json plugin detected
-	 *
-	 * @staticvar bool $has_plugin
-	 * @since 2.2.5
-	 *
-	 * @return bool $has_plugin one of the plugins has been found.
-	 */
-	public function has_json_ld_plugin() {
-
-		static $has_plugin = null;
-
-		if ( isset( $has_plugin ) )
-			return $has_plugin;
-
-		$plugins = array( 'classes' => array( 'WPSEO_JSON_LD' ) );
-
-		return $has_plugin = (bool) $this->detect_plugin( $plugins );
-	}
-
-	/**
-	 * Detecs sitemap plugins
-	 *
-	 * @uses $this->detect_plugin()
-	 *
-	 * @since 2.1.0
-	 *
-	 * @return bool Sitemap plugin detected.
-	 *
-	 * @staticvar bool $has_plugin
-	 * @since 2.2.5
-	 *
-	 * @return bool $has_plugin one of the plugins has been found.
-	 */
-	public function has_sitemap_plugin() {
-
-		static $has_plugin = null;
-
-		if ( isset( $has_plugin ) )
-			return $has_plugin;
-
-		//* Only sitemap plugins which influence sitemap.xml
-		$plugins = array(
-				'classes' => array(
-					'xml_sitemaps',
-					'All_in_One_SEO_Pack_Sitemap',
-					'SimpleWpSitemap',
-					'Incsub_SimpleSitemaps',
-					'BWP_Sitemaps',
-					'KocujSitemapPlugin',
-					'LTI_Sitemap',
-					'ps_auto_sitemap',
-					'scalible_sitemaps',
-					'Sewn_Xml_Sitemap',
-					'csitemap',
-				),
-				'functions' => array(
-					'sm_Setup',
-					'wpss_init',
-					'gglstmp_sitemapcreate',
-					'asxs_sitemap2',
-					'build_baidu_sitemap',
-					'ect_sitemap_nav',
-					'apgmxs_generate_sitemap',
-					'sm_Setup',
-					'ADSetupSitemapPlugin',
-					'ksm_generate_sitemap',
-					'studio_xml_sitemap',
-					'RegisterPluginLinks_xmlsite',
-				),
-			);
-
-		return $has_plugin = (bool) $this->detect_plugin( $plugins );
-	}
-
-	/**
-	 * Detects presence of robots.txt in root folder.
-	 *
-	 * @staticvar $has_robots
-	 *
-	 * @since 2.5.2
-	 */
-	public function has_robots_txt() {
-
-		static $has_robots = null;
-
-		if ( isset( $has_robots ) )
-			return $has_robots;
-
-		$path = get_home_path() . 'robots.txt';
-
-		$found = (bool) file_exists( $path );
-
-		return $has_robots = $found;
-	}
-
-	/**
-	 * Detects presence of sitemap.xml in root folder.
-	 *
-	 * @staticvar $has_map
-	 *
-	 * @since 2.5.2
-	 */
-	public function has_sitemap_xml() {
-
-		static $has_map = null;
-
-		if ( isset( $has_map ) )
-			return $has_map;
-
-		$path = get_home_path() . 'sitemap.xml';
-
-		$found = (bool) file_exists( $path );
-
-		return $has_map = $found;
-	}
-
-	/**
-	 * Determines if WP is above or below a version
-	 *
-	 * @since 2.2.1
-	 *
-	 * @param string $version the three part version to compare to WordPress
-	 * @param string $compare the comparing operator, default "$version >= Current WP Version"
-	 *
-	 * @staticvar array $compare_cache
-	 * @since 2.3.8
-	 *
-	 * @return bool wp version is "compare" to
-	 */
-	public function wp_version( $version = '4.3.0', $compare = '>=' ) {
-
-		static $compare_cache = array();
-
-		if ( isset( $compare_cache[$version][$compare] ) )
-			return $compare_cache[$version][$compare];
-
-		global $wp_version;
-
-		// Add a .0 if WP outputs something like 4.3 instead of 4.3.0
-		if ( 3 === strlen( $wp_version ) )
-			$wp_version = $wp_version . '.0';
-
-		//* Evade 'true-ish' values.
-		if ( empty( $compare ) )
-			$compare = '>=';
-
-		if ( version_compare( $wp_version, $version, $compare ) )
-			return $compare_cache[$version][$compare] = true;
-
-		return $compare_cache[$version][$compare] = false;
-	}
-
-	/**
-	 * Checks for current theme support.
-	 *
-	 * Also, if it's cached as true from an array, it will be cached as string as well.
-	 * This is desired.
-	 *
-	 * @NOTE will return true if ANY of the array values matches.
-	 *
-	 * @since 2.2.5
-	 *
-	 * @param string|array required $feature The features to check for.
-	 * @param bool $use_cache If set to false don't use cache.
-	 *
-	 * @staticvar array $cache
-	 *
-	 * @return bool theme support.
-	 */
-	public function detect_theme_support( $features, $use_cache = true ) {
-
-		if ( ! $use_cache ) {
-			//* Don't use cache.
-
-			if ( is_string( $features ) && ( $this->current_theme_supports( $features ) ) )
-				return true;
-
-			if ( is_array( $features ) ) {
-				foreach ( $features as $feature ) {
-					if ( $this->current_theme_supports( $feature ) ) {
-						return true;
-						break;
-					}
-				}
-			}
-
-			return false;
-		}
-
-		//* Setup cache.
-		static $cache = array();
-
-		//* Check theme support cache
-		if ( is_string( $features ) && isset( $cache[$features] ) )
-			//* Feature support check has been cached
-			return $cache[$features];
-
-		//* Check theme support array cache
-		if ( is_array( $features ) ) {
-			foreach ( $features as $feature ) {
-				if ( isset( $cache[$feature] ) && in_array( $cache[$feature], $features ) && $cache[$feature] ) {
-					// Feature is found and true
-					return $cache[$feature];
-					break;
-				}
-			}
-		}
-
-		//* Setup cache values
-		if ( is_string( $features ) ) {
-			if ( $this->current_theme_supports( $features ) ) {
-				return $cache[$features] = true;
-			} else {
-				return $cache[$features] = false;
-			}
-		} else if ( is_array( $features ) ) {
-			foreach ( $features as $feature ) {
-				if ( $this->current_theme_supports( $feature ) ) {
-					return $cache[$feature] = true;
-					break;
-				} else {
-					$cache[$feature] = false;
-				}
-			}
-			return $cache[$feature];
-		}
-
-		// No true value found so far, let's return false.
-		if ( ! isset( $cache[$features] ) )
-			$cache[$features] = false;
-
-		return $cache[$features];
-	}
-
-	/**
-	 * Checks a theme's support for a given feature
-	 *
-	 * @since 2.2.5
-	 *
-	 * @global array $_wp_theme_features
-	 *
-	 * @param string $feature the feature being checked
-	 * @return bool
-	 *
-	 * Taken from WP Core, but it now returns true on title-tag support.
-	 *
-	 * @todo rework, it's a mess.
-	 */
-	public function current_theme_supports( $feature ) {
-		global $_wp_theme_features;
-
-		//* SEO Framework Edits. {
-		if ( 'custom-header-uploads' == $feature )
-			return $this->detect_theme_support( 'custom-header', 'uploads' );
-		//* } End SEO Framework Edits.
-
-		if ( ! isset( $_wp_theme_features[$feature] ) )
-			return false;
-
-		if ( 'title-tag' == $feature ) {
-
-			//* SEO Framework Edits. {
-
-				//* The SEO Framework unique 'feature'.
-				if ( true === $_wp_theme_features[$feature] )
-					return true;
-
-				//* We might as well return false now preventing the debug_backtrace();
-				return false;
-
-			//* } End SEO Framework Edits.
-
-			// Don't confirm support unless called internally.
-			$trace = debug_backtrace();
-
-			if ( ! in_array( $trace[1]['function'], array( '_wp_render_title_tag', 'wp_title' ) ) ) {
-				return false;
-			}
-		}
-
-		// If no args passed then no extra checks need be performed
-		if ( func_num_args() <= 1 )
-			return true;
-
-		$args = array_slice( func_get_args(), 1 );
-
-		switch ( $feature ) {
-			case 'post-thumbnails':
-				// post-thumbnails can be registered for only certain content/post types by passing
-				// an array of types to add_theme_support(). If no array was passed, then
-				// any type is accepted
-				if ( true === $_wp_theme_features[$feature] )  // Registered for all types
-					return true;
-				$content_type = $args[0];
-				return in_array( $content_type, $_wp_theme_features[$feature][0] );
-
-			case 'html5':
-			case 'post-formats':
-				// specific post formats can be registered by passing an array of types to
-				// add_theme_support()
-
-				// Specific areas of HTML5 support *must* be passed via an array to add_theme_support()
-
-				$type = $args[0];
-				return in_array( $type, $_wp_theme_features[$feature][0] );
-
-			case 'custom-header':
-			case 'custom-background' :
-				// specific custom header and background capabilities can be registered by passing
-				// an array to add_theme_support()
-				$header_support = $args[0];
-				return ( isset( $_wp_theme_features[$feature][0][$header_support] ) && $_wp_theme_features[$feature][0][$header_support] );
-		}
-
-		/**
-		 * Filter whether the current theme supports a specific feature.
-		 *
-		 * The dynamic portion of the hook name, `$feature`, refers to the specific theme
-		 * feature. Possible values include 'post-formats', 'post-thumbnails', 'custom-background',
-		 * 'custom-header', 'menus', 'automatic-feed-links', 'title-tag' and 'html5'.
-		 *
-		 * @since WP 3.4.0
-		 *
-		 * @param bool   true     Whether the current theme supports the given feature. Default true.
-		 * @param array  $args    Array of arguments for the feature.
-		 * @param string $feature The theme feature.
-		 */
-		return apply_filters( "current_theme_supports-{$feature}", true, $args, $_wp_theme_features[$feature] );
-	}
-
-	/**
-	 * Add doing it wrong html code in the footer.
-	 *
-	 * @since 2.5.2.1
-	 * @staticvar bool $no_spam
-	 *
-	 * @staticvar string $sep_output
-	 * @staticvar string $display_output
-	 * @staticvar string $seplocation_output
-	 *
-	 * @param null|string $title The given title
-	 * @param null|string $sep The separator
-	 * @param null|string $seplocation Wether the blogname is left or right.
-	 * @param bool $output Wether to store cache values or echo the output in the footer.
-	 *
-	 * @return void
-	 */
-	public function tell_title_doing_it_wrong( $title = null, $sep = null, $seplocation = null, $output = true ) {
-
-		if ( true === $output ) {
-			//* Prevent error log spam.
-			static $no_spam = null;
-
-			if ( isset( $no_spam ) )
-				return;
-
-			$no_spam = true;
-		}
-
-		static $title_output = null;
-		static $sep_output = null;
-		static $seplocation_output = null;
-
-		if ( ! isset( $title_output ) || ! isset( $sep_output ) || ! isset( $seplocation_output ) ) {
-			//* Initiate caches.
-
-			if ( '' === $title )
-				$title = 'empty';
-
-			if ( '' === $sep )
-				$sep = 'empty';
-
-			if ( '' === $seplocation )
-				$seplocation = 'empty';
-
-			$title_output = ! isset( $title ) ? 'notset' : esc_attr( $title );
-			$sep_output = ! isset( $sep ) ? 'notset' : esc_attr( $sep );
-			$seplocation_output = ! isset( $seplocation ) ? 'notset' : esc_attr( $seplocation );
-		}
-
-		if ( true === $output )
-			echo '<!-- Title diw: "' . $title_output . '" : "' . $sep_output . '" : "' . $seplocation_output . '" -->' . "\r\n";
-
-		return;
-	}
-
-	/**
-	 * Detect WPMUdev Domain Mapping plugin.
-	 *
-	 * @since 2.3.0
-	 * @staticvar bool $active
-	 *
-	 * @return bool false if Domain Mapping isn't active
-	 */
-	public function is_domainmapping_active() {
-
-		static $active = null;
-
-		if ( isset( $active ) )
-			return $active;
-
-		/**
-		 * Now uses $this->detect_plugin()
-		 *
-		 * @since 2.3.1
-		 */
-		if ( $this->detect_plugin( array( 'classes' => array( 'domain_map' ) ) ) ) {
-			return $active = true;
-		} else {
-			return $active = false;
-		}
-	}
-
-	/**
-	 * Detect Donncha Domain Mapping plugin.
-	 *
-	 * @since 2.4.0
-	 * @staticvar bool $active
-	 *
-	 * @return bool false if Domain Mapping isn't active
-	 */
-	public function is_donncha_domainmapping_active() {
-
-		static $active = null;
-
-		if ( isset( $active ) )
-			return $active;
-
-		/**
-		 * Now uses $this->detect_plugin()
-		 *
-		 * @since 2.3.1
-		 */
-		if ( $this->detect_plugin( array( 'functions' => array( 'redirect_to_mapped_domain' ) ) ) ) {
-			return $active = true;
-		} else {
-			return $active = false;
-		}
-	}
-
-	/**
-	 * Detect if the current screen type is a page or taxonomy.
-	 *
-	 * @param string $type the Screen type
-	 * @staticvar array $is_page
-	 *
-	 * @since 2.3.1
-	 */
-	public function is_post_type_page( $type ) {
-
-		static $is_page = array();
-
-		if ( isset( $is_page[$type] ) )
-			return $is_page[$type];
-
-		$post_page = (array) get_post_types( array( 'public' => true ) );
-
-		foreach ( $post_page as $screen ) {
-			if ( $type == $screen ) {
-				return $is_page[$type] = true;
-				break;
-			}
-		}
-
-		return $is_page[$type] = false;
-	}
-
-	/**
-	 * Get the real page ID, also depending on CPT.
-	 *
-	 * @param bool $use_cache Wether to use the cache or not.
-	 *
-	 * @staticvar int $id the ID.
-	 *
-	 * @since 2.5.0
-	 */
-	public function get_the_real_ID( $use_cache = true ) {
-
-		$is_admin = is_admin();
-
-		//* Never use cache in admin. Only causes bugs.
-		$use_cache = $is_admin ? false : $use_cache;
-
-		if ( $use_cache ) {
-			static $id = null;
-
-			if ( isset( $id ) )
-				return $id;
-		}
-
-		if ( ! $is_admin )
-			$id = $this->check_the_real_ID();
-
-		if ( ! isset( $id ) || empty( $id ) ) {
-			$id = get_queried_object_id();
-
-			if ( empty( $id ) )
-				$id = get_the_ID();
-		}
-
-		return $id;
-	}
-
-	/**
-	 * Get the real ID from plugins.
-	 *
-	 * Only works in front-end as there's no need to check for inconsistent
-	 * functions for the current ID in the admin.
-	 *
-	 * @since 2.5.0
-	 *
-	 * Applies filters the_seo_framework_real_id : The Real ID for plugins on front-end.
-	 *
-	 * @staticvar int $cached_id The cached ID.
-	 *
-	 * @return int|empty the ID.
-	 */
-	public function check_the_real_ID() {
-
-		static $cached_id = null;
-
-		if ( isset( $cached_id ) )
-			return $cached_id;
-
-		$id = '';
-
-		if ( $this->is_wc_shop() ) {
-			//* WooCommerce Shop
-			$id = get_option( 'woocommerce_shop_page_id' );
-		} else if ( function_exists( 'is_anspress' ) && is_anspress() ) {
-			//* Get AnsPress Question ID.
-			if ( function_exists( 'get_question_id' ) )
-				$id = get_question_id();
-		}
-
-		$cached_id = (int) apply_filters( 'the_seo_framework_real_id', $id );
-
-		return $cached_id;
-	}
-
-	/**
-	 * Detect the blog page.
-	 *
-	 * @param int $id the Page ID.
-	 *
-	 * @since 2.3.4
-	 *
-	 * @staticvar bool $is_blog_page
-	 * @staticvar bool $pof
-	 *
-	 * @return bool true if is blog page. Always false if blog page is homepage.
-	 */
-	public function is_blog_page( $id = '' ) {
-
-		if ( '' === $id )
-			$o_id = $this->get_the_real_ID();
-
-		static $is_blog_page = array();
-
-		if ( isset( $is_blog_page[$id] ) )
-			return $is_blog_page[$id];
-
-		$pfp = get_option( 'page_for_posts' );
-
-		if ( $pfp != 0 ) {
-
-			static $pof = null;
-
-			if ( ! isset( $pof ) )
-				$pof = 'page' === get_option( 'show_on_front' ) ? true : false;
-
-			if ( $pof && ! is_front_page() && ! is_archive() ) {
-				if ( isset( $o_id ) ) {
-					if ( $o_id == $pfp )
-						return $is_blog_page[$id] = true;
-				} else {
-					if ( $id == $pfp )
-						return $is_blog_page[$id] = true;
-
-					$o_id = $this->get_the_real_ID();
-
-					if ( $o_id == $pfp )
-						return $is_blog_page[$id] = true;
-				}
-			}
-		}
-
-		return $is_blog_page[$id] = false;
-	}
-
-	/**
-	 * Detect the static front page.
-	 *
-	 * @param int $id the Page ID.
-	 *
-	 * @since 2.3.9
-	 *
-	 * @staticvar array $is_frontpage
-	 * @since 2.3.8
-	 *
-	 * @return bool true if is blog page. Always false if blog page is homepage.
-	 * False early when false as ID is entered.
-	 */
-	public function is_static_frontpage( $id = '' ) {
-
-		//* Oops, passed a false ID. No need to process.
-		if ( false === $id )
-			return false;
-
-		if ( '' === $id )
-			$o_id = $this->get_the_real_ID();
-
-		static $is_frontpage = array();
-
-		if ( isset( $is_frontpage[$id] ) )
-			return $is_frontpage[$id];
-
-		$sof = (string) get_option( 'show_on_front' );
-
-		if ( $sof === 'page' ) {
-			$pof = (int) get_option( 'page_on_front' );
-
-			if ( isset( $o_id ) ) {
-				if ( $o_id === $pof )
-					return $is_frontpage[$id] = true;
-			} else {
-
-				if ( $id == $pof )
-					return $is_frontpage[$id] = true;
-
-				$o_id = $this->get_the_real_ID();
-
-				if ( $o_id == $pof )
-					return $is_frontpage[$id] = true;
-			}
-		}
-
-		return $is_frontpage[$id] = false;
-	}
-
-	/**
-	 * Detect WordPress language.
-	 * Considers en_UK, en_US, etc.
-	 *
-	 * @param string $str Required, the locale.
-	 * @param bool $use_cache Set to false to bypass the cache.
-	 *
-	 * @staticvar array $locale
-	 * @staticvar string $get_locale
-	 *
-	 * @since 2.3.8
-	 */
-	public function is_locale( $str, $use_cache = true ) {
-
-		if ( true !== $use_cache )
-			return (bool) strpos( get_locale(), $str );
-
-		static $locale = array();
-
-		if ( isset( $locale[$str] ) )
-			return $locale[$str];
-
-		static $get_locale = null;
-
-		if ( ! isset( $get_locale ) )
-			$get_locale = get_locale();
-
-		return $locale[$str] = strpos( $get_locale, $str ) !== false ? true : false;
-	}
-
-	/**
-	 * Determines if the post type is compatible with The SEO Framework inpost metabox.
-	 *
-	 * @since 2.3.5
-	 *
-	 * @return bool True if post type is supported.
-	 */
-	public function post_type_supports_inpost( $post_type ) {
-
-		if ( isset( $post_type ) ) {
-			$supports = (array) apply_filters( 'the_seo_framework_custom_post_type_support',
-				array(
-					'title',
-					'editor',
-				//	'custom-fields',
-				)
-			);
-
-			foreach ( $supports as $support ) {
-				if ( ! post_type_supports( $post_type, $support ) ) {
-					return false;
-					break;
-				}
-			}
-
-			return true;
-		}
-
-		return false;
-	}
-
-	/**
-	 * Check if post type supports The SEO Framework.
-	 * Doesn't work on admin_init.
-	 *
-	 * @since 2.3.9
-	 *
-	 * @param string $post_type The current post type.
-	 *
-	 * @staticvar string $post_type
-	 * @staticvar bool $supported
-	 * @staticvar array $post_page
-	 *
-	 * @return bool true of post type is supported.
-	 */
-	public function post_type_supports_custom_seo( $post_type = '' ) {
-
-		if ( '' === $post_type ) {
-
-			static $post_type = null;
-
-			//* Detect post type if empty or not set.
-			if ( ! isset( $post_type ) || empty( $post_type ) ) {
-				global $current_screen;
-
-				static $post_page = null;
-
-				if ( ! isset( $post_page ) )
-					$post_page = (array) get_post_types( array( 'public' => true ) );
-
-				//* Smart var. This elemenates the need for a foreach loop, reducing resource usage.
-				$post_type = isset( $post_page[ $current_screen->post_type ] ) ? $current_screen->post_type : '';
-			}
-
-			//* No post type has been found.
-			if ( empty( $post_type ) )
-				return false;
-		}
-
-		static $supported = array();
-
-		if ( isset( $supported[$post_type] ) )
-			return $supported[$post_type];
-
-		/**
-		 * We now support all posts that allow a title, content editor and excerpt.
-		 * To ease the flow, we have our basic list to check first.
-		 *
-		 * @since 2.3.5
-		 */
-		if ( post_type_supports( $post_type, 'autodescription-meta' ) )
-			return $supported[$post_type] = true;
-
-		if ( $this->post_type_supports_inpost( $post_type ) )
-			return $supported[$post_type] = true;
-
-		return $supported[$post_type] = false;
-	}
-
-	/**
-	 * Is Ulimate Member user page.
-	 * Check for function accessibility: um_user, um_is_core_page, um_get_requested_user
-	 *
-	 * @staticvar bool $cache
-	 * @uses $this->can_i_use()
-	 *
-	 * @since 2.5.2
-	 */
-	public function is_ultimate_member_user_page() {
-
-		static $cache = null;
-
-		if ( isset( $cache ) )
-			return $cache;
-
-		$caniuse = (bool) $this->can_i_use( array( 'functions' => array( 'um_user', 'um_is_core_page', 'um_get_requested_user' ) ), false );
-
-		return $cache = $caniuse;
-	}
-
-	/**
-	 * Check for shop page.
-	 *
-	 * @staticvar bool $cache
-	 *
-	 * @since 2.5.2
-	 */
-	public function is_wc_shop() {
-
-		static $cache = null;
-
-		if ( isset( $cache ) )
-			return $cache;
-
-		//* Can't check in admin.
-		if ( ! is_admin() && function_exists( 'is_shop' ) && is_shop() )
-			return $cache = true;
-
-		return $cache = false;
-	}
-
-	/**
-	 * Replaces default WordPress is_singular.
-	 *
-	 * @uses $this->is_blog_page()
-	 * @uses $this->is_wc_shop()
-	 * @uses is_single()
-	 * @uses is_page()
-	 * @uses is_attachment()
-	 *
-	 * @param int $id the Page ID.
-	 *
-	 * @staticvar bool $cache
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return bool Post Type is singular
-	 */
-	public function is_singular( $id = 0 ) {
-
-		if ( 0 === $id )
-			$id = $this->get_the_real_ID();
-
-		//* WP_Query functions require loop, do alternative check.
-		if ( is_admin() )
-			return $this->is_singular_admin( $id );
-
-		$cache = array();
-
-		if ( isset( $cache[$id] ) )
-			return $cache[$id];
-
-		if ( is_single( $id ) || is_page( $id ) || is_attachment( $id ) || $this->is_blog_page( $id ) || $this->is_wc_shop() )
-			return $cache[$id] = true;
-
-		return $cache[$id] = false;
-	}
-
-	/**
-	 * Extends default WordPress is_singular and made available in admin.
-	 *
-	 * @staticvar bool $cache
-	 *
-	 * @since 2.5.2
-	 *
-	 * @global object $current_screen
-	 *
-	 * @return bool Post Type is singular
-	 */
-	public function is_singular_admin() {
-
-		$cache = null;
-
-		if ( isset( $cache ) )
-			return $cache;
-
-		global $current_screen;
-
-		if ( isset( $current_screen->base ) && ( 'edit' === $current_screen->base || 'post' === $current_screen->base ) )
-			return $cache = true;
-
-		return $cache = false;
-	}
-
-	/**
-	 * Calculates wether the theme is outputting the title correctly.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @staticvar bool $dir
-	 *
-	 * @return bool True theme is doing it right.
-	 */
-	public function theme_title_doing_it_right() {
-
-		static $dir = null;
-
-		if ( isset( $dir ) )
-			return $dir;
-
-		$transient = get_transient( $this->theme_doing_it_right_transient );
-
-		if ( '0' === $transient )
-			return $dir = false;
-
-		/**
-		 * Transient has not been set yet (false)
-		 * or the theme is doing it right ('1').
-		 */
-		return $dir = true;
-	}
-
-	/**
-	 * The amount of pages.
-	 * Fetches global $page through Query Var.
-	 *
-	 * @staticvar int $page
-	 * @since 2.5.2.4
-	 *
-	 * @return int $page
-	 */
-	public function page() {
-
-		static $page = null;
-
-		if ( isset( $page ) )
-			return $page;
-
-		$page = get_query_var( 'page' );
-
-		return $page = $page ? (int) $page : 1;
-	}
-
-	/**
-	 * The number of the current page.
-	 * Fetches global $paged through Query Var. Determines
-	 *
-	 * @staticvar int $paged
-	 * @since 2.5.2.4
-	 *
-	 * @return int $paged
-	 */
-	public function paged() {
-
-		static $paged = null;
-
-		if ( isset( $paged ) )
-			return $paged;
-
-		$paged = get_query_var( 'paged' );
-
-		return $paged = $paged ? (int) $paged : 1;
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Detect
+ *
+ * Detects other plugins and themes
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_Detect extends AutoDescription_Render {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Detect active plugin by constant, class or function existence.
+	 *
+	 * @since 1.3.0
+	 *
+	 * @param array $plugins Array of array for constants, classes and / or functions to check for plugin existence.
+	 *
+	 * @return boolean True if plugin exists or false if plugin constant, class or function not detected.
+	 */
+	public function detect_plugin( $plugins ) {
+
+		//* Check for classes
+		if ( isset( $plugins['classes'] ) ) {
+			foreach ( $plugins['classes'] as $name ) {
+				if ( class_exists( $name ) ) {
+					return true;
+					break;
+				}
+			}
+		}
+
+		//* Check for functions
+		if ( isset( $plugins['functions'] ) ) {
+			foreach ( $plugins['functions'] as $name ) {
+				if ( function_exists( $name ) ) {
+					return true;
+					break;
+				}
+			}
+		}
+
+		//* Check for constants
+		if ( isset( $plugins['constants'] ) ) {
+			foreach ( $plugins['constants'] as $name ) {
+				if ( defined( $name ) ) {
+					return true;
+					break;
+				}
+			}
+		}
+
+		//* No class, function or constant found to exist
+		return false;
+	}
+
+	/**
+	 * Detect if you can use the given constants, functions and classes.
+	 * All must be available to return true.
+	 *
+	 * @param array $plugins Array of array for constants, classes and / or functions to check for plugin existence.
+	 * @param bool $use_cache Bypasses cache if false
+	 *
+	 * @staticvar array $cache
+	 * @uses $this->detect_plugin_multi()
+	 *
+	 * @since 2.5.2
+	 */
+	public function can_i_use( array $plugins = array(), $use_cache = true ) {
+
+		if ( ! $use_cache )
+			return $this->detect_plugin_multi( $plugins );
+
+		static $cache = array();
+
+		$mapped = array();
+
+		//* Prepare multidimensional array for cache.
+		foreach ( $plugins as $key => $func ) {
+			if ( ! is_array( $func ) )
+				return false;
+
+			//* Sort alphanumeric by value, put values back after sorting.
+			$func = array_flip( $func );
+			ksort( $func );
+			$func = array_flip( $func );
+
+			//* Glue with underscore and space for debugging purposes.
+			$mapped[$key] = $key . '_' . implode( ' ', $func );
+		}
+
+		ksort( $mapped );
+
+		//* Glue with dash instead of underscore for debugging purposes.
+		$plugins_cache = implode( '-', $mapped );
+
+		if ( isset( $cache[$plugins_cache] ) )
+			return $cache[$plugins_cache];
+
+		return $cache[$plugins_cache] = $this->detect_plugin_multi( $plugins );
+	}
+
+	/**
+	 * Detect active plugin by constant, class or function existence.
+	 * All parameters must match and return true.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param array $plugins Array of array for constants, classes and / or functions to check for plugin existence.
+	 *
+	 * @return boolean True if ALL functions classes and constants exists or false if plugin constant, class or function not detected.
+	 */
+	public function detect_plugin_multi( array $plugins ) {
+
+		//* Check for classes
+		if ( isset( $plugins['classes'] ) ) {
+			foreach ( $plugins['classes'] as $name ) {
+				if ( ! class_exists( $name ) ) {
+					return false;
+					break;
+				}
+			}
+		}
+
+		//* Check for functions
+		if ( isset( $plugins['functions'] ) ) {
+			foreach ( $plugins['functions'] as $name ) {
+				if ( ! function_exists( $name ) ) {
+					return false;
+					break;
+				}
+			}
+		}
+
+		//* Check for constants
+		if ( isset( $plugins['constants'] ) ) {
+			foreach ( $plugins['constants'] as $name ) {
+				if ( ! defined( $name ) ) {
+					return false;
+					break;
+				}
+			}
+		}
+
+		//* All classes, functions and constant have been found to exist
+		return true;
+	}
+
+	/**
+	 * Checks if the (parent) theme name is loaded.
+	 *
+	 * @NOTE will return true if ANY of the array values matches.
+	 *
+	 * @param string|array $themes the current theme name
+	 * @param bool $use_cache If set to false don't use cache.
+	 *
+	 * @since 2.1.0
+	 *
+	 * @staticvar array $themes_cache
+	 * @since 2.2.4
+	 *
+	 * @return bool is theme active.
+	 */
+	public function is_theme( $themes = null, $use_cache = true ) {
+
+		if ( ! isset( $themes ) )
+			return false;
+
+		if ( ! $use_cache ) {
+			//* Don't use cache.
+
+			$wp_get_theme = wp_get_theme();
+
+			$theme_parent = strtolower( $wp_get_theme->get('Template') );
+			$theme_name = strtolower( $wp_get_theme->get('Name') );
+
+			if ( is_string( $themes ) ) {
+				$themes = strtolower( $themes );
+				if ( $themes === $theme_parent || $themes === $theme_name )
+					return true;
+			} else if ( is_array( $themes ) ) {
+				foreach ( $themes as $theme ) {
+					$theme = strtolower( $theme );
+					if ( $theme === $theme_parent || $theme === $theme_name ) {
+						return true;
+						break;
+					}
+				}
+			}
+
+			return false;
+		}
+
+		static $themes_cache = array();
+
+		//* Check theme check cache
+		if ( is_string( $themes ) && isset( $themes_cache[$themes] ) ) {
+			$themes = strtolower( $themes );
+			//* Theme check has been cached
+			return $themes_cache[$themes];
+		}
+
+		if ( is_array( $themes ) ) {
+			foreach ( $themes as $theme ) {
+				$theme = strtolower( $theme );
+				if ( isset( $themes_cache[$theme] ) && in_array( $themes_cache[$theme], $themes ) && $themes_cache[$theme] ) {
+					// Feature is found and true
+					return $themes_cache[$theme];
+					break;
+				}
+			}
+		}
+
+		$wp_get_theme = wp_get_theme();
+
+		//* Fetch both themes if child theme is present.
+		$theme_parent = strtolower( $wp_get_theme->get('Template') );
+		$theme_name = strtolower( $wp_get_theme->get('Name') );
+
+		if ( is_string( $themes ) ) {
+			$themes = strtolower( $themes );
+			if ( $themes === $theme_parent || $themes === $theme_name )
+				$themes_cache[$themes] = true;
+		} else if ( is_array( $themes ) ) {
+			foreach ( $themes as $theme ) {
+				$theme = strtolower( $theme );
+				if ( $theme === $theme_parent || $theme === $theme_name ) {
+					return $themes_cache[$theme] = true;
+					break;
+				} else {
+					$themes_cache[$theme] = false;
+				}
+			}
+			return $themes_cache[$theme];
+		}
+
+		//* The theme isn't active
+		if ( is_string( $themes ) && ! isset( $themes_cache[$themes] ) )
+			$themes_cache[$themes] = false;
+
+		return $themes_cache[$themes];
+	}
+
+	/**
+	 * SEO plugin detection
+	 *
+	 * @since 1.3.0
+	 *
+	 * @staticvar bool $detected
+	 * @since 2.2.5
+	 *
+	 * @return bool SEO plugin detected.
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	public function detect_seo_plugins() {
+
+		static $detected = null;
+
+		if ( isset( $detected ) )
+			return $detected;
+
+		/**
+		 * Use this filter to adjust plugin tests.
+		 */
+		$plugins_check = (array) apply_filters(
+			'the_seo_framework_detect_seo_plugins',
+			//* Add to this array to add new plugin checks.
+			array(
+				// Classes to detect.
+				'classes' => array(
+					'gregsHighPerformanceSEO'
+				),
+
+				// Functions to detect.
+				'functions' => array(),
+
+				// Constants to detect.
+				'constants' => array(
+					'AIOSEOPPRO',		// All in one SEO + Pro
+					'AMT_PLUGIN_FILE',	// Add Meta Tags
+					'WPSEO_FILE',		// Yoast SEO
+					'SQ_VERSION',		// SEO by Squirrly
+					'SU_PLUGIN_NAME',	// SEO Ultimate
+				),
+			)
+		);
+
+		return $detected = $this->detect_plugin( $plugins_check );
+	}
+
+	/**
+	 * Detects if plugins outputting og:type exists
+	 *
+	 * @note isn't used in $this->og_image() Because og:image may be output multiple times.
+	 *
+	 * @uses $this->detect_plugin()
+	 *
+	 * @since 1.3.0
+	 * @return bool OG plugin detected.
+	 *
+	 * @staticvar bool $has_plugin
+	 * @since 2.2.5
+	 *
+	 * @return bool $has_plugin one of the plugins has been found.
+	 */
+	public function has_og_plugin() {
+
+		static $has_plugin = null;
+
+		if ( isset( $has_plugin ) )
+			return $has_plugin;
+
+		$plugins = array(
+			'classes' => array(
+				'WPSEO_OpenGraph',
+				'All_in_One_SEO_Pack_Opengraph'
+			),
+			'functions' => array(
+				'amt_plugin_actions'
+			),
+			'constants' => array(
+			),
+		);
+
+		return $has_plugin = $this->detect_plugin( $plugins );
+	}
+
+	/**
+	 * Detects if plugins outputting ld+json exists
+	 *
+	 * @uses $this->detect_plugin()
+	 *
+	 * @since 1.3.0
+	 *
+	 * @return bool LD+Json plugin detected
+	 *
+	 * @staticvar bool $has_plugin
+	 * @since 2.2.5
+	 *
+	 * @return bool $has_plugin one of the plugins has been found.
+	 */
+	public function has_json_ld_plugin() {
+
+		static $has_plugin = null;
+
+		if ( isset( $has_plugin ) )
+			return $has_plugin;
+
+		$plugins = array( 'classes' => array( 'WPSEO_JSON_LD' ) );
+
+		return $has_plugin = $this->detect_plugin( $plugins );
+	}
+
+	/**
+	 * Detecs sitemap plugins
+	 *
+	 * @uses $this->detect_plugin()
+	 *
+	 * @since 2.1.0
+	 *
+	 * @return bool Sitemap plugin detected.
+	 *
+	 * @staticvar bool $has_plugin
+	 * @since 2.2.5
+	 *
+	 * @todo Try to use constants if possible.
+	 * @priority low 2.8.x
+	 * @todo List plugin names
+	 * @priority low
+	 *
+	 * @return bool $has_plugin one of the plugins has been found.
+	 */
+	public function has_sitemap_plugin() {
+
+		static $has_plugin = null;
+
+		if ( isset( $has_plugin ) )
+			return $has_plugin;
+
+		//* Only sitemap plugins which influence sitemap.xml
+		$plugins = array(
+				'classes' => array(
+					'xml_sitemaps',
+					'All_in_One_SEO_Pack_Sitemap',	// All in One SEO Sitemap
+					'SimpleWpSitemap',
+					'BWP_Sitemaps',
+					'KocujSitemapPlugin',
+					'LTI_Sitemap',
+					'ps_auto_sitemap',
+					'scalible_sitemaps',
+					'Sewn_Xml_Sitemap',
+					'csitemap',
+				),
+				'functions' => array(
+					'jetpack_sitemap_initialize', // Jetpack
+					'sm_Setup',
+					'wpss_init',
+					'gglstmp_sitemapcreate',
+					'asxs_sitemap2',
+					'build_baidu_sitemap',
+					'ect_sitemap_nav',
+					'apgmxs_generate_sitemap',
+					'ADSetupSitemapPlugin',
+					'ksm_generate_sitemap',
+					'studio_xml_sitemap',
+					'RegisterPluginLinks_xmlsite',
+				),
+				'constants' => array(
+					'SIMPLE_SITEMAPS_USE_CACHE'	// WPMUdev Simple Sitemaps
+				),
+			);
+
+		return $has_plugin = $this->detect_plugin( $plugins );
+	}
+
+	/**
+	 * Whether able to add a line within robots based by plugin detection, or sitemap output option.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool True when no conflicting plugins are detected or when The SEO Framework's Sitemaps are output.
+	 */
+	public function can_do_sitemap_robots() {
+
+		$plugins = array(
+			'functions' => array(
+				'jetpack_sitemap_initialize' // Jetpack
+			),
+		);
+
+		if ( $this->detect_plugin( $plugins ) )
+			return false;
+
+		if ( $this->is_option_checked( 'sitemaps_output' ) )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Detects presence of robots.txt in root folder.
+	 *
+	 * @staticvar $has_robots
+	 *
+	 * @since 2.5.2
+	 */
+	public function has_robots_txt() {
+
+		static $has_robots = null;
+
+		if ( isset( $has_robots ) )
+			return $has_robots;
+
+		$path = get_home_path() . 'robots.txt';
+
+		return $has_robots = file_exists( $path );
+	}
+
+	/**
+	 * Detects presence of sitemap.xml in root folder.
+	 *
+	 * @staticvar $has_map
+	 *
+	 * @since 2.5.2
+	 */
+	public function has_sitemap_xml() {
+
+		static $has_map = null;
+
+		if ( isset( $has_map ) )
+			return $has_map;
+
+		$path = get_home_path() . 'sitemap.xml';
+
+		return $has_map = file_exists( $path );
+	}
+
+	/**
+	 * Determines if WP is above or below a version
+	 *
+	 * @since 2.2.1
+	 *
+	 * @param string $version the three part version to compare to WordPress
+	 * @param string $compare the comparing operator, default "$version >= Current WP Version"
+	 *
+	 * @staticvar array $cache
+	 * @since 2.3.8
+	 *
+	 * @return bool wp version is "compare" to
+	 */
+	public function wp_version( $version = '4.3.0', $compare = '>=' ) {
+
+		static $cache = array();
+
+		if ( empty( $compare ) )
+			$compare = '>=';
+
+		if ( isset( $cache[$version][$compare] ) )
+			return $cache[$version][$compare];
+
+		global $wp_version;
+
+		// Add a .0 if WP outputs something like 4.3 instead of 4.3.0
+		if ( 3 === strlen( $wp_version ) )
+			$wp_version = $wp_version . '.0';
+
+		if ( version_compare( $wp_version, $version, $compare ) )
+			return $cache[$version][$compare] = true;
+
+		return $cache[$version][$compare] = false;
+	}
+
+	/**
+	 * Checks for current theme support.
+	 *
+	 * Also, if it's cached as true from an array, it will be cached as string as well.
+	 * This is desired.
+	 *
+	 * @NOTE will return true if ANY of the array values matches.
+	 *
+	 * @since 2.2.5
+	 *
+	 * @param string|array required $feature The features to check for.
+	 * @param bool $use_cache If set to false don't use cache.
+	 *
+	 * @staticvar array $cache
+	 *
+	 * @return bool theme support.
+	 */
+	public function detect_theme_support( $features, $use_cache = true ) {
+
+		if ( ! $use_cache ) {
+			//* Don't use cache.
+
+			if ( is_string( $features ) && ( current_theme_supports( $features ) ) )
+				return true;
+
+			if ( is_array( $features ) ) {
+				foreach ( $features as $feature ) {
+					if ( current_theme_supports( $feature ) ) {
+						return true;
+						break;
+					}
+				}
+			}
+
+			return false;
+		}
+
+		//* Setup cache.
+		static $cache = array();
+
+		//* Check theme support cache
+		if ( is_string( $features ) && isset( $cache[$features] ) )
+			//* Feature support check has been cached
+			return $cache[$features];
+
+		//* Check theme support array cache
+		if ( is_array( $features ) ) {
+			foreach ( $features as $feature ) {
+				if ( isset( $cache[$feature] ) && in_array( $cache[$feature], $features ) && $cache[$feature] ) {
+					// Feature is found and true
+					return $cache[$feature];
+					break;
+				}
+			}
+		}
+
+		//* Setup cache values
+		if ( is_string( $features ) ) {
+			if ( current_theme_supports( $features ) ) {
+				return $cache[$features] = true;
+			} else {
+				return $cache[$features] = false;
+			}
+		} else if ( is_array( $features ) ) {
+			foreach ( $features as $feature ) {
+				if ( current_theme_supports( $feature ) ) {
+					return $cache[$feature] = true;
+					break;
+				} else {
+					$cache[$feature] = false;
+				}
+			}
+			return $cache[$feature];
+		}
+
+		// No true value found so far, let's return false.
+		if ( ! isset( $cache[$features] ) )
+			$cache[$features] = false;
+
+		return $cache[$features];
+	}
+
+	/**
+	 * Checks a theme's support for title-tag.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $supports
+	 *
+	 * @global array $_wp_theme_features
+	 *
+	 * @return bool
+	 */
+	public function current_theme_supports_title_tag() {
+
+		static $supports = null;
+
+		if ( isset( $supports ) )
+			return $supports;
+
+		global $_wp_theme_features;
+
+		if ( isset( $_wp_theme_features['title-tag'] ) && true === $_wp_theme_features['title-tag'] )
+			return $supports = true;
+
+		return $supports = false;
+	}
+
+	/**
+	 * Add doing it wrong html code in the footer.
+	 *
+	 * @since 2.5.2.1
+	 * @staticvar bool $no_spam
+	 *
+	 * @staticvar string $sep_output
+	 * @staticvar string $display_output
+	 * @staticvar string $seplocation_output
+	 *
+	 * @param null|string $title The given title
+	 * @param null|string $sep The separator
+	 * @param null|string $seplocation Whether the blogname is left or right.
+	 * @param bool $output Whether to store cache values or echo the output in the footer.
+	 *
+	 * @return void
+	 */
+	public function tell_title_doing_it_wrong( $title = null, $sep = null, $seplocation = null, $output = true ) {
+
+		if ( $output ) {
+			//* Prevent error log spam.
+			static $no_spam = null;
+
+			if ( isset( $no_spam ) )
+				return;
+
+			$no_spam = true;
+		}
+
+		static $title_output = null;
+		static $sep_output = null;
+		static $seplocation_output = null;
+
+		if ( ! isset( $title_output ) || ! isset( $sep_output ) || ! isset( $seplocation_output ) ) {
+			//* Initiate caches, set up variables.
+
+			if ( '' === $title )
+				$title = 'empty';
+
+			if ( '' === $sep )
+				$sep = 'empty';
+
+			if ( '' === $seplocation )
+				$seplocation = 'empty';
+
+			$title_output = ! isset( $title ) ? 'notset' : esc_attr( $title );
+			$sep_output = ! isset( $sep ) ? 'notset' : esc_attr( $sep );
+			$seplocation_output = ! isset( $seplocation ) ? 'notset' : esc_attr( $seplocation );
+		}
+
+		//* Echo the HTML comment.
+		if ( $output )
+			echo '<!-- Title diw: "' . $title_output . '" : "' . $sep_output . '" : "' . $seplocation_output . '" -->' . "\r\n";
+
+		return;
+	}
+
+	/**
+	 * Detect WPMUdev Domain Mapping plugin.
+	 *
+	 * @since 2.3.0
+	 * @staticvar bool $active
+	 *
+	 * @return bool
+	 */
+	public function is_domainmapping_active() {
+
+		static $active = null;
+
+		if ( isset( $active ) )
+			return $active;
+
+		return $active = $this->detect_plugin( array( 'classes' => array( 'domain_map' ) ) );
+	}
+
+	/**
+	 * Detect Donncha Domain Mapping plugin.
+	 *
+	 * @since 2.4.0
+	 * @staticvar bool $active
+	 *
+	 * @return bool
+	 */
+	public function is_donncha_domainmapping_active() {
+
+		static $active = null;
+
+		if ( isset( $active ) )
+			return $active;
+
+		return $active = $this->detect_plugin( array( 'functions' => array( 'redirect_to_mapped_domain' ) ) );
+	}
+
+	/**
+	 * Detect WPML plugin.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $active
+	 *
+	 * @return bool
+	 */
+	public function is_wpml_active() {
+
+		static $active = null;
+
+		if ( isset( $active ) )
+			return $active;
+
+		return $active = $this->detect_plugin( array( 'constants' => array( 'ICL_LANGUAGE_CODE' ) ) );
+	}
+
+	/**
+	 * Detect qTranslate X plugin.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $active
+	 *
+	 * @return bool
+	 */
+	public function is_qtranslate_active() {
+
+		static $active = null;
+
+		if ( isset( $active ) )
+			return $active;
+
+		return $active = $this->detect_plugin( array( 'constants' => array( 'QTX_VERSION' ) ) );
+	}
+
+	/**
+	 * Detect if the current screen type is a page or taxonomy.
+	 *
+	 * @param string $type the Screen type
+	 * @staticvar array $is_page
+	 *
+	 * @since 2.3.1
+	 *
+	 * @return bool true if post type is a page or post
+	 */
+	public function is_post_type_page( $type ) {
+
+		static $is_page = array();
+
+		if ( isset( $is_page[$type] ) )
+			return $is_page[$type];
+
+		$post_page = (array) get_post_types( array( 'public' => true ) );
+
+		foreach ( $post_page as $screen ) {
+			if ( $type === $screen ) {
+				return $is_page[$type] = true;
+				break;
+			}
+		}
+
+		return $is_page[$type] = false;
+	}
+
+	/**
+	 * Detect WordPress language.
+	 * Considers en_UK, en_US, en, etc.
+	 *
+	 * @param string $locale Required, the locale.
+	 * @param bool $use_cache Set to false to bypass the cache.
+	 *
+	 * @staticvar array $locale
+	 * @staticvar string $get_locale
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool Whether the locale is in the WordPress locale.
+	 */
+	public function check_wp_locale( $locale = '', $use_cache = true ) {
+
+		if ( empty( $locale ) )
+			return false;
+
+		if ( true !== $use_cache )
+			return (bool) strpos( get_locale(), $locale );
+
+		static $cache = array();
+
+		if ( isset( $cache[$locale] ) )
+			return $cache[$locale];
+
+		static $get_locale = null;
+
+		if ( ! isset( $get_locale ) )
+			$get_locale = get_locale();
+
+		return $cache[$locale] = false !== strpos( $get_locale, $locale ) ? true : false;
+	}
+
+	/**
+	 * Determines if the post type is compatible with The SEO Framework inpost metabox.
+	 *
+	 * @since 2.3.5
+	 *
+	 * @return bool True if post type is supported.
+	 */
+	public function post_type_supports_inpost( $post_type ) {
+
+		if ( isset( $post_type ) ) {
+			$supports = (array) apply_filters( 'the_seo_framework_custom_post_type_support',
+				array(
+					'title',
+					'editor',
+				//	'custom-fields',
+				)
+			);
+
+			foreach ( $supports as $support ) {
+				if ( ! post_type_supports( $post_type, $support ) ) {
+					return false;
+					break;
+				}
+			}
+
+			return true;
+		}
+
+		return false;
+	}
+
+	/**
+	 * Check if post type supports The SEO Framework.
+	 * Doesn't work on admin_init.
+	 *
+	 * @since 2.3.9
+	 *
+	 * @param string $post_type The current post type.
+	 *
+	 * @staticvar string $post_type
+	 * @staticvar bool $supported
+	 * @staticvar array $post_page
+	 *
+	 * @return bool true of post type is supported.
+	 */
+	public function post_type_supports_custom_seo( $post_type = '' ) {
+
+		if ( '' === $post_type ) {
+			$post_type = $this->get_current_post_type();
+		}
+
+		if ( empty( $post_type ) )
+			return false;
+
+		static $supported = array();
+
+		if ( isset( $supported[$post_type] ) )
+			return $supported[$post_type];
+
+		/**
+		 * We now support all posts that allow a title, content editor and excerpt.
+		 * To ease the flow, we have our basic list to check first.
+		 *
+		 * @since 2.3.5
+		 */
+		if ( post_type_supports( $post_type, 'autodescription-meta' ) || $this->post_type_supports_inpost( $post_type ) )
+			return $supported[$post_type] = true;
+
+		return $supported[$post_type] = false;
+	}
+
+	/**
+	 * Returns Post Type from current screen.
+	 *
+	 * @param bool $public Whether to only get Public Post types.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool|string The Post Type
+	 */
+	public function get_current_post_type( $public = true ) {
+
+		static $post_type = null;
+
+		//* Detect post type if empty or not set.
+		if ( is_null( $post_type ) || empty( $post_type ) ) {
+			global $current_screen;
+
+			if ( isset( $current_screen->post_type ) ) {
+				static $post_page = array();
+
+				$args = $public ? array( 'public' => true ) : array();
+
+				if ( ! isset( $post_page[$public] ) )
+					$post_page[$public] = (array) get_post_types( $args );
+
+				//* Smart var. This elemenates the need for a foreach loop, reducing resource usage.
+				$post_type = isset( $post_page[$public][ $current_screen->post_type ] ) ? $current_screen->post_type : '';
+			}
+		}
+
+		//* No post type has been found.
+		if ( empty( $post_type ) )
+			return false;
+
+		return $post_type;
+	}
+
+	/**
+	 * Determines whether the theme is outputting the title correctly based on transient.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @staticvar bool $dir
+	 *
+	 * @return bool True theme is doing it right.
+	 */
+	public function theme_title_doing_it_right() {
+
+		static $dir = null;
+
+		if ( isset( $dir ) )
+			return $dir;
+
+		$transient = get_transient( $this->theme_doing_it_right_transient );
+
+		if ( '0' === $transient )
+			return $dir = false;
+
+		/**
+		 * Transient has not been set yet (false)
+		 * or the theme is doing it right ('1').
+		 */
+		return $dir = true;
+	}
+
+	/**
+	 * Detect theme title fix extension plugin.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool True theme will do it right.
+	 */
+	public function theme_title_fix_active() {
+
+		static $fixed = null;
+
+		if ( isset( $fixed ) )
+			return $fixed;
+
+		if ( defined( 'THE_SEO_FRAMEWORK_TITLE_FIX' ) && THE_SEO_FRAMEWORK_TITLE_FIX )
+			return $fixed = true;
+
+		return $fixed = false;
+	}
+
+	/**
+	 * Checks whether we can use special manipulation filters.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool True if we can manipulate title.
+	 */
+	public function can_manipulate_title() {
+
+		if ( $this->theme_title_doing_it_right() || $this->theme_title_fix_active() )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Whether a page or blog is on front.
+	 *
+	 * @staticvar bool $pof
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function has_page_on_front() {
+
+		static $pof = null;
+
+		if ( isset( $pof ) )
+			return $pof;
+
+		return $pof = 'page' === get_option( 'show_on_front' ) ? true : false;
+	}
+
+}
Index: inc/classes/doingitright.class.php
===================================================================
--- inc/classes/doingitright.class.php	(revision 1413572)
+++ inc/classes/doingitright.class.php	(working copy)
@@ -1,742 +1,1683 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_DoingItRight
- *
- * Adds data in a column to edit.php and edit-tags.php
- * Shows you if you're doing the SEO right.
- *
- * @since 2.1.9
- */
-class AutoDescription_DoingItRight extends AutoDescription_Search {
-
-	/**
-	 * Constructor, load parent constructor
-	 *
-	 * Initalizes columns
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		add_action( 'current_screen', array( $this, 'init_columns' ) );
-	}
-
-	/**
-	 * Initializes columns
-	 *
-	 * Applies filter the_seo_framework_show_seo_column : Show the SEO column in edit.php
-	 *
-	 * @param array $support_admin_pages the supported admin pages
-	 *
-	 * @since 2.1.9
-	 */
-	public function init_columns() {
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$show_seo_column = (bool) apply_filters( 'the_seo_framework_show_seo_column', true );
-
-		if ( $show_seo_column && $this->post_type_supports_custom_seo() ) {
-			global $current_screen;
-
-			$id = isset( $current_screen->id ) ? $current_screen->id : '';
-
-			if ( '' !== $id ) {
-
-				$type = $id;
-				$slug = substr( $id, (int) 5 );
-
-				if ( 'post' !== $type && 'page' !== $type ) {
-					add_action( "manage_{$type}_columns", array( $this, 'add_column' ), 10, 1 );
-					add_action( "manage_{$slug}_custom_column", array( $this, 'seo_column' ), 10, 3 );
-				}
-
-				/**
-				 * Always load pages and posts.
-				 * Many CPT plugins rely on these.
-				 */
-				add_action( 'manage_posts_columns', array( $this, 'add_column' ), 10, 1 );
-				add_action( 'manage_pages_columns', array( $this, 'add_column' ), 10, 1 );
-				add_action( 'manage_posts_custom_column', array( $this, 'seo_column' ), 10, 3 );
-				add_action( 'manage_pages_custom_column', array( $this, 'seo_column' ), 10, 3 );
-			}
-
-		}
-
-	}
-
-	/**
-	 * Adds SEO column on edit.php
-	 *
-	 * @param $offset 	determines where the column should be placed. Prefered before comments, then data, then tags.
-	 *					If neither found, it will add the column to the end.
-	 *
-	 * @since 2.1.9
-	 * @return array $columns the column data
-	 */
-	public function add_column( $columns ) {
-
-		$seocolumn = array( 'ad_seo' => 'SEO' );
-
-		$column_keys = array_keys( $columns );
-
-		//* Column keys to look for, in order of appearance.
-		$order_keys = array(
-			'comments',
-			'posts',
-			'date',
-			'tags',
-			'bbp_topic_freshness',
-			'bbp_forum_freshness',
-		);
-
-		foreach ( $order_keys as $key ) {
-			//* Put value in $offset, if not false, break loop.
-			if ( false !== ( $offset = array_search( $key, $column_keys ) ) )
-				break;
-		}
-
-		// I tried but found nothing
-		if ( false === $offset ) {
-			//* Add SEO bar at the end of columns.
-			$columns = array_merge( $columns, $seocolumn );
-		} else {
-			//* Add seo bar between columns.
-
-			// Cache columns.
-			$columns_before = $columns;
-
-			$columns = array_merge(
-				array_splice( $columns, 0, $offset ),
-				$seocolumn,
-				array_splice( $columns_before, $offset )
-			);
-		}
-
-		return $columns;
-	}
-
-	/**
-	 * Adds SEO column to two to the left.
-	 *
-	 * @param string $column the current column    : If it's a taxonomy, this is empty
-	 * @param int $post_id the post id             : If it's a taxonomy, this is the column name
-	 * @param string $tax_id this is empty         : If it's a taxonomy, this is the taxonomy id
-	 * @param string $status the status in html
-	 *
-	 * @staticvar string $type_cache
-	 * @staticvar string $column_cache
-	 *
-	 * @since 2.1.9
-	 * @return array $columns the column data
-	 */
-	public function seo_column( $column, $post_id, $tax_id = '' ) {
-
-		$status = '';
-
-		static $type_cache = null;
-		static $column_cache = null;
-
-		if ( ! isset( $type_cache ) || ! isset( $column_cache ) ) {
-			$type = get_post_type( $post_id );
-
-			if ( ! $type || '' !== $tax_id ) {
-				$screen = (object) get_current_screen();
-
-				if ( isset( $screen->taxonomy ) )
-					$type = $screen->taxonomy;
-			}
-
-			$type_cache = $type;
-			$column_cache = $column;
-		}
-
-		/**
-		 * Params are shifted.
-		 * @link https://core.trac.wordpress.org/ticket/33521
-		 */
-		if ( '' !== $tax_id ) {
-			$column = $post_id;
-			$post_id = $tax_id;
-		}
-
-		if ( 'ad_seo' === $column )
-			$status = $this->post_status( $post_id, $type_cache, true );
-
-		echo $status;
-	}
-
-	/**
-	 * Renders post status. Caches the output.
-	 *
-	 * Applies filter the_seo_framework_seo_bar_squared : Make the SEO Bar squared.
-	 *
-	 * @param int $post_id The Post ID or taxonomy ID
-	 * @param string $type Is fetched on edit.php, inpost, taxonomies, etc.
-	 * @param bool $html return the status in html or string
-	 *
-	 * @todo document this further. It's been created within a day.
-	 *
-	 * @staticvar string $post The post type slug.
-	 * @staticvar bool $is_term If we're dealing with tt pages.
-	 * @staticvar string $term_name The Term name.
-	 *
-	 * @since 2.1.9
-	 * @return string $content the post SEO status
-	 */
-	protected function post_status( $post_id = '', $type = 'inpost', $html = true ) {
-
-		$content = '';
-		$desclen_class = '';
-
-		//* Fetch Post ID if it hasn't been provided.
-		if ( empty( $post_id ) )
-			$post_id = $this->get_the_real_ID();
-
-		//* Only run when post ID is found.
-		if ( isset( $post_id ) && ! empty( $post_id ) ) {
-
-			//* Fetch Post Type.
-			if ( 'inpost' === $type || empty( $type ) )
-				$type = get_post_type( $post_id );
-
-			//* No need to re-evalute these.
-			static $post = null;
-			static $is_term = null;
-
-			/**
-			 * Static caching.
-			 * @since 2.3.8
-			 */
-			if ( ! isset( $post ) && ! isset( $is_term ) ) {
-				//* Run once.
-
-				//* Setup i18n values for posts and pages.
-				if ( $type == 'post' ) {
-					$post = __( 'Post', 'autodescription' );
-					$is_term = false;
-					$term = false;
-				} else if ( $type == 'page' ) {
-					$post = __( 'Page', 'autodescription' );
-					$is_term = false;
-					$term = false;
-				} else {
-					/**
-					 * Because of static caching, $is_term was never assigned.
-					 * @bugfix.
-					 *
-					 * @since 2.4.1
-					 */
-					$is_term = true;
-				}
-			}
-
-			if ( $is_term ) {
-				//* We're on a term or taxonomy. Try fetching names. Default back to "Page".
-
-				$term = get_term_by( 'id', $post_id, $type, OBJECT );
-
-				static $term_name = null;
-
-				if ( ! isset( $term_name ) ) {
-					//* Run once.
-
-					if ( ! empty( $term ) && is_object( $term ) ) {
-						$tax_type = $term->taxonomy;
-
-						/**
-						 * Dynamically fetch the term name.
-						 *
-						 * @since 2.3.1
-						 */
-						$term_labels = $this->get_tax_labels( $tax_type );
-
-						if ( isset( $term_labels ) ) {
-							$post = $term_labels->singular_name;
-						} else {
-							// Fallback to Page as it is generic.
-							$post = __( 'Page', 'autodescription' );
-						}
-
-					} else {
-						// Fallback to Page as it is generic.
-						$post = __( 'Page', 'autodescription' );
-					}
-
-
-					$term_name = $post;
-				}
-				//* Fetch from cache.
-				$post = $term_name;
-
-				/**
-				 * Check if current post type is a page or taxonomy.
-				 * Only check if is_term is not yet changed to false. To save processing power.
-				 *
-				 * @since 2.3.1
-				 */
-				if ( $is_term && $this->is_post_type_page( $type ) )
-					$is_term = false;
-
-			}
-
-			/**
-			 * Square the SEO Bar.
-			 *
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$square_it = (bool) apply_filters( 'the_seo_framework_seo_bar_squared', false );
-			$square = $square_it ? ' square' : '';
-
-			/**
-			 * German Capitalization compat.
-			 *
-			 * @staticvar string $post_low
-			 * @since 2.5.2
-			 */
-			static $post_low = null;
-
-			if ( ! isset( $post_low ) )
-				$post_low = $this->is_locale( 'de' ) ? $post : strtolower( $post );
-
-			$is_front_page = $this->is_static_frontpage( $post_id );
-
-			//* CSS class values for colors
-			$bad = 'ad-seo-bad';
-			$okay = 'ad-seo-okay';
-			$good = 'ad-seo-good';
-			$unknown = 'ad-seo-unknown';
-
-			//* All notices.
-			$titlen_notice = '';
-			$desclen_notice = '';
-			$title_notice = '';
-			$description_notice = '';
-			$redirect_notice = '';
-			$noindex_notice = '';
-			$desc_too_many = '';
-
-			//* i18n
-			$title_i18n = __( 'Title:', 'autodescription' );
-			$description_i18n = __( 'Description:', 'autodescription' );
-			$index_i18n = __( 'Index:', 'autodescription' );
-			$follow_i18n = __( 'Follow:', 'autodescription' );
-			$archive_i18n = __( 'Archive:', 'autodescription' );
-			$redirect_i18n = __( 'Redirect:', 'autodescription' );
-
-			if ( false === $is_term ) {
-				$redirect = $this->get_custom_field( 'redirect' );
-				$noindex = $this->get_custom_field( '_genesis_noindex' );
-
-				if ( $is_front_page )
-					$noindex = $this->get_option( 'homepage_noindex' ) ? $this->get_option( 'homepage_noindex' ) : $noindex;
-
-				$ad_125 = 'ad-12-5';
-				$ad_100 = '';
-			} else {
-				$ad_savedflag = $term->admeta['saved_flag'] != '0' ? true : false;
-				$flag = (bool) $ad_savedflag;
-
-				$noindex = isset( $term->admeta['noindex'] ) ? $term->admeta['noindex'] : '';
-				$redirect = ''; // We don't apply redirect on taxonomies (yet)
-
-				//* Genesis data fetch
-				if ( ! $noindex && ! $flag && isset( $term->meta ) )
-					$noindex = isset( $term->meta['noindex'] ) ? $term->meta['noindex'] : '';
-
-				$ad_125 = 'ad-16';
-				$ad_100 = 'ad-100';
-			}
-
-			if ( '' === $redirect && ! $noindex ) {
-				//* No redirect or noindex found, proceed.
-
-				if ( false === $is_term ) {
-					$title_custom_field = (bool) $this->get_custom_field( '_genesis_title', $post_id );
-
-					$description = $this->get_custom_field( '_genesis_description', $post_id ) ? $this->get_custom_field( '_genesis_description', $post_id ) : '';
-
-					$nofollow = $this->get_custom_field( '_genesis_nofollow', $post_id );
-					$noarchive = $this->get_custom_field( '_genesis_noarchive', $post_id );
-
-					if ( $is_front_page ) {
-						$title_custom_field = $this->get_option( 'homepage_title' ) ? true : $title_custom_field;
-
-						$description = $this->get_option( 'homepage_description' ) ? $this->get_option( 'homepage_description' ) : $description;
-
-						$nofollow = $this->get_option( 'homepage_nofollow' ) ? $this->get_option( 'homepage_nofollow' ) : $nofollow;
-						$noarchive = $this->get_option( 'homepage_noarchive' ) ? $this->get_option( 'homepage_noarchive' ) : $noarchive;
-					}
-
-					//* Fetch the title normally.
-					if ( $is_front_page ) {
-						$title = $this->title( '', '', '', array( 'term_id' => $post_id, 'page_on_front' => true, 'meta' => true ) );
-					} else {
-						$title = $this->title( '', '', '', array( 'term_id' => $post_id, 'meta' => true ) );
-					}
-				} else {
-					$title_custom_field = isset( $term->admeta['doctitle'] ) && '' !== $term->admeta['doctitle'] ? true : false;
-
-					$title = $this->title( '', '', '', array( 'term_id' => $post_id, 'taxonomy' => $type, 'meta' => true ) );
-
-					$description = isset( $term->admeta['description'] ) ? $term->admeta['description'] : '';
-
-					$nofollow = isset( $term->admeta['nofollow'] ) ? $term->admeta['nofollow'] : '';
-					$noarchive = isset( $term->admeta['noarchive'] ) ? $term->admeta['noarchive'] : '';
-
-					//* Genesis data fetch
-					if ( ! $flag && isset( $term->meta ) ) {
-						if ( empty( $title ) && isset( $term->meta['doctitle'] ) )
-							$title = $term->meta['doctitle'];
-
-						if ( empty( $description ) && isset( $term->meta['description'] ) )
-							$description = $term->meta['description'];
-
-						if ( empty( $nofollow ) && isset( $term->meta['nofollow'] ) )
-							$nofollow = $term->meta['nofollow'];
-
-						if ( empty( $noarchive ) && isset( $term->meta['noarchive'] ) )
-							$noarchive = $term->meta['noarchive'];
-					}
-				}
-
-				/**
-				 * Convert to what Google outputs.
-				 *
-				 * This will convert e.g. &raquo; to a single length character.
-				 * @since 2.3.4
-				 */
-				$title = trim( html_entity_decode( $title ) );
-				$desc_len_parsed = trim( html_entity_decode( $description ) );
-
-				//* Calculate length.
-				$tit_len = mb_strlen( $title );
-				$desc_len = mb_strlen( $desc_len_parsed );
-
-				$description_custom_field = true;
-
-				//* Generate description if custom isn't found.
-				if ( 0 == $desc_len ) {
-					if ( ! $is_term ) {
-						$description_args = array( 'id' => $post_id, 'get_custom_field' => false );
-						$description = $this->generate_description( '', $description_args );
-					} else {
-						$description_args = array( 'id' => $post_id, 'taxonomy' => $type, 'get_custom_field' => false );
-						$description = $this->generate_description( '', $description_args );
-					}
-
-					//* Convert to what Google outputs. @since 2.3.4
-					$desc_len_parsed = trim( html_entity_decode( $description ) );
-					$desc_len = mb_strlen( $desc_len_parsed );
-
-					$description_custom_field = false;
-				}
-
-				//* Count the words.
-				$desc_words = str_word_count( strtolower( $description ), 2 );
-
-				if ( is_array( $desc_words ) ) {
-					//* We're going to fetch word based on key, and the last element (as first)
-					$word_keys = array_flip( array_reverse( $desc_words, true ) );
-
-					$desc_word_count = array_count_values( $desc_words );
-
-					//* Parse word counting.
-					if ( is_array( $desc_word_count ) ) {
-						foreach ( $desc_word_count as $desc_word => $desc_word_count ) {
-							if ( $desc_word_count >= 3 ) {
-								$position = $word_keys[$desc_word];
-
-								$word_len = mb_strlen( $desc_word );
-								$first_word_original = mb_substr( $description, $position, $word_len );
-
-								//* Found words that are used too frequently.
-								$desc_too_many[] = array( $first_word_original => $desc_word_count );
-							}
-						}
-					}
-				}
-
-				// Add starting space
-				$generated = ' ' . _x( 'G', 'Generated', 'autodescription');
-				// Add starting break. Yes it's being put inside an HTML attribute. Yes it's allowed. No this can't be put into the title attribute.
-				$generated_notice = '<br />' . __( 'Generated: Automatically generated.', 'autodescription');
-
-				$gen_t = ! $title_custom_field ? $generated : '';
-				$gen_d = ! $description_custom_field ? $generated : '';
-
-				$gen_t_notice = ! $title_custom_field ? $generated_notice : '';
-				$gen_d_notice = ! $description_custom_field ? $generated_notice : '';
-
-				if ( $tit_len < 25 ) {
-					$titlen_notice = $title_i18n . ' ' . __( 'far too short.', 'autodescription' );
-					$titlen_class = $bad;
-				} else if ( $tit_len < 42 ) {
-					$titlen_notice = $title_i18n . ' ' . __( 'too short.', 'autodescription' );
-					$titlen_class = $okay;
-				} else if ( $tit_len > 55 && $tit_len < 75 ) {
-					$titlen_notice = $title_i18n . ' ' . __( 'too long.', 'autodescription' );
-					$titlen_class = $okay;
-				} else if ( $tit_len >= 75 ) {
-					$titlen_notice = $title_i18n . ' ' . __( 'far too long.', 'autodescription' );
-					$titlen_class = $bad;
-				} else {
-					$titlen_notice = $title_i18n . ' ' . __( 'good.', 'autodescription' );
-					$titlen_class = $good;
-				}
-
-				$desclen_notice = $description_i18n;
-
-				if ( ! empty( $desc_too_many ) && is_array( $desc_too_many ) ) {
-
-					$words_count = count( $desc_too_many );
-					$desclen_class = $words_count <= 1 ? $okay : $bad;
-
-					foreach ( $desc_too_many as $key => $desc_array ) {
-						foreach ( $desc_array as $desc_value => $desc_count ) {
-							$desclen_notice .= ' ';
-
-							/**
-							 * Don't ucfirst abbrivations.
-							 * @since 2.4.1
-							 */
-							$desc_value = ctype_upper( $desc_value ) ? $desc_value : ucfirst( $desc_value );
-
-							$desclen_notice .= sprintf( __( '%s is used %d times.', 'autodescription' ), '<span>' . $desc_value . '</span>', $desc_count );
-							$desclen_notice .= '<br />'; // Yes, <br /> is used inside an attribute. Allowed.
-						}
-					}
-				}
-
-				if ( $desc_len < 100 ) {
-					$desclen_notice .= ' ' . __( 'Length is far too short.', 'autodescription' );
-					$desclen_class = $bad;
-				} else if ( $desc_len < 145 ) {
-					$desclen_notice .= ' ' . __( 'Length is too short.', 'autodescription' );
-
-					// Don't make it okay if it's already bad.
-					$desclen_class = $desclen_class == $bad ? $desclen_class : $okay;
-				} else if ( $desc_len > 155 && $desc_len < 175 ) {
-					$desclen_notice .= ' ' . __( 'Length is too long.', 'autodescription' );
-
-					// Don't make it okay if it's already bad.
-					$desclen_class = $desclen_class == $bad ? $desclen_class : $okay;
-				} else if ( $desc_len >= 175 ) {
-					$desclen_notice .= ' ' . __( 'Length is far too long.', 'autodescription' );
-					$desclen_class = $bad;
-				} else {
-					$desclen_notice .= ' ' . __( 'Length is good.', 'autodescription' );
-
-					// Don't make it good if it's already bad or okay.
-					$desclen_class = $desclen_class == $bad || $desclen_class == $okay ? $desclen_class : $good;
-				}
-
-				$ind_notice = $index_i18n . ' ' . sprintf( __( "%s is being indexed.", 'autodescription' ), $post );
-				$ind_class = $good;
-
-				/**
-				 * Get noindex site option
-				 *
-				 * @since 2.2.2
-				 */
-				if ( $this->get_option( 'site_noindex' ) ) {
-					$ind_notice .= '<br />' . sprintf( __( "But you've disabled indexing for the whole site.", 'autodescription' ), $post );
-					$ind_class = $unknown;
-				}
-
-				if ( ! get_option( 'blog_public' ) ) {
-					$ind_notice .= '<br />' . sprintf( __( "But the blog isn't set to public. This means WordPress disencourages indexing.", 'autodescription' ), $post );
-					$ind_class = $unknown;
-				}
-
-				/**
-				 * Check if archive is empty, and therefore has set noindex for those.
-				 *
-				 * @since 2.2.8
-				 */
-				if ( $is_term && isset( $term->count ) && $term->count === (int) 0 ) {
-					$ind_notice .= '<br />' . sprintf( __( "But there are no posts in this %s. Therefore indexing has been disabled.", 'autodescription' ), $post );
-					$ind_class = $unknown;
-				}
-
-				if ( empty( $nofollow ) ) {
-					$fol_notice = $follow_i18n . ' ' . sprintf( __( '%s links are being followed.', 'autodescription' ), $post );
-					$fol_class = $good;
-
-					/**
-					 * Get nofolow site option
-					 *
-					 * @since 2.2.2
-					 */
-					if ( $this->get_option( 'site_nofollow' ) ) {
-						$fol_notice .= '<br />' . __( "But you've disabled following of links for the whole site.", 'autodescription' );
-						$fol_class = $unknown;
-					}
-				} else {
-					$fol_notice = $follow_i18n . ' ' . sprintf( __( "%s links aren't being followed.", 'autodescription' ), $post );
-					$fol_class = $unknown;
-
-					if ( ! get_option( 'blog_public' ) ) {
-						$fol_notice .= '<br />' . __( "But the blog isn't set to public. This means WordPress allows the links to be followed regardless.", 'autodescription' );
-					}
-				}
-
-				if ( empty( $noarchive ) ) {
-					$arc_notice = $archive_i18n . ' ' . sprintf( __( 'Search Engine are allowed to archive this %s.', 'autodescription' ), $post_low );
-					$arc_class = $good;
-
-					/**
-					 * Get noarchive site option
-					 *
-					 * @since 2.2.2
-					 */
-					if ( $this->get_option( 'site_noarchive' ) ) {
-						$arc_notice .= '<br />' . __( "But you've disabled archiving for the whole site.", 'autodescription' );
-						$arc_class = $unknown;
-					}
-
-				} else {
-					$arc_notice = $archive_i18n . ' ' . sprintf( __( "Search Engine aren't allowed to archive this %s.", 'autodescription' ), $post_low );
-					$arc_class = $unknown;
-
-					if ( ! get_option( 'blog_public' ) ) {
-						$arc_notice .= '<br />' . __( "But the blog isn't set to public. This means WordPress allows the blog to be archived regardless.", 'autodescription' );
-					}
-				}
-
-				$red_notice = $redirect_i18n . ' ' . sprintf( __( "%s isn't being redirected.", 'autodescription' ), $post );
-				$red_class = $good;
-
-				if ( ! empty( $titlen_notice ) )
-					$title_notice		= '<span class="ad-sec-wrap ad-25">'
-										. '<a href="#" onclick="return false;" class="' . $titlen_class . '"  data-desc="' . $titlen_notice . $gen_t_notice . '">' . _x( 'T', 'Title', 'autodescription') . $gen_t . '</a>'
-										. '<span class="screen-reader-text">' . $titlen_notice . $gen_t_notice . '</span>'
-										. '</span>'
-										;
-
-				if ( ! empty( $desclen_notice ) )
-					$description_notice	= '<span class="ad-sec-wrap ad-25">'
-										. '<a href="#" onclick="return false;" class="' . $desclen_class . '" data-desc="' . $desclen_notice . $gen_d_notice . '">' . _x( 'D', 'Description', 'autodescription') . $gen_d . '</a>'
-										. '<span class="screen-reader-text">' . $desclen_notice . $gen_d_notice . '</span>'
-										. '</span>'
-										;
-
-					$index_notice		= '<span class="ad-sec-wrap ' . $ad_125 . '">'
-										. '<a href="#" onclick="return false;" class="' . $ind_class . '" data-desc="' . $ind_notice . '">' . _x( 'I', 'no-Index', 'autodescription') . '</a>'
-										. '<span class="screen-reader-text">' . $ind_notice . '</span>'
-										. '</span>'
-										;
-
-				if ( ! empty( $fol_notice ) )
-					$follow_notice		= '<span class="ad-sec-wrap ' . $ad_125 . '">'
-					 					. '<a href="#" onclick="return false;" class="' . $fol_class . '" data-desc="' . $fol_notice . '">' . _x( 'F', 'no-Follow', 'autodescription') . '</a>'
-										. '<span class="screen-reader-text">' . $fol_notice . '</span>'
-										. '</span>'
-										;
-
-
-				if ( ! empty( $arc_notice ) )
-					$archive_notice		= '<span class="ad-sec-wrap ' . $ad_125 . '">'
-										. '<a href="#" onclick="return false;" class="' . $arc_class . '" data-desc="' . $arc_notice . '">' . _x( 'A', 'no-Archive', 'autodescription') . '</a>'
-										. '<span class="screen-reader-text">' . $arc_notice . '</span>'
-										. '</span>'
-										;
-
-				// No redirection on taxonomies (yet).
-				if ( ! $is_term ) {
-					$redirect_notice	= '<span class="ad-sec-wrap ' . $ad_125 . '">'
-										. '<a href="#" onclick="return false;" class="' . $red_class . '" data-desc="' . $red_notice . '">' . _x( 'R', 'Redirect', 'autodescription') . '</a>'
-										. '<span class="screen-reader-text">' . $red_notice . '</span>'
-										. '</span>'
-										;
-				} else {
-					$redirect_notice 	= '';
-				}
-
-				$content = sprintf( '<span class="ad-seo clearfix ' . $ad_100 . $square . '"><span class="ad-bar-wrap">%s %s %s %s %s %s</span></span>', $title_notice, $description_notice, $index_notice, $follow_notice, $archive_notice, $redirect_notice );
-
-			// Redirect and noindex found, why bother showing SEO.
-			} else if ( ! empty( $redirect ) && ! empty( $noindex ) ) {
-
-				$red_notice = $redirect_i18n . ' ' . sprintf( __( "%s is being redirected. This means no SEO values have to be set.", 'autodescription' ), $post );
-				$red_class = $unknown;
-
-				$redirect_notice	= '<span class="ad-sec-wrap ad-50">'
-									. '<a href="#" onclick="return false;" class="' . $red_class . '" data-desc="' . $red_notice . '">' . _x( 'R', 'Redirect', 'autodescription') . '</a>'
-									. '<span class="screen-reader-text">' . $red_notice . '</span>'
-									. '</span>'
-									;
-
-				$noi_notice = $index_i18n . ' ' . sprintf( __( "%s is not being indexed. This means no SEO values have to be set.", 'autodescription' ), $post );
-				$noi_class = $unknown;
-
-				$noindex_notice		= '<span class="ad-sec-wrap ad-50">'
-									. '<a href="#" onclick="return false;" class="' . $noi_class . '" data-desc="' . $noi_notice . '">' . _x( 'I', 'no-Index', 'autodescription') . '</a>'
-									. '<span class="screen-reader-text">' . $noi_notice . '</span>'
-									. '</span>'
-									;
-
-				$content = sprintf( '<span class="ad-seo clearfix ' . $ad_100 . $square . '"><span class="ad-bar-wrap">%s %s</span></span>', $redirect_notice, $noindex_notice );
-
-			} else if ( ! empty( $redirect ) && empty( $noindex ) ) {
-				//* Redirect found, why bother showing SEO info?
-
-				$red_notice = $redirect_i18n . ' ' . sprintf( __( "%s is being redirected. This means no SEO values have to be set.", 'autodescription' ), $post );
-				$red_class = $unknown;
-
-				$redirect_notice	= '<span class="ad-sec-wrap ad-100">'
-									. '<a href="#" onclick="return false;" class="' . $red_class . '" data-desc="' . $red_notice . '">' . _x( 'R', 'Redirect', 'autodescription') . '</a>'
-									. '<span class="screen-reader-text">' . $red_notice . '</span>'
-									. '</span>'
-									;
-
-				$content = sprintf( '<span class="ad-seo clearfix ' . $ad_100 . $square . '"><span class="ad-bar-wrap">%s</span></span>', $redirect_notice );
-
-			// Noindex found, why bother showing SEO info?
-			} else if ( empty( $redirect ) && ! empty( $noindex ) ) {
-
-				$noi_notice = $index_i18n . ' ' . sprintf( __( "%s is not being indexed. This means no SEO values have to be set.", 'autodescription' ), $post );
-				$noi_class = $unknown;
-
-				$noindex_notice	= '<span class="ad-sec-wrap ad-100">'
-								. '<a href="#" onclick="return false;" class="' . $noi_class . '" data-desc="' . $noi_notice . '">' . _x( 'I', 'no-Index', 'autodescription') . '</a>'
-								. '<span class="screen-reader-text">' . $noi_notice . '</span>'
-								. '</span>'
-								;
-
-				$content = sprintf( '<span class="ad-seo clearfix ' . $ad_100 . $square . '"><span class="ad-bar-wrap">%s</span></span>', $noindex_notice );
-			}
-
-		} else {
-			$content = '<span>' . __( 'Failed to fetch post ID.', 'autodescription' ) . '</span>';
-		}
-
-		return $content;
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_DoingItRight
+ *
+ * Adds data in a column to edit.php and edit-tags.php
+ * Shows you if you're doing the SEO right.
+ *
+ * @since 2.1.9
+ */
+class AutoDescription_DoingItRight extends AutoDescription_Search {
+
+	/**
+	 * Constructor, load parent constructor
+	 *
+	 * Initalizes columns and load post states.
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		//* Initialize post states.
+		add_action( 'current_screen', array( $this, 'post_state' ) );
+
+		//* Ajax handlers for columns.
+		add_action( 'admin_init', array( $this, 'init_columns_ajax' ) );
+		//* Initialize columns.
+		add_action( 'current_screen', array( $this, 'init_columns' ) );
+
+	}
+
+	/**
+	 * Add post state on edit.php to the page or post that has been altered
+	 *
+	 * Applies filters `the_seo_framework_allow_states` : boolean
+	 *
+	 * @uses $this->add_post_state
+	 *
+	 * @since 2.1.0
+	 */
+	public function post_state() {
+
+		//* Only load on singular pages.
+		if ( $this->is_singular() ) {
+
+			$allow_states = (bool) apply_filters( 'the_seo_framework_allow_states', true );
+
+			if ( $allow_states )
+				add_filter( 'display_post_states', array( $this, 'add_post_state' ), 10, 2 );
+
+		}
+
+	}
+
+	/**
+	 * Adds post states in post/page edit.php query
+	 *
+	 * @param array $states The current post states array
+	 * @param object $post The Post Object.
+	 *
+	 * @since 2.1.0
+	 */
+	public function add_post_state( $states = array(), $post ) {
+
+		$post_id = isset( $post->ID ) ? $post->ID : false;
+
+		if ( $post_id ) {
+			$searchexclude = (bool) $this->get_custom_field( 'exclude_local_search', $post_id );
+
+			if ( $searchexclude )
+				$states[] = __( 'No Search', 'autodescription' );
+		}
+
+		return $states;
+	}
+
+	/**
+	 * AJAX wrapper for $this->init_columns
+	 *
+	 * @since 2.6.0
+	 */
+	public function init_columns_ajax() {
+
+		if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
+
+			/**
+			 * Securely check the referrer, instead of leaving holes everywhere.
+			 */
+			if ( current_user_can( 'publish_posts' ) && check_ajax_referer( 'add-tag', '_wpnonce_add-tag', false ) )
+				$this->init_columns( '', true );
+		}
+
+	}
+
+	/**
+	 * Initializes columns
+	 *
+	 * Applies filter the_seo_framework_show_seo_column : Show the SEO column in edit.php
+	 *
+	 * @param object|empty $screen WP_Screen
+	 * @param bool $doing_ajax Whether we're doing an AJAX response.
+	 *
+	 * @since 2.1.9
+	 */
+	public function init_columns( $screen = '', $doing_ajax = false ) {
+
+		$show_seo_column = (bool) apply_filters( 'the_seo_framework_show_seo_column', true );
+
+		if ( $doing_ajax ) {
+			$post_type = isset( $_POST['post_type'] ) ? $_POST['post_type'] : '';
+		} else {
+			$post_type = isset( $screen->post_type ) ? $screen->post_type : '';
+		}
+
+		if ( $show_seo_column && $this->post_type_supports_custom_seo( $post_type ) ) {
+
+			if ( $doing_ajax ) {
+
+				$id = isset( $_POST['screen'] ) ? $_POST['screen'] : false;
+				$taxonomy = isset( $_POST['taxonomy'] ) ? $_POST['taxonomy'] : false;
+
+				if ( $taxonomy && $id ) {
+					add_filter( 'manage_' . $id . '_columns', array( $this, 'add_column' ), 1 );
+					add_action( 'manage_' . $taxonomy . '_custom_column', array( $this, 'seo_bar_ajax' ), 1, 3 );
+				}
+
+			} else {
+
+				$id = isset( $screen->id ) ? $screen->id : '';
+
+				if ( '' !== $id ) {
+
+					if ( $this->is_wp_lists_edit() ) {
+						add_filter( 'manage_' . $id . '_columns', array( $this, 'add_column' ), 10, 1 );
+
+						$taxonomy = isset( $screen->taxonomy ) ? $screen->taxonomy : '';
+
+						if ( $taxonomy )
+							add_action( 'manage_' . $taxonomy . '_custom_column', array( $this, 'seo_bar' ), 1, 3 );
+
+						/**
+						 * Always load pages and posts.
+						 * Many CPT plugins rely on these.
+						 */
+						add_action( 'manage_posts_custom_column', array( $this, 'seo_bar' ), 1, 3 );
+						add_action( 'manage_pages_custom_column', array( $this, 'seo_bar' ), 1, 3 );
+					}
+
+				}
+			}
+
+		}
+
+	}
+
+	/**
+	 * Adds SEO column on edit(-tags).php
+	 *
+	 * @param array $columns The existing columns
+	 *
+	 * @param $offset 	Determines where the column should be placed. Prefered before comments, then data, then tags.
+	 *					If neither found, it will add the column to the end.
+	 *
+	 * @since 2.1.9
+	 * @return array $columns the column data
+	 */
+	public function add_column( $columns ) {
+
+		$seocolumn = array( 'ad_seo' => 'SEO' );
+
+		$column_keys = array_keys( $columns );
+
+		//* Column keys to look for, in order of appearance.
+		$order_keys = array(
+			'comments',
+			'posts',
+			'date',
+			'tags',
+			'bbp_topic_freshness',
+			'bbp_forum_freshness',
+			'bbp_reply_created',
+		);
+
+		foreach ( $order_keys as $key ) {
+			//* Put value in $offset, if not false, break loop.
+			if ( false !== ( $offset = array_search( $key, $column_keys ) ) )
+				break;
+		}
+
+		//* I tried but found nothing
+		if ( false === $offset ) {
+			//* Add SEO bar at the end of columns.
+			$columns = array_merge( $columns, $seocolumn );
+		} else {
+			//* Add seo bar between columns.
+
+			//* Cache columns.
+			$columns_before = $columns;
+
+			$columns = array_merge(
+				array_splice( $columns, 0, $offset ),
+				$seocolumn,
+				array_splice( $columns_before, $offset )
+			);
+		}
+
+		return $columns;
+	}
+
+	/**
+	 * Adds the SEO Bar.
+	 *
+	 * @param string $column the current column    : If it's a taxonomy, this is empty
+	 * @param int $post_id the post id             : If it's a taxonomy, this is the column name
+	 * @param string $tax_id this is empty         : If it's a taxonomy, this is the taxonomy id
+	 *
+	 * @param string $status the status in html
+	 *
+	 * @staticvar string $type_cache
+	 * @staticvar string $column_cache
+	 *
+	 * @since 2.6.0
+	 */
+	public function seo_bar( $column, $post_id, $tax_id = '' ) {
+
+		static $type_cache = null;
+		static $column_cache = null;
+
+		if ( ! isset( $type_cache ) || ! isset( $column_cache ) ) {
+			$type = get_post_type( $post_id );
+
+			if ( false === $type || '' !== $tax_id ) {
+				$screen = (object) get_current_screen();
+
+				if ( isset( $screen->taxonomy ) )
+					$type = $screen->taxonomy;
+			}
+
+			$type_cache = $type;
+			$column_cache = $column;
+		}
+
+		/**
+		 * Params are shifted.
+		 * @link https://core.trac.wordpress.org/ticket/33521
+		 */
+		if ( '' !== $tax_id ) {
+			$column = $post_id;
+			$post_id = $tax_id;
+		}
+
+		if ( 'ad_seo' === $column )
+			echo $this->post_status( $post_id, $type_cache, true );
+
+	}
+
+	/**
+	 * Adds SEO column to edit screens.
+	 *
+	 * @param string $column the current column    : If it's a taxonomy, this is empty
+	 * @param int $post_id the post id             : If it's a taxonomy, this is the column name
+	 * @param string $tax_id this is empty         : If it's a taxonomy, this is the taxonomy id
+	 *
+	 * @param string $status the status in html
+	 *
+	 * @staticvar string $type_cache
+	 * @staticvar string $column_cache
+	 *
+	 * @since 2.1.9
+	 */
+	public function seo_bar_ajax( $column, $post_id, $tax_id = '' ) {
+
+		$is_term = false;
+
+		/**
+		 * Params are shifted.
+		 * @link https://core.trac.wordpress.org/ticket/33521
+		 */
+		if ( '' !== $tax_id ) {
+			$is_term = true;
+			$column = $post_id;
+		}
+
+		if ( 'ad_seo' === $column ) {
+			$context = __( 'Refresh to see the SEO Bar status.', 'autodescription' );
+
+			$ajax_id = $column . $tax_id;
+
+			echo $this->post_status_special( $context, '?', 'unknown', $is_term, $ajax_id );
+		}
+
+	}
+
+	/**
+	 * Wrap a single-line block for the SEO bar, showing special statuses.
+	 *
+	 * @param string $context The hover/screenreader context.
+	 * @param string $symbol The single-character symbol.
+	 * @param string $class The SEO block color code. : 'bad', 'okay', 'good', 'unknown'.
+	 * @param int|null $ajax_id The unique Ajax ID to generate a small on-hover script for this ID. May be Arbitrary.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The special block with wrap.
+	 */
+	protected function post_status_special( $context, $symbol = '?', $color = 'unknown', $is_term = '', $ajax_id = null ) {
+
+		$classes = $this->get_the_seo_bar_classes();
+
+		$args = array();
+		$args['class'] = $classes[$color];
+		$args['width'] = $classes['100%'];
+		$args['notice'] = $context;
+		$args['indicator'] = $symbol;
+
+		$block = $this->wrap_the_seo_bar_block( $args );
+
+		if ( empty( $is_term ) )
+			$is_term = $this->is_archive();
+
+		return $this->get_the_seo_bar_wrap( $block, $is_term, $ajax_id );
+	}
+
+	/**
+	 * Renders post status. Caches the output.
+	 *
+	 * @param int $post_id The Post ID or taxonomy ID
+	 * @param string $type Is fetched on edit.php, inpost, taxonomies, etc.
+	 * @param bool $html return the status in html or string
+	 *
+	 * @staticvar string $post_i18n The post type slug.
+	 * @staticvar bool $is_term If we're dealing with TT pages.
+	 *
+	 * @since 2.1.9
+	 * @return string $content the post SEO status
+	 */
+	public function post_status( $post_id = '', $type = 'inpost', $html = true ) {
+
+		$content = '';
+
+		//* Fetch Post ID if it hasn't been provided.
+		if ( empty( $post_id ) )
+			$post_id = $this->get_the_real_ID();
+
+		//* Only run when post ID is found.
+		if ( isset( $post_id ) && $post_id ) {
+
+			//* Fetch Post Type.
+			if ( 'inpost' === $type || '' === $type )
+				$type = get_post_type( $post_id );
+
+			//* No need to re-evalute these.
+			static $post_i18n = null;
+			static $is_term = null;
+
+			$term = false;
+			/**
+			 * Static caching.
+			 * @since 2.3.8
+			 */
+			if ( ! isset( $post_i18n ) && ! isset( $is_term ) ) {
+
+				//* Setup i18n values for posts and pages.
+				if ( 'post' === $type ) {
+					$post_i18n = __( 'Post', 'autodescription' );
+					$is_term = false;
+					$term = false;
+				} else if ( 'page' === $type ) {
+					$post_i18n = __( 'Page', 'autodescription' );
+					$is_term = false;
+					$term = false;
+				} else {
+					/**
+					 * Because of static caching, $is_term was never assigned.
+					 * @since 2.4.1
+					 */
+					$is_term = true;
+				}
+			}
+
+			if ( $is_term ) {
+				//* We're on a term or taxonomy. Try fetching names. Default back to "Page".
+				$term = get_term_by( 'id', $post_id, $type, OBJECT );
+				$post_i18n = $this->get_the_term_name( $term );
+
+				/**
+				 * Check if current post type is a page or taxonomy.
+				 * Only check if is_term is not yet changed to false. To save processing power.
+				 *
+				 * @since 2.3.1
+				 */
+				if ( $is_term && $this->is_post_type_page( $type ) )
+					$is_term = false;
+			}
+
+			$post_low = $this->maybe_lowercase_noun( $post_i18n );
+
+			$args = array(
+				'is_term' => $is_term,
+				'term' => $term,
+				'post_id' => $post_id,
+				'post_i18n' => $post_i18n,
+				'post_low' => $post_low,
+				'type' => $type,
+			);
+
+			if ( $is_term ) {
+				return $this->the_seo_bar_term( $args );
+			} else {
+				return $this->the_seo_bar_page( $args );
+			}
+		} else {
+			$context = __( 'Failed to fetch post ID.', 'autodescription' );
+
+			return $this->post_status_special( $context, '!', 'bad' );
+		}
+	}
+
+	/**
+	 * Outputs a part of the SEO Bar based on parameters.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $args : {
+	 *		string $indicator
+	 *		string $notice
+	 *		string $width
+	 *		string $class
+	 * }
+	 *
+	 * @return string The SEO Bar block part.
+	 */
+	protected function wrap_the_seo_bar_block( $args ) {
+
+		$wrap 	= '<span class="ad-sec-wrap ' . $args['width'] . '">'
+					. '<a onclick="return false;" class="' . $args['class'] . '" aria-label="' . $args['notice'] . '" data-desc="' . $args['notice'] . '">'
+						. $args['indicator']
+					. '</a>'
+				. '</span>';
+
+		return $wrap;
+	}
+
+	/**
+	 * Wrap the SEO bar.
+	 *
+	 * @staticvar string $class
+	 * @since 2.6.0
+	 *
+	 * @param string $content The SEO Bar content.
+	 * @param bool $is_term Whether the bar is for a term.
+	 * @param int|null $ajax_id The unique Ajax ID to generate a small on-hover script for.
+	 *
+	 * If Ajax ID is set, a small jQuery script will also be output to reset the
+	 * DOM element for the status bar hover.
+	 *
+	 * @return string The SEO Bar wrapped.
+	 */
+	protected function get_the_seo_bar_wrap( $content, $is_term, $ajax_id = null ) {
+
+		static $class = null;
+
+		if ( is_null( $class ) ) {
+			$classes = $this->get_the_seo_bar_classes();
+
+			$width = $is_term ? ' ' . $classes['100%'] : '';
+			$pill = $this->pill_the_seo_bar() ? ' ' . $classes['pill'] : '';
+
+			$class = 'ad-seo clearfix' . $width . $pill;
+		}
+
+		if ( isset( $ajax_id ) ) {
+			//* Ajax handler.
+			$script = '<script>jQuery("#' . esc_attr( $ajax_id ) . '").on( "hover click", autodescription.statusBarHover );</script>';
+
+			return sprintf( '<span class="%s" id="%s"><span class="ad-bar-wrap">%s</span></span>', $class, $ajax_id, $content ) . $script;
+		}
+
+		return sprintf( '<span class="%s"><span class="ad-bar-wrap">%s</span></span>', $class, $content );
+	}
+
+	/**
+	 * Output the SEO bar for Terms and Taxonomies.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $args {
+	 *	 'is_term' => bool $is_term,
+	 *	 'term' => object $term,
+	 *	 'post_id' => int $post_id,
+	 *	 'post_i18n' => string $post_i18n,
+	 *	 'post_low' => string $post_low,
+	 *	 'type' => string $type,
+	 * }
+	 *
+	 * @return string $content The SEO bar.
+	 */
+	protected function the_seo_bar_term( $args ) {
+
+		$post_id = $args['post_id'];
+		$term = $args['term'];
+		$post = $args['post_i18n'];
+		$is_term = true;
+
+		$noindex = isset( $term->admeta['noindex'] ) && $this->is_checked( $term->admeta['noindex'] ) ? true : false;
+		$redirect = false; // We don't apply redirect on taxonomies (yet)
+
+		$ad_savedflag = isset( $term->admeta['saved_flag'] ) && $this->is_checked( $term->admeta['saved_flag'] ) ? true : false;
+		$flag = $ad_savedflag;
+
+		//* Genesis data fetch
+		if ( false === $noindex && false === $flag && isset( $term->meta['noindex'] ) )
+			$noindex = $this->is_checked( $term->meta['noindex'] ) ? true : false;
+
+		//* Blocked SEO, return simple bar.
+		if ( $redirect || $noindex )
+			return $this->the_seo_bar_blocked( array( 'is_term' => $is_term, 'redirect' => $redirect, 'noindex' => $noindex, 'post_i18n' => $post ) );
+
+		$title_notice		= $this->the_seo_bar_title_notice( $args );
+		$description_notice	= $this->the_seo_bar_description_notice( $args );
+		$index_notice 		= $this->the_seo_bar_index_notice( $args );
+		$follow_notice		= $this->the_seo_bar_follow_notice( $args );
+		$archive_notice		= $this->the_seo_bar_archive_notice( $args );
+
+		$content = $title_notice . $description_notice . $index_notice . $follow_notice . $archive_notice;
+
+		return $this->get_the_seo_bar_wrap( $content, $is_term );
+	}
+
+	/**
+	 * Output the SEO bar for Terms and Taxonomies.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $args {
+	 *	 'is_term' => $is_term,
+	 *	 'term' => $term,
+	 *	 'post_id' => $post_id,
+	 *	 'post_i18n' => $post_i18n,
+	 *	 'post_low' => $post_low,
+	 *	 'type' => $type,
+	 * }
+	 *
+	 * @return string $content The SEO bar.
+	 */
+	protected function the_seo_bar_page( $args ) {
+
+		$post_id = $args['post_id'];
+		$post = $args['post_i18n'];
+		$is_term = false;
+		$is_front_page = $this->is_static_frontpage( $post_id );
+
+		$redirect = $this->get_custom_field( 'redirect', $post_id );
+		$redirect = empty( $redirect ) ? false : true;
+
+		$noindex = $this->get_custom_field( '_genesis_noindex', $post_id );
+		$noindex = $this->is_checked( $noindex );
+
+		if ( $is_front_page )
+			$noindex = $this->is_option_checked( 'homepage_noindex' ) ? true : $noindex;
+
+		if ( $redirect || $noindex )
+			return $this->the_seo_bar_blocked( array( 'is_term' => $is_term, 'redirect' => $redirect, 'noindex' => $noindex, 'post_i18n' => $post ) );
+
+		$title_notice		= $this->the_seo_bar_title_notice( $args );
+		$description_notice	= $this->the_seo_bar_description_notice( $args );
+		$index_notice 		= $this->the_seo_bar_index_notice( $args );
+		$follow_notice		= $this->the_seo_bar_follow_notice( $args );
+		$archive_notice		= $this->the_seo_bar_archive_notice( $args );
+		$redirect_notice	= $this->the_seo_bar_redirect_notice( $args );
+
+		$content = $title_notice . $description_notice . $index_notice . $follow_notice . $archive_notice . $redirect_notice;
+
+		return $this->get_the_seo_bar_wrap( $content, $is_term );
+	}
+
+	/**
+	 * Fetch the post or term data for The SEO Bar, structured and cached.
+	 *
+	 * @staticvar array $data
+	 * @since 2.6.0
+	 *
+	 * @param array $args The term/post args.
+	 *
+	 * @return array $data {
+	 *	 'title' => $title,
+	 *	 'title_is_from_custom_field' => $title_is_from_custom_field,
+	 *	 'description' => $description,
+	 *	 'description_is_from_custom_field' => $description_is_from_custom_field,
+	 *	 'nofollow' => $nofollow,
+	 *	 'noarchive' => $noarchive
+	 * }
+	 */
+	protected function the_seo_bar_data( $args ) {
+
+		$post_id = $args['post_id'];
+
+		static $data = array();
+
+		if ( isset( $data[$post_id] ) )
+			return $data[$post_id];
+
+		if ( $args['is_term'] ) {
+			return $data[$post_id] = $this->the_seo_bar_term_data( $args );
+		} else {
+			return $data[$post_id] = $this->the_seo_bar_post_data( $args );
+		}
+	}
+
+	/**
+	 * Fetch the term data for The SEO Bar.
+	 *
+	 * @staticvar array $data
+	 * @since 2.6.0
+	 *
+	 * @param array $args The term args.
+	 *
+	 * @return array $data {
+	 *	 'title' => $title,
+	 *	 'title_is_from_custom_field' => $title_is_from_custom_field,
+	 *	 'description' => $description,
+	 *	 'description_is_from_custom_field' => $description_is_from_custom_field,
+	 *	 'nofollow' => $nofollow,
+	 *	 'noarchive' => $noarchive
+	 * }
+	 */
+	protected function the_seo_bar_term_data( $args ) {
+
+		$term = $args['term'];
+		$post_id = $args['post_id'];
+		$taxonomy = $args['type'];
+
+		$flag = isset( $term->admeta['saved_flag'] ) && $this->is_checked( $term->admeta['saved_flag'] ) ? true : false;
+
+		$title_custom_field = isset( $term->admeta['doctitle'] ) ? $term->admeta['doctitle'] : '';
+		$description_custom_field = isset( $term->admeta['description'] ) ? $term->admeta['description'] : '';
+		$nofollow = isset( $term->admeta['nofollow'] ) ? $term->admeta['nofollow'] : '';
+		$noarchive = isset( $term->admeta['noarchive'] ) ? $term->admeta['noarchive'] : '';
+
+		//* Genesis data fetch
+		if ( false === $flag && isset( $term->meta ) ) {
+			if ( empty( $title_custom_field ) && isset( $term->meta['doctitle'] ) )
+				$title_custom_field = $term->meta['doctitle'];
+
+			if ( empty( $description_custom_field ) && isset( $term->meta['description'] ) )
+				$description_custom_field = $term->meta['description'];
+
+			if ( empty( $nofollow ) && isset( $term->meta['nofollow'] ) )
+				$nofollow = $term->meta['nofollow'];
+
+			if ( empty( $noarchive ) && isset( $term->meta['noarchive'] ) )
+				$noarchive = $term->meta['noarchive'];
+		}
+
+		$title_is_from_custom_field = (bool) $title_custom_field;
+		if ( $title_is_from_custom_field ) {
+			$title = $this->title( '', '', '', array( 'term_id' => $post_id, 'taxonomy' => $taxonomy, 'get_custom_field' => true ) );
+		} else {
+			$title = $this->title( '', '', '', array( 'term_id' => $post_id, 'taxonomy' => $taxonomy, 'get_custom_field' => false ) );
+		}
+
+		$description_is_from_custom_field = (bool) $description_custom_field;
+		if ( $description_is_from_custom_field ) {
+			$taxonomy = isset( $term->taxonomy ) && $term->taxonomy ? $term->taxonomy : false;
+			$description_args = $taxonomy ? array( 'id' => $post_id, 'taxonomy' => $term->taxonomy, 'get_custom_field' => true ) : array( 'get_custom_field' => true );
+
+			$description = $this->generate_description( '', $description_args );
+		} else {
+			$taxonomy = isset( $term->taxonomy ) && $term->taxonomy ? $term->taxonomy : false;
+			$description_args = $taxonomy ? array( 'id' => $post_id, 'taxonomy' => $term->taxonomy, 'get_custom_field' => false ) : array( 'get_custom_field' => false );
+
+			$description = $this->generate_description( '', $description_args );
+		}
+
+		$nofollow = $this->is_checked( $nofollow );
+		$noarchive = $this->is_checked( $noarchive );
+
+		return array(
+			'title' => $title,
+			'title_is_from_custom_field' => $title_is_from_custom_field,
+			'description' => $description,
+			'description_is_from_custom_field' => $description_is_from_custom_field,
+			'nofollow' => $nofollow,
+			'noarchive' => $noarchive
+		);
+	}
+
+	/**
+	 * Fetch the post data for The SEO Bar.
+	 *
+	 * @staticvar array $data
+	 * @since 2.6.0
+	 *
+	 * @param array $args The post args.
+	 *
+	 * @return array $data {
+	 *	 'title' => $title,
+	 *	 'title_is_from_custom_field' => $title_is_from_custom_field,
+	 *	 'description' => $description,
+	 *	 'description_is_from_custom_field' => $description_is_from_custom_field,
+	 *	 'nofollow' => $nofollow,
+	 *	 'noarchive' => $noarchive
+	 * }
+	 */
+	protected function the_seo_bar_post_data( $args ) {
+
+		$post_id = $args['post_id'];
+		$page_on_front = $this->is_static_frontpage( $post_id );
+
+		$title_custom_field = $this->get_custom_field( '_genesis_title', $post_id );
+		$description_custom_field = $this->get_custom_field( '_genesis_description', $post_id );
+		$nofollow = $this->get_custom_field( '_genesis_nofollow', $post_id );
+		$noarchive = $this->get_custom_field( '_genesis_noarchive', $post_id );
+
+		if ( $page_on_front ) {
+			$title_custom_field = $this->get_option( 'homepage_title' ) ? $this->get_option( 'homepage_title' ) : $title_custom_field;
+			$description_custom_field = $this->get_option( 'homepage_description' ) ? $this->get_option( 'homepage_description' ) : $description_custom_field;
+			$nofollow = $this->get_option( 'homepage_nofollow' ) ? $this->get_option( 'homepage_nofollow' ) : $nofollow;
+			$noarchive = $this->get_option( 'homepage_noarchive' ) ? $this->get_option( 'homepage_noarchive' ) : $noarchive;
+		}
+
+		$title_is_from_custom_field = (bool) $title_custom_field;
+		if ( $title_is_from_custom_field ) {
+			$title = $this->title( '', '', '', array( 'term_id' => $post_id, 'page_on_front' => $page_on_front, 'get_custom_field' => true ) );
+		} else {
+			$title = $this->title( '', '', '', array( 'term_id' => $post_id, 'page_on_front' => $page_on_front, 'get_custom_field' => false ) );
+		}
+
+		$description_is_from_custom_field = (bool) $description_custom_field;
+		if ( $description_is_from_custom_field ) {
+			$description = $this->generate_description( '', array( 'id' => $post_id, 'get_custom_field' => true ) );
+		} else {
+			$description = $this->generate_description( '', array( 'id' => $post_id, 'get_custom_field' => false ) );
+		}
+
+		$nofollow = $this->is_checked( $nofollow );
+		$noarchive = $this->is_checked( $noarchive );
+
+		return array(
+			'title' => $title,
+			'title_is_from_custom_field' => $title_is_from_custom_field,
+			'description' => $description,
+			'description_is_from_custom_field' => $description_is_from_custom_field,
+			'nofollow' => $nofollow,
+			'noarchive' => $noarchive,
+		);
+	}
+
+	/**
+	 * Render the SEO bar title block and notice.
+	 *
+	 * @param array $args
+	 * @since 2.6.0
+	 *
+	 * @return string The SEO Bar Title Block
+	 */
+	protected function the_seo_bar_title_notice( $args ) {
+
+		//* Fetch data
+		$data = $this->the_seo_bar_data( $args );
+		$title 						= $data['title'];
+		$title_is_from_custom_field	= $data['title_is_from_custom_field'];
+
+		//* Fetch CSS classes.
+		$classes = $this->get_the_seo_bar_classes();
+		$ad25 = $classes['25%'];
+
+		//* Fetch i18n and put in vars
+		$i18n = $this->get_the_seo_bar_i18n();
+		$title_short	= $i18n['title_short'];
+		$generated		= $i18n['generated_short'];
+		$and_i18n		= $i18n['and'];
+		$but_i18n		= $i18n['but'];
+
+		//* Initialize notice.
+		$notice = $i18n['title'];
+		$class = $classes['good'];
+
+		//* Generated notice.
+		$generated_notice = '<br>' . $i18n['generated'];
+		$gen_t = $title_is_from_custom_field ? '' : $generated;
+		$gen_t_notice = $title_is_from_custom_field ? '' : $generated_notice;
+
+		//* Title length. Convert &#8230; to a single character as well.
+		$tit_len = mb_strlen( html_entity_decode( $title ) );
+
+		//* Length notice.
+		$title_length_warning = $this->get_the_seo_bar_title_length_warning( $tit_len, $class );
+		$notice .= $title_length_warning ? ' ' . $title_length_warning['notice'] : '';
+		$class = $title_length_warning['class'];
+
+		$title_duplicated = false;
+		//* Check if title is duplicated from blogname.
+		if ( $this->add_title_additions() ) {
+			//* We are using blognames in titles.
+
+			$blogname = $this->get_blogname();
+
+			$first = stripos( $title, $blogname );
+			$last = strripos( $title, $blogname );
+
+			if ( $first !== $last )
+				$title_duplicated = true;
+		}
+
+		if ( $title_duplicated ) {
+			//* If the title is good, we should use And. Otherwise 'But'.
+			$but_and = $title_length_warning['but'] ? $but_i18n : $and_i18n;
+
+			/* translators: %s = But or And */
+			$notice .= '<br>' . sprintf( __( '%s the Title contains the Blogname multiple times.', 'autodescription' ), $but_and );
+			$class = $classes['bad'];
+		}
+
+		//* Put everything together.
+		$notice = $notice . $gen_t_notice;
+		$title_short = $title_short . $gen_t;
+
+		$tit_wrap_args = array(
+			'indicator' => $title_short,
+			'notice' => $notice,
+			'width' => $ad25,
+			'class' => $class,
+		);
+
+		$title_notice = $this->wrap_the_seo_bar_block( $tit_wrap_args );
+
+		return $title_notice;
+	}
+
+	/**
+	 * Render the SEO bar description block and notice.
+	 *
+	 * @param array $args
+	 * @since 2.6.0
+	 *
+	 * @return string The SEO Bar Description Block
+	 */
+	protected function the_seo_bar_description_notice( $args ) {
+
+		//* Fetch data
+		$data = $this->the_seo_bar_data( $args );
+		$description 						= $data['description'];
+		$description_is_from_custom_field 	= $data['description_is_from_custom_field'];
+
+		//* Fetch i18n and put in vars
+		$i18n = $this->get_the_seo_bar_i18n();
+		$description_short 	= $i18n['description_short'];
+		$generated_short 	= $i18n['generated_short'];
+
+		//* Description length. Convert &#8230; to a single character as well.
+		$desc_len = mb_strlen( html_entity_decode( $description ) );
+
+		//* Fetch CSS classes.
+		$classes = $this->get_the_seo_bar_classes();
+		$ad25 = $classes['25%'];
+
+		//* Initialize notice.
+		$notice = $i18n['description'];
+		$class = $classes['good'];
+
+		//* Length notice.
+		$desc_length_warning = $this->get_the_seo_bar_description_length_warning( $desc_len, $class );
+		$notice .= $desc_length_warning['notice'] ? $desc_length_warning['notice'] . '<br>' : '';
+		$class = $desc_length_warning['class'];
+
+		//* Duplicated Words notice.
+		$desc_too_many = $this->get_the_seo_bar_description_words_warning( $description, $class );
+		$notice .= $desc_too_many['notice'] ? $desc_too_many['notice'] . '<br>' : '';
+		$class = $desc_too_many['class'];
+
+		//* Generation notice.
+		$generated_notice = $i18n['generated'] . ' ';
+		$gen_d = $description_is_from_custom_field ? '' : $generated_short;
+		$gen_d_notice = $description_is_from_custom_field ? '' : $generated_notice;
+
+		//* Put everything together.
+		$notice = $notice . $gen_d_notice;
+		$description_short = $description_short . $gen_d;
+
+		$desc_wrap_args = array(
+			'indicator' => $description_short,
+			'notice' => $notice,
+			'width' => $ad25,
+			'class' => $class,
+		);
+
+		$description_notice = $this->wrap_the_seo_bar_block( $desc_wrap_args );
+
+		return $description_notice;
+	}
+
+	/**
+	 * Description Length notices.
+	 *
+	 * @param int $desc_len The Title length
+	 * @param string $class The current color class.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return array {
+	 * 		notice => The notice,
+	 * 		class => The class,
+	 * }
+	 */
+	protected function get_the_seo_bar_description_length_warning( $desc_len, $class ) {
+
+		$classes = $this->get_the_seo_bar_classes();
+		$bad	= $classes['bad'];
+		$okay	= $classes['okay'];
+		$good	= $classes['good'];
+
+		if ( $desc_len < 100 ) {
+			$notice = ' ' . __( 'Length is far too short.', 'autodescription' );
+			$class = $bad;
+		} else if ( $desc_len < 137 ) {
+			$notice = ' ' . __( 'Length is too short.', 'autodescription' );
+
+			// Don't make it okay if it's already bad.
+			$class = $bad === $class ? $class : $okay;
+		} else if ( $desc_len > 155 && $desc_len < 175 ) {
+			$notice = ' ' . __( 'Length is too long.', 'autodescription' );
+
+			// Don't make it okay if it's already bad.
+			$class = $bad === $class ? $class : $okay;
+		} else if ( $desc_len >= 175 ) {
+			$notice = ' ' . __( 'Length is far too long.', 'autodescription' );
+			$class = $bad;
+		} else {
+			$notice = ' ' . __( 'Length is good.', 'autodescription' );
+
+			// Don't make it good if it's already bad or okay.
+			$class = $good !== $class ? $class : $good;
+		}
+
+		return array(
+			'notice' => $notice,
+			'class' => $class
+		);
+	}
+
+	/**
+	 * Calculates the word count and returns a warning with the words used.
+	 * Only when count is over 3.
+	 *
+	 * @param string $description The Description with maybe words too many.
+	 * @param string $class The current color class.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The warning notice.
+	 */
+	protected function get_the_seo_bar_description_words_warning( $description, $class ) {
+
+		$notice = '';
+		$desc_too_many = '';
+
+		//* Convert description's special characters into PHP readable words.
+		$description = htmlentities( $description, ENT_XHTML );
+
+		//* Count the words.
+		$html_special_chars = '&0123456789;';
+		$desc_words = str_word_count( strtolower( $description ), 2, $html_special_chars );
+
+		static $bother_me_length = null;
+		/**
+		 * Applies filters 'the_seo_framework_bother_me_desc_length' : int Min Character length to bother you with.
+		 * @since 2.6.0
+		 */
+		if ( is_null( $bother_me_length ) )
+			$bother_me_length = (int) apply_filters( 'the_seo_framework_bother_me_desc_length', 3 );
+
+		if ( is_array( $desc_words ) ) {
+			//* We're going to fetch word based on key, and the last element (as first)
+			$word_keys = array_flip( array_reverse( $desc_words, true ) );
+
+			$desc_word_count = array_count_values( $desc_words );
+
+			//* Parse word counting.
+			if ( is_array( $desc_word_count ) ) {
+				foreach ( $desc_word_count as $desc_word => $desc_word_count ) {
+
+					if ( mb_strlen( html_entity_decode( $desc_word ) ) < $bother_me_length ) {
+						$run = $desc_word_count >= 5 ? true : false;
+					} else {
+						$run = $desc_word_count >= 3 ? true : false;
+					}
+
+					if ( $run ) {
+						//* The encoded word is longer or equal to the bother lenght.
+
+						$word_len = mb_strlen( $desc_word );
+
+						$position = $word_keys[$desc_word];
+						$first_word_original = mb_substr( $description, $position, $word_len );
+
+						//* Found words that are used too frequently.
+						$desc_too_many[] = array( $first_word_original => $desc_word_count );
+					}
+				}
+			}
+		}
+
+		if ( '' !== $desc_too_many && is_array( $desc_too_many ) ) {
+
+			$classes = $this->get_the_seo_bar_classes();
+			$bad = $classes['bad'];
+			$okay = $classes['okay'];
+
+			$words_count = count( $desc_too_many );
+			//* Don't make it okay if it's already bad.
+			$class = $bad !== $class && $words_count <= 1 ? $okay : $bad;
+
+			$i = 1;
+			$count = count( $desc_too_many );
+			foreach ( $desc_too_many as $desc_array ) {
+				foreach ( $desc_array as $desc_value => $desc_count ) {
+					$notice .= ' ';
+
+					/**
+					 * Don't ucfirst abbrivations.
+					 * @since 2.4.1
+					 */
+					$desc_value = ctype_upper( $desc_value ) ? $desc_value : ucfirst( $desc_value );
+
+					$notice .= sprintf( __( '%s is used %d times.', 'autodescription' ), '<span>' . $desc_value . '</span>', $desc_count );
+
+					//* Don't add break at last occurence.
+					$notice .= $i === $count ? '' : '<br>';
+					$i++;
+				}
+			}
+		}
+
+		return array(
+			'notice' => $notice,
+			'class' => $class
+		);
+	}
+
+	/**
+	 * Render the SEO bar index block and notice.
+	 *
+	 * @param array $args
+	 * @since 2.6.0
+	 *
+	 * @return string The SEO Bar Index Block
+	 */
+	protected function the_seo_bar_index_notice( $args ) {
+
+		$term = $args['term'];
+		$is_term = $args['is_term'];
+		$post_i18n = $args['post_i18n'];
+
+		$data = $this->the_seo_bar_data( $args );
+
+		$classes = $this->get_the_seo_bar_classes();
+		$unknown	= $classes['unknown'];
+		$bad		= $classes['bad'];
+		$okay		= $classes['okay'];
+		$good		= $classes['good'];
+		$ad_125		= $classes['12.5%'];
+
+		$i18n = $this->get_the_seo_bar_i18n();
+		$index_short	= $i18n['index_short'];
+		$but_i18n		= $i18n['but'];
+		$and_i18n		= $i18n['and'];
+		$ind_notice		= $i18n['index'];
+
+		$ind_notice .= ' ' . sprintf( __( "%s is being indexed.", 'autodescription' ), $post_i18n );
+		$ind_class = $good;
+
+		/**
+		 * Get noindex site option
+		 *
+		 * @since 2.2.2
+		 */
+		if ( $this->is_option_checked( 'site_noindex' ) ) {
+			$ind_notice .= '<br>' . __( "But you've disabled indexing for the whole site.", 'autodescription' );
+			$ind_class = $unknown;
+			$ind_but = true;
+		}
+
+		//* Adds notice for global archive indexing options.
+		if ( $is_term ) {
+
+			/**
+			 * @staticvar bool $checked
+			 * @staticvar string $label
+			 */
+			static $checked = null;
+
+			if ( ! isset( $checked ) ) {
+				//* Fetch whether it's checked.
+				$checked = $this->the_seo_bar_archive_robots_options( 'noindex' );
+			}
+
+			if ( $checked ) {
+				$but_and = isset( $ind_but ) ? $and_i18n : $but_i18n;
+				$label = $this->get_the_term_name( $term, false );
+
+				/* translators: 1: But or And, 2: Current taxonomy term plural label */
+				$ind_notice .= '<br>' . sprintf( __( '%1$s indexing for %2$s have been disabled.', 'autodescription' ), $but_and, $label );
+				$ind_class = $unknown;
+				$ind_but = true;
+			}
+		}
+
+		//* Adds notice for WordPress blog public indexing.
+		if ( false === $this->is_blog_public() ) {
+			$but_and = isset( $ind_but ) ? $and_i18n : $but_i18n;
+			/* translators: %s = But or And */
+			$ind_notice .= '<br>' . sprintf( __( "%s the blog isn't set to public. This means WordPress discourages indexing.", 'autodescription' ), $but_and );
+			$ind_class = $bad;
+			$ind_but = true;
+		}
+
+		/**
+		 * Check if archive is empty, and therefore has set noindex for those.
+		 *
+		 * @since 2.2.8
+		 */
+		if ( $is_term && isset( $term->count ) && 0 === $term->count ) {
+			$but_and = isset( $ind_but ) ? $and_i18n : $but_i18n;
+
+			/* translators: %s = But or And */
+			$ind_notice .= '<br>' . sprintf( __( "%s there are no posts in this term; therefore, indexing has been disabled.", 'autodescription' ), $but_and );
+			//* Don't make it unknown if it's not good.
+			$ind_class = $ind_class !== $good ? $ind_class : $unknown;
+		}
+
+		$ind_wrap_args = array(
+			'indicator' => $index_short,
+			'notice' => $ind_notice,
+			'width' => $ad_125,
+			'class' => $ind_class,
+		);
+
+		$index_notice = $this->wrap_the_seo_bar_block( $ind_wrap_args );
+
+		return $index_notice;
+	}
+
+	/**
+	 * Checks whether global index/archive/follow options are checked for archives.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @param string $type : 'noindex', 'nofollow', 'noarchive'
+	 *
+	 * @return bool
+	 */
+	protected function the_seo_bar_archive_robots_options( $type ) {
+
+		$taxonomy = false;
+
+		if ( $this->is_category() )
+			$taxonomy = 'category';
+
+		if ( $this->is_tag() )
+			$taxonomy = 'tag';
+
+		if ( $taxonomy ) {
+			static $cache = array();
+
+			if ( isset( $cache[$type][$taxonomy] ) )
+				return $cache[$type][$taxonomy];
+
+			if ( $this->is_option_checked( $taxonomy . '_' . $type ) )
+				return $cache[$type][$taxonomy] = true;
+
+			return $cache[$type][$taxonomy] = false;
+		}
+
+		return false;
+	}
+
+	/**
+	 * Render the SEO bar follow block and notice.
+	 *
+	 * @param array $args
+	 * @since 2.6.0
+	 *
+	 * @return string The SEO Bar Follow Block
+	 */
+	protected function the_seo_bar_follow_notice( $args ) {
+
+		$followed = true;
+
+		$term = $args['term'];
+		$is_term = $args['is_term'];
+		$post_i18n = $args['post_i18n'];
+
+		$data = $this->the_seo_bar_data( $args );
+		$nofollow = $data['nofollow'];
+
+		$classes = $this->get_the_seo_bar_classes();
+		$unknown	= $classes['unknown'];
+		$bad		= $classes['bad'];
+		$okay		= $classes['okay'];
+		$good		= $classes['good'];
+		$ad_125		= $classes['12.5%'];
+
+		$i18n = $this->get_the_seo_bar_i18n();
+		$follow_i18n	= $i18n['follow'];
+		$but_i18n		= $i18n['but'];
+		$and_i18n		= $i18n['and'];
+		$follow_short	= $i18n['follow_short'];
+
+		if ( $nofollow ) {
+			$fol_notice = $follow_i18n . ' ' . sprintf( __( "%s links aren't being followed.", 'autodescription' ), $post_i18n );
+			$fol_class = $unknown;
+			$fol_but = true;
+
+			$followed = false;
+		} else {
+			$fol_notice = $follow_i18n . ' ' . sprintf( __( '%s links are being followed.', 'autodescription' ), $post_i18n );
+			$fol_class = $good;
+		}
+
+		/**
+		 * Get nofolow site option
+		 *
+		 * @since 2.2.2
+		 */
+		if ( $this->is_option_checked( 'site_nofollow' ) ) {
+			$but_and = isset( $fol_but ) ? $and_i18n : $but_i18n;
+			/* translators: %s = But or And */
+			$fol_notice .= '<br>' . sprintf( __( "%s you've disabled the following of links for the whole site.", 'autodescription' ), $but_and );
+			$fol_class = $unknown;
+			$fol_but = true;
+
+			$followed = false;
+		}
+
+		//* Adds notice for global archive indexing options.
+		if ( $is_term ) {
+
+			/**
+			 * @staticvar bool $checked
+			 * @staticvar string $label
+			 */
+			static $checked = null;
+
+			if ( ! isset( $checked ) ) {
+				//* Fetch whether it's checked.
+				$checked = $this->the_seo_bar_archive_robots_options( 'nofollow' );
+			}
+
+			if ( $checked ) {
+				$but_and = isset( $fol_but ) ? $and_i18n : $but_i18n;
+				$label = $this->get_the_term_name( $term, false );
+
+				/* translators: 1: But or And, 2: Current taxonomy term plural label */
+				$fol_notice .= '<br>' . sprintf( __( '%1$s following for %2$s have been disabled.', 'autodescription' ), $but_and, $label );
+				$fol_class = $unknown;
+
+				$followed = false;
+			}
+		}
+
+		if ( false === $this->is_blog_public() ) {
+			//* Make it "and" if following has not been disabled otherwise.
+			$but_and = $followed || ! isset( $fol_but ) ? $and_i18n : $but_i18n;
+
+			/* translators: %s = But or And */
+			$fol_notice .= '<br>' . sprintf( __( "%s the blog isn't set to public. This means WordPress allows the links to be followed regardless.", 'autodescription' ), $but_and );
+			$fol_class = $followed ? $fol_class : $okay;
+			$fol_but = true;
+
+			$followed = false;
+		}
+
+		$fol_wrap_args = array(
+			'indicator' => $follow_short,
+			'notice' => $fol_notice,
+			'width' => $ad_125,
+			'class' => $fol_class,
+		);
+
+		$follow_notice = $this->wrap_the_seo_bar_block( $fol_wrap_args );
+
+		return $follow_notice;
+	}
+
+	/**
+	 * Render the SEO bar archive block and notice.
+	 *
+	 * @param array $args
+	 * @since 2.6.0
+	 *
+	 * @return string The SEO Bar Follow Block
+	 */
+	protected function the_seo_bar_archive_notice( $args ) {
+
+		$archived = true;
+
+		$term = $args['term'];
+		$is_term = $args['is_term'];
+		$post_low = $args['post_low'];
+
+		$data = $this->the_seo_bar_data( $args );
+		$noarchive	= $data['noarchive'];
+
+		$classes = $this->get_the_seo_bar_classes();
+		$unknown	= $classes['unknown'];
+		$bad		= $classes['bad'];
+		$okay		= $classes['okay'];
+		$good		= $classes['good'];
+		$ad_125		= $classes['12.5%'];
+
+		$i18n = $this->get_the_seo_bar_i18n();
+		$archive_i18n	= $i18n['archive'];
+		$but_i18n		= $i18n['but'];
+		$and_i18n		= $i18n['and'];
+		$archive_short	= $i18n['archive_short'];
+
+		if ( $noarchive ) {
+			$arc_notice = $archive_i18n . ' ' . sprintf( __( "Search Engine aren't allowed to archive this %s.", 'autodescription' ), $post_low );
+			$arc_class = $unknown;
+			$archived = false;
+			$arc_but = true;
+		} else {
+			$arc_notice = $archive_i18n . ' ' . sprintf( __( 'Search Engine are allowed to archive this %s.', 'autodescription' ), $post_low );
+			$arc_class = $good;
+		}
+
+		/**
+		 * Get noarchive site option
+		 *
+		 * @since 2.2.2
+		 */
+		if ( $this->is_option_checked( 'site_noarchive' ) ) {
+			$but_and = isset( $arc_but ) ? $and_i18n : $but_i18n;
+
+			$arc_notice .= '<br>' . sprintf( __( "But you've disabled archiving for the whole site.", 'autodescription' ), $but_and );
+			$arc_class = $unknown;
+			$arc_but = true;
+
+			$archived = false;
+		}
+
+		//* Adds notice for global archive indexing options.
+		if ( $is_term ) {
+
+			/**
+			 * @staticvar bool $checked
+			 * @staticvar string $label
+			 */
+			static $checked = null;
+
+			if ( ! isset( $checked ) ) {
+				//* Fetch whether it's checked.
+				$checked = $this->the_seo_bar_archive_robots_options( 'noarchive' );
+			}
+
+			if ( $checked ) {
+				$but_and = isset( $arc_but ) ? $and_i18n : $but_i18n;
+				$label = $this->get_the_term_name( $term, false );
+
+				/* translators: 1: But or And, 2: Current taxonomy term plural label */
+				$arc_notice .= '<br>' . sprintf( __( '%1$s archiving for %2$s have been disabled.', 'autodescription' ), $but_and, $label );
+				$arc_class = $unknown;
+				$arc_but = true;
+
+				$archived = false;
+			}
+		}
+
+		if ( false === $this->is_blog_public() ) {
+			//* Make it "and" if archiving has not been disabled otherwise.
+			$but_and = $archived || ! isset( $arc_but ) ? $and_i18n : $but_i18n;
+
+			/* translators: %s = But or And */
+			$arc_notice .= '<br>' . sprintf( __( "%s the blog isn't set to public. This means WordPress allows the blog to be archived regardless.", 'autodescription' ), $but_and );
+			$arc_but = true;
+
+			$arc_class = $archived ? $arc_class : $okay;
+			$archived = true;
+		}
+
+		$arc_wrap_args = array(
+			'indicator' => $archive_short,
+			'notice' => $arc_notice,
+			'width' => $ad_125,
+			'class' => $arc_class,
+		);
+
+		$archive_notice = $this->wrap_the_seo_bar_block( $arc_wrap_args );
+
+		return $archive_notice;
+	}
+
+	/**
+	 * Render the SEO bar redirect block and notice.
+	 *
+	 * @param array $args
+	 * @since 2.6.0
+	 *
+	 * @return string The SEO Bar Redirect Block
+	 */
+	protected function the_seo_bar_redirect_notice( $args ) {
+
+		$is_term = $args['is_term'];
+
+		if ( $is_term ) {
+			//* No redirection on taxonomies (yet).
+			$redirect_notice = '';
+		} else {
+			//* Pretty much outputs that it's not being redirected.
+
+			$post = $args['post_i18n'];
+
+			$classes = $this->get_the_seo_bar_classes();
+			$ad_125 = $classes['12.5%'];
+
+			$i18n = $this->get_the_seo_bar_i18n();
+			$redirect_i18n = $i18n['redirect'];
+			$redirect_short = $i18n['redirect_short'];
+
+			$red_notice = $redirect_i18n . ' ' . sprintf( __( "%s isn't being redirected.", 'autodescription' ), $post );
+			$red_class = $classes['good'];
+
+			$red_wrap_args = array(
+				'indicator' => $redirect_short,
+				'notice' => $red_notice,
+				'width' => $ad_125,
+				'class' => $red_class,
+			);
+
+			$redirect_notice = $this->wrap_the_seo_bar_block( $red_wrap_args );
+		}
+
+		return $redirect_notice;
+	}
+
+	/**
+	 * Render the SEO bar when the page/term is blocked.
+	 *
+	 * @param array $args {
+	 *		$is_term => bool,
+	 *		$redirect => bool,
+	 *		$noindex => bool,
+	 *		$post_i18n => string
+	 * }
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The SEO Bar
+	 */
+	protected function the_seo_bar_blocked( $args ) {
+
+		$classes = $this->get_the_seo_bar_classes();
+		$i18n = $this->get_the_seo_bar_i18n();
+
+		$is_term = $args['is_term'];
+		$redirect = $args['redirect'];
+		$noindex = $args['noindex'];
+		$post = $args['post_i18n'];
+
+		if ( $redirect && $noindex ) {
+			//* Redirect and noindex found, why bother showing SEO info?
+
+			$red_notice = $i18n['redirect'] . ' ' . sprintf( __( "%s is being redirected. This means no SEO values have to be set.", 'autodescription' ), $post );
+			$red_class = $classes['unknown'];
+
+			$noi_notice = $i18n['index'] . ' ' . sprintf( __( "%s is not being indexed. This means no SEO values have to be set.", 'autodescription' ), $post );
+			$noi_class = $classes['unknown'];
+
+			$red_wrap_args = array(
+				'indicator' => $i18n['redirect_short'],
+				'notice' => $red_notice,
+				'width' => $classes['50%'],
+				'class' => $red_class,
+			);
+
+			$noi_wrap_args = array(
+				'indicator' => $i18n['index_short'],
+				'notice' => $noi_notice,
+				'width' => $classes['50%'],
+				'class' => $noi_class,
+			);
+
+			$redirect_notice = $this->wrap_the_seo_bar_block( $red_wrap_args );
+			$noindex_notice = $this->wrap_the_seo_bar_block( $noi_wrap_args );
+
+			$content = $redirect_notice . $noindex_notice;
+
+			return $this->get_the_seo_bar_wrap( $content, $is_term );
+		} else if ( $redirect && false === $noindex ) {
+			//* Redirect found, why bother showing SEO info?
+
+			$red_notice = $i18n['redirect'] . ' ' . sprintf( __( "%s is being redirected. This means no SEO values have to be set.", 'autodescription' ), $post );
+			$red_class = $classes['unknown'];
+
+			$red_wrap_args = array(
+				'indicator' => $i18n['redirect_short'],
+				'notice' => $red_notice,
+				'width' => $classes['100%'],
+				'class' => $red_class,
+			);
+
+			$redirect_notice = $this->wrap_the_seo_bar_block( $red_wrap_args );
+
+			return $this->get_the_seo_bar_wrap( $redirect_notice, $is_term );
+		} else if ( $noindex && false === $redirect ) {
+			//* Noindex found, why bother showing SEO info?
+
+			$noi_notice = $i18n['index'] . ' ' . sprintf( __( "%s is not being indexed. This means no SEO values have to be set.", 'autodescription' ), $post );
+			$noi_class = $classes['unknown'];
+
+			$noi_wrap_args = array(
+				'indicator' => $i18n['index_short'],
+				'notice' => $noi_notice,
+				'width' => $classes['100%'],
+				'class' => $noi_class,
+			);
+
+			$noindex_notice = $this->wrap_the_seo_bar_block( $noi_wrap_args );
+
+			return $this->get_the_seo_bar_wrap( $noindex_notice, $is_term );
+		}
+
+		return '';
+	}
+
+	/**
+	 * Title Length notices.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int $tit_len The Title length
+	 * @param string $class The Current Title notification class.
+	 *
+	 * @return array {
+	 * 		string $notice => The notice,
+	 * 		string $class => The class,
+	 * 		bool $but => Whether we should use but or and,
+	 * }
+	 */
+	protected function get_the_seo_bar_title_length_warning( $tit_len, $class ) {
+
+		$classes = $this->get_the_seo_bar_classes();
+		$bad	= $classes['bad'];
+		$okay	= $classes['okay'];
+		$good	= $classes['good'];
+
+		$but = false;
+
+		if ( $tit_len < 25 ) {
+			$notice = ' ' . __( 'Length is far too short.', 'autodescription' );
+			$class = $bad;
+		} else if ( $tit_len < 42 ) {
+			$notice = ' ' . __( 'Length is too short.', 'autodescription' );
+			$class = $okay;
+		} else if ( $tit_len > 55 && $tit_len < 75 ) {
+			$notice = ' ' . __( 'Length is too long.', 'autodescription' );
+			$class = $okay;
+		} else if ( $tit_len >= 75 ) {
+			$notice = ' ' . __( 'Length is far too long.', 'autodescription' );
+			$class = $bad;
+		} else {
+			$notice = ' ' . __( 'Length is good.', 'autodescription' );
+			$class = $good;
+			$but = true;
+		}
+
+		return array(
+			'notice' => $notice,
+			'class' => $class,
+			'but' => $but
+		);
+	}
+
+	/**
+	 * Returns an array of the classes used for CSS within The SEO Bar.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return array The class names.
+	 */
+	public function get_the_seo_bar_classes() {
+		return array(
+			'bad' 		=> 'ad-seo-bad',
+			'okay' 		=> 'ad-seo-okay',
+			'good' 		=> 'ad-seo-good',
+			'unknown' 	=> 'ad-seo-unknown',
+
+			'pill' => 'pill',
+
+			'100%' 	=> 'ad-100',
+			'60%' 	=> 'ad-60',
+			'50%' 	=> 'ad-50',
+			'40%' 	=> 'ad-40',
+			'33%' 	=> 'ad-33',
+			'25%' 	=> 'ad-25',
+			'25%' 	=> 'ad-25',
+			'20%' 	=> 'ad-20',
+			'16%' 	=> 'ad-16',
+			'12.5%' => 'ad-12-5',
+			'11%' 	=> 'ad-11',
+			'10%' 	=> 'ad-10',
+		);
+	}
+
+	/**
+	 * Returns an array of the i18n notices for The SEO Bar.
+	 *
+	 * @staticvar array $i18n
+	 * @since 2.6.0
+	 *
+	 * @return array The i18n sentences.
+	 */
+	public function get_the_seo_bar_i18n() {
+
+		static $i18n = null;
+
+		if ( isset( $i18n ) )
+			return $i18n;
+
+		return $i18n = array(
+			'title'			=> __( 'Title:', 'autodescription' ),
+			'description' 	=> __( 'Description:', 'autodescription' ),
+			'index'			=> __( 'Index:', 'autodescription' ),
+			'follow'		=> __( 'Follow:', 'autodescription' ),
+			'archive'		=> __( 'Archive:', 'autodescription' ),
+			'redirect'		=> __( 'Redirect:', 'autodescription' ),
+
+			'generated' => __( 'Generated: Automatically generated.', 'autodescription'),
+
+			'generated_short'	=> _x( 'G', 'Generated', 'autodescription' ),
+			'title_short'		=> _x( 'T', 'Title', 'autodescription' ),
+			'description_short'	=> _x( 'D', 'Description', 'autodescription' ),
+			'index_short'		=> _x( 'I', 'no-Index', 'autodescription' ),
+			'follow_short'		=> _x( 'F', 'no-Follow', 'autodescription' ),
+			'archive_short'		=> _x( 'A', 'no-Archive', 'autodescription' ),
+			'redirect_short'	=> _x( 'R', 'Redirect', 'autodescription' ),
+
+			'but' => _x( 'But', 'But there are...', 'autodescription' ),
+			'and' => _x( 'And', 'And there are...', 'autodescription' ),
+		);
+	}
+
+	/**
+	 * Whether to square or pill the seo bar.
+	 *
+	 * Applies filters 'the_seo_framework_seo_bar_pill' : boolean
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	protected function pill_the_seo_bar() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		//* TODO add option.
+		$filter = (bool) apply_filters( 'the_seo_framework_seo_bar_pill', false );
+
+		return $cache = $filter ? true : false;
+	}
+
+}
Index: inc/classes/feed.class.php
===================================================================
--- inc/classes/feed.class.php	(revision 1413572)
+++ inc/classes/feed.class.php	(working copy)
@@ -1,118 +1,142 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Feed
- *
- * Influences WordPress feeds.
- * "Report Cybr for Feeding." - General EUW League of Legends player.
- *
- * @since 2.5.2
- */
-class AutoDescription_Feed extends AutoDescription_Transients {
-
-	/**
-	 * Constructor, load parent constructor and run functions.
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		add_filter( 'the_content_feed', array( $this, 'the_content_feed' ), 10, 2 );
-	}
-
-	/**
-	 * Changes feed's content.
-	 *
-	 * @since 2.5.2
-	 */
-	public function the_content_feed( $content, $feed_type ) {
-
-		if ( ! empty( $content ) ) {
-
-			if ( $this->get_option( 'excerpt_the_feed' ) ) {
-				//* Strip all code and lines.
-				$excerpt = $this->get_excerpt_by_id( $content );
-
-				$excerpt_len = (int) mb_strlen( $excerpt );
-				/**
-				 * Applies filters the_seo_framework_max_content_feed_length : The max excerpt length.
-				 * @since 2.5.2
-				 */
-				$max_len = (int) apply_filters( 'the_seo_framework_max_content_feed_length', 400 );
-
-				//* Generate excerpt.
-				if ( $excerpt_len > $max_len ) {
-					// Cut string to fit $max_char_length.
-					$subex = mb_substr( $excerpt, 0, $max_len );
-					// Split words in array. Boom.
-					$exwords = explode( ' ', $subex );
-					// Calculate if last word exceeds.
-					$excut = - ( mb_strlen( $exwords[ count( $exwords ) - (int) 1 ] ) );
-
-					if ( $excut < (int) 0 ) {
-						//* Cut out exceeding word.
-						$excerpt = mb_substr( $subex, 0, $excut );
-					} else {
-						// We're all good here, continue.
-						$excerpt = $subex;
-					}
-
-					$excerpt = rtrim( $excerpt ) . '...';
-				}
-
-				$h2_output = '';
-
-				if ( 0 === mb_strpos( $content, '<h2>' ) ) {
-					//* Add the h2 title back
-					$h2_end = mb_strpos( $content, '</h2>' );
-
-					if ( false !== $h2_end ) {
-						//* Start of content, plus <h2>
-						$h2_start = 4;
-						//* Remove the length of <h2>, again.
-						$h2_end = $h2_end - $h2_start;
-
-						//* Fetch h2 content.
-						$h2_content = mb_substr( $content, $h2_start, $h2_end );
-
-						//* Remove the H2 content from the excerpt.
-						$count = 1;
-						$excerpt = str_replace( $h2_content, '', $excerpt, $count );
-
-						//* Wrap h2 content in h2 tags.
-						$h2_output = '<h2>' . $h2_content . "</h2>\r\n";
-					}
-				}
-
-				$content = $h2_output . '<p>' . trim( $excerpt ) . '</p>';
-			}
-
-			if ( $this->get_option( 'source_the_feed' ) ) {
-				//* Fetch permalink and add it to the content.
-				$permalink = $this->the_url();
-
-				$source_i18n = _x( 'Source', 'The content source', 'autodescription' );
-				$content .= "\r\n" . '<p><a href="' . $permalink . '" rel="external nofollow">' . $source_i18n . '</a></p>';
-			}
-
-		}
-
-		return $content;
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Feed
+ *
+ * Influences WordPress feeds.
+ * "Report Cybr for Feeding." - General EUW League of Legends player.
+ *
+ * @since 2.5.2
+ */
+class AutoDescription_Feed extends AutoDescription_Transients {
+
+	/**
+	 * Constructor, load parent constructor and run functions.
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		add_action( 'template_redirect', array( $this, 'init_feed' ) );
+	}
+
+	/**
+	 * Initializes feed actions and hooks.
+	 *
+	 * @since 2.6.0
+	 */
+	public function init_feed() {
+
+		if ( false === $this->is_feed() )
+			return;
+
+		add_filter( 'the_content_feed', array( $this, 'the_content_feed' ), 10, 2 );
+
+		//* Only add the feed link to the excerpt if we're only building excerpts.
+		if ( $this->rss_uses_excerpt() )
+			add_filter( 'the_excerpt_rss', array( $this, 'the_content_feed' ), 10, 1 );
+
+	}
+
+	/**
+	 * Determines whether the WordPress excerpt RSS feed option is used.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function rss_uses_excerpt() {
+		return (bool) get_option( 'rss_use_excerpt' );
+	}
+
+	/**
+	 * Changes feed's content.
+	 *
+	 * @param $content The feed's content.
+	 * @param $feed_type The feed type (not used in excerpted content)
+	 *
+	 * @since 2.5.2
+	 */
+	public function the_content_feed( $content, $feed_type = null ) {
+
+		if ( $content ) {
+
+			/**
+			 * Don't alter already-excerpts or descriptions.
+			 * $feed_type is only set on 'the_content_feed' filter.
+			 */
+			if ( isset( $feed_type ) && $this->get_option( 'excerpt_the_feed' ) ) {
+				//* Strip all code and lines.
+				$excerpt = $this->get_excerpt_by_id( $content );
+
+				$excerpt_len = (int) mb_strlen( $excerpt );
+				/**
+				 * Applies filters the_seo_framework_max_content_feed_length : The max excerpt length.
+				 * @since 2.5.2
+				 */
+				$max_len = (int) apply_filters( 'the_seo_framework_max_content_feed_length', 400 );
+
+				//* Generate excerpt.
+				$excerpt = $this->trim_excerpt( $excerpt, $excerpt_len, $max_len );
+
+				$h2_output = '';
+
+				if ( 0 === strpos( $content, '<h2>' ) ) {
+					//* Add the h2 title back
+					$h2_end = mb_strpos( $content, '</h2>' );
+
+					if ( false !== $h2_end ) {
+						//* Start of content, plus <h2>
+						$h2_start = 4;
+						//* Remove the length of <h2>, again.
+						$h2_end = $h2_end - $h2_start;
+
+						//* Fetch h2 content.
+						$h2_content = mb_substr( $content, $h2_start, $h2_end );
+
+						//* Remove the H2 content from the excerpt.
+						$count = 1;
+						$excerpt = str_replace( $h2_content, '', $excerpt, $count );
+
+						//* Wrap h2 content in h2 tags.
+						$h2_output = '<h2>' . $h2_content . "</h2>\r\n";
+					}
+				}
+
+				$content = $h2_output . '<p>' . trim( $excerpt ) . '</p>';
+			}
+
+			if ( $this->get_option( 'source_the_feed' ) ) {
+
+				//* Fetch permalink and add it to the content.
+				$permalink = $this->the_url();
+
+				/**
+				 * Applies filters 'the_seo_framework_feed_source_link' : string
+				 * @since 2.6.0
+				 */
+				$source_i18n = (string) apply_filters( 'the_seo_framework_feed_source_link_text', _x( 'Source', 'The content source', 'autodescription' ) );
+				$content .= "\r\n" . '<p><a href="' . $permalink . '" rel="external nofollow">' . $source_i18n . '</a></p>';
+			}
+
+		}
+
+		return $content;
+	}
+
+}
Index: inc/classes/generate-description.class.php
===================================================================
--- inc/classes/generate-description.class.php	(nonexistent)
+++ inc/classes/generate-description.class.php	(working copy)
@@ -0,0 +1,831 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Generate_Description
+ *
+ * Generates Description SEO data based on content.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Generate_Description extends AutoDescription_Generate {
+
+	/**
+	 * Whether we're parsing the manual Excerpt for the automated description.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @var bool Using manual excerpt.
+	 */
+	protected $using_manual_excerpt = false;
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Create description
+	 *
+	 * @param string $description the description.
+	 * @param array $args description args : {
+	 * 		@param int $id the term or page id.
+	 * 		@param string $taxonomy taxonomy name.
+	 * 		@param bool $is_home We're generating for the home page.
+	 * 		@param bool $get_custom_field Do not fetch custom title when false.
+	 * 		@param bool $social Generate Social Description when true.
+	 * }
+	 *
+	 * @since 1.0.0
+	 *
+	 * @return string The description
+	 */
+	public function generate_description( $description = '', $args = array() ) {
+
+		/**
+		 * Parse args.
+		 * @since 2.5.0
+		 */
+		$args = $this->reparse_description_args( $args );
+
+		if ( $args['get_custom_field'] && empty( $description ) ) {
+			//* Fetch from options, if any.
+			$description = (string) $this->description_from_custom_field( $args, false );
+
+			//* We've already checked the custom fields, so let's remove the check in the generation.
+			$args['get_custom_field'] = false;
+		}
+
+		//* Still no description found? Create an auto description based on content.
+		if ( empty( $description ) || ! is_scalar( $description ) )
+			$description = $this->generate_description_from_id( $args, false );
+
+		/**
+		 * Beautify.
+		 * @since 2.3.4
+		 */
+		$description = $this->escape_description( $description );
+
+		return $description;
+	}
+
+	/**
+	 * Escapes and beautifies description.
+	 *
+	 * @param string $description The description to escape and beautify.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return string Escaped and beautified description.
+	 */
+	public function escape_description( $description = '' ) {
+
+		$description = wptexturize( $description );
+		$description = convert_chars( $description );
+		$description = esc_html( $description );
+		$description = capital_P_dangit( $description );
+		$description = trim( $description );
+
+		return $description;
+	}
+
+	/**
+	 * Parse and sanitize description args.
+	 *
+	 * @param array $args required The passed arguments.
+	 * @param array $defaults The default arguments.
+	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
+	 *
+	 * @applies filters the_seo_framework_description_args : {
+	 * 		@param int $id the term or page id.
+	 * 		@param string $taxonomy taxonomy name.
+	 * 		@param bool $is_home We're generating for the home page.
+	 * 		@param bool $get_custom_field Do not fetch custom title when false.
+	 * 		@param bool $social Generate Social Description when true.
+	 * }
+	 *
+	 * @since 2.5.0
+	 * @return array $args parsed args.
+	 */
+	public function parse_description_args( $args = array(), $defaults = array(), $get_defaults = false ) {
+
+		//* Passing back the defaults reduces the memory usage.
+		if ( empty( $defaults ) ) {
+			$defaults = array(
+				'id' 				=> $this->get_the_real_ID(),
+				'taxonomy'			=> '',
+				'is_home'			=> false,
+				'get_custom_field' 	=> true,
+				'social' 			=> false,
+			);
+
+			$defaults = (array) apply_filters( 'the_seo_framework_description_args', $defaults, $args );
+		}
+
+		//* Return early if it's only a default args request.
+		if ( $get_defaults )
+			return $defaults;
+
+		//* Array merge doesn't support sanitation. We're simply type casting here.
+		$args['id'] 				= isset( $args['id'] ) 					? (int) $args['id'] 				: $defaults['id'];
+		$args['taxonomy'] 			= isset( $args['taxonomy'] ) 			? (string) $args['taxonomy'] 		: $defaults['taxonomy'];
+		$args['is_home'] 			= isset( $args['is_home'] ) 			? (bool) $args['is_home'] 			: $defaults['is_home'];
+		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
+		$args['social'] 			= isset( $args['social'] ) 				? (bool) $args['social'] 			: $defaults['social'];
+
+		return $args;
+	}
+
+	/**
+	 * Reparse description args.
+	 *
+	 * @param array $args required The passed arguments.
+	 *
+	 * @since 2.6.0
+	 * @return array $args parsed args.
+	 */
+	public function reparse_description_args( $args = array() ) {
+
+		$default_args = $this->parse_description_args( '', '', true );
+
+		if ( is_array( $args ) ) {
+			 if ( empty( $args ) ) {
+				$args = $default_args;
+			} else {
+				$args = $this->parse_description_args( $args, $default_args );
+			}
+		} else {
+			//* Old style parameters are used. Doing it wrong.
+			$this->_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', '2.5.0' );
+			$args = $default_args;
+		}
+
+		return $args;
+	}
+
+	/**
+	 * Create description
+	 *
+	 * @param array $args description args : {
+	 * 		@param int $id the term or page id.
+	 * 		@param string $taxonomy taxonomy name.
+	 * 		@param bool $is_home We're generating for the home page.
+	 * }
+	 * @param bool $escape Escape the output if true.
+	 *
+	 * @since 2.4.1
+	 *
+	 * @return string|mixed The description, might be unsafe for html output.
+	 */
+	public function description_from_custom_field( $args = array(), $escape = true ) {
+
+		/**
+		 * Parse args.
+		 * @since 2.5.0
+		 */
+		$args = $this->reparse_description_args( $args );
+
+		//* HomePage Description.
+		$description = $this->get_custom_homepage_description( $args );
+
+		//* Singular Description.
+		if ( empty( $description ) && empty( $args['taxonomy'] ) )
+			$description = $this->get_custom_singular_description( $args['id'] );
+
+		//* Archive Description.
+		if ( empty( $description ) )
+			$description = $this->get_custom_archive_description( $args );
+
+		if ( $escape && $description )
+			$description = $this->escape_description( $description );
+
+		return $description;
+	}
+
+	/**
+	 * Fetch HomePage Description from custom field.
+	 *
+	 * @access protected
+	 * Use $this->description_from_custom_field() instead.
+	 *
+	 * @param array $args Description args.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The Description
+	 */
+	protected function get_custom_homepage_description( $args ) {
+
+		$description = '';
+
+		if ( $args['is_home'] || $this->is_front_page() || ( empty( $args['taxonomy'] ) && $this->is_static_frontpage( $args['id'] ) ) ) {
+			$homedesc = $this->get_option( 'homepage_description' );
+			$description = $homedesc ? $homedesc : '';
+		}
+
+		return $description;
+	}
+
+	/**
+	 * Fetch Singular Description from custom field.
+	 *
+	 * @access protected
+	 * Use $this->description_from_custom_field() instead.
+	 *
+	 * @param int $id The page ID.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The Description
+	 */
+	protected function get_custom_singular_description( $id ) {
+
+		$description = '';
+
+		if ( $this->is_singular( $id ) ) {
+			$custom_desc = $this->get_custom_field( '_genesis_description', $id );
+			$description = $custom_desc ? $custom_desc : $description;
+		}
+
+		return $description;
+	}
+
+	/**
+	 * Fetch Archive Description from custom field.
+	 *
+	 * @access protected
+	 * Use $this->description_from_custom_field() instead.
+	 *
+	 * @param array $args
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The Description
+	 */
+	protected function get_custom_archive_description( $args ) {
+
+		$description = '';
+
+		if ( $this->is_archive() ) {
+			if ( $this->is_category() || $this->is_tag() || $this->is_tax() ) {
+
+				$term = $this->fetch_the_term( $args['id'] );
+
+				if ( isset( $term->admeta['description'] ) ) {
+					if ( $this->is_tax() )
+						$description = empty( $term->admeta['description'] ) ? $description : wp_kses_stripslashes( wp_kses_decode_entities( $term->admeta['description'] ) );
+					else
+						$description = empty( $term->admeta['description'] ) ? $description : $term->admeta['description'];
+				}
+
+				$flag = isset( $term->admeta['saved_flag'] ) ? $this->is_checked( $term->admeta['saved_flag'] ) : false;
+
+				if ( false === $flag && empty( $description ) && isset( $term->meta['description'] ) )
+					$description = empty( $term->meta['description'] ) ? $description : $term->meta['description'];
+			}
+
+			if ( $this->is_author() ) {
+				$user_description = get_the_author_meta( 'meta_description', (int) get_query_var( 'author' ) );
+
+				$description = $user_description ? $user_description : $description;
+			}
+		}
+
+
+		return $description;
+	}
+
+	/**
+	 * Generate description from content.
+	 *
+	 * @since 2.3.3
+	 *
+	 * @param array $args description args : {
+	 * 		@param int $id the term or page id.
+	 * 		@param string $taxonomy taxonomy name.
+	 * 		@param bool $is_home We're generating for the home page.
+	 * 		@param bool $get_custom_field Do not fetch custom title when false.
+	 * 		@param bool $social Generate Social Description when true.
+	 * }
+	 * @param bool $escape Escape output when true.
+	 *
+	 * @return string $output The description.
+	 */
+	public function generate_description_from_id( $args = array(), $escape = true ) {
+
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, true, $debug_key = microtime(true), get_defined_vars() );
+
+		/**
+		 * Applies filters bool 'the_seo_framework_enable_auto_description' : Enable or disable the description.
+		 *
+		 * @since 2.5.0
+		 */
+		$autodescription = (bool) apply_filters( 'the_seo_framework_enable_auto_description', true );
+		if ( false === $autodescription )
+			return '';
+
+		$description = $this->generate_the_description( $args, false );
+
+		if ( $escape )
+			$description = $this->escape_description( $description );
+
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, false, $debug_key, array( 'description' => $description, 'transient_key' => $this->auto_description_transient ) );
+
+		return (string) $description;
+	}
+
+	/**
+	 * Generate description from content
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $args description args : {
+	 * 		@param int $id the term or page id.
+	 * 		@param string $taxonomy taxonomy name.
+	 * 		@param bool $is_home We're generating for the home page.
+	 * 		@param bool $get_custom_field Do not fetch custom title when false.
+	 * 		@param bool $social Generate Social Description when true.
+	 * }
+	 * @param bool $escape Whether to escape the description.
+	 *
+	 * @staticvar string $title
+	 *
+	 * @return string The description.
+	 */
+	protected function generate_the_description( $args, $escape = true ) {
+
+		/**
+		 * Parse args.
+		 * @since 2.5.0
+		 */
+		$args = $this->reparse_description_args( $args );
+
+		//* Home Page description
+		if ( $args['is_home'] || $this->is_front_page() || $this->is_static_frontpage( $args['id'] ) )
+			return $this->generate_home_page_description( $args['get_custom_field'] );
+
+		$term = $this->fetch_the_term( $args['id'] );
+
+		//* Whether the post ID has a manual excerpt.
+		if ( empty( $term ) && has_excerpt( $args['id'] ) )
+			$this->using_manual_excerpt = true;
+
+		$title_on_blogname = $this->generate_description_additions( $args['id'], $term, false );
+		$title = $title_on_blogname['title'];
+		$on = $title_on_blogname['on'];
+		$blogname = $title_on_blogname['blogname'];
+		$sep = $title_on_blogname['sep'];
+
+		/**
+		 * Setup transient.
+		 */
+		$this->setup_auto_description_transient( $args['id'], $args['taxonomy'] );
+
+		/**
+		 * Cache the generated description within a transient.
+		 *
+		 * @since 2.3.3
+		 *
+		 * Put inside a different function.
+		 * @since 2.3.4
+		 */
+		$excerpt = $this->get_transient( $this->auto_description_transient );
+		if ( false === $excerpt ) {
+
+			/**
+			 * Get max char length.
+			 * Default to 200 when $args['social'] as there are no additions.
+			 */
+			$additions = trim( $title . " $on " . $blogname );
+			//* If there are additions, add a trailing space.
+			if ( $additions )
+				$additions .= " ";
+
+			$max_char_length_normal = 155 - mb_strlen( html_entity_decode( $additions ) );
+			$max_char_length_social = 200;
+
+			//* Generate Excerpts.
+			$excerpt_normal = $this->generate_excerpt( $args['id'], $term, $max_char_length_normal );
+			$excerpt_social = $this->generate_excerpt( $args['id'], $term, $max_char_length_social );
+
+			//* Put in array to be accessed later.
+			$excerpt = array(
+				'normal' => $excerpt_normal,
+				'social' => $excerpt_social
+			);
+
+			/**
+			 * Transient expiration: 1 week.
+			 * Keep the description for at most 1 week.
+			 *
+			 * 60s * 60m * 24h * 7d
+			 */
+			$expiration = 60 * 60 * 24 * 7;
+
+			$this->set_transient( $this->auto_description_transient, $excerpt, $expiration );
+		}
+
+		/**
+		 * Check for Social description, don't add blogname then.
+		 * Also continues normally if it's the front page.
+		 *
+		 * @since 2.5.0
+		 */
+		if ( $args['social'] ) {
+			if ( $excerpt['social'] ) {
+				$description = $excerpt['social'];
+			} else {
+				//* No social description if nothing is found.
+				$description = '';
+			}
+		} else {
+
+			if ( empty( $excerpt['normal'] ) ) {
+				//* Fetch additions ignoring options.
+
+				$title_on_blogname = $this->generate_description_additions( $args['id'], $term, true );
+				$title = $title_on_blogname['title'];
+				$on = $title_on_blogname['on'];
+				$blogname = $title_on_blogname['blogname'];
+				$sep = $title_on_blogname['sep'];
+			}
+
+			/* translators: 1: Title, 2: on, 3: Blogname */
+			$title_on_blogname = trim( sprintf( __( '%1$s %2$s %3$s', 'autodescription' ), $title, $on, $blogname ) );
+
+			if ( $excerpt['normal'] ) {
+				/* translators: 1: Title on Blogname, 2: Separator, 3: Excerpt */
+				$description = sprintf( __( '%1$s %2$s %3$s', 'autodescription' ), $title_on_blogname, $sep, $excerpt['normal'] );
+			} else {
+				//* We still add the additions when no excerpt has been found.
+				// i.e. home page or empty/shortcode filled page.
+				$description = $title_on_blogname;
+			}
+		}
+
+		if ( $escape )
+			$description = $this->escape_description( $description );
+
+		return $description;
+	}
+
+	/**
+	 * Generate the home page description.
+	 *
+	 * @param bool $custom_field whether to check the Custom Field.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The description.
+	 */
+	public function generate_home_page_description( $custom_field = true ) {
+
+		$id = $this->get_the_front_page_ID();
+
+		/**
+		 * Return early if description is found from Home Page Settings.
+		 * Only do so when $args['get_custom_field'] is true.
+		 * @since 2.3.4
+		 */
+		if ( $custom_field ) {
+			$description = $this->get_custom_homepage_description( array( 'is_home' => true ) );
+			if ( $description )
+				return $description;
+		}
+
+		$title_on_blogname = $this->generate_description_additions( $id, '', true );
+
+		$title = $title_on_blogname['title'];
+		$on = $title_on_blogname['on'];
+		$blogname = $title_on_blogname['blogname'];
+
+		return $description = sprintf( '%s %s %s', $title, $on, $blogname );
+	}
+
+	/**
+	 * Whether to add description additions. (╯°□°）╯︵ ┻━┻
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @param int $id The current page or post ID.
+	 * @param object|emptystring $term The current Term.
+	 *
+	 * @return bool
+	 */
+	public function add_description_additions( $id = '', $term = '' ) {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		/**
+		 * Applies filters the_seo_framework_add_description_additions : {
+		 *		@param bool true to add prefix.
+		 * 		@param int $id The Term object ID or The Page ID.
+		 * 		@param object $term The Term object.
+		 *	}
+		 *
+		 * @since 2.6.0
+		 */
+		$filter = (bool) apply_filters( 'the_seo_framework_add_description_additions', true, $id, $term );
+		$option = (bool) $this->get_option( 'description_additions' );
+		$excerpt = ! $this->using_manual_excerpt;
+
+		return $cache = $option && $filter && $excerpt ? true : false;
+	}
+
+	/**
+	 * Get Description Separator.
+	 *
+	 * Applies filters the_seo_framework_description_separator
+	 * @since 2.3.9
+	 *
+	 * @staticvar $sep
+	 * @since 2.6.0
+	 *
+	 * @return string The Separator
+	 */
+	public function get_description_separator() {
+
+		static $sep = null;
+
+		if ( isset( $sep ) )
+			return $sep;
+
+		return $sep = (string) apply_filters( 'the_seo_framework_description_separator', $this->get_separator( 'description' ) );
+	}
+
+	/**
+	 * Generate description additions.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @param int $id The post or term ID
+	 * @param object|empty $term The term object
+	 * @param bool $ignore Whether to ignore options and filters.
+	 *
+	 * @staticvar array $title string of titles.
+	 * @staticvar string $on
+	 *
+	 * @return array : {
+	 *		$title		=> The title
+	 *		$on 		=> The word separator
+	 *		$blogname	=> The blogname
+	 *		$sep		=> The separator
+	 * }
+	 */
+	public function generate_description_additions( $id = '', $term = '', $ignore = false ) {
+
+		static $title = array();
+
+		if ( $ignore || $this->add_description_additions( $id, $term ) ) {
+
+			if ( ! isset( $title[$id] ) )
+				$title[$id] = $this->generate_description_title( $id, $term, $ignore );
+
+			if ( $ignore || $this->is_option_checked( 'description_blogname' ) ) {
+
+				static $on = null;
+				if ( is_null( $on ) ) {
+					/* translators: Front-end output. */
+					$on = _x( 'on', 'Placement. e.g. Post Title "on" Blog Name', 'autodescription' );
+				}
+
+				//* Already cached.
+				$blogname = $this->get_blogname();
+			} else {
+				$on = '';
+				$blogname = '';
+			}
+
+			//* Already cached.
+			$sep = $this->get_description_separator();
+		} else {
+			$title[$id] = '';
+			$on = '';
+			$blogname = '';
+			$sep = '';
+		}
+
+		return array(
+			'title' => $title[$id],
+			'on' => $on,
+			'blogname' => $blogname,
+			'sep' => $sep,
+		);
+	}
+
+	/**
+	 * Generates the Title for description.
+	 *
+	 * @param int $id The page ID.
+	 * @param void|object $term The term object.
+	 * @param bool $page_on_front If front page.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return string The description title.
+	 */
+	public function generate_description_title( $id = '', $term = '', $page_on_front = false ) {
+
+		if ( '' === $id )
+			$id = $this->get_the_real_ID();
+
+		if ( $page_on_front || $this->is_static_frontpage( $id ) ) {
+			$tagline = $this->get_option( 'homepage_title_tagline' );
+			$title = $tagline ? $tagline : $this->get_blogdescription();
+		} else {
+			/**
+			 * No need to parse these when generating social description.
+			 *
+			 * @since 2.5.0
+			 */
+			if ( $this->is_blog_page( $id ) ) {
+				/**
+				 * We're on the blog page now.
+				 * @since 2.2.8
+				 */
+				$title = $this->title( '', '', '', array( 'term_id' => $id, 'notagline' => true, 'description_title' => true, 'escape' => false ) );
+
+				/**
+				 * @TODO create option.
+				 * @priority medium 2.8.0+
+				 */
+				/* translators: Front-end output. */
+				$title = __( 'Latest posts:', 'autodescription' ) . ' ' . $title;
+			} else if ( $term && is_object( $term ) ) {
+				//* We're on a taxonomy now.
+
+				if ( isset( $term->admeta['doctitle'] ) && $term->admeta['doctitle'] ) {
+					$title = $term->admeta['doctitle'];
+				} else if ( isset( $term->name ) && $term->name ) {
+					$title = $term->name;
+				} else if ( isset( $term->slug ) && $term->slug ) {
+					$title = $term->slug;
+				}
+			} else {
+				//* We're on a page now.
+				$title = $this->title( '', '', '', array( 'term_id' => $id, 'notagline' => true, 'description_title' => true, 'escape' => false ) );
+			}
+		}
+
+		/**
+		 * Use Untitled on empty titles.
+		 * @since 2.2.8
+		 */
+		/* translators: Front-end output. */
+		$title = empty( $title ) ? $this->untitled() : trim( $title );
+
+		return $title;
+	}
+
+	/**
+	 * Generate the excerpt.
+	 *
+	 * @param int|string $page_id required : The Page ID
+	 * @param object|null $term The Taxonomy Term.
+	 * @param int $max_char_length The maximum excerpt char length.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @staticvar array $excerpt_cache Holds the excerpt
+	 * @staticvar array $excerptlength_cache Holds the excerpt length
+	 *
+	 * Please note that this does not reflect the actual output becaue the $max_char_length isn't calculated on direct call.
+	 */
+	public function generate_excerpt( $page_id, $term = '', $max_char_length = 154 ) {
+
+		static $excerpt_cache = array();
+		static $excerptlength_cache = array();
+
+		$term_id = isset( $term->term_id ) ? $term->term_id : false;
+
+		//* Put excerpt in cache.
+		if ( ! isset( $excerpt_cache[$page_id][$term_id] ) ) {
+			if ( $this->is_singular( $page_id ) ) {
+				//* We're on the blog page now.
+				$excerpt = $this->get_excerpt_by_id( '', $page_id );
+			} else if ( $term && is_object( $term ) ) {
+				//* We're on a taxonomy now.
+				$excerpt = empty( $term->description ) ? $this->get_excerpt_by_id( '', '', $page_id ) : $term->description;
+			} else {
+				$excerpt = '';
+			}
+
+			$excerpt_cache[$page_id][$term_id] = $excerpt;
+		}
+
+		//* Fetch excerpt from cache.
+		$excerpt = $excerpt_cache[$page_id][$term_id];
+
+		/**
+		 * Put excerptlength in cache.
+		 * Why cache? My tests have shown that mb_strlen is 1.03x faster than cache fetching.
+		 * However, _mb_strlen (compat) is about 1740x slower. And this is the reason it's cached!
+		 */
+		if ( ! isset( $excerptlength_cache[$page_id][$term_id] ) )
+			$excerptlength_cache[$page_id][$term_id] = mb_strlen( $excerpt );
+
+		//* Fetch the length from cache.
+		$excerpt_length = $excerptlength_cache[$page_id][$term_id];
+
+		//* Trunculate if the excerpt is longer than the max char length
+		$excerpt = $this->trim_excerpt( $excerpt, $excerpt_length, $max_char_length );
+
+		return (string) $excerpt;
+	}
+
+	/**
+	 * Trim the excerpt.
+	 *
+	 * @param string $excerpt The untrimmed excerpt.
+	 * @param int $excerpt_length The current excerpt length.
+	 * @param int $max_char_length At what point to shave off the excerpt.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The trimmed excerpt.
+	 */
+	protected function trim_excerpt( $excerpt, $excerpt_length, $max_char_length ) {
+
+		if ( $excerpt_length > $max_char_length ) {
+
+			//* Cut string to fit $max_char_length.
+			$sub_ex = mb_substr( $excerpt, 0, $max_char_length );
+			$sub_ex = trim( html_entity_decode( $sub_ex ) );
+
+			//* Split words in array separated by delimiter.
+			$ex_words = explode( ' ', $sub_ex );
+
+			//* Count to total words in the excerpt.
+			$ex_total = count( $ex_words );
+
+			//* Slice the complete excerpt and count the amount of words.
+			$extra_ex_words = explode( ' ', trim( $excerpt ), $ex_total + 1 );
+			$extra_ex_total = count( $extra_ex_words ) - 1;
+			unset( $extra_ex_words[ $extra_ex_total ] );
+
+			//* Calculate if last word exceeds.
+			if ( $extra_ex_total >= $ex_total ) {
+				$ex_cut = mb_strlen( $ex_words[ $ex_total - 1 ] );
+
+				if ( $extra_ex_total > $ex_total ) {
+					/**
+					 * There are more words in the trimmed excerpt than the compared total excerpt.
+					 * Remove the exceeding word.
+					 */
+					$excerpt = mb_substr( $sub_ex, 0, - $ex_cut );
+				} else {
+					/**
+					 * The amount of words are the same in the comparison.
+					 * Calculate if the chacterers are exceeding.
+					 */
+					$ex_extra_cut = mb_strlen( $extra_ex_words[ $extra_ex_total - 1 ] );
+
+					if ( $ex_extra_cut > $ex_cut ) {
+						//* Final word is falling off. Remove it.
+						$excerpt = mb_substr( $sub_ex, 0, - $ex_cut );
+					} else {
+						//* We're all good here, continue.
+						$excerpt = $sub_ex;
+					}
+				}
+			}
+
+			//* Remove comma's and spaces.
+			$excerpt = trim( $excerpt, ' ,' );
+
+			//* Fetch last character.
+			$last_char = substr( $excerpt, -1 );
+
+			$stops = array( '.', '?', '!' );
+			//* Add three dots if there's no full stop at the end of the excerpt.
+			if ( ! in_array( $last_char, $stops ) )
+				$excerpt .= '...';
+
+		}
+
+		return $excerpt;
+	}
+
+}
Index: inc/classes/generate-image.class.php
===================================================================
--- inc/classes/generate-image.class.php	(nonexistent)
+++ inc/classes/generate-image.class.php	(working copy)
@@ -0,0 +1,362 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Generate_Image
+ *
+ * Generates Image SEO data based on content.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Generate_Image extends AutoDescription_Generate_Url {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Fetches og:image
+	 *
+	 * @uses get_header_image
+	 *
+	 * @param string $post_id the post ID
+	 * @param string $image output url for image
+	 * @param bool $escape Whether to escape the image url
+	 *
+	 * @since 2.2.1
+	 *
+	 * Applies filters string the_seo_framework_og_image_after_featured
+	 * Applies filters string the_seo_framework_og_image_after_header
+	 * @since 2.5.2
+	 *
+	 * @todo create options and upload area.
+	 * @priority medium 2.8.0+
+	 * @todo listen to attached images within post.
+	 * @priority medium 2.7.0+
+	 */
+	public function get_image( $post_id = '', $args = array(), $escape = true ) {
+
+		if ( empty( $post_id ) )
+			$post_id = $this->get_the_real_ID();
+
+		if ( empty( $post_id ) )
+			return '';
+
+		$default_args = $this->parse_image_args( '', '', true );
+
+		/**
+		 * Parse args.
+		 * @since 2.5.0
+		 */
+		if ( ! is_array( $args ) ) {
+			//* Old style parameters are used. Doing it wrong.
+			$this->_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', '2.5.0' );
+			$args = $default_args;
+		} else if ( $args ) {
+			$args = $this->parse_image_args( $args, $default_args );
+		} else {
+			$args = $default_args;
+		}
+
+		/**
+		 * Backwards compat with parse args
+		 * @since 2.5.0
+		 */
+		if ( ! isset( $args['post_id'] ) )
+			$args['post_id'] = $post_id;
+
+		//* 0. Image from argument.
+		$image = $args['image'];
+
+		//* Check if there are no disallowed arguments.
+		$all_allowed = empty( $args['disallowed'] );
+
+		//* 1. Fetch image from featured
+		if ( empty( $image ) && ( $all_allowed || ! in_array( 'featured', $args['disallowed'] ) ) )
+			$image = $this->get_image_from_post_thumbnail( $args );
+
+		//* 2. Fetch image from fallback filter 1
+		if ( empty( $image ) )
+			$image = (string) apply_filters( 'the_seo_framework_og_image_after_featured', '', $args['post_id'] );
+
+		//* 3. Fallback: Get header image if exists
+		if ( empty( $image ) && ( $all_allowed || ! in_array( 'header', $args['disallowed'] ) ) && current_theme_supports( 'custom-header', 'default-image' ) )
+			$image = get_header_image();
+
+		//* 4. Fetch image from fallback filter 2
+		if ( empty( $image ) )
+			$image = (string) apply_filters( 'the_seo_framework_og_image_after_header', '', $args['post_id'] );
+
+		//* 5. Get the WP 4.3.0 Site Icon
+		if ( empty( $image ) && ( $all_allowed || ! in_array( 'icon', $args['disallowed'] ) ) )
+			$image = $this->site_icon();
+
+		/**
+		 * Escape in Generation.
+		 * @since 2.5.2
+		 */
+		if ( $escape && $image )
+			return esc_url( $image );
+
+		return $image;
+	}
+
+	/**
+	 * Parse and sanitize image args.
+	 *
+	 * @param array $args required The passed arguments.
+	 * @param array $defaults The default arguments.
+	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
+	 *
+	 * Applies filters the_seo_framework_og_image_args : {
+	 *		@param string image The image url
+	 *		@param mixed size The image size
+	 *		@param bool icon Fetch Image icon
+	 *		@param array attr Image attributes
+	 *		@param array disallowed Disallowed image types : {
+	 *			array (
+	 * 				string 'featured'
+	 * 				string 'header'
+	 * 				string 'icon'
+	 *			)
+	 * 		}
+	 * }
+	 * The image set in the filter will always be used as fallback
+	 *
+	 * @since 2.5.0
+	 * @return array $args parsed args.
+	 */
+	public function parse_image_args( $args = array(), $defaults = array(), $get_defaults = false ) {
+
+		//* Passing back the defaults reduces the memory usage.
+		if ( empty( $defaults ) ) {
+			$defaults = array(
+				'post_id'	=> $this->get_the_real_ID(),
+				'image'		=> '',
+				'size'		=> 'full',
+				'icon'		=> false,
+				'attr'		=> array(),
+				'disallowed' => array(),
+			);
+
+			//* @since 2.0.1
+			$defaults = (array) apply_filters( 'the_seo_framework_og_image_args', $defaults, $args );
+		}
+
+		//* Return early if it's only a default args request.
+		if ( $get_defaults )
+			return $defaults;
+
+		//* Array merge doesn't support sanitation. We're simply type casting here.
+		$args['post_id'] 	= isset( $args['post_id'] ) 	? (int) $args['post_id'] 		: $defaults['post_id'];
+		$args['image'] 		= isset( $args['image'] ) 		? (string) $args['image'] 		: $defaults['image'];
+		$args['size'] 		= isset( $args['size'] ) 		? $args['size'] 				: $defaults['size']; // Mixed.
+		$args['icon'] 		= isset( $args['icon'] ) 		? (bool) $args['icon'] 			: $defaults['icon'];
+		$args['attr'] 		= isset( $args['attr'] ) 		? (array) $args['attr'] 		: $defaults['attr'];
+		$args['disallowed'] = isset( $args['disallowed'] ) 	? (array) $args['disallowed'] 	: $defaults['disallowed'];
+
+		return $args;
+	}
+
+	/**
+	 * Fetches image from post thumbnail.
+	 * Resizes the image between 1500px if bigger. Then it saves the image and
+	 * Keeps dimensions relative.
+	 *
+	 * @param array $args Image arguments.
+	 *
+	 * @since 2.3.0
+	 *
+	 * @return string|null the image url.
+	 */
+	public function get_image_from_post_thumbnail( $args ) {
+
+		if ( ! isset( $args['post_id'] ) )
+			$args['post_id'] = $this->get_the_real_ID();
+
+		$id = get_post_thumbnail_id( $args['post_id'] );
+
+		$image = $id ? $this->parse_og_image( $id, $args ) : '';
+
+		return $image;
+	}
+
+	/**
+	 * Fetches images id's from WooCommerce gallery
+	 *
+	 * @staticvar array $ids The image ids
+	 *
+	 * @param array $args Image arguments.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @return array The image URL's.
+	 */
+	public function get_image_from_woocommerce_gallery() {
+
+		static $ids = null;
+
+		if ( isset( $ids ) )
+			return $ids;
+
+		$attachment_ids = '';
+
+		$post_id = $this->get_the_real_ID();
+
+		if ( metadata_exists( 'post', $post_id, '_product_image_gallery' ) ) {
+			$product_image_gallery = get_post_meta( $post_id, '_product_image_gallery', true );
+
+			$attachment_ids = array_filter( explode( ',', $product_image_gallery ) );
+		}
+
+		return $ids = $attachment_ids;
+	}
+
+	/**
+	 * Parses OG image to correct size
+	 *
+	 * @staticvar string $called Checks if image ID has already been fetched (to prevent duplicate output on WooCommerce).
+	 *
+	 * @param int $id The attachment ID.
+	 * @param array $args The image args
+	 *
+	 * @since 2.5.0
+	 *
+	 * @todo create formula to fetch transient.
+	 * @priority high 2.7.0
+	 *
+	 * @return string|empty Parsed image url or empty if already called
+	 */
+	public function parse_og_image( $id, $args = array() ) {
+
+		//* Don't do anything if $id isn't given.
+		if ( ! isset( $id ) || empty( $id ) )
+			return;
+
+		static $called = array();
+		//* Don't parse image twice. Return empty on second run.
+		if ( isset( $called[$id] ) )
+			return '';
+
+		if ( empty( $args ) )
+			$args = $this->parse_image_args( '', '', true );
+
+		$src = wp_get_attachment_image_src( $id, $args['size'], $args['icon'], $args['attr'] );
+
+		$i = $src[0]; // Source URL
+		$w = $src[1]; // Width
+		$h = $src[2]; // Height
+
+		//* Prefered 1500px, resize it
+		if ( $w > 1500 || $h > 1500 ) {
+
+			if ( $w === $h ) {
+				//* Square
+				$w = 1500;
+				$h = 1500;
+			} else if ( $w > $h ) {
+				//* Landscape
+				$h = $this->proportionate_dimensions( $h, $w, $w = 1500 );
+			} else if ( $h > $w ) {
+				//* Portrait
+				$w = $this->proportionate_dimensions( $w, $h, $h = 1500 );
+			}
+
+			//* Get path of image and load it into the wp_get_image_editor
+			$i_file_path = get_attached_file( $id );
+
+			$i_file_old_name	= basename( get_attached_file( $id ) );
+			$i_file_ext			= pathinfo( $i_file_path, PATHINFO_EXTENSION );
+
+			if ( $i_file_ext ) {
+				$i_file_dir_name = pathinfo( $i_file_path, PATHINFO_DIRNAME );
+				//* Add trailing slash.
+				$i_file_dir_name = '/' === substr( $i_file_dir_name, -1 ) ? $i_file_dir_name : $i_file_dir_name . '/';
+
+				$i_file_file_name = pathinfo( $i_file_path, PATHINFO_FILENAME );
+
+				//* Yes I know, I should use generate_filename, but it's slower.
+				//* Will look at that later. This is already 100 lines of correctly working code.
+				$new_image_dirfile = $i_file_dir_name . $i_file_file_name . '-' . $w . 'x' . $h . '.' . $i_file_ext;
+
+				/**
+				 * Generate image URL.
+				 */
+				$upload_dir 	= wp_upload_dir();
+				$upload_url 	= $upload_dir['baseurl'];
+				$upload_basedir = $upload_dir['basedir'];
+				$new_image_url = str_ireplace( $upload_basedir, '', $new_image_dirfile );
+				$new_image_url = $upload_url . $new_image_url;
+
+				//* We've got our image path.
+				$i = $new_image_url;
+
+				// Generate file if it doesn't exists yet.
+				if ( ! file_exists( $new_image_dirfile ) ) {
+
+					$image_editor = wp_get_image_editor( $i_file_path );
+
+					if ( ! is_wp_error( $image_editor ) ) {
+						$image_editor->resize( $w, $h, false );
+						$image_editor->set_quality( 82 ); // Let's save some bandwidth, Facebook compresses it even further anyway.
+						$image_editor->save( $new_image_dirfile );
+					} else {
+						//* Image has failed to create.
+						$i = '';
+					}
+				}
+			}
+		}
+
+		return $called[$id] = $i;
+	}
+
+	/**
+	 * Fetches site icon brought in WordPress 4.3.0
+	 *
+	 * @param string $size The icon size, accepts 'full' and pixel values
+	 * @since 2.2.1
+	 *
+	 * @return string url site icon, not escaped.
+	 */
+	public function site_icon( $size = 'full' ) {
+
+		$icon = '';
+
+		if ( 'full' === $size ) {
+			$site_icon_id = get_option( 'site_icon' );
+
+			if ( $site_icon_id ) {
+				$url_data = '';
+				$url_data = wp_get_attachment_image_src( $site_icon_id, $size );
+
+				$icon = $url_data ? $url_data[0] : '';
+			}
+
+		} else if ( is_int( $size ) && function_exists( 'has_site_icon' ) && $this->wp_version( '4.3', '>=' ) ) {
+			//* Also applies (MultiSite) filters.
+			$icon = get_site_icon_url( $size );
+		}
+
+		return $icon;
+	}
+
+}
Index: inc/classes/generate-ldjson.class.php
===================================================================
--- inc/classes/generate-ldjson.class.php	(nonexistent)
+++ inc/classes/generate-ldjson.class.php	(working copy)
@@ -0,0 +1,907 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Generate
+ *
+ * Generates SEO data based on content
+ * Returns strings/arrays
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Generate_Ldjson extends AutoDescription_Generate_Image {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Render the LD+Json scripts.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The LD+Json scripts.
+	 */
+	public function render_ld_json_scripts() {
+
+		$this->setup_ld_json_transient( $this->get_the_real_ID() );
+
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, true, $debug_key = microtime(true), array( 'LD Json transient' => $this->ld_json_transient, 'Is output' => (bool) $this->get_transient( $this->ld_json_transient ) ) );
+
+		$output = $this->get_transient( $this->ld_json_transient );
+		if ( false === $output ) {
+
+			$output = '';
+
+			//* Only display search helper and knowledge graph on front page.
+			if ( $this->is_front_page() ) {
+
+				$sitename = $this->ld_json_name();
+				$sitelinks = $this->ld_json_search();
+				$knowledgegraph = $this->ld_json_knowledge();
+
+				if ( $sitename )
+					$output .= $sitename;
+
+				if ( $sitelinks )
+					$output .= $sitelinks;
+
+				if ( $knowledgegraph )
+					$output .= $knowledgegraph;
+
+			} else {
+				$breadcrumbhelper = $this->ld_json_breadcrumbs();
+
+				//* No wrapper, is done within script generator.
+				if ( $breadcrumbhelper )
+					$output .= $breadcrumbhelper;
+			}
+
+			/**
+			 * Transient expiration: 1 week.
+			 * Keep the description for at most 1 week.
+			 *
+			 * 60s * 60m * 24h * 7d
+			 */
+			$expiration = 60 * 60 * 24 * 7;
+
+			$this->set_transient( $this->ld_json_transient, $output, $expiration );
+		}
+
+		/**
+		 * Debug output.
+		 * @since 2.4.2
+		 */
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, false, $debug_key, array( 'LD Json transient output' => $output ) );
+
+		return $output;
+	}
+
+	/**
+	 * Returns http://schema.org json encoded context URL.
+	 *
+	 * @staticvar string $context
+	 * @since 2.6.0
+	 *
+	 * @return string The json encoded context url.
+	 */
+	public function schema_context() {
+
+		static $context;
+
+		if ( isset( $context ) )
+			return $context;
+
+		return $context = json_encode( 'http://schema.org' );
+	}
+
+	/**
+	 * Returns 'WebSite' json encoded type name.
+	 *
+	 * @staticvar string $context
+	 * @since 2.6.0
+	 *
+	 * @return string The json encoded type name.
+	 */
+	public function schema_type() {
+
+		static $type;
+
+		if ( isset( $type ) )
+			return $type;
+
+		return $type = json_encode( 'WebSite' );
+	}
+
+	/**
+	 * Returns json encoded home url.
+	 *
+	 * @staticvar string $url
+	 * @since 2.6.0
+	 *
+	 * @return string The json encoded home url.
+	 */
+	public function schema_home_url() {
+
+		static $type;
+
+		if ( isset( $type ) )
+			return $type;
+
+		return $type = json_encode( $this->the_home_url_from_cache() );
+	}
+
+	/**
+	 * Returns json encoded blogname.
+	 *
+	 * @staticvar string $name
+	 * @since 2.6.0
+	 *
+	 * @return string The json encoded blogname.
+	 */
+	public function schema_blog_name() {
+
+		static $name;
+
+		if ( isset( $name ) )
+			return $name;
+
+		return $name = json_encode( $this->get_blogname() );
+	}
+
+	/**
+	 * Returns 'BreadcrumbList' json encoded type name.
+	 *
+	 * @staticvar string $crumblist
+	 * @since 2.6.0
+	 *
+	 * @return string The json encoded 'BreadcrumbList'.
+	 */
+	public function schema_breadcrumblist() {
+
+		static $crumblist;
+
+		if ( isset( $crumblist ) )
+			return $crumblist;
+
+		return $crumblist = json_encode( 'BreadcrumbList' );
+	}
+
+	/**
+	 * Returns 'ListItem' json encoded type name.
+	 *
+	 * @staticvar string $crumblist
+	 * @since 2.6.0
+	 *
+	 * @return string The json encoded 'ListItem'.
+	 */
+	public function schema_listitem() {
+
+		static $listitem;
+
+		if ( isset( $listitem ) )
+			return $listitem;
+
+		return $listitem = json_encode( 'ListItem' );
+	}
+
+	/**
+	 * Generate LD+Json search helper.
+	 *
+	 * @since 2.2.8
+	 *
+	 * @return escaped LD+json search helper string.
+	 */
+	public function ld_json_search() {
+
+		if ( false === $this->enable_ld_json_searchbox() )
+			return '';
+
+		$context = $this->schema_context();
+		$webtype = $this->schema_type();
+		$url = $this->schema_home_url();
+		$name = $this->schema_blog_name();
+		$actiontype = json_encode( 'SearchAction' );
+
+		// Remove trailing quote and add it back.
+		$target = mb_substr( json_encode( $this->the_home_url_from_cache( true ) . '?s=' ), 0, -1 ) . '{search_term_string}"';
+
+		$queryaction = json_encode( 'required name=search_term_string' );
+
+		$json = sprintf( '{"@context":%s,"@type":%s,"url":%s,"name":%s,"potentialAction":{"@type":%s,"target":%s,"query-input":%s}}', $context, $webtype, $url, $name, $actiontype, $target, $queryaction );
+
+		$output = '';
+		if ( $json )
+			$output = '<script type="application/ld+json">' . $json . "</script>" . "\r\n";
+
+		return $output;
+	}
+
+	/**
+	 * Generate LD+Json breadcrumb helper.
+	 *
+	 * @since 2.4.2
+	 *
+	 * @return escaped LD+json search helper string.
+	 */
+	public function ld_json_breadcrumbs() {
+
+		if ( false === $this->enable_ld_json_breadcrumbs() )
+			return '';
+
+		//* Used to count ancestors and categories.
+		$output = '';
+
+		if ( $this->is_single() || $this->is_wc_product() ) {
+			$output = $this->ld_json_breadcrumbs_post();
+		} else if ( false === $this->is_front_page() && $this->is_page() ) {
+			$output = $this->ld_json_breadcrumbs_page();
+		}
+
+		return $output;
+	}
+
+	/**
+	 * Generate post breadcrumb.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string $output The breadcrumb script.
+	 */
+	public function ld_json_breadcrumbs_post() {
+
+		$output = '';
+
+		$post_id = $this->get_the_real_ID();
+
+		$cat_type = 'category';
+
+		//* WooCommerce support.
+		if ( $this->is_wc_product() )
+			$cat_type = 'product_cat';
+
+		//* Test categories.
+		$r = is_object_in_term( $post_id, $cat_type, '' );
+
+		if ( ! $r || is_wp_error( $r ) )
+			return '';
+
+		//* Get categories.
+		$cats = wp_get_object_terms( $post_id, $cat_type, array( 'fields' => 'all_with_object_id', 'orderby' => 'parent' ) );
+
+		if ( empty( $cats ) || is_wp_error( $cats ) )
+			return '';
+
+		$assigned_ids = array();
+		$kittens = array();
+		$parents = array();
+		$parents_merge = array();
+
+		//* Fetch cats children id's, if any.
+		foreach ( $cats as $cat ) {
+			//* The category objects. The cats.
+			$cat_id = $cat->term_id;
+
+			//* Store to filter unused Cat ID's from the post.
+			$assigned_ids[] = $cat_id;
+
+			// Check if they have kittens.
+			$children = get_term_children( $cat_id, $cat->taxonomy );
+			$ancestors = get_ancestors( $cat_id, $cat->taxonomy );
+
+			//* Save children id's as kittens.
+			$kittens[$cat_id] = $children;
+			$parents[$cat_id] = $ancestors;
+		}
+
+		foreach ( $kittens as $kit_id => $child_id ) {
+			foreach ( $child_id as $ckey => $cid ) {
+
+				/**
+				 * Seed out children that aren't assigned.
+				 * (from levels too deep as get_term_children gets them all).
+				 */
+				if ( $cid && false === in_array( $cid, $assigned_ids ) )
+					unset( $kittens[$kit_id][$ckey] );
+
+				/**
+				 * Make the tree count down multiple children are assigned.
+				 * This fetches the array from the ancestors.
+				 *
+				 * What we want is that the latest child ID gets its own single tree.
+				 * All ancestors should be a representation of the previous assigned trees.
+				 *
+				 * E.g. We have this structure, all assigned:
+				 *	- Cat 1
+				 *		- Cat 2
+				 *			- Cat 3
+				 *
+				 * We want a tree for "Cat 1+2+3", "Cat 1+2", and "Cat 3".
+				 *
+				 * We could add Cat 1, but that's will give two single category lines, which could be misinterperted.
+				 * So we only use what we know: The kittens (child tree).
+				 */
+				if ( isset( $parents[$cid] ) && ! empty( $parents[$kit_id] ) ) {
+					$parents_merge[$kit_id] = $parents[$kit_id];
+					unset( $kittens[$kit_id] );
+				}
+			}
+		}
+
+		/**
+		 * Build category ID trees for kittens.
+		 */
+		$trees = $this->build_breadcrumb_trees( $kittens );
+
+		//* Empty parents.
+		$parents = array();
+
+		if ( ! empty( $parents_merge ) ) {
+			foreach ( $parents_merge as $child_id => $parents_ids ) {
+
+				//* Reset kitten.
+				$kitten = array();
+
+				//* Last element should be parent.
+				$pid = array_pop( $parents_ids );
+
+				if ( isset( $pid ) ) {
+					//* Parents are reversed children. Let's fix that.
+					$parents_ids = array_reverse( $parents_ids );
+
+					//* Add previous parent at the end of the rest.
+					array_push( $parents_ids, $child_id );
+
+					//* Temporarily array.
+					$kitten[$pid] = $parents_ids;
+
+					$trees = $this->build_breadcrumb_trees( $kitten, $trees );
+				} else {
+					//* Parents are reversed children. Let's fix that.
+					$parents_ids = array_reverse( $parents_ids );
+
+					$trees = $this->build_breadcrumb_trees( $parents_ids, $trees );
+				}
+			}
+		}
+
+		/**
+		 * Sort by number of id's. Provides a cleaner layout, better Search Engine understanding and more consistent cache.
+		 */
+		if ( count( $trees ) > 1 )
+			array_multisort( array_map( 'count', $trees ), SORT_DESC, $trees );
+
+		$context = $this->schema_context();
+		$context_type = $this->schema_breadcrumblist();
+		$item_type = $this->schema_listitem();
+
+		//* For each of the tree items, create a separated script.
+		if ( $trees ) {
+			foreach ( $trees as $tree_ids ) {
+
+				if ( is_array( $tree_ids ) ) {
+					//* Term has assigned children.
+
+					/**
+					 * @staticvar int $item_cache : Used to prevent duplicated item re-generation.
+					 */
+					static $item_cache = array();
+
+					$items = '';
+
+					//* Put the children in the right order.
+					$tree_ids = array_reverse( $tree_ids, false );
+
+					foreach ( $tree_ids as $position => $child_id ) {
+						if ( in_array( $child_id, $assigned_ids ) ) {
+							//* Cat has been assigned, continue.
+
+							//* Fetch item from cache if available.
+							if ( isset( $item_cache[$child_id] ) ) {
+								$pos = $position + 2;
+								$item_cache[$child_id]['pos'] = $pos;
+								$items .= $this->make_breadcrumb( $item_cache[$child_id], true );
+
+							} else {
+
+								$pos = $position + 2;
+
+								$cat = get_term_by( 'id', $child_id, $cat_type, OBJECT, 'raw' );
+
+								$id = json_encode( $this->the_url( '', array( 'get_custom_field' => false, 'external' => true, 'is_term' => true, 'term' => $cat ) ) );
+
+								$custom_field_name = isset( $cat->admeta['doctitle'] ) ? $cat->admeta['doctitle'] : '';
+								$cat_name = $custom_field_name ? $custom_field_name : $cat->name;
+								$name = json_encode( $cat_name );
+
+								//* Store in cache.
+								$item_cache[$child_id] = array(
+									'type'	=> $item_type,
+									'pos'	=> (string) $pos,
+									'id'	=> $id,
+									'name'	=> $name
+								);
+
+								$items .= $this->make_breadcrumb( $item_cache[$child_id], true );
+							}
+						}
+					}
+
+					if ( $items ) {
+
+						$items = $this->ld_json_breadcrumb_first( $item_type ) . $items . $this->ld_json_breadcrumb_last( $item_type, $pos, $post_id );
+
+						//* Put it all together.
+						$breadcrumbhelper = sprintf( '{"@context":%s,"@type":%s,"itemListElement":[%s]}', $context, $context_type, $items );
+						$output .= '<script type="application/ld+json">' . $breadcrumbhelper . '</script>' . "\r\n";
+					}
+				} else {
+					//* No assigned children, single term item.
+
+					$items = '';
+
+					//* The position of the current item is always static here.
+					$pos = '2';
+
+					//* $tree_ids is a single ID here.
+					$cat = get_term_by( 'id', $tree_ids, $cat_type, OBJECT, 'raw' );
+
+					$id = json_encode( $this->the_url( '', array( 'get_custom_field' => false, 'is_term' => true, 'external' => true, 'term' => $cat ) ) );
+
+					$custom_field_name = isset( $cat->admeta['doctitle'] ) ? $cat->admeta['doctitle'] : '';
+					$cat_name = $custom_field_name ? $custom_field_name : $cat->name;
+					$name = json_encode( $cat_name );
+
+					$items .= sprintf( '{"@type":%s,"position":%s,"item":{"@id":%s,"name":%s}},', $item_type, (string) $pos, $id, $name );
+
+					if ( $items ) {
+
+						$items = $this->ld_json_breadcrumb_first( $item_type ) . $items . $this->ld_json_breadcrumb_last( $item_type, $pos, $post_id );
+
+						//* Put it all together.
+						$breadcrumbhelper = sprintf( '{"@context":%s,"@type":%s,"itemListElement":[%s]}', $context, $context_type, $items );
+						$output .= '<script type="application/ld+json">' . $breadcrumbhelper . '</script>' . "\r\n";
+					}
+				}
+
+			}
+		}
+
+		return $output;
+	}
+
+	/**
+	 * Generate page breadcrumb.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string $output The breadcrumb script.
+	 */
+	public function ld_json_breadcrumbs_page() {
+
+		$output = '';
+
+		$page_id = $this->get_the_real_ID();
+
+		//* Get ancestors.
+		$parents = get_post_ancestors( $page_id );
+
+		if ( $parents ) {
+
+			$context = $this->schema_context();
+			$context_type = $this->schema_breadcrumblist();
+			$item_type = $this->schema_listitem();
+
+			$items = '';
+
+			$parents = array_reverse( $parents );
+
+			foreach ( $parents as $position => $parent_id ) {
+				$pos = $position + 2;
+
+				$id = json_encode( $this->the_url( '', array( 'get_custom_field' => false, 'external' => true, 'id' => $parent_id ) ) );
+
+				$custom_field_name = $this->get_custom_field( '_genesis_title', $parent_id );
+				$parent_name = $custom_field_name ? $custom_field_name : $this->title( '', '', '', array( 'term_id' => $parent_id, 'meta' => true, 'get_custom_field' => false, 'placeholder' => true, 'notagline' => true, 'description_title' => true ) );
+
+				$name = json_encode( $parent_name );
+
+				$breadcrumb = array(
+					'type'	=> $item_type,
+					'pos'	=> (string) $pos,
+					'id'	=> $id,
+					'name'	=> $name
+				);
+
+				$items .= $this->make_breadcrumb( $breadcrumb, true );
+			}
+
+			if ( $items ) {
+
+				$items = $this->ld_json_breadcrumb_first( $item_type ) . $items . $this->ld_json_breadcrumb_last( $item_type, $pos, $page_id );
+
+				//* Put it all together.
+				$breadcrumbhelper = sprintf( '{"@context":%s,"@type":%s,"itemListElement":[%s]}', $context, $context_type, $items );
+				$output = '<script type="application/ld+json">' . $breadcrumbhelper . '</script>' . "\r\n";
+			}
+		}
+
+		return $output;
+	}
+
+	/**
+	 * Return home page item for LD Json Breadcrumbs.
+	 *
+	 * @staticvar string $first_item.
+	 *
+	 * @since 2.4.2
+	 *
+	 * @param string|null $item_type the breadcrumb item type.
+	 *
+	 * @return string Home Breadcrumb item
+	 */
+	public function ld_json_breadcrumb_first( $item_type = null ) {
+
+		static $first_item = null;
+
+		if ( isset( $first_item ) )
+			return $first_item;
+
+		if ( is_null( $item_type ) )
+			$item_type = json_encode( 'ListItem' );
+
+		$id = json_encode( $this->the_home_url_from_cache() );
+
+		$home_title = $this->get_option( 'homepage_title' );
+
+		if ( $home_title ) {
+			$custom_name = $home_title;
+		} else if ( $this->has_page_on_front() ) {
+			$home_id = (int) get_option( 'page_on_front' );
+
+			$custom_name = $this->get_custom_field( '_genesis_title', $home_id );
+			$custom_name = $custom_name ? $custom_name : $this->get_blogname();
+		} else {
+			$custom_name = $this->get_blogname();
+		}
+
+		$custom_name = json_encode( $custom_name );
+
+		$breadcrumb = array(
+			'type'	=> $item_type,
+			'pos'	=> '1',
+			'id'	=> $id,
+			'name'	=> $custom_name
+		);
+
+		return $first_item = $this->make_breadcrumb( $breadcrumb, true );
+	}
+
+	/**
+	 * Return current page item for LD Json Breadcrumbs.
+	 *
+	 * @staticvar string $last_item.
+	 *
+	 * @since 2.4.2
+	 *
+	 * @param string $item_type the breadcrumb item type.
+	 * @param int $pos Last known position.
+	 * @param int $post_id The current Post ID
+	 *
+	 * @staticvar string $type The breadcrumb item type.
+	 * @staticvar string $id The current post/page/archive url.
+	 * @staticvar string $name The current post/page/archive title.
+	 *
+	 * @return string Last Breadcrumb item
+	 */
+	public function ld_json_breadcrumb_last( $item_type = null, $pos = null, $post_id = null ) {
+
+		/**
+		 * 2 (becomes 3) holds mostly true for single term items.
+		 * This shouldn't run anyway. Pos should always be provided.
+		 */
+		if ( is_null( $pos ) )
+			$pos = '2';
+
+		//* Add current page.
+		$pos = $pos + 1;
+
+		if ( is_null( $item_type ) ) {
+			static $type = null;
+
+			if ( ! isset( $type ) )
+				$type = json_encode( 'ListItem' );
+
+			$item_type = $type;
+		}
+
+		if ( empty( $post_id ) )
+			$post_id = $this->get_the_real_ID();
+
+		static $id = null;
+		static $name = null;
+
+		if ( ! isset( $id ) )
+			$id = json_encode( $this->the_url_from_cache() );
+
+		if ( ! isset( $name ) ) {
+			$custom_field = $this->get_custom_field( '_genesis_title', $post_id );
+			$name = $custom_field ? $custom_field : $this->title( '', '', '', array( 'term_id' => $post_id, 'placeholder' => true, 'meta' => true, 'notagline' => true, 'description_title' => true ) );
+			$name = json_encode( $name );
+		}
+
+		$breadcrumb = array(
+			'type'	=> $item_type,
+			'pos'	=> (string) $pos,
+			'id'	=> $id,
+			'name'	=> $name
+		);
+
+		return $this->make_breadcrumb( $breadcrumb, false );
+	}
+
+	/**
+	 * Builds a breadcrumb.
+	 *
+	 * @since 2.6.0
+	 * @param array $item : {
+	 *		'type',
+	 *		'pos',
+	 *		'id',
+	 *		'name'
+	 * }
+	 * @param bool $comma Whether to add a trailing comma.
+	 *
+	 * @return string The LD+Json breadcrumb.
+	 */
+	public function make_breadcrumb( $item, $comma = true ) {
+		$comma = $comma ? ',' : '';
+		return sprintf( '{"@type":%s,"position":%s,"item":{"@id":%s,"name":%s}}%s', $item['type'], $item['pos'], $item['id'], $item['name'], $comma );
+	}
+
+	/**
+	 * Build breadcrumb trees.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array The breadcrumb trees, with the key as parent.
+	 * @param array $previous_tree A previous set tree to compare to, if set.
+	 *
+	 * @return trees in order.
+	 */
+	protected function build_breadcrumb_trees( $kittens, array $previous_tree = array() ) {
+
+		$trees = $previous_tree;
+
+		foreach ( $kittens as $parent => $kitten ) {
+			if ( empty( $kitten ) ) {
+				//* Final cat.
+				$trees[] = $parent;
+			} else {
+				if ( 1 === count( $kitten ) ) {
+					//* Single tree.
+					$trees[] = array( reset( $kitten ), $parent );
+				} else {
+					//* Nested categories.
+					$add = array();
+
+					foreach ( $kitten as $kit => $kat ) {
+						//* Only add if non-existent in $trees.
+						if ( ! in_array( $kat, $trees ) )
+							$add[] = $kat;
+					}
+
+					//* Put children in right order.
+					$add = array_reverse( $add );
+
+					$trees[] = array_merge( $add, array( $parent ) );
+				}
+			}
+		}
+
+		return $trees;
+	}
+
+	/**
+	 * Return LD+Json Knowledge Graph helper.
+	 *
+	 * @since 2.2.8
+	 *
+	 * @return string LD+json Knowledge Graph helper.
+	 */
+	public function ld_json_knowledge() {
+
+		if ( false === $this->is_option_checked( 'knowledge_output' ) )
+			return '';
+
+		$knowledge_type = $this->get_option( 'knowledge_type' );
+
+		/**
+		 * Forgot to add this.
+		 * @since 2.4.3
+		 */
+		$knowledge_name = $this->get_option( 'knowledge_name' );
+		$knowledge_name = $knowledge_name ? $knowledge_name : $this->get_blogname();
+
+		$context = $this->schema_context();
+		$type = json_encode( ucfirst( $knowledge_type ) );
+		$name = json_encode( $knowledge_name );
+		$url = json_encode( esc_url( home_url( '/' ) ) );
+
+		$logo = '';
+
+		if ( $this->get_option( 'knowledge_logo' ) && 'organization' === $knowledge_type ) {
+			$icon = $this->site_icon();
+
+			if ( $icon ) {
+				$logourl = esc_url_raw( $icon );
+
+				//* Add trailing comma
+				$logo = '"logo":' . json_encode( $logourl ) . ',';
+			}
+		}
+
+		/**
+		 * Fetch option names
+		 *
+		 * @uses filter the_seo_framework_json_options
+		 */
+		$options = (array) apply_filters( 'the_seo_framework_json_options', array(
+			'knowledge_facebook',
+			'knowledge_twitter',
+			'knowledge_gplus',
+			'knowledge_instagram',
+			'knowledge_youtube',
+			'knowledge_linkedin',
+			'knowledge_pinterest',
+			'knowledge_soundcloud',
+			'knowledge_tumblr',
+		) );
+
+		$sameurls = '';
+		$comma = ',';
+
+		//* Put the urls together from the options.
+		if ( is_array( $options ) ) {
+			foreach ( $options as $option ) {
+				$the_option = $this->get_option( $option );
+
+				if ( '' !== $the_option )
+					$sameurls .= json_encode( $the_option ) . $comma;
+			}
+		}
+
+		//* Remove trailing comma
+		$sameurls = rtrim( $sameurls, $comma );
+		$json = '';
+
+		if ( $sameurls )
+			$json = sprintf( '{"@context":%s,"@type":%s,"name":%s,"url":%s,%s"sameAs":[%s]}', $context, $type, $name, $url, $logo, $sameurls );
+
+		$output = '';
+		if ( $json )
+			$output = '<script type="application/ld+json">' . $json . '</script>' . "\r\n";
+
+		return $output;
+	}
+
+	/**
+	 * Generate Site Name LD+Json script.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The LD+JSon Site Name script.
+	 */
+	public function ld_json_name() {
+
+		if ( false === $this->enable_ld_json_sitename() )
+			return '';
+
+		$context = $this->schema_context();
+		$webtype = $this->schema_type();
+		$url = $this->schema_home_url();
+		$name = $this->schema_blog_name();
+
+		$json = sprintf( '{"@context":%s,"@type":%s,"name":%s,"url":%s}', $context, $webtype, $name, $url );
+
+		$output = '';
+		if ( $json )
+			$output = '<script type="application/ld+json">' . $json . '</script>' . "\r\n";
+
+		return $output;
+	}
+
+	/**
+	 * Determines if breadcrumbs scripts are enabled.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @return bool
+	 */
+	public function enable_ld_json_breadcrumbs() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		/**
+		 * Applies filters the_seo_framework_json_breadcrumb_output
+		 * @since 2.4.2
+		 */
+		$filter = (bool) apply_filters( 'the_seo_framework_json_breadcrumb_output', true );
+		$option = $this->is_option_checked( 'ld_json_breadcrumbs' );
+
+		return $cache = $filter && $option ? true : false;
+	}
+
+	/**
+	 * Determines if sitename script is enabled.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @return bool
+	 */
+	public function enable_ld_json_sitename() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		/**
+		 * Applies filters the_seo_framework_json_sitename_output
+		 * @since 2.6.0
+		 */
+		$filter = (bool) apply_filters( 'the_seo_framework_json_sitename_output', true );
+		$option = $this->is_option_checked( 'ld_json_sitename' );
+
+		return $cache = $filter && $option ? true : false;
+	}
+
+	/**
+	 * Determines if searchbox script is enabled.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @return bool
+	 */
+	public function enable_ld_json_searchbox() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		/**
+		 * Applies filters the_seo_framework_json_search_output
+		 * @since 2.3.9
+		 */
+		$filter = (bool) apply_filters( 'the_seo_framework_json_search_output', true );
+		$option = $this->is_option_checked( 'ld_json_searchbox' );
+
+		return $cache = $filter && $option ? true : false;
+	}
+
+}
Index: inc/classes/generate-title.class.php
===================================================================
--- inc/classes/generate-title.class.php	(nonexistent)
+++ inc/classes/generate-title.class.php	(working copy)
@@ -0,0 +1,1383 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Generate_Title
+ *
+ * Generates title SEO data based on content.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Generate_Title extends AutoDescription_Generate_Description {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Get the title. God function.
+	 * Always use this function for the title unless you're absolutely sure what you're doing.
+	 *
+	 * This function is used for all these: Taxonomies and Terms, Posts, Pages, Blog, front page, front-end, back-end.
+	 *
+	 * @since 1.0.0
+	 *
+	 * Params required wp_title filter :
+	 * @param string $title The Title to return
+	 * @param string $sep The Title sepeartor
+	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
+	 *
+	 * @since 2.4.0:
+	 * @param array $args : accepted args : {
+	 * 		@param int term_id The Taxonomy Term ID when taxonomy is also filled in. Else post ID.
+	 * 		@param string taxonomy The Taxonomy name.
+	 * 		@param bool page_on_front Page on front condition for example generation.
+	 * 		@param bool placeholder Generate placeholder, ignoring options.
+	 * 		@param bool notagline Generate title without tagline.
+	 * 		@param bool meta Ignore doing_it_wrong. Used in og:title/twitter:title
+	 * 		@param bool get_custom_field Do not fetch custom title when false.
+	 * 		@param bool description_title Fetch title for description.
+	 * 		@param bool is_front_page Fetch front page title.
+	 * }
+	 *
+	 * @return string $title Title
+	 */
+	public function title( $title = '', $sep = '', $seplocation = '', $args = array() ) {
+
+		//* Use WordPress default feed title.
+		if ( $this->is_feed() )
+			return trim( $title );
+
+		$args = $this->reparse_title_args( $args );
+
+		/**
+		 * Return early if the request is the Title only (without tagline/blogname).
+		 */
+		if ( $args['notagline'] )
+			return $this->build_title_notagline( $args );
+
+		/**
+		 * Add doing it wrong notice for better SEO consistency.
+		 * Only when in wp_title.
+		 *
+		 * @since 2.2.5
+		 */
+		if ( false === $args['meta'] && false === $this->is_admin() ) {
+			if ( false === $this->current_theme_supports_title_tag() && doing_filter( 'wp_title' ) ) {
+				if ( $seplocation ) {
+					//* Set doing it wrong parameters.
+					$this->tell_title_doing_it_wrong( $title, $sep, $seplocation, false );
+					//* And echo them.
+					add_action( 'wp_footer', array( $this, 'tell_title_doing_it_wrong' ), 20 );
+
+					//* Notify cache.
+					$this->title_doing_it_wrong = true;
+
+					//* Notify transients
+					$this->set_theme_dir_transient( false );
+
+					return $this->build_title_doingitwrong( $title, $sep, $seplocation, $args );
+				} else if ( $sep ) {
+					//* Set doing it wrong parameters.
+					$this->tell_title_doing_it_wrong( $title, $sep, $seplocation, false );
+					//* And echo them.
+					add_action( 'wp_footer', array( $this, 'tell_title_doing_it_wrong' ), 20 );
+
+					//* Notify cache.
+					$this->title_doing_it_wrong = true;
+
+					//* Notify transients
+					$this->set_theme_dir_transient( false );
+
+					//* Title is empty.
+					$args['empty_title'] = true;
+
+					return $this->build_title_doingitwrong( $title, $sep, $seplocation, $args );
+				}
+			}
+		}
+
+		//* Notify cache to keep using the same output. We're doing it right :).
+		if ( ! isset( $this->title_doing_it_wrong ) )
+			$this->title_doing_it_wrong = false;
+
+		//* Set transient to true if the theme is doing it right.
+		if ( false === $this->title_doing_it_wrong )
+			$this->set_theme_dir_transient( true );
+
+		//* Empty title and rebuild it.
+		return $this->build_title( $title = '', $seplocation, $args );
+	}
+
+	/**
+	 * Escapes and beautifies title.
+	 *
+	 * @param string $title The title to escape and beautify.
+	 * @param bool $trim Whether to trim the title from whitespaces.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return string Escaped and beautified title.
+	 */
+	public function escape_title( $title = '', $trim = true ) {
+
+		$title = wptexturize( $title );
+		$title = convert_chars( $title );
+		$title = esc_html( $title );
+		$title = capital_P_dangit( $title );
+		$title = $trim ? trim( $title ) : $title;
+
+		return $title;
+	}
+
+	/**
+	 * Parse and sanitize title args.
+	 *
+	 * @param array $args required The passed arguments.
+	 * @param array $defaults The default arguments.
+	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
+	 *
+	 * @applies filters the_seo_framework_title_args : {
+	 * 		@param int term_id The Taxonomy Term ID when taxonomy is also filled in. Else post ID.
+	 * 		@param string taxonomy The Taxonomy name.
+	 * 		@param bool page_on_front Page on front condition for example generation.
+	 * 		@param bool notagline Generate title without tagline.
+	 * 		@param bool meta Ignore doing_it_wrong. Used in og:title/twitter:title
+	 * 		@param bool get_custom_field Do not fetch custom title when false.
+	 * 		@param bool description_title Fetch title for description.
+	 * 		@param bool is_front_page Fetch front page title.
+	 * }
+	 *
+	 * @since 2.4.0
+	 * @return array $args parsed args.
+	 */
+	public function parse_title_args( $args = array(), $defaults = array(), $get_defaults = false ) {
+
+		//* Passing back the defaults reduces the memory usage.
+		if ( empty( $defaults ) ) {
+			$defaults = array(
+				'term_id' 			=> $this->get_the_real_ID(),
+				'taxonomy' 			=> '',
+				'page_on_front'		=> false,
+				'notagline' 		=> false,
+				'meta' 				=> false,
+				'get_custom_field'	=> true,
+				'description_title'	=> false,
+				'is_front_page'		=> false,
+				'escape'			=> true,
+			);
+
+			//* @since 2.5.0
+			$defaults = (array) apply_filters( 'the_seo_framework_title_args', $defaults, $args );
+		}
+
+		//* Return early if it's only a default args request.
+		if ( $get_defaults )
+			return $defaults;
+
+		//* Array merge doesn't support sanitation. We're simply type casting here.
+		$args['term_id'] 			= isset( $args['term_id'] ) 			? (int) $args['term_id'] 			: $defaults['term_id'];
+		$args['taxonomy'] 			= isset( $args['taxonomy'] ) 			? (string) $args['taxonomy'] 		: $defaults['taxonomy'];
+		$args['page_on_front'] 		= isset( $args['page_on_front'] ) 		? (bool) $args['page_on_front'] 	: $defaults['page_on_front'];
+		$args['notagline'] 			= isset( $args['notagline'] ) 			? (bool) $args['notagline'] 		: $defaults['notagline'];
+		$args['meta'] 				= isset( $args['meta'] ) 				? (bool) $args['meta'] 				: $defaults['meta'];
+		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
+		$args['description_title'] 	= isset( $args['description_title'] ) 	? (bool) $args['description_title'] : $defaults['description_title'];
+		$args['is_front_page'] 		= isset( $args['is_front_page'] ) 		? (bool) $args['is_front_page'] 	: $defaults['is_front_page'];
+		$args['escape'] 			= isset( $args['escape'] ) 				? (bool) $args['escape'] 			: $defaults['escape'];
+
+		return $args;
+	}
+
+	/**
+	 * Reparse title args.
+	 *
+	 * @param array $args required The passed arguments.
+	 *
+	 * @since 2.6.0
+	 * @return array $args parsed args.
+	 */
+	public function reparse_title_args( $args = array() ) {
+
+		$default_args = $this->parse_title_args( '', '', true );
+
+		if ( is_array( $args ) ) {
+			if ( empty( $args ) ) {
+				$args = $default_args;
+			} else {
+				$args = $this->parse_title_args( $args, $default_args );
+			}
+		} else {
+			//* Old style parameters are used. Doing it wrong.
+			$this->_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', '2.5.0' );
+			$args = $default_args;
+		}
+
+		return $args;
+	}
+
+	/**
+	 * Build the title based on input, without tagline.
+	 *
+	 * @param array $args : accepted args : {
+	 * 		@param int term_id The Taxonomy Term ID
+	 * 		@param bool placeholder Generate placeholder, ignoring options.
+	 * 		@param bool page_on_front Page on front condition for example generation
+	 * }
+	 *
+	 * @since 2.4.0
+	 *
+	 * @return string Title without tagline.
+	 */
+	protected function build_title_notagline( $args = array() ) {
+
+		$title = $this->do_title_pre_filter( '', $args, false );
+
+		if ( empty( $title ) )
+			$title = $this->get_notagline_title( $args );
+
+		if ( empty( $title ) )
+			$title = $this->untitled();
+
+		$title = $this->do_title_pro_filter( $title, $args, false );
+
+		if ( $args['escape'] )
+			$title = $this->escape_title( $title );
+
+		return $title;
+	}
+
+	/**
+	 * Build the title based on input, without tagline.
+	 * Note: Not escaped.
+	 *
+	 * @param array $args : accepted args : {
+	 * 		@param int term_id The Taxonomy Term ID
+	 * 		@param bool placeholder Generate placeholder, ignoring options.
+	 * 		@param bool page_on_front Page on front condition for example generation
+	 * }
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string Title without tagline.
+	 */
+	protected function get_notagline_title( $args = array() ) {
+
+		$title = '';
+
+		//* Fetch title from custom fields.
+		if ( $args['get_custom_field'] )
+			$title = $this->get_custom_field_title( $title, $args['term_id'], $args['taxonomy'] );
+
+		//* Generate the Title if empty or if home.
+		if ( empty( $title ) )
+			$title = (string) $this->generate_title( $args, false );
+
+		return $title;
+	}
+
+	/**
+	 * Build the title based on input for themes that are doing it wrong.
+	 * Pretty much a duplicate of build_title but contains many more variables.
+	 * Keep this in mind.
+	 *
+	 * @param string $title The Title to return
+	 * @param string $sep The Title sepeartor
+	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
+	 * @param array $args : accepted args : {
+	 * 		@param int term_id The Taxonomy Term ID
+	 * 		@param string taxonomy The Taxonomy name
+	 * 		@param bool placeholder Generate placeholder, ignoring options.
+	 * 		@param bool get_custom_field Do not fetch custom title when false.
+	 * }
+	 *
+	 * @since 2.4.0
+	 *
+	 * @return string $title Title
+	 */
+	public function build_title_doingitwrong( $title = '', $sep = '', $seplocation = '', $args = array() ) {
+
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, true, $debug_key = microtime(true), get_defined_vars() );
+
+		/**
+		 * Empty the title, because most themes think they 'know' how to SEO the front page.
+		 * Because, most themes know how to make the title 'pretty'.
+		 * And therefor add all kinds of stuff.
+		 *
+		 * Moved up and return early to reduce processing.
+		 * @since 2.3.8
+		 */
+		if ( $this->is_front_page() )
+			return $title = '';
+
+		$args = $this->reparse_title_args( $args );
+
+		/**
+		 * When using an empty wp_title() function, outputs are unexpected.
+		 * This small piece of code will fix all that.
+		 * By removing the separator from the title and adding the blog name always to the right.
+		 * Which is always the case with doing_it_wrong.
+		 *
+		 * @thanks JW_ https://wordpress.org/support/topic/wp_title-problem-bug
+		 * @since 2.4.3
+		 */
+		if ( isset( $args['empty_title'] ) ) {
+			$title = trim( str_replace( $sep, '', $title ) );
+			$seplocation = 'right';
+		}
+
+		$blogname = $this->get_blogname();
+
+		/**
+		 * Don't add/replace separator when false.
+		 *
+		 * @applies filters the_seo_framework_doingitwrong_add_sep
+		 *
+		 * @since 2.4.2
+		 */
+		$add_sep = (bool) apply_filters( 'the_seo_framework_doingitwrong_add_sep', true );
+
+		$sep_replace = false;
+		//* Maybe remove separator.
+		if ( $add_sep && ( $sep || $title ) ) {
+			$sep_replace = true;
+			$sep_to_replace = (string) $sep;
+		}
+
+		//* Fetch the title as is.
+		$title = $this->get_notagline_title( $args );
+
+		/**
+		 * Applies filters the_seo_framework_title_separator : String The title separator
+		 */
+		if ( $add_sep )
+			$sep = $this->get_title_separator();
+
+		/**
+		 * Add $sep_to_replace
+		 *
+		 * @since 2.3.8
+		 */
+		if ( $sep_replace ) {
+			//* Title always contains something at this point.
+			$tit_len = mb_strlen( $title );
+
+			/**
+			 * Prevent double separator on date archives.
+			 * This will cause manual titles with the same separator at the end to be removed.
+			 * Then again, update your theme. D:
+			 *
+			 * A separator is at least 2 long (space + separator).
+			 *
+			 * @param string $sep_to_replace Already confirmed to contain the old sep string.
+			 *
+			 * Now also considers seplocation.
+			 * @since 2.4.1
+			 */
+			if ( $sep_to_replace ) {
+
+				$sep_to_replace_length = mb_strlen( $sep_to_replace );
+
+				if ( 'right' === $seplocation ) {
+					if ( $tit_len > $sep_to_replace_length && ! mb_strpos( $title, $sep_to_replace, $tit_len - $sep_to_replace_length ) )
+						$title = $title . ' ' . $sep_to_replace;
+				} else {
+					if ( $tit_len > $sep_to_replace_length && ! mb_strpos( $title, $sep_to_replace, $sep_to_replace_length ) )
+						$title = $sep_to_replace . ' ' . $title;
+				}
+			}
+
+			/**
+			 * Convert characters to easier match and prevent removal of matching entities and title characters.
+			 * Reported by Riccardo: https://wordpress.org/support/topic/problem-with-post-titles
+			 * @since 2.5.2
+			 */
+			$sep_to_replace = html_entity_decode( $sep_to_replace );
+			$title = html_entity_decode( $title );
+
+			/**
+			 * Now also considers seplocation.
+			 * @since 2.4.1
+			 */
+			if ( 'right' === $seplocation ) {
+				$title = trim( rtrim( $title, "$sep_to_replace " ) ) . " $sep ";
+			} else {
+				$title = " $sep " . trim( ltrim( $title, " $sep_to_replace" ) );
+			}
+
+		} else {
+			$title = trim( $title ) . " $sep ";
+		}
+
+		if ( ! $args['description_title'] )
+			$title = $this->add_title_protection( $title, $args['term_id'] );
+
+		if ( $args['escape'] )
+			$title = $this->escape_title( $title, false );
+
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, false, $debug_key, array( 'title_output' => $title ) );
+
+		return $title;
+	}
+
+	/**
+	 * Build the title based on input.
+	 *
+	 * @param string $title The Title to return
+	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
+	 * @param array $args : accepted args : {
+	 * 		@param int 		term_id The Taxonomy Term ID
+	 * 		@param string 	taxonomy The Taxonomy name
+	 * 		@param bool 	page_on_front Page on front condition for example generation
+	 * 		@param bool 	placeholder Generate placeholder, ignoring options.
+	 * 		@param bool 	get_custom_field Do not fetch custom title when false.
+	 * 		@param bool 	is_front_page Fetch front page title.
+	 * }
+	 *
+	 * @since 2.4.0
+	 *
+	 * @return string $title Title
+	 */
+	public function build_title( $title = '', $seplocation = '', $args = array() ) {
+
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, true, $debug_key = microtime(true), get_defined_vars() );
+
+		$args = $this->reparse_title_args( $args );
+
+		/**
+		 * Overwrite title here, prevents duplicate title issues, since we're working with a filter.
+		 * @since 2.2.2
+		 * Use filter title.
+		 * @since 2.6.0
+		 */
+		$title = $this->do_title_pre_filter( '', $args, false );
+		$blogname = '';
+
+		$is_front_page = $this->is_front_page() || $args['page_on_front'] || $this->is_static_frontpage( $args['term_id'] ) ? true : false;
+
+		$seplocation = $this->get_title_seplocation( $seplocation );
+
+		/**
+		 * Generate the Title if empty or if home.
+		 *
+		 * Generation of title has acquired its own functions.
+		 * @since 2.3.4
+		 */
+		if ( $is_front_page ) {
+			$generated = (array) $this->generate_home_title( $args['get_custom_field'], $seplocation, '', false );
+
+			if ( $generated && is_array( $generated ) ) {
+				if ( empty( $title ) )
+					$title = $generated['title'] ? (string) $generated['title'] : $title;
+
+				$blogname = $generated['blogname'] ? (string) $generated['blogname'] : $blogname;
+				$seplocation = $generated['seplocation'] ? (string) $generated['seplocation'] : $seplocation;
+			}
+		} else {
+			//* Fetch the title as is.
+			if ( empty( $title ) )
+				$title = $this->get_notagline_title( $args );
+			$blogname = $this->get_blogname();
+		}
+
+		/**
+		 * From WordPress core get_the_title.
+		 * Bypasses get_post() function object which causes conflict with some themes and plugins.
+		 *
+		 * Also bypasses the_title filters.
+		 * And now also works in admin. It gives you a true representation of its output.
+		 *
+		 * Title for the description bypasses sanitation and additions.
+		 *
+		 * @since 2.4.1
+		 */
+		if ( ! $args['description_title'] ) {
+
+			if ( $is_front_page ) {
+				$additions = $this->home_page_add_title_tagline();
+				$blogname = $this->add_title_protection( $blogname, $args['term_id'] );
+				$blogname = $this->add_title_pagination( $blogname );
+			} else {
+				$additions = $this->add_title_additions();
+				$title = $this->add_title_protection( $title, $args['term_id'] );
+				$title = $this->add_title_pagination( $title );
+			}
+
+			if ( $additions ) {
+				$title = $this->process_title_additions( $title, $blogname, $seplocation );
+			}
+		}
+
+		$title = $this->do_title_pro_filter( $title, $args, false );
+
+		if ( $args['escape'] )
+			$title = $this->escape_title( $title );
+
+		if ( $this->the_seo_framework_debug ) $this->debug_init( __CLASS__, __FUNCTION__, false, $debug_key, array( 'title_output' => $title ) );
+
+		return $title;
+	}
+
+	/**
+	 * Fetches title from special fields, like other plugins with special queries.
+	 * Used before and has priority over custom fields.
+	 * Front end only.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return string $title Title from Special Field.
+	 */
+	public function title_from_special_fields() {
+
+		$title = '';
+
+		if ( false === $this->is_admin() ) {
+			if ( $this->is_ultimate_member_user_page() && um_is_core_page( 'user' ) && um_get_requested_user() ) {
+				$title = um_user( 'display_name' );
+			}
+		}
+
+		return $title;
+	}
+
+	/**
+	 * Generate the title based on query conditions.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @param array $args The Title Args.
+	 * @param bool $escape Parse Title through saninitation calls.
+	 *
+	 * @staticvar array $cache : contains $title strings.
+	 * @since 2.6.0
+	 *
+	 * @return string $title The Generated Title.
+	 */
+	public function generate_title( $args = array(), $escape = true ) {
+
+		$args = $this->reparse_title_args( $args );
+
+		$title = '';
+		$id = $args['term_id'];
+		$taxonomny = $args['taxonomy'];
+
+		static $cache = array();
+
+		if ( isset( $cache[$id][$taxonomny] ) )
+			$title = $cache[$id][$taxonomny];
+
+		if ( empty( $title ) ) {
+
+			if ( $this->is_archive() ) {
+				if ( ( $id && $taxonomny ) || $this->is_category() || $this->is_tag() || $this->is_tax() ) {
+					$title = $this->title_for_terms( $args, false );
+				} else {
+					$term = get_queried_object();
+					/**
+					 * Get all other archive titles
+					 * @since 2.5.2
+					 */
+					$title = $this->get_the_real_archive_title( $term, $args );
+				}
+
+			}
+
+			$title = $this->get_the_404_title( $title );
+			$title = $this->get_the_search_title( $title, false );
+
+			//* Fetch the post title if no title is found.
+			if ( empty( $title ) )
+				$title = $this->post_title_from_ID( $id );
+
+			//* You forgot to enter a title "anywhere"!
+			if ( empty( $title ) )
+				$title = $this->untitled();
+
+		}
+
+
+		if ( $escape )
+			$title = $this->escape_title( $title, false );
+
+		return $title;
+	}
+
+	/**
+	 * Generate the title based on conditions for the home page.
+	 *
+	 * @since 2.3.4
+	 * @access private
+	 *
+	 * @param bool $get_custom_field Fetch Title from Custom Fields.
+	 * @param string $seplocation The separator location
+	 * @param string $deprecated Deprecated: The Home Page separator location
+	 * @param bool $escape Parse Title through saninitation calls.
+	 * @param bool $get_option Whether to fetch the SEO Settings option.
+	 *
+	 * @return array {
+	 *		'title' => (string) $title : The Generated Title
+	 *		'blogname' => (string) $blogname : The Generated Blogname
+	 *		'add_tagline' => (bool) $add_tagline : Whether to add the tagline
+	 *		'seplocation' => (string) $seplocation : The Separator Location
+	 *	}
+	 */
+	public function generate_home_title( $get_custom_field = true, $seplocation = '', $deprecated = '', $escape = true, $get_option = true ) {
+
+		/**
+		 * Add tagline or not based on option
+		 *
+		 * @since 2.2.2
+		 */
+		if ( $add_tagline = $this->home_page_add_title_tagline() ) {
+			/**
+			 * Tagline based on option.
+			 * @since 2.3.8
+			 */
+			$tagline = $this->get_option( 'homepage_title_tagline' );
+			$title = $tagline ? $tagline : $this->get_blogdescription();
+		} else {
+			$title = '';
+		}
+
+		/**
+		 * Render from function
+		 * @since 2.2.8
+		 */
+		$blogname = $this->title_for_home( '', $get_custom_field, false, $get_option );
+		$seplocation = $this->get_home_title_seplocation( $seplocation );
+
+		if ( $escape ) {
+			$title = $this->escape_title( $title, false );
+			$blogname = $this->escape_title( $blogname, false );
+		}
+
+		return array(
+			'title' => $title,
+			'blogname' => $blogname,
+			'add_tagline' => $add_tagline,
+			'seplocation' => $seplocation
+		);
+	}
+
+	/**
+	 * Gets the title for the static home page.
+	 *
+	 * @since 2.2.8
+	 * @access private
+	 * @see $this->generate_home_title()
+	 *
+	 * @param string $home_title The fallback title.
+	 * @param bool $get_custom_field Fetch Title from InPost Custom Fields.
+	 * @param bool $escape Parse Title through saninitation calls.
+	 * @param bool $get_option Whether to fetch the SEO Settings option.
+	 *
+	 * @return string The Title.
+	 */
+	public function title_for_home( $home_title = '', $get_custom_field = true, $escape = false, $get_option = true ) {
+
+		/**
+		 * Get blogname title based on option
+		 * @since 2.2.2
+		 */
+		if ( $get_option ) {
+			$home_title_option = $this->get_option( 'homepage_title' ) ? (string) $this->get_option( 'homepage_title' ) : $home_title;
+			$home_title = $home_title_option ? $home_title_option : $home_title;
+		}
+
+		/**
+		 * Fetch from Home Page InPost SEO Box if available.
+		 * Only from page on front.
+		 */
+		if ( $get_custom_field && empty( $home_title ) && $this->has_page_on_front() ) {
+			$custom_field = $this->get_custom_field( '_genesis_title', $this->get_the_front_page_ID() );
+			$home_title = $custom_field ? (string) $custom_field : $this->get_blogname();
+		} else {
+			$home_title = $home_title ? (string) $home_title : $this->get_blogname();
+		}
+
+		if ( $escape )
+			$home_title = $this->escape_title( $home_title, false );
+
+		return (string) $home_title;
+	}
+
+	/**
+	 * Gets the title for Category, Tag or Taxonomy
+	 *
+	 * @since 2.2.8
+	 *
+	 * @param array $args The Title arguments.
+	 * @param bool $escape Parse Title through saninitation calls.
+	 *
+	 * @todo put args in array.
+	 *
+	 * @return string The Title.
+	 */
+	public function title_for_terms( $args = array(), $escape = false ) {
+
+		$args = $this->reparse_title_args( $args );
+
+		$title = '';
+		$term = null;
+
+		if ( $args['term_id'] && $args['taxonomy'] )
+			$term = get_term( $args['term_id'], $args['taxonomy'], OBJECT, 'raw' );
+
+		if ( $this->is_category() || $this->is_tag() ) {
+
+			if ( $args['get_custom_field'] ) {
+				if ( ! isset( $term ) )
+					$term = $this->fetch_the_term( $args['term_id'] );
+
+				$title = empty( $term->admeta['doctitle'] ) ? $title : $term->admeta['doctitle'];
+
+				$flag = isset( $term->admeta['saved_flag'] ) && $this->is_checked( $term->admeta['saved_flag'] ) ? true : false;
+				if ( false === $flag && empty( $title ) && isset( $term->meta['doctitle'] ) )
+					$title = empty( $term->meta['doctitle'] ) ? $title : $term->meta['doctitle'];
+			}
+
+			if ( empty( $title ) )
+				$title = $this->get_the_real_archive_title( $term, $args );
+
+		} else {
+			if ( ! isset( $term ) && $this->is_tax() )
+				$term = get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) );
+
+			if ( $args['get_custom_field'] && isset( $term ) ) {
+				$title = empty( $term->admeta['doctitle'] ) ? $title : wp_kses_stripslashes( wp_kses_decode_entities( $term->admeta['doctitle'] ) );
+
+				$flag = $this->is_checked( $term->admeta['saved_flag'] );
+				if ( false === $flag && empty( $title ) && isset( $term->meta['doctitle'] ) )
+					$title = empty( $term->meta['doctitle'] ) ? $title : wp_kses_stripslashes( wp_kses_decode_entities( $term->meta['doctitle'] ) );
+			}
+
+			if ( empty( $title ) )
+				$title = $this->get_the_real_archive_title( $term, $args );
+
+		}
+
+		if ( $escape )
+			$title = $this->escape_title( $title, false );
+
+		return (string) $title;
+	}
+
+	/**
+	 * Gets the title from custom field
+	 *
+	 * @since 2.2.8
+	 *
+	 * @param string $title the fallback title.
+	 * @param bool $escape Parse Title through saninitation calls.
+	 * @param int $id The Post ID.
+	 * @param string $taxonomy The term name.
+	 *
+	 * @return string The Title.
+	 */
+	public function title_from_custom_field( $title = '', $escape = false, $id = null, $taxonomy = null ) {
+
+		$id = isset( $id ) ? $id : $this->get_the_real_ID();
+
+		/**
+		 * Create something special for blog page. Only if it's not the home page.
+		 * @since 2.2.8
+		 */
+		if ( $this->is_blog_page( $id ) ) {
+			//* Posts page title.
+			$title = $this->get_custom_field( '_genesis_title', $id ) ? $this->get_custom_field( '_genesis_title', $id ) : get_the_title( $id );
+		} else if ( $this->is_singular() ) {
+			//* Get title from custom field, empty it if it's not there to override the default title
+			$title = $this->get_custom_field( '_genesis_title', $id ) ? $this->get_custom_field( '_genesis_title', $id ) : $title;
+		} else if ( $this->is_archive() || ( $id && $taxonomy ) ) {
+			//* Get the custom title for terms.
+			$term = get_term( $id, $taxonomy, OBJECT, 'raw' );
+			$title = isset( $term->admeta['doctitle'] ) ? $term->admeta['doctitle'] : $title;
+		}
+
+		if ( $escape )
+			$title = $this->escape_title( $title, false );
+
+		return (string) $title;
+	}
+
+	/**
+	 * Get the archive Title, including filter. Also works in admin.
+	 * @NOTE Taken from WordPress core. Altered to work in the Admin area.
+	 *
+	 * @param object $term The Term object.
+	 * @param array $args The Title arguments.
+	 *
+	 * @since 2.6.0
+	 */
+	public function get_the_real_archive_title( $term = null, $args = array() ) {
+
+		if ( empty( $term ) )
+			$term = get_queried_object();
+
+		/**
+		 * Applies filters the_seo_framework_the_archive_title : {
+		 *		@param string empty short circuit the function.
+		 * 		@param object $term The Term object.
+		 *	}
+		 *
+		 * @since 2.6.0
+		 */
+		$title = (string) apply_filters( 'the_seo_framework_the_archive_title', '', $term );
+
+		if ( $title )
+			return $title;
+
+		/**
+		 * @since 2.6.0
+		 */
+		$use_prefix = $this->use_archive_prefix( $term, $args );
+
+		if ( $this->is_category() || $this->is_tag() || $this->is_tax() ) {
+			$title = $this->single_term_title( '', false, $term );
+			/* translators: Front-end output. 1: Taxonomy singular name, 2: Current taxonomy term */
+			$title = $use_prefix ? sprintf( __( '%1$s: %2$s', 'autodescription' ), $this->get_the_term_name( $term ), $title ) : $title;
+		} else if ( $this->is_author() ) {
+			$title = get_the_author();
+				/* translators: Front-end output. */
+			$title = $use_prefix ? sprintf( __( 'Author: %s', 'autodescription' ), $title ) : $title;
+		} else if ( $this->is_date() ) {
+			if ( $this->is_year() ) {
+				/* translators: Front-end output. */
+				$title = get_the_date( _x( 'Y', 'yearly archives date format', 'autodescription' ) );
+				/* translators: Front-end output. */
+				$title = $use_prefix ? sprintf( __( 'Year: %s', 'autodescription' ), $title ) : $title;
+			} else if ( $this->is_month() ) {
+				/* translators: Front-end output. */
+				$title = get_the_date( _x( 'F Y', 'monthly archives date format', 'autodescription' ) );
+				/* translators: Front-end output. */
+				$title = $use_prefix ? sprintf( __( 'Month: %s', 'autodescription' ), $title ) : $title;
+			} else if ( $this->is_day() ) {
+				/* translators: Front-end output. */
+				$title = get_the_date( _x( 'F j, Y', 'daily archives date format', 'autodescription' ) );
+				/* translators: Front-end output. */
+				$title = $use_prefix ? sprintf( __( 'Day: %s', 'autodescription' ), $title ) : $title;
+			}
+		} else if ( $this->is_tax( 'post_format' ) ) {
+			if ( is_tax( 'post_format', 'post-format-aside' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Asides', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-gallery' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Galleries', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-image' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Images', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-video' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Videos', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-quote' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Quotes', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-link' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Links', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-status' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Statuses', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-audio' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Audio', 'post format archive title', 'autodescription' );
+			} else if ( $this->is_tax( 'post_format', 'post-format-chat' ) ) {
+				/* translators: Front-end output. */
+				$title = _x( 'Chats', 'post format archive title', 'autodescription' );
+			}
+		} else if ( is_post_type_archive() ) {
+			$title = post_type_archive_title( '', false );
+			/* translators: Front-end output. */
+			$title = $use_prefix ? sprintf( __( 'Archives: %s' ), $title ) : $title;
+		} else if ( isset( $term ) ) {
+			$title = $this->single_term_title( '', false, $term );
+
+			if ( $use_prefix ) {
+				/* translators: Front-end output. 1: Taxonomy singular name, 2: Current taxonomy term */
+				$title = sprintf( __( '%1$s: %2$s', 'autodescription' ),  $this->get_the_term_name( $term, true, false ), $title );
+			}
+		} else {
+			/* translators: Front-end output. */
+			$title = __( 'Archives', 'autodescription' );
+		}
+
+		return $title;
+	}
+
+	/**
+	 * Fetch single term title.
+	 * @NOTE Taken from WordPress core. Altered to work in the Admin area.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string.
+	 */
+	public function single_term_title( $prefix = '', $display = true, $term = null ) {
+
+		if ( is_null( $term ) )
+			$term = get_queried_object();
+
+		if ( ! $term )
+			return;
+
+		$term_name = '';
+
+		if ( isset( $term->name ) ) {
+			if ( $this->is_category() ) {
+				/**
+				* Filter the category archive page title.
+				*
+				* @since 2.0.10 WP CORE
+				*
+				* @param string $term_name Category name for archive being displayed.
+				*/
+				$term_name = apply_filters( 'single_cat_title', $term->name );
+			} else if ( $this->is_tag() ) {
+				/**
+				* Filter the tag archive page title.
+				*
+				* @since 2.3.0 WP CORE
+				*
+				* @param string $term_name Tag name for archive being displayed.
+				*/
+				$term_name = apply_filters( 'single_tag_title', $term->name );
+			} else if ( $this->is_tax() || $this->is_admin() ) {
+				/**
+				* Filter the custom taxonomy archive page title.
+				*
+				* @since 3.1.0 WP CORE
+				*
+				* @param string $term_name Term name for archive being displayed.
+				*/
+				$term_name = apply_filters( 'single_term_title', $term->name );
+			} else {
+				return '';
+			}
+		}
+
+		//* Impossible through WordPress interface. Possible through filters.
+		if ( empty( $term_name ) )
+			$term_name = $this->untitled();
+
+		if ( $display )
+			echo $prefix . $term_name;
+		else
+			return $prefix . $term_name;
+	}
+
+	/**
+	 * Return custom field title.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $title The current title.
+	 * @param int $id The post or TT ID.
+	 * @param string $taxonomy The TT name.
+	 *
+	 * @return string $title The custom field title.
+	 */
+	public function get_custom_field_title( $title = '', $id = '', $taxonomy = '' ) {
+
+		$title_special = '';
+
+		if ( $this->is_singular() )
+			$title_special = $this->title_from_special_fields();
+
+		if ( $title_special ) {
+			$title = $title_special;
+		} else {
+			$title_from_custom_field = $this->title_from_custom_field( $title, false, $id, $taxonomy );
+			$title = $title_from_custom_field ? $title_from_custom_field : $title;
+		}
+
+		return $title;
+	}
+
+	/**
+	 * Untitled title.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string Untitled.
+	 */
+	public function untitled() {
+		/* translators: Front-end output. */
+		return __( 'Untitled', 'autodescription' );
+	}
+
+	/**
+	 * Return Post Title from ID.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int $id The Post ID.
+	 * @param string $title Optional. The current Title.
+	 *
+	 * @return string Post Title
+	 */
+	public function post_title_from_ID( $id = 0, $title = '' ) {
+
+		$post = get_post( $id, OBJECT );
+
+		return $title = isset( $post->post_title ) ? $post->post_title : $title;
+	}
+
+	/**
+	 * Return search title.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $title the current title.
+	 * @param bool $escape Whether to escape attributes from query.
+	 *
+	 * @return string Search Title
+	 */
+	public function get_the_search_title( $title, $escape = true ) {
+
+		if ( $this->is_search() ) {
+			/* translators: Front-end output. */
+			$search_title = (string) apply_filters( 'the_seo_framework_search_title', __( 'Search results for:', 'autodescription' ) );
+
+			return $search_title . ' ' . trim( get_search_query( $escape ) );
+		}
+
+		return $title;
+	}
+
+	/**
+	 * Return 404 title.
+	 *
+	 * @since 2.6.0
+	 *
+	 * Applies filters string the_seo_framework_404_title
+	 * @since 2.5.2
+	 *
+	 * @param string $title The current Title
+	 *
+	 * @return string 404 Title
+	 */
+	public function get_the_404_title( $title ) {
+
+		if ( $this->is_404() )
+			return (string) apply_filters( 'the_seo_framework_404_title', '404' );
+
+		return $title;
+	}
+
+	/**
+	 * Get Title Separator.
+	 *
+	 * @since 2.6.0
+	 * @staticvar string $sep
+	 *
+	 * Applies filters the_seo_framework_title_separator
+	 * @since 2.3.9
+	 *
+	 * @return string The Separator
+	 */
+	public function get_title_separator() {
+
+		static $sep = null;
+
+		if ( isset( $sep ) )
+			return $sep;
+
+		return $sep = (string) apply_filters( 'the_seo_framework_title_separator', $this->get_separator( 'title' ) );
+	}
+
+	/**
+	 * Get Title Seplocation.
+	 *
+	 * Applies filters the_seo_framework_title_seplocation : string the title location.
+	 * Applies filters the_seo_framework_title_seplocation_front : string the home page title location.
+	 * @since 2.3.9
+	 *
+	 * @access private
+	 * @since 2.6.0
+	 * @staticvar string $cache
+	 *
+	 * @param string $seplocation The current seplocation.
+	 * @param bool $home The home seplocation.
+	 *
+	 * @return string The Seplocation
+	 */
+	public function get_title_seplocation( $seplocation = '', $home = false ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$seplocation][$home] ) )
+			return $cache[$seplocation][$home];
+
+		if ( empty( $seplocation ) || 'right' !== $seplocation || 'left' !== $seplocation ) {
+			if ( $home ) {
+				return $cache[$seplocation][$home] = (string) apply_filters( 'the_seo_framework_title_seplocation_front', $this->get_option( 'home_title_location' ) );
+			} else {
+				return $cache[$seplocation][$home] = (string) apply_filters( 'the_seo_framework_title_seplocation', $this->get_option( 'title_location' ) );
+			}
+		}
+
+		return $cache[$seplocation][$home] = $seplocation;
+	}
+
+	/**
+	 * Get Title Seplocation for the homepage.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $seplocation The current seplocation.
+	 *
+	 * @return string The Seplocation for the homepage.
+	 */
+	public function get_home_title_seplocation( $seplocation = '' ) {
+		return $this->get_title_seplocation( $seplocation, true );
+	}
+
+	/**
+	 * Determines whether to add or remove title additions.
+	 *
+	 * Applies filters the_seo_framework_add_blogname_to_title : boolean
+	 * @since 2.4.3
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $add
+	 *
+	 * @return bool True when additions are allowed.
+	 */
+	public function add_title_additions() {
+
+		static $add = null;
+
+		if ( isset( $add ) )
+			return $add;
+
+		if ( $this->can_manipulate_title() )
+			if ( $this->is_option_checked( 'title_rem_additions' ) || false === (bool) apply_filters( 'the_seo_framework_add_blogname_to_title', true ) )
+				return $add = false;
+
+		return $add = true;
+	}
+
+	/**
+	 * Add the title additions to the title.
+	 *
+	 * @param string $title The tite.
+	 * @param string $blogname The blogname.
+	 * @param string $seplocation The separator location.
+	 *
+	 * @since 2.6.0
+	 */
+	public function process_title_additions( $title, $blogname, $seplocation ) {
+
+		$sep = $this->get_title_separator();
+
+		$title = trim( $title );
+		$blogname = trim( $blogname );
+
+		if ( $blogname && $title ) {
+			if ( 'left' === $seplocation ) {
+				$title = $blogname . " $sep " . $title;
+			} else {
+				$title = $title . " $sep " . $blogname;
+			}
+		}
+
+		return $title;
+	}
+
+	/**
+	 * Adds title protection prefixes.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param $title The current Title.
+	 * @param $id The page ID.
+	 *
+	 * @return string $title with possible affixes.
+	 */
+	public function add_title_protection( $title, $id ) {
+
+		/**
+		 * From WordPress core get_the_title.
+		 * Bypasses get_post() function object which causes conflict with some themes and plugins.
+		 *
+		 * Also bypasses the_title filters.
+		 * And now also works in admin. It gives you a true representation of its output.
+		 *
+		 * @since 2.4.1
+		 *
+		 * @applies filters core : protected_title_format
+		 * @applies filters core : private_title_format
+		 */
+		$post = get_post( $id, OBJECT );
+
+		if ( isset( $post->post_password ) && '' !== $post->post_password ) {
+			/* translators: Front-end output */
+			$protected_title_format = apply_filters( 'protected_title_format', __( 'Protected: %s', 'autodescription' ), $post );
+			$title = sprintf( $protected_title_format, $title );
+		} else if ( isset( $post->post_status ) && 'private' === $post->post_status ) {
+			/* translators: Front-end output */
+			$private_title_format = apply_filters( 'private_title_format', __( 'Private: %s', 'autodescription' ), $post );
+			$title = sprintf( $private_title_format, $title );
+		}
+
+		return $title;
+	}
+
+	/**
+	 * Adds title pagination, if paginated.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $title The current Title.
+	 *
+	 * @return string Title with maybe pagination added.
+	 */
+	public function add_title_pagination( $title ) {
+
+		if ( $this->is_404() || $this->is_admin() )
+			return $title;
+
+		$page = $this->page();
+		$paged = $this->paged();
+
+		if ( $page && $paged ) {
+			/**
+			 * @since 2.4.3
+			 * Adds page numbering within the title.
+			 */
+			if ( $paged >= 2 || $page >= 2 ) {
+				$sep = $this->get_title_separator();
+
+				/* translators: Front-end output. */
+				$title .= " $sep " . sprintf( __( 'Page %s', 'autodescription' ), max( $paged, $page ) );
+			}
+		}
+
+		return $title;
+	}
+
+	/**
+	 * Whether to use a title prefix or not.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @param object $term The Term object.
+	 * @param array $args The title arguments.
+	 *
+	 * @return bool
+	 */
+	public function use_archive_prefix( $term = null, $args = array() ) {
+
+		//* Don't add prefix in meta.
+		if ( $args['meta'] )
+			return false;
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		/**
+		 * Applies filters the_seo_framework_use_archive_title_prefix : {
+		 *		@param bool true to add prefix.
+		 * 		@param object $term The Term object.
+		 *	}
+		 *
+		 * @since 2.6.0
+		 */
+		$filter = (bool) apply_filters( 'the_seo_framework_use_archive_title_prefix', true, $term );
+		$option = ! $this->get_option( 'title_rem_prefixes' );
+
+		return $cache = $option && $filter ? true : false;
+	}
+
+	/**
+	 * Filter the title prior to output.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @param string $title The current title.
+	 * @param array $args The title args.
+	 * @param bool $escape Whether to escape the title.
+	 *
+	 * @return string $title
+	 */
+	public function do_title_pre_filter( $title, $args, $escape = true ) {
+
+		/**
+		 * Applies filters 'the_seo_framework_pre_add_title' : string
+		 * @since 2.6.0
+		 * @param string $title
+		 * @param array $args
+		 * @param bool $escape
+		 */
+		$title = (string) apply_filters( 'the_seo_framework_pre_add_title', $title, $args, $escape );
+
+		if ( $escape )
+			$title = $this->escape_title( $title );
+
+		return $title;
+	}
+
+	/**
+	 * Filter the title prior to output.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @param string $title The current title.
+	 * @param array $args The title args.
+	 * @param bool $escape Whether to escape the title.
+	 *
+	 * @return string $title
+	 */
+	public function do_title_pro_filter( $title, $args, $escape = true ) {
+
+		/**
+		 * Applies filters 'the_seo_framework_pro_add_title' : string
+		 * @since 2.6.0
+		 * @param string $title
+		 * @param array $args
+		 * @param bool $escape
+		 */
+		$title = (string) apply_filters( 'the_seo_framework_pro_add_title', $title, $args, $escape );
+
+		if ( $escape )
+			$title = $this->escape_title( $title );
+
+		return $title;
+	}
+
+	/**
+	 * Whether to add home page tagline.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function home_page_add_title_tagline() {
+		return $this->is_option_checked( 'homepage_tagline' );
+	}
+
+}
Index: inc/classes/generate-url.class.php
===================================================================
--- inc/classes/generate-url.class.php	(nonexistent)
+++ inc/classes/generate-url.class.php	(working copy)
@@ -0,0 +1,1277 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Generate_Url
+ *
+ * Generates URL and permalink SEO data based on content.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Generate_Url extends AutoDescription_Generate_Title {
+
+	/**
+	 * Whether to slash the url or not. Used when query vars are in url.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @var bool Whether to slash the url.
+	 */
+	protected $url_slashit;
+
+	/**
+	 * Whether to add a subdomain to the url if set.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @var string The subdomain.
+	 */
+	protected $add_subdomain;
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Creates canonical url
+	 *
+	 * @param string $url the url
+	 *
+	 * @since 2.4.2
+	 * @param array $args : accepted args : {
+	 * 			@param bool $paged Return current page URL without pagination if false.
+	 * 			@param bool $from_option Get the canonical uri option
+	 * 			@param object $post The Post Object.
+	 * 			@param bool $external Whether to fetch the current WP Request or get the permalink by Post Object.
+	 * 			@param bool $is_term Fetch url for term.
+	 * 			@param object $term The term object.
+	 * 			@param bool $home Fetch home URL.
+	 * 			@param bool $forceslash Fetch home URL and slash it, always.
+	 *			@param int $id The Page id.
+	 * }
+	 *
+	 * @since 2.0.0
+	 */
+	public function the_url( $url = '', $args = array() ) {
+
+		if ( $this->the_seo_framework_debug && false === $this->doing_sitemap ) $this->debug_init( __CLASS__, __FUNCTION__, true, $debug_key = microtime(true), get_defined_vars() );
+
+		//* Reset cache.
+		$this->url_slashit = true;
+		$this->add_subdomain = '';
+
+		$default_args = $this->parse_url_args( '', '', true );
+
+		/**
+		 * Parse args.
+		 * @since 2.4.2
+		 */
+		if ( ! is_array( $args ) ) {
+			//* Old style parameters are used. Doing it wrong.
+			$this->_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', '2.4.2' );
+			$args = $default_args;
+		} else if ( $args ) {
+			$args = $this->parse_url_args( $args, $default_args );
+		} else {
+			$args = $default_args;
+		}
+
+		$path = '';
+		$scheme = '';
+
+		/**
+		 * Trailing slash the post, or not.
+		 * @since 2.2.4
+		 */
+		$slashit = true;
+
+		/**
+		 * Fetch permalink if Feed.
+		 * @since 2.5.2
+		 */
+		if ( $this->is_feed() )
+			$url = get_permalink( $args['post'] );
+
+		if ( ! $args['home'] && empty( $url ) ) {
+			/**
+			 * Get url from options
+			 * @since 2.2.9
+			 */
+			if ( $args['get_custom_field'] && $this->is_singular() )
+				$url = $this->get_custom_field( '_genesis_canonical_uri' ) ? $this->get_custom_field( '_genesis_canonical_uri' ) : $url;
+
+			if ( empty( $url ) )
+				$path = $this->generate_url_path( $args );
+		}
+
+		//* Translate the URL.
+		$path = $this->get_translation_path( $path, $args['id'], $args['external'] );
+
+		//* Domain Mapping canonical URL
+		if ( empty( $url ) ) {
+			$wpmu_url = $this->the_url_wpmudev_domainmap( $path, true );
+			if ( $wpmu_url && is_array( $wpmu_url ) ) {
+				$url = $wpmu_url[0];
+				$scheme = $wpmu_url[1];
+			}
+		}
+
+		//* Domain Mapping canonical URL
+		if ( empty( $url ) ) {
+			$dm_url = $this->the_url_donncha_domainmap( $path, true );
+			if ( $dm_url && is_array( $dm_url ) ) {
+				$url = $dm_url[0];
+				$scheme = $dm_url[1];
+			}
+		}
+
+		//* Non-domainmap URL
+		if ( empty( $url ) ) {
+			if ( $args['home'] || '' === $path ) {
+				$url = user_trailingslashit( get_option( 'home' ) );
+				$slashit = false;
+			} else {
+				$url = $this->generate_full_url( $path );
+
+				$scheme = is_ssl() ? 'https' : 'http';
+			}
+		}
+
+		//* Add subdomain, if any.
+		if ( '' !== $this->add_subdomain ) {
+			$parsed_url = parse_url( $url );
+			$url = str_replace( $parsed_url['scheme'] . '://', '', $url );
+
+			//* Put it together.
+			$url = $this->add_subdomain . '.' . $url;
+		}
+
+		//* URL has been given manually or $args['home'] is true.
+		if ( ! isset( $scheme ) )
+			$scheme = is_ssl() ? 'https' : 'http';
+
+		$output = $this->set_url_scheme( $url, $scheme );
+
+		if ( $this->url_slashit ) {
+			/**
+			 * Slash it only if $slashit is true
+			 *
+			 * @since 2.2.4
+			 */
+			if ( $slashit && ! $args['forceslash'] )
+				$output = user_trailingslashit( $output );
+
+			//* Be careful with the default permalink structure.
+			if ( $args['forceslash'] )
+				$output = trailingslashit( $output );
+		}
+
+		$url = esc_url( $output );
+
+		if ( $this->the_seo_framework_debug && false === $this->doing_sitemap ) $this->debug_init( __CLASS__, __FUNCTION__, false, $debug_key, array( 'url_output' => $url ) );
+
+		return $url;
+	}
+
+	/**
+	 * Parse and sanitize url args.
+	 *
+	 * @param array $args required The passed arguments.
+	 * @param array $defaults The default arguments.
+	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
+	 *
+	 * @applies filters the_seo_framework_url_args : {
+	 * 		@param bool $paged Return current page URL without pagination if false
+	 * 		@param bool $from_option Get the canonical uri option
+	 * 		@param object $post The Post Object.
+	 * 		@param bool $external Whether to fetch the current WP Request or get the permalink by Post Object.
+	 * 		@param bool $is_term Fetch url for term.
+	 * 		@param object $term The term object.
+	 * 		@param bool $home Fetch home URL.
+	 * 		@param bool $forceslash Fetch home URL and slash it, always.
+	 * }
+	 *
+	 * @since 2.4.2
+	 * @return array $args parsed args.
+	 */
+	public function parse_url_args( $args = array(), $defaults = array(), $get_defaults = false ) {
+
+		//* Passing back the defaults reduces the memory usage.
+		if ( empty( $defaults ) ) {
+			$defaults = array(
+				'paged' 			=> false,
+				'paged_plural' 		=> true,
+				'get_custom_field'	=> true,
+				'external'			=> false,
+				'is_term' 			=> false,
+				'post' 				=> null,
+				'term'				=> null,
+				'home'				=> false,
+				'forceslash'		=> false,
+				'id'				=> $this->get_the_real_ID()
+			);
+
+			//* @since 2.5.0
+			$defaults = (array) apply_filters( 'the_seo_framework_url_args', $defaults, $args );
+		}
+
+		//* Return early if it's only a default args request.
+		if ( $get_defaults )
+			return $defaults;
+
+		//* Array merge doesn't support sanitation. We're simply type casting here.
+		$args['paged'] 				= isset( $args['paged'] ) 				? (bool) $args['paged'] 			: $defaults['paged'];
+		$args['paged_plural'] 		= isset( $args['paged_plural'] ) 		? (bool) $args['paged_plural'] 		: $defaults['paged_plural'];
+		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
+		$args['external'] 			= isset( $args['external'] ) 			? (bool) $args['external'] 			: $defaults['external'];
+		$args['is_term'] 			= isset( $args['is_term'] ) 			? (bool) $args['is_term'] 			: $defaults['is_term'];
+		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
+		$args['post'] 				= isset( $args['post'] ) 				? (object) $args['post'] 			: $defaults['post'];
+		$args['term'] 				= isset( $args['term'] ) 				? (object) $args['term'] 			: $defaults['term'];
+		$args['home'] 				= isset( $args['home'] ) 				? (bool) $args['home'] 				: $defaults['home'];
+		$args['forceslash'] 		= isset( $args['forceslash'] ) 			? (bool) $args['forceslash'] 		: $defaults['forceslash'];
+		$args['id'] 				= isset( $args['id'] ) 					? (int) $args['id'] 				: $defaults['id'];
+
+		return $args;
+	}
+
+	/**
+	 * Generate url from Args.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $args the URL args.
+	 *
+	 * @return string $path
+	 */
+	public function generate_url_path( $args = array() ) {
+
+		if ( empty( $args ) )
+			$args = $this->parse_url_args( '', '', true );
+
+		if ( $args['is_term'] || $this->is_archive() ) {
+			$term = $args['term'];
+
+			//* Term or Taxonomy.
+			if ( ! isset( $term ) )
+				$term = get_queried_object();
+
+			if ( isset( $term->taxonomy ) ) {
+				//* Registered Terms and Taxonomies.
+				$path = $this->get_relative_term_url( $term, $args );
+			} else if ( ! $args['external'] ) {
+				//* Everything else.
+				global $wp;
+				$path = $wp->request;
+			} else {
+				//* Nothing to see here...
+				$path = '';
+			}
+		} else {
+
+			$post = $args['post'];
+
+			/**
+			 * Fetch post object
+			 * @since 2.2.4
+			 */
+			if ( ! isset( $post ) )
+				$post = get_post( $args['id'], OBJECT );
+
+			/**
+			 * Reworked to use the $args['id'] check based on get_the_real_ID.
+			 * @since 2.6.0
+			 */
+			if ( isset( $post ) ) {
+
+				$post_id = isset( $post->ID ) ? $post->ID : $args['id'];
+
+				if ( $post_id ) {
+
+					if ( '' === $this->permalink_structure() ) {
+						$path = $this->the_url_path_default_permalink_structure( $post );
+					} else {
+
+						//* Don't slash draft shortlinks.
+						if ( isset( $post->post_status ) && ( 'auto-draft' === $post->post_status || 'draft' === $post->post_status ) )
+							$this->url_slashit = false;
+
+						$path = $this->get_relative_url( $post, $args['external'], $post_id );
+					}
+				}
+
+			}
+		}
+
+		if ( isset( $path ) )
+			return $path;
+
+		return '';
+	}
+
+	/**
+	 * Generates relative URL for current post_ID.
+	 *
+	 * @param object $post The post.
+	 * @param bool $external Whether to fetch the WP Request or get the permalink by Post Object.
+	 * @param id $post_id The page id.
+	 *
+	 * @since 2.3.0
+	 *
+	 * @global object $post
+	 *
+	 * @return relative Post or Page url.
+	 */
+	public function get_relative_url( $post = null, $external = false, $post_id = null ) {
+
+		if ( ! isset( $post_id ) ) {
+			if ( isset( $post->ID ) )
+				$post_id = $post->ID;
+
+			if ( ! isset( $post_id ) && ! $external )
+				$post_id = $this->get_the_real_ID();
+		}
+
+		if ( ! isset( $post_id ) )
+			return '';
+
+		if ( $post_id && ( $external || ! $this->is_home() ) ) {
+			$permalink = get_permalink( $post_id );
+		} else if ( ! $external ) {
+			global $wp;
+
+			if ( isset( $wp->request ) )
+				$permalink = $wp->request;
+		}
+
+		//* No permalink found.
+		if ( ! isset( $permalink ) )
+			return '';
+
+		/**
+		 * @since 2.4.2
+		 */
+		$path = $this->set_url_scheme( $permalink, 'relative' );
+
+		return $path;
+	}
+
+	/**
+	 * Generate full URL from path.
+	 *
+	 * @since 2.6.0
+	 * @staticvar string $home_url The Home URL.
+	 * @staticvar string|bool $home_path The Home Directory Path.
+	 *
+	 * @return string URL the full URL.
+	 */
+	protected function generate_full_url( $path = '' ) {
+
+		static $home_url = null;
+		static $home_path = null;
+		static $home_url_slashed = null;
+
+		//* Set up caches.
+		if ( is_null( $home_url ) ) {
+			$home_url = get_option( 'home' );
+
+			$home_url_parsed = parse_url( $home_url );
+			$home_path = isset( $home_url_parsed['path'] ) ? $home_url_parsed['path'] : false;
+
+			$home_url_slashed = trailingslashit( $home_url );
+		}
+
+		//* Prevent duplicated first path from Site Address config.
+		if ( $home_path ) {
+			$count = 1;
+			$url = $home_url_slashed . ltrim( str_replace( $home_path, '', $path ), '\/ ' );
+		} else {
+			$url = $home_url_slashed . ltrim( $path, '\/ ' );
+		}
+
+		return $url;
+	}
+
+	/**
+	 * Generates relative URL for current post_ID for translation plugins.
+	 *
+	 * @param string $path the current URL path.
+	 * @param int $post_id The post ID.
+	 * @param bool $external Whether to fetch the WP Request or get the permalink by Post Object.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @global object $post
+	 *
+	 * @return relative Post or Page url.
+	 */
+	public function get_translation_path( $path = '', $post_id = null, $external = false ) {
+
+		if ( is_object( $post_id ) )
+			$post_id = isset( $post_id->ID ) ? $post_id->ID : $this->get_the_real_ID();
+
+		if ( ! isset( $post_id ) )
+			$post_id = $this->get_the_real_ID();
+
+		//* WPML support.
+		if ( $this->is_wpml_active() )
+			$path = $this->get_relative_wmpl_url( $path, $post_id );
+
+		//* qTranslate X support. Can't work externally as we can't fetch the post's current language.
+		if ( ! $external && $this->is_qtranslate_active() )
+			$path = $this->get_relative_qtranslate_url( $path, $post_id );
+
+		return $path;
+	}
+
+	/**
+	 * Generates qtranslate URL.
+	 *
+	 * @param string $path The current path.
+	 * @param int $post_id The Post ID. Unused.
+	 *
+	 * @global array $q_config
+	 *
+	 * @staticvar int $q_config_mode
+	 *
+	 * @since 2.6.0
+	 */
+	public function get_relative_qtranslate_url( $path = '', $post_id = '' ) {
+
+		//* Reset cache.
+		$this->url_slashit = true;
+		$this->add_subdomain = '';
+
+		static $q_config_mode = null;
+
+		if ( ! isset( $q_config ) ) {
+			global $q_config;
+			$q_config_mode = $q_config['url_mode'];
+		}
+
+		//* If false, change canonical URL for every page.
+		$hide = isset( $q_config['hide_default_language'] ) ? $q_config['hide_default_language'] : true;
+
+		$current_lang = isset( $q_config['language'] ) ? $q_config['language'] : false;
+		$default_lang = isset( $q_config['default_language'] ) ? $q_config['default_language'] : false;
+
+		//* Don't to anything on default language when path is hidden.
+		if ( $hide && $current_lang === $default_lang )
+			return $path;
+
+		switch ( $q_config_mode ) {
+
+			case '1' :
+				//* Negotiation type query var.
+
+				//* Don't slash it further.
+				$this->url_slashit = false;
+
+				/**
+				 * Path must have trailing slash for pagination permalinks to work.
+				 * So we remove the query string and add it back with slash.
+				 */
+				if ( strpos( $path, '?lang=' . $current_lang ) !== false )
+					$path = str_replace( '?lang=' . $current_lang, '', $path );
+
+				return user_trailingslashit( $path ) . '?lang=' . $current_lang;
+				break;
+
+			case '2' :
+				//* Subdirectory
+				if ( 0 === strpos( $path, '/' . $current_lang . '/' ) )
+					return $path;
+				else
+					return $path = trailingslashit( $current_lang ) . ltrim( $path, '\/ ' );
+				break;
+
+			case '3' :
+				//* Notify cache of subdomain addition.
+				$this->add_subdomain = $current_lang;
+
+				//* No need to alter the path.
+				return $path;
+				break;
+
+		}
+
+		return $path;
+	}
+
+	/**
+	 * Generate relative WPML url.
+	 *
+	 * @param string $path The current path.
+	 * @param int $post_id The Post ID.
+	 *
+	 * @global object $sitepress
+	 *
+	 * @staticvar bool $gli_exists
+	 * @staticvar string $default_lang
+	 *
+	 * @since 2.4.3
+	 *
+	 * @return relative path for WPML urls.
+	 */
+	public function get_relative_wmpl_url( $path = '', $post_id = '' ) {
+		global $sitepress;
+
+		//* Reset cache.
+		$this->url_slashit = true;
+		$this->add_subdomain = '';
+
+		if ( isset( $sitepress ) ) {
+
+			static $gli_exists = null;
+
+			if ( is_null( $gli_exists ) )
+				$gli_exists = function_exists( 'wpml_get_language_information' );
+
+			if ( $gli_exists ) {
+
+				if ( '' === $post_id )
+					$post_id = $this->get_the_real_ID();
+
+				//* Cache default language.
+				static $default_lang = null;
+				if ( is_null( $default_lang ) )
+					$default_lang = $sitepress->get_default_language();
+
+				/**
+				 * Applies filters wpml_post_language_details : array|wp_error
+				 *
+				 * ... Somehow WPML thought this would be great and understandable.
+				 * This should be put inside a callable function.
+				 * @since 2.6.0
+				 */
+				$lang_info = apply_filters( 'wpml_post_language_details', NULL, $post_id );
+
+				if ( is_wp_error( $lang_info ) ) {
+					//* Terms and Taxonomies.
+					$lang_info = array();
+
+					//* Cache the code.
+					static $lang_code = null;
+					if ( is_null( $lang_code ) && defined( 'ICL_LANGUAGE_CODE' ) )
+						$lang_code = ICL_LANGUAGE_CODE;
+
+					$lang_info['language_code'] = $lang_code;
+				}
+
+				//* If filter isn't used, bail.
+				if ( ! isset( $lang_info['language_code'] ) )
+					return $path;
+
+				$current_lang = $lang_info['language_code'];
+
+				//* No need to alter URL if we're on default lang.
+				if ( $current_lang === $default_lang )
+					return $path;
+
+				//* Cache negotiation type.
+				static $negotiation_type = null;
+				if ( ! isset( $negotiation_type ) )
+					$negotiation_type = $sitepress->get_setting( 'language_negotiation_type' );
+
+				switch ( $negotiation_type ) {
+
+					case '1' :
+						//* Subdirectory
+
+						$contains_path = strpos( $path, '/' . $current_lang . '/' );
+						if ( false !== $contains_path && 0 === $contains_path )
+							return $path;
+						else
+							return $path = trailingslashit( $current_lang ) . ltrim( $path, '\/ ' );
+						break;
+
+					case '2' :
+						//* Notify cache of subdomain addition.
+						$this->add_subdomain = $current_lang;
+
+						//* No need to alter the path.
+						return $path;
+						break;
+
+					case '3' :
+						//* Negotiation type query var.
+
+						//* Don't slash it further.
+						$this->url_slashit = false;
+
+						/**
+						 * Path must have trailing slash for pagination permalinks to work.
+						 * So we remove the query string and add it back with slash.
+						 */
+						if ( false !== strpos( $path, '?lang=' . $current_lang ) )
+							$path = str_replace( '?lang=' . $current_lang, '', $path );
+
+						return user_trailingslashit( $path ) . '?lang=' . $current_lang;
+						break;
+
+				}
+
+			}
+		}
+
+		return $path;
+	}
+
+	/**
+	 * Generates relative URL for current term.
+	 *
+	 * @global WP_Rewrite object $wp_rewrite
+	 *
+	 * @param object $term The term object.
+	 * @param bool $args {
+	 *		'external' : Whether to fetch the WP Request or get the permalink by Post Object.
+	 *		'paged'	: Whether to add pagination for all types.
+	 *		'paged_plural' : Whether to add pagination for the second or later page.
+	 * }
+	 *
+	 * @since 2.4.2
+	 *
+	 * @return Relative term or taxonomy URL.
+	 */
+	public function get_relative_term_url( $term = null, $args = array() ) {
+		global $wp_rewrite;
+
+		if ( ! is_array( $args ) ) {
+			/**
+			 * @since 2.6.0
+			 * '$args = array()' replaced '$no_request = false'.
+			 */
+			$this->_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', '2.6.0' );
+
+			$no_request = (bool) $args;
+			$args = $this->parse_url_args( '', '', true );
+			$args['external'] = $no_request;
+		}
+
+		// We can't fetch the Term object within sitemaps.
+		if ( $args['external'] && is_null( $term ) )
+			return '';
+
+		if ( is_null( $term ) )
+			$term = get_queried_object();
+
+		$taxonomy = $term->taxonomy;
+
+		$paged = $this->maybe_get_paged( $this->paged(), $args['paged'], $args['paged_plural'] );
+
+		$termlink = $wp_rewrite->get_extra_permastruct( $taxonomy );
+
+		$slug = $term->slug;
+		$t = get_taxonomy( $taxonomy );
+
+		if ( empty( $termlink ) ) {
+			if ( 'category' === $taxonomy ) {
+				$termlink = '?cat=' . $term->term_id;
+			} else if ( isset( $t->query_var ) && '' !== $t->query_var ) {
+				$termlink = '?' . $t->query_var . '=' . $slug;
+			} else {
+				$termlink = '?taxonomy=' . $taxonomy . '&term=' . $slug;
+			}
+
+			if ( $paged )
+				$termlink .= '&page=' . $paged;
+
+		} else {
+			if ( $t->rewrite['hierarchical'] ) {
+				$hierarchical_slugs = array();
+				$ancestors = get_ancestors( $term->term_id, $taxonomy, 'taxonomy' );
+
+				foreach ( (array) $ancestors as $ancestor ) {
+					$ancestor_term = get_term( $ancestor, $taxonomy );
+					$hierarchical_slugs[] = $ancestor_term->slug;
+				}
+
+				$hierarchical_slugs = array_reverse( $hierarchical_slugs );
+				$hierarchical_slugs[] = $slug;
+
+				$termlink = str_replace( "%$taxonomy%", implode( '/', $hierarchical_slugs ), $termlink );
+			} else {
+				$termlink = str_replace( "%$taxonomy%", $slug, $termlink );
+			}
+
+			if ( $paged )
+				$termlink = trailingslashit( $termlink )  . 'page/' . $paged;
+
+			$termlink = user_trailingslashit( $termlink, 'category' );
+		}
+
+		$path = $this->set_url_scheme( $termlink, 'relative' );
+
+		return $path;
+	}
+
+	/**
+	 * Set url scheme.
+	 * WordPress core function, without filter.
+	 *
+	 * @param string $url Absolute url that includes a scheme.
+	 * @param string $scheme optional. Scheme to give $url. Currently 'http', 'https', 'login', 'login_post', 'admin', or 'relative'.
+	 * @param bool $use_filter Whether to parse filters.
+	 *
+	 * @since 2.4.2
+	 * @return string url with chosen scheme.
+	 */
+	public function set_url_scheme( $url, $scheme = null, $use_filter = true ) {
+
+		/**
+		 * Core should uphold the coding standards (Yoda code). Open issue @link Github.com?
+		 * @todo yoda-fy
+		 */
+		if ( ! isset( $scheme ) ) {
+			$scheme = is_ssl() ? 'https' : 'http';
+		} else if ( $scheme === 'admin' || $scheme === 'login' || $scheme === 'login_post' || $scheme === 'rpc' ) {
+			$scheme = is_ssl() || force_ssl_admin() ? 'https' : 'http';
+		} else if ( $scheme !== 'http' && $scheme !== 'https' && $scheme !== 'relative' ) {
+			$scheme = is_ssl() ? 'https' : 'http';
+		}
+
+		$url = trim( $url );
+		if ( '//' === substr( $url, 0, 2 ) )
+			$url = 'http:' . $url;
+
+		if ( 'relative' === $scheme ) {
+			$url = ltrim( preg_replace( '#^\w+://[^/]*#', '', $url ) );
+			if ( $url !== '' && $url[0] === '/' )
+				$url = '/' . ltrim( $url , "/ \t\n\r\0\x0B" );
+
+		} else {
+			//* This will break if $scheme is set to false.
+			$url = preg_replace( '#^\w+://#', $scheme . '://', $url );
+		}
+
+		if ( $use_filter )
+			return $this->set_url_scheme_filter( $url, $scheme );
+
+		return $url;
+	}
+
+	/**
+	 * Set URL scheme based on filter.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $url The url with scheme.
+	 * @param string $scheme The current scheme.
+	 *
+	 * @return $url with applied filters.
+	 */
+	public function set_url_scheme_filter( $url, $current_scheme ) {
+
+		/**
+		 * Applies filters the_seo_framework_canonical_force_scheme : Changes scheme.
+		 *
+		 * Accepted variables:
+		 * (string) 'https'		: 	Force https
+		 * (bool) true 			: 	Force https
+		 * (bool) false			: 	Force http
+		 * (string) 'http'		: 	Force http
+		 * (string) 'relative' 	:	Scheme relative
+		 * (void) null			: 	Do nothing
+		 *
+		 * @param string $current_scheme the current used scheme.
+		 *
+		 * @since 2.4.2
+		 */
+		$scheme_settings = apply_filters( 'the_seo_framework_canonical_force_scheme', null, $current_scheme );
+
+		/**
+		 * @TODO add options metabox.
+		 * @priority medium 2.6.5+
+		 */
+
+		if ( isset( $scheme_settings ) ) {
+			if ( 'https' === $scheme_settings || 'http' === $scheme_settings || 'relative' === $scheme_settings ) {
+				$url = $this->set_url_scheme( $url, $scheme_settings, false );
+			} else if ( ! $scheme_settings ) {
+				$url = $this->set_url_scheme( $url, 'http', false );
+			} else if ( $scheme_setting ) {
+				$url = $this->set_url_scheme( $url, 'https', false );
+			}
+		}
+
+		return $url;
+	}
+
+	/**
+	 * Creates canonical url for the default permalink structure.
+	 *
+	 * @param object $post The post.
+	 *
+	 * @since 2.3.0
+	 */
+	public function the_url_path_default_permalink_structure( $post = null ) {
+
+		//* Don't slash it.
+		$this->url_slashit = false;
+
+		if ( ! $this->is_singular() ) {
+			//* We're on a taxonomy
+			$object = get_queried_object();
+
+			if ( is_object( $object ) ) {
+				if ( $this->is_category() ) {
+					$id = $object->term_id;
+					$path = '?cat=' . $id;
+				} else if ( $this->is_tag() ) {
+					$name = $object->name;
+					$path = '?tag=' . $id;
+				} else if ( $this->is_date() ) {
+					global $wp_query;
+
+					$query = $wp_query->query;
+
+					$year = $query->year;
+					$month = $query->monthnum ? '&monthnum=' . $query->monthnum : '';
+					$day = $query->day ? '&day=' . $query->day : '';
+
+					$path = '?year=' . $year . $month . $day;
+				} else if ( $this->is_author() ) {
+					$name = $object->author_name;
+					$path = '?author=' . $name;
+				} else if ( $this->is_tax() ) {
+					$name = $object->taxonomy;
+					$path = '?taxonomy=' . $name;
+				} else {
+					$id = $object->ID;
+					$path = '?p=' . $id;
+				}
+			}
+		}
+
+		if ( ! isset( $path ) ) {
+			if ( isset( $post->ID ) ) {
+				$id = $post->ID;
+			} else {
+				$id = $this->get_the_real_ID();
+			}
+
+			$path = '?p=' . $id;
+		}
+
+		return $path;
+	}
+
+	/**
+	 * Try to get an canonical URL when WPMUdev Domain Mapping is active.
+	 *
+	 * @param string $path The post relative path.
+	 *
+	 * @since 2.3.0
+	 *
+	 * @param bool $get_scheme Output array with scheme.
+	 * @since 2.4.0
+	 *
+	 * @return string|array|void The unescaped URL, the scheme
+	 */
+	public function the_url_wpmudev_domainmap( $path, $get_scheme = false ) {
+
+		if ( $this->is_domainmapping_active() ) {
+			global $wpdb, $blog_id;
+
+			/**
+			 * Cache revisions. Hexadecimal.
+			 *
+			 * @since 2.6.0
+			 */
+			$revision = '1';
+
+			$cache_key = 'wpmudev_mapped_domain_' . $revision . '_' . $blog_id;
+
+			//* Check if the domain is mapped
+			$mapped_domain = $this->object_cache_get( $cache_key );
+			if ( false === $mapped_domain ) {
+				//* Setup cache. Results may only contain one object.
+
+				$mapped_domains = $wpdb->get_results( $wpdb->prepare( "SELECT id, domain, is_primary, scheme FROM {$wpdb->base_prefix}domain_mapping WHERE blog_id = %d", $blog_id ), OBJECT );
+
+				$primary_key = 0;
+				$domain_ids = array();
+				foreach ( $mapped_domains as $key => $domain ) {
+					if ( isset( $domain->is_primary ) && '1' === $domain->is_primary ) {
+						$primary_key = $key;
+
+						//* We've found the primary key, break loop.
+						break;
+					} else {
+						//* Save IDs.
+						if ( isset( $domain->id ) && $domain->id )
+							$domain_ids[$key] = $domain->id;
+					}
+				}
+
+				if ( 0 === $primary_key && ! empty( $domain_ids ) ) {
+					//* No primary ID has been found. Get the one with the lowest ID, which has been added first.
+					$primary_key = array_keys( $domain_ids, min( $domain_ids ), true );
+					$primary_key = reset( $primary_key );
+				}
+
+				//* Set 0, as we check for false to begin with.
+				$mapped_domain = isset( $mapped_domains[$primary_key] ) ? $mapped_domains[$primary_key] : 0;
+
+				$this->object_cache_set( $cache_key, $mapped_domain, 3600 );
+			}
+
+			if ( $mapped_domain ) {
+
+				$domain = isset( $mapped_domain->domain ) ? $mapped_domain->domain : '0';
+				$scheme = isset( $mapped_domain->scheme ) ? $mapped_domain->scheme : '';
+
+				//* Fallback to is_ssl if no scheme has been found.
+				if ( '' === $scheme )
+					$scheme = is_ssl() ? '1' : '0';
+
+				if ( '1' === $scheme ) {
+					$scheme_full = 'https://';
+					$scheme = 'https';
+				} else {
+					$scheme_full = 'http://';
+					$scheme = 'http';
+				}
+
+				//* Put it all together.
+				$url = trailingslashit( $scheme_full . $domain ) . ltrim( $path, '\/' );
+
+				if ( ! $get_scheme ) {
+					return $url;
+				} else {
+					return array( $url, $scheme );
+				}
+			}
+		}
+
+		return '';
+	}
+
+	/**
+	 * Try to get an canonical URL when Donncha Domain Mapping is active.
+	 *
+	 * @param string $path The post relative path.
+	 * @param bool $get_scheme Output array with scheme.
+	 *
+	 * @since 2.4.0
+	 *
+	 * @return string|array|void The unescaped URL, the scheme
+	 */
+	public function the_url_donncha_domainmap( $path, $get_scheme = false ) {
+
+		if ( $this->is_donncha_domainmapping_active() ) {
+			global $wpdb,$current_blog;
+
+			$scheme = is_ssl() ? 'https' : 'http';
+
+			//* This url is cached statically.
+			$url = function_exists( 'domain_mapping_siteurl' ) ? domain_mapping_siteurl( false ) : false;
+
+			$request_uri = '';
+
+			if ( $url && $url !== untrailingslashit( $scheme . '://' . $current_blog->domain . $current_blog->path ) ) {
+				if ( ( defined( 'VHOST' ) && 'yes' !== VHOST ) || ( defined( 'SUBDOMAIN_INSTALL' ) && false === SUBDOMAIN_INSTALL ) ) {
+					$request_uri = str_replace( $current_blog->path, '/', $_SERVER['REQUEST_URI'] );
+				}
+
+				$url = trailingslashit( $url . $request_uri ) . ltrim( $path, '\/ ' );
+
+				if ( $get_scheme ) {
+					return array( $url, $scheme );
+				} else {
+					return $url;
+				}
+			}
+		}
+
+		return '';
+	}
+
+	/**
+	 * Generates shortlink url
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param int $post_id The post ID
+	 * @return string|null Escaped site Shortlink URL
+	 */
+	public function get_shortlink( $post_id = 0 ) {
+
+		if ( $this->get_option( 'shortlink_tag' ) ) {
+
+			$path = null;
+
+			if ( ! is_front_page() ) {
+				if ( $this->is_singular( $post_id ) ) {
+
+					if ( 0 === $post_id )
+						$post_id = $this->get_the_real_ID();
+
+					if ( $post_id ) {
+						if ( $this->is_static_frontpage( $post_id ) ) {
+							$path = '';
+						} else {
+							$path = '?p=' . $post_id;
+						}
+					}
+				} else if ( ! is_front_page() && is_archive() ) {
+
+					$object = get_queried_object();
+
+					if ( is_category() ) {
+						$id = $object->term_id;
+						$path = '?cat=' . $id;
+					}
+
+					if ( is_tag() ) {
+						$name = $object->name;
+						$path = '?tag=' . $name;
+					}
+
+					if ( is_date() ) {
+						// This isn't exactly "short" for a shortlink...
+						$year = get_query_var( 'year' );
+						$month = get_query_var( 'monthnum' ) ? '&monthnum=' . get_query_var( 'monthnum' ) : '';
+						$day = get_query_var( 'day' ) ? '&day=' . get_query_var( 'day' ) : '';
+
+						$path = '?year=' . $year . $month . $day;
+					}
+
+					if ( is_author() ) {
+						$id = $object->ID;
+						$path = '?author=' . $id;
+					}
+
+					if ( is_tax() ) {
+						$id = $object->ID;
+						$path = '?taxonomy=' . $id;
+					}
+
+				}
+			}
+
+			if ( isset( $path ) ) {
+
+				$url = $this->the_url_from_cache();
+				$parsed_url = parse_url( $url );
+
+				$additions = '';
+				if ( isset( $parsed_url['query'] ) )
+					$additions = '&' . $parsed_url['query'];
+
+				$home_url = $this->the_home_url_from_cache( true );
+				$url = $home_url . $path . $additions;
+
+				return esc_url_raw( $url );
+			}
+		}
+
+		return '';
+	}
+
+	/**
+	 * Generates Previous and Next links
+	 *
+	 * @since 2.2.4
+	 * @global object $wp_query
+	 *
+	 * @param string $prev_next Previous or next page link
+	 * @param int $post_id The post ID
+	 *
+	 * @return string|null Escaped site Pagination URL
+	 */
+	public function get_paged_url( $prev_next = 'next', $post_id = 0 ) {
+
+		if ( ! $this->get_option( 'prev_next_posts' ) && ! $this->get_option( 'prev_next_archives' ) && ! $this->get_option( 'prev_next_frontpage' ) )
+			return '';
+
+		$prev = '';
+		$next = '';
+
+		if ( $this->is_singular() ) {
+
+			$output_singular_paged = false;
+			if ( $this->is_front_page() ) {
+				$output_singular_paged = $this->is_option_checked( 'prev_next_frontpage' );
+			} else {
+				$output_singular_paged = $this->is_option_checked( 'prev_next_posts' );
+			}
+
+			if ( $output_singular_paged ) {
+
+				$page = $this->page();
+				$numpages = substr_count( $this->get_post_content( $this->get_the_real_ID() ), '<!--nextpage-->' ) + 1;
+
+				if ( ! $page && $numpages )
+					$page = 1;
+
+				if ( 'prev' === $prev_next )
+					$prev = $page > 1 ? (string) $this->get_paged_post_url( $page - 1, $post_id, 'prev' ) : $prev;
+
+				if ( 'next' === $prev_next )
+					$next = $page < $numpages ? (string) $this->get_paged_post_url( $page + 1, $post_id, 'next' ) : $next;
+			}
+		} else if ( $this->is_archive() || $this->is_home() ) {
+
+			$output_archive_paged = false;
+			if ( $this->is_front_page() ) {
+				$output_archive_paged = $this->is_option_checked( 'prev_next_frontpage' );
+			} else {
+				$output_archive_paged = $this->is_option_checked( 'prev_next_archives' );
+			}
+
+			if ( $output_archive_paged ) {
+				$paged = $this->paged();
+
+				if ( 'prev' === $prev_next )
+					$prev = $paged > 1 ? get_previous_posts_page_link() : $prev;
+
+				if ( 'next' === $prev_next )
+					$next = $paged < $GLOBALS["wp_query"]->max_num_pages ? get_next_posts_page_link() : $next;
+			}
+		}
+
+		if ( $prev )
+			return esc_url_raw( $prev );
+
+		if ( $next )
+			return esc_url_raw( $next );
+
+		return '';
+	}
+
+	/**
+	 * Return the special URL of a paged post.
+	 *
+	 * Taken from _wp_link_page() in WordPress core, but instead of anchor markup, just return the URL.
+	 * Also adds WPMUdev Domain Mapping support and is optimized for speed.
+	 *
+	 * @uses $this->the_url_from_cache();
+	 * @since 2.2.4
+	 *
+	 * @param int $i The page number to generate the URL from.
+	 * @param int $post_id The post ID
+	 * @param string $pos Which url to get, accepts next|prev
+	 *
+	 * @return string Unescaped URL
+	 */
+	public function get_paged_post_url( $i, $post_id = 0, $pos = '' ) {
+
+		$from_option = false;
+
+		if ( $i === 1 ) {
+			$url = $this->the_url_from_cache( '', $post_id, true, $from_option );
+		} else {
+			$post = get_post( $post_id );
+
+			$urlfromcache = $this->the_url_from_cache( '', $post_id, false, $from_option );
+
+			/**
+			 * Fix the url.
+			 *
+			 * @since 2.2.5
+			 */
+			if ( $i >= 2 ) {
+				//* Fix adding pagination url.
+
+				//* Parse query arg and put in var.
+				$query_arg = parse_url( $urlfromcache, PHP_URL_QUERY );
+				if ( isset( $query_arg ) )
+					$urlfromcache = str_replace( '?' . $query_arg, '', $urlfromcache );
+
+				// Calculate current page number.
+				$int_current = 'next' === $pos ? ( $i - 1 ) : ( $i + 1 );
+				$string_current = (string) $int_current;
+
+				if ( $i !== 1 ) {
+					//* We're adding a page.
+					$last_occurence = strrpos( $urlfromcache, '/' . $string_current . '/' );
+
+					if ( $last_occurence !== false )
+						$urlfromcache = substr_replace( $urlfromcache, '/', $last_occurence, strlen( '/' . $string_current . '/' ) );
+				}
+			}
+
+			if ( '' === $this->permalink_structure() || in_array( $post->post_status, array( 'draft', 'auto-draft', 'pending' ) ) ) {
+				$url = add_query_arg( 'page', $i, $urlfromcache );
+			} else if ( $this->is_static_frontpage( $post->ID ) ) {
+				global $wp_rewrite;
+
+				$url = trailingslashit( $urlfromcache ) . user_trailingslashit( "$wp_rewrite->pagination_base/" . $i, 'single_paged' );
+
+				//* Add back query arg if removed.
+				if ( isset( $query_arg ) )
+					$url = $url . '?' . $query_arg;
+			} else {
+				$url = trailingslashit( $urlfromcache ) . user_trailingslashit( $i, 'single_paged' );
+
+				//* Add back query arg if removed.
+				if ( isset( $query_arg ) )
+					$url = $url . '?' . $query_arg;
+			}
+		}
+
+		return $url;
+	}
+
+	/**
+	 * Cached WordPress permalink structure settings.
+	 *
+	 * @since 2.6.0
+	 * @staticvar string $structure
+	 *
+	 * @return string permalink structure.
+	 */
+	public function permalink_structure() {
+
+		static $structure = null;
+
+		if ( isset( $structure ) )
+			return $structure;
+
+		return $structure = get_option( 'permalink_structure' );
+	}
+
+	/**
+	 * Add $paged if Paginated and allowed through arguments.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int $paged
+	 * @param bool $singular Whether to allow plural and singular.
+	 * @param bool $plural Whether to allow plural regardless.
+	 *
+	 * @return int|bool $paged. False if not allowed. Int if allowed.
+	 */
+	protected function maybe_get_paged( $paged = 0, $singular = false, $plural = true ) {
+
+		if ( $paged ) {
+			if ( $singular )
+				return $paged;
+
+			if ( $plural && $paged >= 2 )
+				return $paged;
+		}
+
+		return false;
+	}
+
+}
Index: inc/classes/generate.class.php
===================================================================
--- inc/classes/generate.class.php	(revision 1413572)
+++ inc/classes/generate.class.php	(working copy)
@@ -1,3863 +1,313 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Generate
- *
- * Generates SEO data based on content
- * Returns strings/arrays
- *
- * @since 2.1.6
- */
-class AutoDescription_Generate extends AutoDescription_PostData {
-
-	/**
-	 * Constructor, load parent constructor
-	 */
-	public function __construct() {
-		parent::__construct();
-	}
-
-	/**
-	 * Create description
-	 *
-	 * @param string $description the description.
-	 * @param array $args description args : {
-	 * 		@param int $id the term or page id.
-	 * 		@param string $taxonomy taxonomy name.
-	 * 		@param bool $is_home We're generating for the home page.
-	 * 		@param bool $get_custom_field Do not fetch custom title when false.
-	 * 		@param bool $social Generate Social Description when true.
-	 * }
-	 *
-	 * @since 1.0.0
-	 *
-	 * @return string The description
-	 */
-	 public function generate_description( $description = '', $args = array() ) {
-
-		$default_args = $this->parse_description_args( '', '', true );
-
-		/**
-		 * Parse args.
-		 * @since 2.5.0
-		 */
-		if ( ! is_array( $args ) ) {
-			//* Old style parameters are used. Doing it wrong.
-			_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', $this->the_seo_framework_version( '2.5.0' ) );
-			$args = $default_args;
-		} else if ( ! empty( $args ) ) {
-			$args = $this->parse_description_args( $args, $default_args );
-		} else {
-			$args = $default_args;
-		}
-
-		if ( $args['get_custom_field'] && empty( $description ) ) {
-			//* Fetch from options, if any.
-			$description = (string) $this->description_from_custom_field( $args, false );
-
-			//* We've already checked the custom fields, so let's remove the check in the generation.
-			$args['get_custom_field'] = false;
-		}
-
-		//* Still no description found? Create an auto description based on content.
-		if ( empty( $description ) || ! is_string( $description ) )
-			$description = $this->generate_description_from_id( $args, false );
-
-		/**
-		 * Beautify.
-		 * @since 2.3.4
-		 */
-		$description = $this->escape_description( $description );
-
-		return $description;
-	}
-
-	/**
-	 * Escapes and beautifies description.
-	 *
-	 * @param string $description The description to escape and beautify.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return string Escaped and beautified description.
-	 */
-	public function escape_description( $description = '' ) {
-
-		$description = wptexturize( $description );
-		$description = convert_chars( $description );
-		$description = esc_html( $description );
-		$description = capital_P_dangit( $description );
-		$description = trim( $description );
-
-		return $description;
-	}
-
-	/**
-	 * Parse and sanitize description args.
-	 *
-	 * @param array $args required The passed arguments.
-	 * @param array $defaults The default arguments.
-	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
-	 *
-	 * @applies filters the_seo_framework_description_args : {
-	 * 		@param int $id the term or page id.
-	 * 		@param string $taxonomy taxonomy name.
-	 * 		@param bool $is_home We're generating for the home page.
-	 * 		@param bool $get_custom_field Do not fetch custom title when false.
-	 * 		@param bool $social Generate Social Description when true.
-	 * }
-	 *
-	 * @since 2.5.0
-	 * @return array $args parsed args.
-	 */
-	public function parse_description_args( $args = array(), $defaults = array(), $get_defaults = false ) {
-
-		//* Passing back the defaults reduces the memory usage.
-		if ( empty( $defaults ) ) {
-			$defaults = array(
-				'id' 				=> $this->get_the_real_ID(),
-				'taxonomy'			=> '',
-				'is_home'			=> false,
-				'get_custom_field' 	=> true,
-				'social' 			=> false,
-			);
-
-			$defaults = (array) apply_filters( 'the_seo_framework_description_args', $defaults, $args );
-		}
-
-		//* Return early if it's only a default args request.
-		if ( $get_defaults )
-			return $defaults;
-
-		//* Array merge doesn't support sanitation. We're simply type casting here.
-		$args['id'] 				= isset( $args['id'] ) 					? (int) $args['id'] 				: $defaults['id'];
-		$args['taxonomy'] 			= isset( $args['taxonomy'] ) 			? (string) $args['taxonomy'] 		: $defaults['taxonomy'];
-		$args['is_home'] 			= isset( $args['is_home'] ) 			? (bool) $args['is_home'] 			: $defaults['is_home'];
-		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
-		$args['social'] 			= isset( $args['social'] ) 				? (bool) $args['social'] 			: $defaults['social'];
-
-		return $args;
-	}
-
-	/**
-	 * Create description
-	 *
-	 * @param array $args description args : {
-	 * 		@param int $id the term or page id.
-	 * 		@param string $taxonomy taxonomy name.
-	 * 		@param bool $is_home We're generating for the home page.
-	 * }
-	 * @param bool $escape Escape the output if true.
-	 *
-	 * @since 2.4.1
-	 *
-	 * @return string|mixed The description, might be unsafe for html output.
-	 */
-	public function description_from_custom_field( $args = array(), $escape = true ) {
-		global $wp_query;
-
-		$default_args = $this->parse_description_args( '', '', true );
-
-		/**
-		 * Parse args.
-		 * @since 2.5.0
-		 */
-		if ( ! is_array( $args ) ) {
-			//* Old style parameters are used. Doing it wrong.
-			_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', $this->the_seo_framework_version( '2.5.0' ) );
-			$args = $default_args;
-		} else if ( ! empty( $args ) ) {
-			$args = $this->parse_description_args( $args, $default_args );
-		} else {
-			$args = $default_args;
-		}
-
-		$description = '';
-
-		if ( $args['is_home'] || is_front_page() || ( '' === $args['taxonomy'] && $this->is_static_frontpage( $args['id'] ) ) ) {
-			$custom_desc = $this->get_option( 'homepage_description' );
-			$description = ! empty( $custom_desc ) ? $custom_desc : $description;
-		}
-
-		if ( '' === $description && $this->is_singular( $args['id'] ) ) {
-			//* Bugfix 2.2.7 run only if description is stil empty from home page.
-			$custom_desc = $this->get_custom_field( '_genesis_description', $args['id'] );
-			$description = $custom_desc ? $custom_desc : $description;
-		}
-
-		if ( is_category() ) {
-			$term = $wp_query->get_queried_object();
-
-			$description = ! empty( $term->admeta['description'] ) ? $term->admeta['description'] : $description;
-
-			$flag = $term->admeta['saved_flag'] != '0' ? true : false;
-
-			if ( ! $flag && empty( $description ) && isset( $term->meta['description'] ) )
-				$description = ! empty( $term->meta['description'] ) ? $term->meta['description'] : $description;
-		}
-
-		if ( is_tag() ) {
-			$term = $wp_query->get_queried_object();
-
-			$description = ! empty( $term->admeta['description'] ) ? $term->admeta['description'] : $description;
-
-			$flag = $term->admeta['saved_flag'] != '0' ? true : false;
-
-			if ( ! $flag && empty( $description ) && isset( $term->meta['description'] ) )
-				$description = ! empty( $term->meta['description'] ) ? $term->meta['description'] : $description;
-		}
-
-		if ( is_tax() ) {
-			$term = get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) );
-			$description = ! empty( $term->admeta['description'] ) ? wp_kses_stripslashes( wp_kses_decode_entities( $term->admeta['description'] ) ) : $description;
-
-			$flag = $term->admeta['saved_flag'] != '0' ? true : false;
-
-			if ( ! $flag && empty( $description ) && isset( $term->meta['description'] ) )
-				$description = ! empty( $term->meta['description'] ) ? $term->meta['description'] : $description;
-		}
-
-		if ( is_author() ) {
-			$user_description = get_the_author_meta( 'meta_description', (int) get_query_var( 'author' ) );
-
-			$description = $user_description ? $user_description : $description;
-		}
-
-		if ( $escape ) {
-			$description = $this->escape_description( $description );
-		}
-
-		return $description;
-	}
-
-	/**
-	 * Generate description from content
-	 *
-	 * @since 1.0.0
-	 *
-	 * @param array $args description args : {
-	 * 		@param int $id the term or page id.
-	 * 		@param string $taxonomy taxonomy name.
-	 * 		@param bool $is_home We're generating for the home page.
-	 * 		@param bool $get_custom_field Do not fetch custom title when false.
-	 * 		@param bool $social Generate Social Description when true.
-	 * }
-	 * @param bool $escape Escape output when true.
-	 * @param bool $_escape deprecated.
-	 *
-	 * Gained its own function.
-	 * @since 2.3.3
-	 *
-	 * @return string output The description.
-	 */
-	public function generate_description_from_id( $args = array(), $escape = true, $_escape = 'depr' ) {
-
-		//* @TODO remove @since 2.6.0
-		if ( 'depr' !== $_escape ) {
-			_deprecated_argument( __FUNCTION__, $this->the_seo_framework_version( '2.5.2' ), 'Use 2nd argument for escape.' );
-			$escape = (bool) $_escape;
-		}
-
-		/**
-		 * Applies filters bool 'the_seo_framework_enable_auto_description' : Enable or disable the description.
-		 *
-		 * @since 2.5.0
-		 */
-		$autodescription = (bool) apply_filters( 'the_seo_framework_enable_auto_description', true );
-
-		if ( ! $autodescription )
-			return '';
-
-		$default_args = $this->parse_description_args( '', '', true );
-
-		/**
-		 * Parse args.
-		 * @since 2.5.0
-		 */
-		if ( ! is_array( $args ) ) {
-			//* Old style parameters are used. Doing it wrong.
-			_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', $this->the_seo_framework_version( '2.5.0' ) );
-			$args = $default_args;
-		} else if ( ! empty( $args ) ) {
-			$args = $this->parse_description_args( $args, $default_args );
-		} else {
-			$args = $default_args;
-		}
-
-		/**
-		 * Debug parameters.
-		 * @since 2.3.4
-		 */
-		if ( $this->the_seo_framework_debug ) {
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			echo "\r\n<br>\r\n" . 'START: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n";
-
-			$timer_start = microtime( true );
-
-			if ( $this->the_seo_framework_debug_more ) {
-				$this->echo_debug_information( array( 'args' => $args ) );
-			}
-
-			echo "\r\n<br>\r\n";
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		$term = '';
-		if ( ! empty( $args['taxonomy'] ) && false !== $args['id'] ) {
-			//* Fetch taxonomy from args.
-			//* This only runs in admin, because we provide these arg values there.
-			$term = get_term_by( 'id', $args['id'], $args['taxonomy'], OBJECT );
-		} else if ( is_admin() ) {
-			//* Test other admin screens.
-			global $current_screen;
-
-			if ( isset( $current_screen->taxonomy ) && ! empty( $current_screen->taxonomy ) ) {
-				//* Fetch taxonomy in admin.
-				$args['taxonomy'] = $current_screen->taxonomy;
-				$term = get_term_by( 'id', $args['id'], $args['taxonomy'], OBJECT );
-			}
-		} else if ( is_archive() && ! is_front_page() && ! $this->is_singular( $args['id'] ) ) {
-			//* Fetch Taxonomy through wp_query on front-end
-			global $wp_query;
-
-			$term = $wp_query->get_queried_object();
-			$args['taxonomy'] = isset( $term->taxonomy ) ? $term->taxonomy : '';
-		}
-
-		$page_on_front = false;
-		/**
-		 * We're on the home page now. So let's create something special.
-		 * Check if ID is false means its a blog page as home.
-		 */
-		if ( is_front_page() || $args['is_home'] || $this->is_static_frontpage( $args['id'] ) ) {
-			$page_on_front = true;
-			$args['id'] = (int) get_option( 'page_on_front' );
-
-			/**
-			 * Return early if description is found from Home Page Settings.
-			 * Only do so when $args['get_custom_field'] is true.
-			 *
-			 * @since 2.3.4
-			 */
-			if ( $args['get_custom_field'] ) {
-				$custom_desc = $this->get_option( 'homepage_description' );
-				$description = $custom_desc ? $custom_desc : null;
-
-				if ( isset( $description ) )
-					return $description;
-			}
-		}
-
-		//* Fetch Description Title.
-		$title = $this->generate_description_title( $args['id'], $term, $page_on_front );
-		/* translators: Front-end output. */
-		$on = _x( 'on', 'Placement. e.g. Post Title "on" Blog Name', 'autodescription' );
-		$blogname = $this->get_blogname();
-
-		if ( ! $page_on_front ) {
-
-			$description_additions = $this->get_option( 'description_blogname' );
-
-			/**
-			 * Now uses options.
-			 * @since 2.3.4
-			 *
-			 * Applies filters the_seo_framework_description_separator
-			 * @since 2.3.9
-			 */
-			$sep = (string) apply_filters( 'the_seo_framework_description_separator', $this->get_separator( 'description' ) );
-
-			/**
-			 * Setup transient.
-			 */
-			$this->setup_auto_description_transient( $args['id'], $args['taxonomy'] );
-
-			/**
-			 * Cache the generated description within a transient.
-			 *
-			 * @since 2.3.3
-			 *
-			 * Put inside a different function.
-			 * @since 2.3.4
-			 */
-			$excerpt = get_transient( $this->auto_description_transient );
-			if ( false === $excerpt ) {
-
-				/**
-				 * Get max char length
-				 * 149 will account for the added (single char) ... and two spaces around $on and the separator + 2 spaces around the separator: makes 155
-				 *
-				 * 151 will count for the added (single char) ... and the separator + 2 spaces around the separator: makes 155
-				 *
-				 * Default to 200 when $args['social']
-				 */
-				$max_char_length_normal = $description_additions ? (int) 149 - mb_strlen( html_entity_decode( $title . $on . $blogname ) ) : (int) 151 - mb_strlen( html_entity_decode( $title ) );
-				$max_char_length_social = 200;
-
-				//* Generate Excerpts.
-				$excerpt_normal = $this->generate_excerpt( $args['id'], $term, $max_char_length_normal );
-				$excerpt_social = $this->generate_excerpt( $args['id'], $term, $max_char_length_social );
-
-				//* Put in array to be accessed later.
-				$excerpt = array(
-					'normal' => $excerpt_normal,
-					'social' => $excerpt_social
-				);
-
-				/**
-				 * Transient expiration: 1 week.
-				 * Keep the description for at most 1 week.
-				 *
-				 * 60s * 60m * 24h * 7d
-				 */
-				$expiration = 60 * 60 * 24 * 7;
-
-				set_transient( $this->auto_description_transient, $excerpt, $expiration );
-			}
-
-			/**
-			 * Check for Social description, don't add blogname then.
-			 * Also continues normally if it's the front page.
-			 *
-			 * @since 2.5.0
-			 */
-			if ( $args['social'] ) {
-				/**
-				 * @since 2.5.2
-				 */
-				$excerpt_exists = ! empty( $excerpt['social'] ) ? true : false;
-
-				if ( $excerpt_exists ) {
-					$description = $excerpt['social'];
-				} else {
-					$description = (string) sprintf( '%s %s %s', $title, $on, $blogname );
-				}
-			} else {
-				$excerpt_exists = ! empty( $excerpt['normal'] ) ? true : false;
-
-				if ( true === $excerpt_exists ) {
-					if ( $description_additions ) {
-						$description = (string) sprintf( '%s %s %s %s %s', $title, $on, $blogname, $sep, $excerpt['normal'] );
-					} else {
-						$description = (string) sprintf( '%s %s %s', $title, $sep, $excerpt['normal'] );
-					}
-				} else {
-					//* We still add the additions when no excerpt has been found.
-					// i.e. home page or empty/shortcode filled page.
-					$description = (string) sprintf( '%s %s %s', $title, $on, $blogname );
-				}
-
-			}
-		} else {
-			//* Home page Description.
-			$description = (string) sprintf( '%s %s %s', $title, $on, $blogname );
-		}
-
-		if ( $escape ) {
-			$description = $this->escape_description( $description );
-		}
-
-		/**
-		 * Debug cache key and output.
-		 * @since 2.3.4
-		 */
-		if ( $this->the_seo_framework_debug ) {
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			$excerpt = $page_on_front ? 'Front page has no excerpt.' : $excerpt;
-
-			$this->echo_debug_information( array( 'description excerpt cache key' => $this->auto_description_transient ) );
-			$this->echo_debug_information( array( 'page on front' => $page_on_front ) );
-			$this->echo_debug_information( array( 'is static frontpage' => $this->is_static_frontpage( $args['id'] ) ) );
-			$this->echo_debug_information( array( 'description excerpt' => $excerpt ) );
-			$this->echo_debug_information( array( 'Generation time' => number_format( microtime(true) - $timer_start, 5 ) . 's' ) );
-
-			echo "\r\n<br>\r\n" . 'END: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n<br><br>";
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		return (string) $description;
-	}
-
-	/**
-	 * Generates the Title for description.
-	 *
-	 * @param int $id The page ID.
-	 * @param void|object $term The term object.
-	 * @param bool $page_on_front If front page.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return string The description title.
-	 */
-	public function generate_description_title( $id = '',  $term = '', $page_on_front = false ) {
-
-		if ( '' === $id )
-			$id = $this->get_the_real_ID();
-
-		if ( ! $page_on_front ) {
-			/**
-			 * No need to parse these when generating social description.
-			 *
-			 * @since 2.5.0
-			 */
-			if ( $this->is_blog_page( $id ) ) {
-				/**
-				 * We're on the blog page now.
-				 * @since 2.2.8
-				 */
-				$custom_title = $this->get_custom_field( '_genesis_title', $id );
-				$title = $custom_title ? $custom_title : $this->title( '', '', '', array( 'term_id' => $id, 'placeholder' => true, 'notagline' => true, 'description_title' => true, 'escape' => false ) );
-
-				// @TODO create option.
-				/* translators: Front-end output. */
-				$title = __( 'Latest posts:', 'autodescription' ) . ' ' . $title;
-			} else if ( ! empty( $term ) && is_object( $term ) ) {
-				//* We're on a taxonomy now.
-
-				if ( isset( $term->admeta['doctitle'] ) && ! empty( $term->admeta['doctitle'] ) ) {
-					$title = $term->admeta['doctitle'];
-				} else if ( isset( $term->name ) && ! empty( $term->name ) ) {
-					$title = $term->name;
-				} else if ( isset( $term->slug ) && ! empty( $term->slug ) ) {
-					$title = $term->slug;
-				}
-			} else {
-				//* We're on a page now.
-				$custom_title = $this->get_custom_field( '_genesis_title', $id );
-				$title = $custom_title ? $custom_title : $this->title( '', '', '', array( 'term_id' => $id, 'placeholder' => true, 'notagline' => true, 'description_title' => true, 'escape' => false ) );
-			}
-		} else {
-			$title = $this->get_blogdescription();
-		}
-
-		/**
-		 * Use Untitled on empty titles.
-		 * @since 2.2.8
-		 */
-		/* translators: Front-end output. */
-		$title = empty( $title ) ? __( 'Untitled', 'autodescription' ) : trim( $title );
-
-		return $title;
-	}
-
-	/**
-	 * Generate the excerpt.
-	 *
-	 * @param int|string $page_id required : The Page ID
-	 * @param object|null $term The Taxonomy Term.
-	 * @param int $max_char_length The maximum excerpt char length.
-	 * @param int $_max_char_length deprecated.
-	 * @param int $__max_char_length deprecated.
-	 *
-	 * @since 2.3.4
-	 *
-	 * @staticvar array $excerpt_cache Holds the excerpt
-	 * @staticvar array $excerptlength_cache Holds the excerpt length
-	 *
-	 * Please note that this does not reflect the actual output becaue the $max_char_length isn't calculated on direct call.
-	 */
-	public function generate_excerpt( $page_id, $term = '', $max_char_length = 155, $_max_char_length = 'depr', $__max_char_length = 'depr' ) {
-
-		//* @TODO remove @since 2.6.0
-		if ( 'depr' !== $__max_char_length ) {
-			_deprecated_argument( __FUNCTION__, $this->the_seo_framework_version( '2.5.2' ), 'Use 3nd argument for max_car_length.' );
-			$max_char_length = (int) $__max_char_length;
-		}
-
-		//* @TODO remove @since 2.6.0
-		if ( 'depr' !== $_max_char_length ) {
-			_deprecated_argument( __FUNCTION__, $this->the_seo_framework_version( '2.5.2' ), 'Removed last 2 arguments.' );
-		}
-
-		static $excerpt_cache = array();
-		static $excerptlength_cache = array();
-
-		$term_id = isset( $term->term_id ) ? $term->term_id : false;
-
-		//* Put excerpt in cache.
-		if ( ! isset( $excerpt_cache[$page_id][$term_id] ) ) {
-			if ( $this->is_singular( $page_id ) ) {
-				//* We're on the blog page now.
-				$excerpt = $this->get_excerpt_by_id( '', $page_id );
-			} else if ( ! empty( $term ) && is_object( $term ) ) {
-				//* We're on a taxonomy now.
-				$excerpt = ! empty( $term->description ) ? $term->description : $this->get_excerpt_by_id( '', '', $page_id );
-			} else {
-				$excerpt = '';
-			}
-
-			$excerpt_cache[$page_id][$term_id] = $excerpt;
-		}
-
-		//* Fetch excerpt from cache.
-		$excerpt = $excerpt_cache[$page_id][$term_id];
-
-		/**
-		 * Put excerptlength in cache.
-		 * Why cache? My tests have shown that mb_strlen is 1.03x faster than cache fetching.
-		 * However, _mb_strlen (compat) is about 1740x slower. And this is the reason it's cached!
-		 */
-		if ( ! isset( $excerptlength_cache[$page_id][$term_id] ) )
-			$excerptlength_cache[$page_id][$term_id] = (int) mb_strlen( $excerpt );
-
-		//* Fetch the length from cache.
-		$excerptlength = $excerptlength_cache[$page_id][$term_id];
-
-		// Trunculate if the excerpt is longer than the max char length
-		if ( $excerptlength > $max_char_length ) {
-
-			// Cut string to fit $max_char_length.
-			$subex = mb_substr( $excerpt, 0, $max_char_length );
-			// Split words in array. Boom.
-			$exwords = explode( ' ', $subex );
-			// Calculate if last word exceeds.
-			$excut = - ( mb_strlen( $exwords[ count( $exwords ) - (int) 1 ] ) );
-
-			if ( $excut < (int) 0 ) {
-				//* Cut out exceeding word.
-				$excerpt = mb_substr( $subex, 0, $excut );
-			} else {
-				// We're all good here, continue.
-				$excerpt = $subex;
-			}
-
-			$excerpt = rtrim( $excerpt ) . '...';
-		}
-
-		return (string) $excerpt;
-	}
-
-	/**
-	 * Get the title. God function.
-	 * Always use this function for the title unless you're absolutely sure what you're doing.
-	 *
-	 * This function is used for all these: Taxonomies and Terms, Posts, Pages, Blog, front page, front-end, back-end.
-	 *
-	 * @since 1.0.0
-	 *
-	 * Params required wp_title filter :
-	 * @param string $title The Title to return
-	 * @param string $sep The Title sepeartor
-	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
-	 *
-	 * @since 2.4.0:
-	 * @param array $args : accepted args : {
-	 * 		@param int term_id The Taxonomy Term ID when taxonomy is also filled in. Else post ID.
-	 * 		@param string taxonomy The Taxonomy name.
-	 * 		@param bool page_on_front Page on front condition for example generation.
-	 * 		@param bool placeholder Generate placeholder, ignoring options.
-	 * 		@param bool notagline Generate title without tagline.
-	 * 		@param bool meta Ignore doing_it_wrong. Used in og:title/twitter:title
-	 * 		@param bool get_custom_field Do not fetch custom title when false.
-	 * 		@param bool description_title Fetch title for description.
-	 * 		@param bool is_front_page Fetch front page title.
-	 * }
-	 *
-	 * @return string $title Title
-	 */
-	public function title( $title = '', $sep = '', $seplocation = '', $args = array() ) {
-
-		//* Use WordPress default feed title.
-		if ( is_feed() )
-			return trim( $title );
-
-		/**
-		 * Debug parameters.
-		 * @since 2.3.4
-		 */
-		if ( $this->the_seo_framework_debug ) {
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			echo  "\r\n" . 'START: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n";
-
-			if ( $this->the_seo_framework_debug_more ) {
-				$this->echo_debug_information( array( 'title' => $title ) );
-				$this->echo_debug_information( array( 'sep' => $sep ) );
-				$this->echo_debug_information( array( 'seplocation' => $seplocation ) );
-				$this->echo_debug_information( array( 'args' => $args ) );
-			}
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		$default_args = $this->parse_title_args( '', '', true );
-
-		/**
-		 * Parse args.
-		 * @since 2.4.0
-		 */
-		if ( ! is_array( $args ) ) {
-			//* Old style parameters are used. Doing it wrong.
-			_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', $this->the_seo_framework_version( '2.4.0' ) );
-			$args = $default_args;
-		} else if ( ! empty( $args ) ) {
-			$args = $this->parse_title_args( $args, $default_args );
-		} else {
-			$args = $default_args;
-		}
-
-		/**
-		 * Return early if the request is the Title only (without tagline/blogname).
-		 * Admin only.
-		 */
-		if ( $args['notagline'] && is_admin() )
-			return $this->build_title_notagline( $title, $args );
-
-		/**
-		 * Add doing it wrong notice for better SEO consistency.
-		 * Only when in wp_title.
-		 *
-		 * @since 2.2.5
-		 */
-		if ( ! $args['meta'] ) {
-			if ( ! $this->detect_theme_support( 'title-tag' ) && doing_filter( 'wp_title' ) ) {
-				if ( ! empty( $seplocation ) ) {
-					//* Set doing it wrong parameters.
-					$this->tell_title_doing_it_wrong( $title, $sep, $seplocation, false );
-					//* And echo them.
-					add_action( 'wp_footer', array( $this, 'tell_title_doing_it_wrong' ), 20 );
-
-					//* Notify cache.
-					$this->title_doing_it_wrong = true;
-
-					//* Notify transients
-					$this->set_theme_dir_transient( false );
-
-					return $this->build_title_doingitwrong( $title, $sep, $seplocation, $args );
-				} else if ( ! empty( $sep ) ) {
-					//* Set doing it wrong parameters.
-					$this->tell_title_doing_it_wrong( $title, $sep, $seplocation, false );
-					//* And echo them.
-					add_action( 'wp_footer', array( $this, 'tell_title_doing_it_wrong' ), 20 );
-
-					//* Notify cache.
-					$this->title_doing_it_wrong = true;
-
-					//* Notify transients
-					$this->set_theme_dir_transient( false );
-
-					//* Title is empty.
-					$args['empty_title'] = true;
-
-					return $this->build_title_doingitwrong( $title, $sep, $seplocation, $args );
-				}
-			}
-		}
-
-		//* Notify cache to keep using the same output. We're doing it right :).
-		if ( ! isset( $this->title_doing_it_wrong ) )
-			$this->title_doing_it_wrong = false;
-
-		//* Set transient to true if the theme is doing it right.
-		if ( false !== $this->title_doing_it_wrong )
-			$this->set_theme_dir_transient( true );
-
-		//* Empty title and rebuild it.
-		return $this->build_title( $title = '', $seplocation, $args );
-	}
-
-	/**
-	 * Escapes and beautifies title.
-	 *
-	 * @param string $title The title to escape and beautify.
-	 * @param bool $trim Whether to trim the title from whitespaces.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return string Escaped and beautified title.
-	 */
-	public function escape_title( $title = '', $trim = true ) {
-
-		$title = wptexturize( $title );
-		$title = convert_chars( $title );
-		$title = esc_html( $title );
-		$title = capital_P_dangit( $title );
-		$title = $trim ? trim( $title ) : $title;
-
-		return $title;
-	}
-
-	/**
-	 * Parse and sanitize title args.
-	 *
-	 * @param array $args required The passed arguments.
-	 * @param array $defaults The default arguments.
-	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
-	 *
-	 * @applies filters the_seo_framework_title_args : {
-	 * 		@param int term_id The Taxonomy Term ID when taxonomy is also filled in. Else post ID.
-	 * 		@param string taxonomy The Taxonomy name.
-	 * 		@param bool page_on_front Page on front condition for example generation.
-	 * 		@param bool placeholder Generate placeholder, ignoring options.
-	 * 		@param bool notagline Generate title without tagline.
-	 * 		@param bool meta Ignore doing_it_wrong. Used in og:title/twitter:title
-	 * 		@param bool get_custom_field Do not fetch custom title when false.
-	 * 		@param bool description_title Fetch title for description.
-	 * 		@param bool is_front_page Fetch front page title.
-	 * }
-	 *
-	 * @since 2.4.0
-	 * @return array $args parsed args.
-	 */
-	public function parse_title_args( $args = array(), $defaults = array(), $get_defaults = false ) {
-
-		//* Passing back the defaults reduces the memory usage.
-		if ( empty( $defaults ) ) {
-			$defaults = array(
-				'term_id' 			=> $this->get_the_real_ID(),
-				'taxonomy' 			=> '',
-				'page_on_front'		=> false,
-				'placeholder'		=> false,
-				'notagline' 		=> false,
-				'meta' 				=> true,
-				'get_custom_field'	=> true,
-				'description_title'	=> false,
-				'is_front_page'		=> false,
-				'escape'			=> true
-			);
-
-			//* @since 2.5.0
-			$defaults = (array) apply_filters( 'the_seo_framework_title_args', $defaults, $args );
-		}
-
-		//* Return early if it's only a default args request.
-		if ( $get_defaults )
-			return $defaults;
-
-		//* Array merge doesn't support sanitation. We're simply type casting here.
-		$args['term_id'] 			= isset( $args['term_id'] ) 			? (int) $args['term_id'] 			: $defaults['term_id'];
-		$args['taxonomy'] 			= isset( $args['taxonomy'] ) 			? (string) $args['taxonomy'] 		: $defaults['taxonomy'];
-		$args['page_on_front'] 		= isset( $args['page_on_front'] ) 		? (bool) $args['page_on_front'] 	: $defaults['page_on_front'];
-		$args['placeholder'] 		= isset( $args['placeholder'] ) 		? (bool) $args['placeholder'] 		: $defaults['placeholder'];
-		$args['notagline'] 			= isset( $args['notagline'] ) 			? (bool) $args['notagline'] 		: $defaults['notagline'];
-		$args['meta'] 				= isset( $args['meta'] ) 				? (bool) $args['meta'] 				: $defaults['meta'];
-		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
-		$args['description_title'] 	= isset( $args['description_title'] ) 	? (bool) $args['description_title'] : $defaults['description_title'];
-		$args['is_front_page'] 		= isset( $args['is_front_page'] ) 		? (bool) $args['is_front_page'] 	: $defaults['is_front_page'];
-		$args['escape'] 			= isset( $args['escape'] ) 				? (bool) $args['escape'] 			: $defaults['escape'];
-
-		return $args;
-	}
-
-	/**
-	 * Build the title based on input, without tagline.
-	 *
-	 * @param string $title The Title to return
-	 * @param array $args : accepted args : {
-	 * 		@param int term_id The Taxonomy Term ID
-	 * 		@param bool placeholder Generate placeholder, ignoring options.
-	 * 		@param bool page_on_front Page on front condition for example generation
-	 * }
-	 *
-	 * @since 2.4.0
-	 *
-	 * @return string Title without tagline.
-	 */
-	public function build_title_notagline( $title = '', $args = array() ) {
-
-		if ( empty( $args ) )
-			$args = $this->parse_title_args( '', '', true );
-
-		$title = $this->get_placeholder_title( $title, $args );
-
-		if ( empty( $title ) )
-			$title = __( 'Untitled', 'autodescription' );
-
-		if ( true === $args['escape'] )
-			$title = $this->escape_title( $title );
-
-		return $title;
-	}
-
-	/**
-	 * Build the title based on input, without tagline.
-	 * Note: Not escaped.
-	 *
-	 * @param string $title The Title to return
-	 * @param array $args : accepted args : {
-	 * 		@param int term_id The Taxonomy Term ID
-	 * 		@param bool placeholder Generate placeholder, ignoring options.
-	 * 		@param bool page_on_front Page on front condition for example generation
-	 * }
-	 *
-	 * @since 2.4.0
-	 *
-	 * @return string Title without tagline.
-	 */
-	public function get_placeholder_title( $title = '', $args = array() ) {
-
-		if ( empty( $args ) )
-			$args = $this->parse_title_args( '', '', true );
-
-		/**
-		 * Detect if placeholder is being generated.
-		 * @since 2.2.4
-		 */
-		if ( $args['placeholder'] && empty( $title ) ) {
-			$term_id = $args['term_id'];
-
-			if ( ! empty( $term_id ) ) {
-				$title = get_the_title( $term_id );
-			} else if ( $args['page_on_front'] ) {
-				$title = get_the_title( get_option( 'page_on_front' ) );
-			} else {
-				$post = get_post( $term_id, OBJECT );
-
-				/**
-				 * Memory leak fix
-				 * @since 2.3.5
-				 */
-				$title = isset( $post->post_title ) && ! empty( $post->post_title ) ? $post->post_title : '';
-			}
-		}
-
-		return $title;
-	}
-
-	/**
-	 * Build the title based on input for themes that are doing it wrong.
-	 * Pretty much a duplicate of build_title but contains many more variables.
-	 * Keep this in mind.
-	 *
-	 * @param string $title The Title to return
-	 * @param string $sep The Title sepeartor
-	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
-	 * @param array $args : accepted args : {
-	 * 		@param int term_id The Taxonomy Term ID
-	 * 		@param string taxonomy The Taxonomy name
-	 * 		@param bool placeholder Generate placeholder, ignoring options.
-	 * 		@param bool get_custom_field Do not fetch custom title when false.
-	 * }
-	 *
-	 * @since 2.4.0
-	 *
-	 * @return string $title Title
-	 */
-	public function build_title_doingitwrong( $title = '', $sep = '', $seplocation = '', $args = array() ) {
-
-		/**
-		 * Empty the title, because most themes think they 'know' how to SEO the front page.
-		 * Because, most themes know how to make the title 'pretty'.
-		 * And therefor add all kinds of stuff.
-		 *
-		 * Moved up and return early to reduce processing.
-		 * @since 2.3.8
-		 */
-		if ( is_front_page() )
-			return $title = '';
-
-		/**
-		 * When using an empty wp_title() function, outputs are unexpected.
-		 * This small piece of code will fix all that.
-		 * By removing the separator from the title and adding the blog name always to the right.
-		 * Which is always the case with doing_it_wrong.
-		 *
-		 * @thanks JW_ https://wordpress.org/support/topic/wp_title-problem-bug
-		 * @since 2.4.3
-		 */
-		if ( isset( $args['empty_title'] ) ) {
-			$title = trim( str_replace( $sep, '', $title ) );
-			$seplocation = 'right';
-		}
-
-		if ( empty( $args ) )
-			$args = $this->parse_title_args( '', '', true );
-
-		$blogname = $this->get_blogname();
-
-		//* Remove separator if true.
-		$sep_replace = false;
-
-		/**
-		 * Don't add/replace separator when false.
-		 *
-		 * @applies filters the_seo_framework_doingitwrong_add_sep
-		 *
-		 * @since 2.4.2
-		 */
-		$add_sep = (bool) apply_filters( 'the_seo_framework_doingitwrong_add_sep', true );
-
-		//* Maybe remove separator.
-		if ( $add_sep && ( ! empty( $sep ) || ! empty( $title ) ) ) {
-			$sep_replace = true;
-			$sep_to_replace = (string) $sep;
-		}
-
-		//* Fetch title from custom fields.
-		if ( $args['get_custom_field'] && $this->is_singular( $args['term_id'] ) ) {
-			$title_special = $this->title_from_special_fields();
-
-			if ( empty( $title_special ) ) {
-				$title_from_custom_field = $this->title_from_custom_field( $title, false, $args['term_id'] );
-				$title = ! empty( $title_from_custom_field ) ? $title_from_custom_field : $title;
-			} else {
-				$title = $title_special;
-			}
-		}
-
-		//* Generate the Title if empty or if home.
-		if ( empty( $title ) )
-			$title = (string) $this->generate_title( $args['term_id'], $args['taxonomy'], $escape = false );
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		if ( $add_sep )
-			$sep = (string) apply_filters( 'the_seo_framework_title_separator', $this->get_separator( 'title' ) );
-
-		/**
-		 * Add $sep_to_replace
-		 *
-		 * @since 2.3.8
-		 */
-		if ( $add_sep && $sep_replace ) {
-			//* Title always contains something at this point.
-			$tit_len = mb_strlen( $title );
-
-			/**
-			 * Prevent double separator on date archives.
-			 * This will cause manual titles with the same separator at the end to be removed.
-			 * Then again, update your theme. D:
-			 *
-			 * A separator is at least 2 long (space + separator).
-			 *
-			 * @param string $sep_to_replace Already confirmed to contain the old sep string.
-			 *
-			 * @since ???
-			 *
-			 * Now also considers seplocation.
-			 * @since 2.4.1
-			 */
-			if ( $seplocation == 'right' ) {
-				if ( $tit_len > 2 && ! mb_strpos( $title, $sep_to_replace, $tit_len - 2 ) )
-					$title = $title . ' ' . $sep_to_replace;
-			} else {
-				if ( $tit_len > 2 && ! mb_strpos( $title, $sep_to_replace, 2 ) )
-					$title = $sep_to_replace . ' ' . $title;
-			}
-		}
-
-		//* Sep location has no influence.
-		if ( $sep_replace && $add_sep ) {
-			//* Add trailing space for the tagline/blogname is stuck onto this part with trim.
-
-			/**
-			 * Convert characters to easier match and prevent removal of matching entities and title characters.
-			 * Reported by Riccardo: https://wordpress.org/support/topic/problem-with-post-titles
-			 * @since 2.5.2
-			 */
-			$sep_to_replace = html_entity_decode( $sep_to_replace );
-			$title = html_entity_decode( $title );
-
-			/**
-			 * Now also considers seplocation.
-			 * @since 2.4.1
-			 */
-			if ( $seplocation == 'right' ) {
-				$title = trim( rtrim( $title, "$sep_to_replace " ) ) . " $sep ";
-			} else {
-				$title = " $sep " . trim( ltrim( $title, " $sep_to_replace" ) );
-			}
-
-		} else {
-			$title = trim( $title ) . " $sep ";
-		}
-
-		/**
-		 * From WordPress core get_the_title.
-		 * Bypasses get_post() function object which causes conflict with some themes and plugins.
-		 *
-		 * Also bypasses the_title filters.
-		 * And now also works in admin. It gives you a true representation of its output.
-		 *
-		 * @since 2.4.1
-		 *
-		 * @applies filters core : protected_title_format
-		 * @applies filters core : private_title_format
-		 */
-		if ( ! $args['description_title'] ) {
-			$post = get_post( $args['term_id'], OBJECT );
-
-			if ( isset( $post->post_password ) && ! empty( $post->post_password ) ) {
-				$protected_title_format = apply_filters( 'protected_title_format', __( 'Protected: %s', 'autodescription' ), $post );
-				$title = sprintf( $protected_title_format, $title );
-			} else if ( isset( $post->post_status ) && 'private' == $post->post_status ) {
-				$private_title_format = apply_filters( 'private_title_format', __( 'Private: %s', 'autodescription' ), $post );
-				$title = sprintf( $private_title_format, $title );
-			}
-
-		}
-
-		if ( true === $args['escape'] )
-			$title = $this->escape_title( $title, false );
-
-		/**
-		 * Debug output.
-		 * @since 2.3.4
-		 */
-		if ( $this->the_seo_framework_debug ) {
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			$this->echo_debug_information( array( 'title output' => $title ) );
-			echo "\r\n<br>\r\n" . 'END: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n<br><br>";
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		return $title;
-	}
-
-	/**
-	 * Build the title based on input.
-	 *
-	 * @param string $title The Title to return
-	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
-	 * @param array $args : accepted args : {
-	 * 		@param int 		term_id The Taxonomy Term ID
-	 * 		@param string 	taxonomy The Taxonomy name
-	 * 		@param bool 	page_on_front Page on front condition for example generation
-	 * 		@param bool 	placeholder Generate placeholder, ignoring options.
-	 * 		@param bool 	get_custom_field Do not fetch custom title when false.
-	 * 		@param bool 	is_front_page Fetch front page title.
-	 * }
-	 *
-	 * @since 2.4.0
-	 *
-	 * @return string $title Title
-	 */
-	public function build_title( $title = '', $seplocation = '', $args = array() ) {
-
-		if ( empty( $args ) )
-			$args = $this->parse_title_args( '', '', true );
-
-		/**
-		 * Overwrite title here, prevents duplicate title issues, since we're working with a filter.
-		 *
-		 * @since 2.2.2
-		 */
-		$title = '';
-
-		$is_front_page = is_front_page() || $args['page_on_front'] ? true : false;
-		$blogname = $this->get_blogname();
-
-		/**
-		 * Cache the seplocation for is_home()
-		 * @since 2.2.2
-		 */
-		$seplocation_home = $seplocation;
-
-		/**
-		 * Filters the separator location
-		 * @since 2.1.8
-		 */
-		if ( '' === $seplocation || 'right' !== $seplocation || 'left' !== $seplocation || empty( $seplocation ) ) {
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$seplocation = (string) apply_filters( 'the_seo_framework_title_seplocation', $this->get_option( 'title_location' ) );
-		}
-
-		/**
-		 * Filters the separator
-		 * @since 2.0.5
-		 *
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$sep = (string) apply_filters( 'the_seo_framework_title_separator', $this->get_separator( 'title' ) );
-
-		//* Fetch title from custom fields.
-		if ( $args['get_custom_field'] && $this->is_singular( $args['term_id'] ) ) {
-			$title_special = $this->title_from_special_fields();
-
-			if ( empty( $title_special ) ) {
-				$title_from_custom_field = $this->title_from_custom_field( $title, '', $args['term_id'] );
-				$title = ! empty( $title_from_custom_field ) ? $title_from_custom_field : $title;
-			} else {
-				$title = $title_special;
-			}
-		}
-
-		/**
-		 * Tagline conditional for homepage
-		 *
-		 * @since 2.2.2
-		 */
-		$add_tagline = 0;
-
-		/**
-		 * Generate the Title if empty or if home.
-		 *
-		 * Generation of title has acquired its own functions.
-		 * @since 2.3.4
-		 */
-		if ( $is_front_page || $this->is_static_frontpage( $args['term_id'] ) || $args['is_front_page'] ) {
-			$generated = (array) $this->generate_home_title( $args['get_custom_field'], $seplocation, $seplocation_home, $escape = false );
-
-			if ( ! empty( $generated ) && is_array( $generated ) ) {
-				$title = $generated['title'] ? (string) $generated['title'] : $title;
-				$blogname = $generated['blogname'] ? (string) $generated['blogname'] : $blogname;
-				$add_tagline = $generated['add_tagline'] ? (bool) $generated['add_tagline'] : $add_tagline;
-				$seplocation = $generated['seplocation'] ? (string) $generated['seplocation'] : $seplocation;
-			}
-		} else if ( empty( $title ) ) {
-			$title = (string) $this->generate_title( $args['term_id'], $args['taxonomy'], $escape = false );
-		}
-
-		/**
-		 * From WordPress core get_the_title.
-		 * Bypasses get_post() function object which causes conflict with some themes and plugins.
-		 *
-		 * Also bypasses the_title filters.
-		 * And now also works in admin. It gives you a true representation of its output.
-		 *
-		 * Title for the description bypasses sanitation and additions.
-		 *
-		 * @since 2.4.1
-		 *
-		 * @applies filters core : protected_title_format
-		 * @applies filters core : private_title_format
-		 */
-		if ( ! $args['description_title'] ) {
-
-			$post = get_post( $args['term_id'], OBJECT );
-
-			if ( isset( $post->post_password ) && ! empty( $post->post_password ) ) {
-				$protected_title_format = apply_filters( 'protected_title_format', __( 'Protected: %s', 'autodescription' ), $post );
-				$title = sprintf( $protected_title_format, $title );
-			} else if ( isset( $post->post_status ) && 'private' == $post->post_status ) {
-				$private_title_format = apply_filters( 'private_title_format', __( 'Private: %s', 'autodescription' ), $post );
-				$title = sprintf( $private_title_format, $title );
-			}
-
-			$page = $this->page();
-			$paged = $this->paged();
-
-			/**
-			 * @since 2.4.3
-			 * Adds page numbering within the title.
-			 */
-			if ( ! is_404() && ( $paged >= 2 || $page >= 2 ) )
-				$title .= " $sep " . sprintf( __( 'Page %s', 'autodescription' ), max( $paged, $page ) );
-
-
-			//* Title for title (meta) tags.
-			if ( $is_front_page && ! $add_tagline ) {
-				//* Render frontpage output without tagline
-				$title = $blogname;
-			}
-
-			/**
-			 * Get blogname additions from option, invert it and cast to bool.
-			 * @since 2.5.2
-			 */
-			$add_blogname_option = (bool) ! $this->get_option( 'title_rem_additions' );
-
-			//* If theme is doing it wrong, add it anyway in the admin area.
-			if ( is_admin() && ! $this->theme_title_doing_it_right() )
-				$add_blogname_option = true;
-
-			/**
-			 * Applies filters the_seo_framework_add_blogname_to_title.
-			 * @since 2.4.3
-			 */
-			$add_blogname = (bool) apply_filters( 'the_seo_framework_add_blogname_to_title', $add_blogname_option );
-
-			/**
-			 * On frontpage: Add title if add_tagline is true.
-			 * On all other pages: Add tagline if filters $add_blogname is true.
-			 *
-			 * @since 2.4.3
-			 */
-			if ( ( $add_blogname && ! $is_front_page ) || ( $is_front_page && $add_tagline ) ) {
-				$title = trim( $title );
-				$blogname = trim( $blogname );
-
-				if ( 'right' == $seplocation ) {
-					$title = $title . " $sep " . $blogname;
-				} else {
-					$title = $blogname . " $sep " . $title;
-				}
-			}
-
-			if ( true === $args['escape'] )
-				$title = $this->escape_title( $title );
-
-		}
-
-		/**
-		 * Debug output.
-		 * @since 2.3.4
-		 */
-		if ( $this->the_seo_framework_debug ) {
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			$this->echo_debug_information( array( 'is static frontpage' => $this->is_static_frontpage( $this->get_the_real_ID() ) ) );
-			$this->echo_debug_information( array( 'title output' => $title ) );
-			echo "\r\n<br>\r\n" . 'END: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n<br><br>";
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		return $title;
-	}
-
-	/**
-	 * Fetches title from special fields, like other plugins.
-	 * Used before and has priority over custom fields.
-	 * Front end only.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return string $title Title from Special Field.
-	 */
-	public function title_from_special_fields() {
-
-		$title = '';
-
-		if ( ! is_admin() ) {
-			if ( $this->is_ultimate_member_user_page() && um_is_core_page( 'user' ) && um_get_requested_user() ) {
-				$title = um_user( 'display_name' );
-			}
-		}
-
-		return $title;
-	}
-
-	/**
-	 * Generate the title based on query conditions.
-	 *
-	 * @since 2.3.4
-	 *
-	 * @param int $term_id The Taxonomy Term ID
-	 * @param string $taxonomy The Taxonomy name
-	 * @param bool $escape Parse Title through saninitation calls.
-	 *
-	 * @return string $title The Generated Title.
-	 */
-	public function generate_title( $term_id = 0, $taxonomy = '', $escape = false ) {
-
-		/**
-		 * Combined the statements
-		 * @since 2.2.7 && @since 2.2.8
-		 *
-		 * Check for singular first, like WooCommerce shop.
-		 * @since 2.5.2
-		 */
-		if ( ! $this->is_singular( $term_id ) ) {
-			if ( is_category() || is_tag() || is_tax() || ( ! empty( $term_id ) && ! empty( $taxonomy ) ) ) {
-				$title = $this->title_for_terms();
-			} else if ( is_archive() ) {
-				/**
-				 * Get all other archive titles
-				 * @since 2.5.2
-				 */
-				$title = wp_strip_all_tags( $this->get_the_archive_title() );
-			}
-		}
-
-		/**
-		 * Applies filters string the_seo_framework_404_title
-		 * @since 2.5.2
-		 */
-		if ( is_404() )
-			$title = (string) apply_filters( 'the_seo_framework_404_title', '404' );
-
-		if ( is_search() ) {
-			/**
-			 * Applies filters string the_seo_framework_404_title
-			 * @since 2.5.2
-			 */
-			/* translators: Front-end output. */
-			$search_title = (string) apply_filters( 'the_seo_framework_search_title', __( 'Search results for:', 'autodescription' ) );
-			$title = $search_title . ' ' . trim( get_search_query() );
-		}
-
-		//* Generate admin placeholder for taxonomies
-		if ( empty( $title ) && ! empty( $term_id ) && ! empty( $taxonomy ) ) {
-			$term = get_term_by( 'id', $term_id, $taxonomy, OBJECT );
-
-			if ( ! empty( $term ) && is_object( $term ) ) {
-				$term_name = ! empty( $term->name ) ? $term->name : $term->slug;
-			} else {
-				/* translators: Front-end output. */
-				$term_name = __( 'Untitled', 'autodescription' );
-			}
-
-			$tax_type = $term->taxonomy;
-
-			/**
-			 * Dynamically fetch the term name.
-			 *
-			 * @since 2.3.1
-			 */
-			$term_labels = $this->get_tax_labels( $tax_type );
-
-			if ( isset( $term_labels ) && isset( $term_labels->singular_name ) ) {
-				$title = $term_labels->singular_name . ': ' . $term_name;
-			} else {
-				/* translators: Front-end output. */
-				$title = __( 'Archives', 'autodescription' );
-			}
-		}
-
-		//* Fetch the post title if no title is found.
-		if ( ! isset( $title ) || empty( $title ) ) {
-
-			if ( empty( $term_id ) )
-				$term_id = $this->get_the_real_ID();
-
-			$post = get_post( $term_id, OBJECT );
-
-			$title = '';
-
-			/**
-			 * From WordPress core get_the_title.
-			 * Bypasses get_post() function object which causes conflict with some themes and plugins.
-			 *
-			 * Also bypasses the_title filters.
-			 * And now also works in admin. It gives you a true representation of its output.
-			 *
-			 * @since 2.4.1
-			 */
-			$title = isset( $post->post_title ) ? $post->post_title : $title;
-		}
-
-		//* You forgot to enter a title "anywhere"!
-		//* So it's untitled :D
-		if ( empty( $title ) ) {
-			/* translators: Front-end output. */
-			$title = __( 'Untitled', 'autodescription' );
-		}
-
-		if ( $escape )
-			$title = $this->escape_title( $title, false );
-
-		return $title;
-	}
-
-	/**
-	 * Generate the title based on conditions for the home page.
-	 *
-	 * @since 2.3.4
-	 *
-	 * @param bool $get_custom_field Fetch Title from Custom Fields.
-	 * @param string $seplocation The separator location
-	 * @param string $seplocation_home The Homepage separator location
-	 * @param bool $escape Parse Title through saninitation calls.
-	 *
-	 * @return array {
-	 *		'title' => (string) $title : The Generated Title
-	 *		'blogname' => (string) $blogname : The Generated Blogname
-	 *		'add_tagline' => (bool) $add_tagline : Wether to add the tagline
-	 *		'seplocation' => (string) $seplocation : The Separator Location
-	 *	}
-	 */
-	public function generate_home_title( $get_custom_field = true, $seplocation = '', $seplocation_home = '', $escape = false ) {
-
-		/**
-		 * Tagline conditional for homepage
-		 *
-		 * @since 2.2.2
-		 *
-		 * Conditional statement.
-		 * @since 2.3.4
-		 */
-		$add_tagline = $this->get_option( 'homepage_tagline' ) ? $this->get_option( 'homepage_tagline' ) : 0;
-
-		/**
-		 * Add tagline or not based on option
-		 *
-		 * @since 2.2.2
-		 */
-		if ( $add_tagline ) {
-			/**
-			 * Tagline based on option.
-			 *
-			 * @since 2.3.8
-			 */
-			$tagline = (string) $this->get_option( 'homepage_title_tagline' );
-			$title = ! empty( $tagline ) ? $tagline : $this->get_blogdescription();
-		} else {
-			$title = '';
-		}
-
-		/**
-		 * Render from function
-		 * @since 2.2.8
-		 */
-		$title_for_home = $this->title_for_home( '', $get_custom_field, false );
-		$blogname = ! empty( $title_for_home ) ? $title_for_home : $this->get_blogname();
-
-		if ( empty( $seplocation_home ) || $seplocation_home !== 'left' || $seplocation_home !== 'right' ) {
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$seplocation = (string) apply_filters( 'the_seo_framework_title_seplocation_front', $this->get_option( 'home_title_location' ) );
-		}
-
-		if ( $escape )
-			$title = $this->escape_title( $title, false );
-
-		return array(
-			'title' => $title,
-			'blogname' => $blogname,
-			'add_tagline' => $add_tagline,
-			'seplocation' => $seplocation
-		);
-	}
-
-	/**
-	 * Gets the title for the static home page.
-	 *
-	 * @since 2.2.8
-	 *
-	 * @param string $home_title The fallback title.
-	 * @param bool $get_custom_field Fetch Title from Custom Fields.
-	 * @param bool $escape Parse Title through saninitation calls.
-	 *
-	 * @return string The Title.
-	 */
-	public function title_for_home( $home_title = '', $get_custom_field = true, $escape = false ) {
-
-		/**
-		 * Get blogname title based on option
-		 *
-		 * @since 2.2.2
-		 */
-		$home_title_option = (string) $this->get_option( 'homepage_title' );
-		$home_title = ! empty( $home_title_option ) ? $home_title_option : $home_title;
-
-		/**
-		 * Fetch from Home Page InPost SEO Box if empty.
-		 *
-		 * @since 2.2.4
-		 *
-		 * Add home is page check.
-		 * @since 2.2.5
-		 *
-		 * Add get custom Inpost field check
-		 * @since 2.3.4
-		 */
-		if ( $get_custom_field && 'page' === get_option( 'show_on_front' ) && empty( $home_title ) ) {
-			$custom_field = $this->get_custom_field( '_genesis_title' );
-			$home_title = ! empty( $custom_field ) ? (string) $custom_field : $home_title;
-		}
-
-		if ( $escape )
-			$home_title = $this->escape_title( $home_title, false );
-
-		return (string) $home_title;
-	}
-
-	/**
-	 * Gets the title for Category, Tag or Taxonomy
-	 *
-	 * @since 2.2.8
-	 *
-	 * @param string $title the fallback title.
-	 * @param bool $escape Parse Title through saninitation calls.
-	 *
-	 * @return string The Title.
-	 */
-	public function title_for_terms( $title = '', $escape = false ) {
-
-		if ( is_category() || is_tag() ) {
-			global $wp_query;
-
-			$term = $wp_query->get_queried_object();
-
-			$title = ! empty( $term->admeta['doctitle'] ) ? $term->admeta['doctitle'] : $title;
-			$flag = $term->admeta['saved_flag'] != '0' ? true : false;
-
-			if ( ! $flag && empty( $title ) && isset( $term->meta['doctitle'] ) )
-				$title = ! empty( $term->meta['doctitle'] ) ? $term->meta['doctitle'] : $title;
-
-			if ( empty( $title ) )
-				$title = ! empty( $term->name ) ? wp_strip_all_tags( $this->get_the_archive_title() ) : $term->slug;
-
-		} else if ( is_tax() ) {
-
-			$term  = get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) );
-
-			$title = ! empty( $term->admeta['doctitle'] ) ? wp_kses_stripslashes( wp_kses_decode_entities( $term->admeta['doctitle'] ) ) : $title;
-			$flag = $term->admeta['saved_flag'] != '0' ? true : false;
-
-			if ( ! $flag && empty( $title ) && isset( $term->meta['doctitle'] ) )
-				$title = ! empty( $term->meta['doctitle'] ) ? wp_kses_stripslashes( wp_kses_decode_entities( $term->meta['doctitle'] ) ) : $title;
-
-			if ( empty( $title ) )
-				$title = ! empty( $term->name ) ? wp_strip_all_tags( $this->get_the_archive_title() ) : $term->slug;
-
-		}
-
-		if ( $escape )
-			$title = $this->escape_title( $title, false );
-
-		return (string) $title;
-	}
-
-	/**
-	 * Gets the title from custom field
-	 *
-	 * @since 2.2.8
-	 *
-	 * @param string $title the fallback title.
-	 * @param bool $escape Parse Title through saninitation calls.
-	 * @param int $id The Post ID.
-	 *
-	 * @return string The Title.
-	 */
-	public function title_from_custom_field( $title = '', $escape = false, $id = null ) {
-
-		$id = isset( $id ) ? $id : $this->get_the_real_ID();
-
-		/**
-		 * Create something special for blog page.
-		 * Only if it's not the home page.
-		 *
-		 * @since 2.2.8
-		 */
-		if ( $this->is_blog_page( $id ) ) {
-			//* Posts page title.
-			$title = $this->get_custom_field( '_genesis_title', $id ) ? $this->get_custom_field( '_genesis_title', $id ) : get_the_title( $id );
-		} else {
-			//* Get title from custom field, empty it if it's not there to override the default title
-			$title = $this->get_custom_field( '_genesis_title', $id ) ? $this->get_custom_field( '_genesis_title', $id ) : $title;
-		}
-
-		/**
-		 * Fetch Title from WordPress page title input.
-		 */
-		if ( empty( $title ) ) {
-			$post = get_post( $id, OBJECT );
-			$title = isset( $post->post_title ) ? $post->post_title : '';
-		}
-
-		if ( $escape )
-			$title = $this->escape_title( $title, false );
-
-		return (string) $title;
-	}
-
-	/**
-	 * Creates canonical url
-	 *
-	 * @uses WPMUdev's domain mapping
-	 *
-	 * @param string $url the url
-	 * @param int $page_id the page id, if empty it will fetch the requested ID, else the page uri.
-	 *
-	 * @since 2.4.2
-	 * @param array $args : accepted args : {
-	 * 			@param bool $paged Return current page URL without pagination
-	 * 			@param bool $from_option Get the canonical uri option
-	 * 			@param object $post The Post Object.
-	 * 			@param bool $external Wether to fetch the current WP Request or get the permalink by Post Object.
-	 * 			@param bool $is_term Fetch url for term.
-	 * 			@param object $term The term object.
-	 * 			@param bool $home Fetch home URL.
-	 * 			@param bool $forceslash Fetch home URL and slash it, always.
-	 * }
-	 *
-	 * @TODO Clean this function up @since 2.5.3
-	 *
-	 * @since 2.0.0
-	 */
-	public function the_url( $url = '', $page_id = '', $args = array() ) {
-
-		/**
-		 * Debug parameters.
-		 * @since 2.4.2
-		 */
-		if ( $this->the_seo_framework_debug && ! $this->doing_sitemap ) {
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			echo  "\r\n" . 'START: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n";
-			$this->echo_debug_information( array( 'input url' => $url ) );
-
-			if ( $this->the_seo_framework_debug_more ) {
-				$this->echo_debug_information( array( 'page_id' => $page_id ) );
-				$this->echo_debug_information( array( 'args' => $args ) );
-			}
-
-			$timer_start = microtime( true );
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		$default_args = $this->parse_url_args( '', '', true );
-
-		/**
-		 * Parse args.
-		 * @since 2.4.2
-		 */
-		if ( ! is_array( $args ) ) {
-			//* Old style parameters are used. Doing it wrong.
-			_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', $this->the_seo_framework_version( '2.4.2' ) );
-			$args = $default_args;
-		} else if ( ! empty( $args ) ) {
-			$args = $this->parse_url_args( $args, $default_args );
-		} else {
-			$args = $default_args;
-		}
-
-		$path = '';
-		$scheme = '';
-
-		/**
-		 * Trailing slash the post, or not.
-		 * @since 2.2.4
-		 */
-		$slashit = true;
-
-		/**
-		 * Fetch permalink if Feed.
-		 * @since 2.5.2
-		 */
-		if ( is_feed() )
-			$url = get_permalink( $args['post'] );
-
-		if ( empty( $url ) && ! $args['home'] ) {
-
-			/**
-			 * Get url from options
-			 * @since 2.2.9
-			 */
-			if ( $args['get_custom_field'] && $this->is_singular() )
-				$url = $this->get_custom_field( '_genesis_canonical_uri' ) ? $this->get_custom_field( '_genesis_canonical_uri' ) : $url;
-
-			if ( empty( $url ) ) {
-
-				if ( $args['is_term'] || is_archive() ) {
-
-					$term = $args['term'];
-
-					//* Term or Taxonomy.
-					if ( ! isset( $term ) ) {
-						global $wp_query;
-						$term = $wp_query->get_queried_object();
-					}
-
-					if ( isset( $term->taxonomy ) ) {
-						//* Registered Terms and Taxonomies.
-						$path = $this->get_relative_term_url( $term, $args['external'] );
-					} else if ( ! $args['external'] ) {
-						//* Everything else.
-						global $wp;
-						$path = $wp->request;
-					} else {
-						//* Nothing to see here...
-						$path = '';
-					}
-				} else {
-
-					$post = $args['post'];
-
-					/**
-					 * Fetch post object
-					 * @since 2.2.4
-					 */
-					if ( ! isset( $post ) )
-						$post = get_post( $page_id, OBJECT );
-
-					/**
-					 * Get page uri if Page ID is given
-					 * @since 2.1.9
-					 *
-					 * Get page uri if $paged is true.
-					 * Don't get page uri if there's no pretty permalinks or unconditioned post statusses
-					 * @since 2.2.4
-					 *
-					 * Get relative full path.
-					 * @since 2.3.0
-					 */
-					if ( isset( $post ) ) {
-
-						$page_id = empty( $page_id ) ? $post->ID : $page_id;
-
-						$permalink_structure = get_option( 'permalink_structure' );
-
-						if ( ( $args['paged'] || ! empty( $page_id ) ) && '' != $permalink_structure && ! $this->in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft', 'future' ) ) ) {
-							//* Registered page.
-
-							if ( ! $args['paged'] && ! empty( $page_id ) && $page_id == get_option( 'page_on_front' ) ) {
-								//* Static Home Page.
-								$path = '';
-							} else {
-								//* Any other page.
-								$path = $this->get_relative_url( $post, $args['external'] );
-							}
-						} else if ( '' == $permalink_structure || $this->in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft', 'future' ) ) ) {
-							//* Registered page, Default permalink structure.
-
-							if ( ! empty( $page_id ) && $page_id != get_option( 'page_on_front' ) ) {
-								//* Every other page.
-								$path = $this->the_url_path_default_permalink_structure( $post );
-								$slashit = false;
-							} else {
-								//* Home page
-								$path = '';
-							}
-						} else if ( $args['paged'] || ! empty( $page_id ) ) {
-							//* Registered pending/draft page.
-							$path = $this->get_relative_url( $post, $args['external'], $page_id );
-						} else if ( ! $args['external'] ) {
-							//* Everything else.
-							global $wp;
-							$path = $wp->request;
-						} else {
-							//* Nothing to see here...
-							$path = '';
-						}
-
-					}
-
-				}
-
-			}
-		}
-
-		//* Domain Mapping canonical URL
-		if ( empty( $url ) ) {
-			$wpmu_url = $this->the_url_wpmudev_domainmap( $path, true );
-			if ( ! empty( $wpmu_url ) && is_array( $wpmu_url ) ) {
-				$url = $wpmu_url[0];
-				$scheme = $wpmu_url[1];
-			}
-		}
-
-		//* Domain Mapping canonical URL
-		if ( empty( $url ) ) {
-			$dm_url = $this->the_url_donncha_domainmap( $path, true );
-			if ( ! empty( $dm_url ) && is_array( $dm_url ) ) {
-				$url = $dm_url[0];
-				$scheme = $dm_url[1];
-			}
-		}
-
-		//* Non-domainmap URL
-		if ( empty( $url ) ) {
-			if ( $args['home'] ) {
-				$url = user_trailingslashit( get_option( 'home' ) );
-				$slashit = false;
-			} else {
-				$url = trailingslashit( get_option( 'home' ) ) . ltrim( $path, '\/ ' );
-				$scheme = is_ssl() ? 'https' : 'http';
-			}
-		}
-
-		//* URL has been given manually or $args['home'] is true.
-		if ( ! isset( $scheme ) )
-			$scheme = is_ssl() ? 'https' : 'http';
-
-		$output = $this->set_url_scheme( $url, $scheme );
-
-		/**
-		 * Slash it only if $slashit is true
-		 *
-		 * @since 2.2.4
-		 */
-		if ( $slashit && ! $args['forceslash'] )
-			$output = user_trailingslashit( $output );
-
-		//* Be careful with the default permalink structure.
-		if ( $args['forceslash'] )
-			$output = trailingslashit( $output );
-
-		$output = esc_url( $output );
-
-		/**
-		 * Debug parameters.
-		 * @since 2.4.2
-		 */
-		if ( $this->the_seo_framework_debug && ! $this->doing_sitemap ) {
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			$this->echo_debug_information( array( 'output' => $output ) );
-
-			if ( $this->the_seo_framework_debug_more ) {
-				$this->echo_debug_information( array( 'page_id' => $page_id ) );
-				$this->echo_debug_information( array( 'args' => $args ) );
-			}
-			$this->echo_debug_information( array( 'Generation time' => number_format( microtime(true) - $timer_start, 5 ) . 's' ) );
-			echo  "\r\n<br>\r\n" . 'END: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n<br>\r\n";
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		return $output;
-	}
-
-	/**
-	 * Parse and sanitize url args.
-	 *
-	 * @param array $args required The passed arguments.
-	 * @param array $defaults The default arguments.
-	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
-	 *
-	 * @applies filters the_seo_framework_url_args : {
-	 * 		@param bool $paged Return current page URL without pagination
-	 * 		@param bool $from_option Get the canonical uri option
-	 * 		@param object $post The Post Object.
-	 * 		@param bool $external Wether to fetch the current WP Request or get the permalink by Post Object.
-	 * 		@param bool $is_term Fetch url for term.
-	 * 		@param object $term The term object.
-	 * 		@param bool $home Fetch home URL.
-	 * 		@param bool $forceslash Fetch home URL and slash it, always.
-	 * }
-	 *
-	 * @since 2.4.2
-	 * @return array $args parsed args.
-	 */
-	public function parse_url_args( $args = array(), $defaults = array(), $get_defaults = false ) {
-
-		//* Passing back the defaults reduces the memory usage.
-		if ( empty( $defaults ) ) {
-			$defaults = array(
-				'paged' 			=> false,
-				'get_custom_field'	=> true,
-				'external'			=> false,
-				'is_term' 			=> false,
-				'post' 				=> null,
-				'term'				=> null,
-				'home'				=> false,
-				'forceslash'		=> false
-			);
-
-			//* @since 2.5.0
-			$defaults = (array) apply_filters( 'the_seo_framework_url_args', $defaults, $args );
-		}
-
-		//* Return early if it's only a default args request.
-		if ( $get_defaults )
-			return $defaults;
-
-		//* Array merge doesn't support sanitation. We're simply type casting here.
-		$args['paged'] 				= isset( $args['paged'] ) 				? (bool) $args['paged'] 			: $defaults['paged'];
-		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
-		$args['external'] 			= isset( $args['external'] ) 			? (bool) $args['external'] 			: $defaults['external'];
-		$args['is_term'] 			= isset( $args['is_term'] ) 			? (bool) $args['is_term'] 			: $defaults['is_term'];
-		$args['get_custom_field'] 	= isset( $args['get_custom_field'] ) 	? (bool) $args['get_custom_field'] 	: $defaults['get_custom_field'];
-		$args['post'] 				= isset( $args['post'] ) 				? (object) $args['post'] 			: $defaults['post'];
-		$args['term'] 				= isset( $args['term'] ) 				? (object) $args['term'] 			: $defaults['term'];
-		$args['home'] 				= isset( $args['home'] ) 				? (bool) $args['home'] 				: $defaults['home'];
-		$args['forceslash'] 		= isset( $args['forceslash'] ) 			? (bool) $args['forceslash'] 		: $defaults['forceslash'];
-
-		return $args;
-	}
-
-	/**
-	 * Generates relative URL for current post_ID.
-	 *
-	 * @param object $post The post.
-	 * @param bool $external Wether to fetch the WP Request or get the permalink by Post Object.
-	 * @param id $page_id The page id.
-	 *
-	 * @since 2.3.0
-	 *
-	 * @return relative Post or Page url.
-	 */
-	public function get_relative_url( $post = null, $external = false, $page_id = null ) {
-
-		if ( ! isset( $post ) )
-			global $post;
-
-		if ( $external ) {
-			if ( isset( $page_id ) ) {
-				$permalink = get_permalink( $page_id );
-			} else {
-				$permalink = get_permalink( $post );
-			}
-		} else {
-			global $wp;
-			$permalink = isset( $wp->request ) ? $wp->request : get_permalink( $post );
-		}
-
-		/**
-		 * @since 2.4.2
-		 */
-		$path = $this->set_url_scheme( $permalink, 'relative' );
-
-		/**
-		 * @since 2.5.2
-		 */
-		static $icl_exists = null;
-
-		if ( ! isset( $icl_exists ) )
-			$icl_exists = (bool) defined( 'ICL_LANGUAGE_CODE' );
-
-		//* WPML support.
-		if ( $icl_exists && ! is_admin() && isset( $post->guid ) )
-			$path = $this->get_relative_wmpl_url( $path, $post );
-
-		/**
-		 * @since 2.5.2
-		 */
-		static $qt_exists = null;
-
-		if ( ! isset( $qt_exists ) )
-			$qt_exists = (bool) class_exists( 'QTX_Translator' );
-
-		//* qTranslate X support. Doesn't need to work on sitemaps.
-		if ( ! $external && $qt_exists ) {
-			static $q_config = null;
-
-			if ( ! isset( $q_config ) )
-				global $q_config;
-
-			$mode = $q_config['url_mode'];
-
-			//* Only change URL on Pre-Path mode.
-			if ( (int) 2 === $mode ) {
-
-				//* If false, change canonical URL for every page.
-				$hide = $q_config['hide_default_language'];
-
-				$current_lang = $q_config['language'];
-				$default_lang = $q_config['default_language'];
-
-				//* Add prefix.
-				if ( ! $hide || $current_lang != $default_lang )
-					$path = '/' . $current_lang . '/' . ltrim( $path, '\/ ' );
-
-			}
-		}
-
-		return $path;
-	}
-
-	/**
-	 * Generate relative WPML url.
-	 *
-	 * @param string $path The current path.
-	 * @param string $post The Post Object.
-	 *
-	 * @since 2.4.3
-	 *
-	 * @return relative path for WPML urls.
-	 */
-	public function get_relative_wmpl_url( $path, $post ) {
-		global $sitepress;
-
-		if ( isset( $sitepress ) ) {
-
-			$post_guid = $post->guid;
-
-			$negotiation_type = $sitepress->get_setting( 'language_negotiation_type' );
-
-			//* If negotiation_type is 2, the home_url will handle this.
-
-			if ( 1 === $negotiation_type ) {
-				//* Language is path.
-
-				/**
-				 * @since 2.5.2
-				 */
-				static $icl_gl_exists = null;
-
-				if ( ! isset( $icl_gl_exists ) )
-					$icl_gl_exists = (bool) function_exists( 'icl_get_languages' );
-
-				if ( $icl_gl_exists && strpos( $post_guid, 'lang=' ) !== false ) {
-					//* Language is found in query arg.
-
-					//* Fetch first directory path
-					$lang_path = explode( '/', $path );
-					$lang_path = isset( $lang_path[1] ) ? $lang_path[1] : '';
-
-					if ( ! empty( $lang_path ) ) {
-						//* Directory path parsed succesfully.
-
-						$language_keys = array_keys( icl_get_languages() );
-						if ( ! empty( $language_keys ) && ! in_array( $lang_path, $language_keys ) ) {
-							//* Language code isn't found in first part of path. Add it.
-							$path = '/' . $lang_path . '/' . ltrim( $path, '\/ ' );
-						}
-					}
-				} else {
-
-					$neg_offset = (int) - strlen( ICL_LANGUAGE_CODE );
-
-					//* Only add if ICL Language is available in guid.
-					if ( strpos( $post_guid, '/' . ICL_LANGUAGE_CODE . '/' ) !== false ) {
-						//* Language path is found in GUID.
-
-						if ( strpos( $path, '/' . ICL_LANGUAGE_CODE . '/' ) === false ) {
-							//* Language path isn't found in permalink. Add it.
-							$path = '/' . ICL_LANGUAGE_CODE . '/' . ltrim( $path, '\/ ' );
-						}
-
-					} else if ( $icl_gl_exists && strpos( $post_guid, 'lang=' ) !== false ) {
-						//* Language is found in query arg.
-
-						//* Fetch first directory path
-						$lang_path = explode( '/', $path );
-						$lang_path = $lang_path[1];
-
-						if ( ! empty( $lang_path ) ) {
-							//* Directory path parsed succesfully.
-
-							$language_keys = array_keys( icl_get_languages() );
-							if ( ! empty( $language_keys ) && in_array( $lang_path, $language_keys ) ) {
-								//* Language code isn't found in first part of path. Add it.
-								$path = '/' . $lang_path . '/' . ltrim( $path, '\/ ' );
-							}
-						}
-					}
-				}
-
-			} else if ( 3 === $negotiation_type ) {
-				//* Language names are parameters.
-
-				if ( false !== strpos( $post_guid, 'lang=' ) ) {
-					//* Add language parameter.
-
-					$parsed_url = parse_url( $post_guid );
-					parse_str( $parts['query'], $queries );
-
-					$path = user_trailingslashit( $path ) . '?lang=' . $queries['lang'];
-				}
-			}
-		}
-
-		return $path;
-	}
-
-	/**
-	 * Generates relative URL for current term.
-	 *
-	 * @global WP_Query object $wp_query
-	 * @global WP_Rewrite $wp_rewrite
-	 *
-	 * @param object $term The term object.
-	 * @param bool $no_request wether to fetch the WP Request or get the permalink by Post Object.
-	 *
-	 * @since 2.4.2
-	 *
-	 * @return Relative term or taxonomy URL.
-	 */
-	public function get_relative_term_url( $term = null, $no_request = false ) {
-
-		// We can't fetch the Term object within sitemaps.
-		if ( $no_request && ! isset( $term ) )
-			return '';
-
-		if ( ! isset( $term ) ) {
-			global $wp_query;
-			$term = $wp_query->get_queried_object();
-		}
-
-		global $wp_rewrite;
-
-		$taxonomy = $term->taxonomy;
-
-		$termlink = $wp_rewrite->get_extra_permastruct( $taxonomy );
-
-		$slug = $term->slug;
-		$t = get_taxonomy( $taxonomy );
-
-		$paged = $this->paged();
-
-		if ( empty( $termlink ) ) {
-			if ( 'category' == $taxonomy ) {
-				$termlink = '?cat=' . $term->term_id;
-			} elseif ( isset( $t->query_var ) && ! empty( $t->query_var ) ) {
-				$termlink = "?$t->query_var=$slug";
-			} else {
-				$termlink = "?taxonomy=$taxonomy&term=$slug";
-			}
-
-			if ( $paged )
-				$termlink .= '&page=' . $paged;
-
-		} else {
-			if ( $t->rewrite['hierarchical'] ) {
-				$hierarchical_slugs = array();
-				$ancestors = get_ancestors( $term->term_id, $taxonomy, 'taxonomy' );
-
-				foreach ( (array) $ancestors as $ancestor ) {
-					$ancestor_term = get_term( $ancestor, $taxonomy );
-					$hierarchical_slugs[] = $ancestor_term->slug;
-				}
-
-				$hierarchical_slugs = array_reverse( $hierarchical_slugs );
-				$hierarchical_slugs[] = $slug;
-
-				$termlink = str_replace( "%$taxonomy%", implode( '/', $hierarchical_slugs ), $termlink );
-			} else {
-				$termlink = str_replace( "%$taxonomy%", $slug, $termlink );
-			}
-
-			if ( $paged )
-				$termlink = trailingslashit( $termlink )  . 'page/' . $paged;
-
-			$termlink = user_trailingslashit( $termlink, 'category' );
-		}
-
-		$path = $this->set_url_scheme( $termlink, 'relative' );
-
-		return $path;
-	}
-
-	/**
-	 * Set url scheme.
-	 * WordPress core function, without filter.
-	 *
-	 * @param string $url Absolute url that includes a scheme.
-	 * @param string $scheme optional. Scheme to give $url. Currently 'http', 'https', 'login', 'login_post', 'admin', or 'relative'.
-	 *
-	 * @since 2.4.2
-	 * @return string url with chosen scheme.
-	 */
-	public function set_url_scheme( $url, $scheme = null ) {
-
-		if ( ! isset( $scheme ) ) {
-			$scheme = is_ssl() ? 'https' : 'http';
-		} else if ( $scheme === 'admin' || $scheme === 'login' || $scheme === 'login_post' || $scheme === 'rpc' ) {
-			$scheme = is_ssl() || force_ssl_admin() ? 'https' : 'http';
-		} else if ( $scheme !== 'http' && $scheme !== 'https' && $scheme !== 'relative' ) {
-			$scheme = is_ssl() ? 'https' : 'http';
-		}
-
-		$url = trim( $url );
-		if ( substr( $url, 0, 2 ) === '//' )
-			$url = 'http:' . $url;
-
-		if ( 'relative' == $scheme ) {
-			$url = ltrim( preg_replace( '#^\w+://[^/]*#', '', $url ) );
-			if ( $url !== '' && $url[0] === '/' )
-				$url = '/' . ltrim( $url , "/ \t\n\r\0\x0B" );
-
-		} else {
-			//* This will break if $scheme is set to false.
-			$url = preg_replace( '#^\w+://#', $scheme . '://', $url );
-		}
-
-		return $url;
-	}
-
-	/**
-	 * Creates canonical url for the default permalink structure.
-	 *
-	 * @param object $post The post.
-	 *
-	 * @since 2.3.0
-	 */
-	public function the_url_path_default_permalink_structure( $post = null ) {
-
-		if ( ! $this->is_singular() ) {
-			//* We're on a taxonomy
-			$object = get_queried_object();
-
-			if ( is_object( $object ) ) {
-				if ( is_category() ) {
-					$id = $object->term_id;
-					$path = '?cat=' . $id;
-				} else if ( is_tag() ) {
-					$name = $object->name;
-					$path = '?tag=' . $id;
-				} else if ( is_date() ) {
-					global $wp_query;
-
-					$query = $wp_query->query;
-
-					$year = $query->year;
-					$month = ! empty( $query->monthnum ) ? '&monthnum=' . $query->monthnum : '';
-					$day = ! empty( $query->day ) ? '&day=' . $query->day : '';
-
-					$path = '?year=' . $year . $month . $day;
-				} else if ( is_author() ) {
-					$name = $object->author_name;
-					$path = '?author=' . $name;
-				} else if ( is_tax() ) {
-					$name = $object->taxonomy;
-					$path = '?taxonomy=' . $name;
-				} else {
-					$id = $object->ID;
-					$path = '?p=' . $id;
-				}
-			}
-		}
-
-		if ( ! isset( $path ) ) {
-			if ( isset( $post->ID ) ) {
-				$id = $post->ID;
-			} else {
-				$id = $this->get_the_real_ID();
-			}
-
-			$path = '?p=' . $id;
-		}
-
-		return $path;
-	}
-
-	/**
-	 * Try to get an canonical URL when WPMUdev Domain Mapping is active.
-	 *
-	 * @param string $path The post relative path.
-	 *
-	 * @since 2.3.0
-	 *
-	 * @param bool $get_scheme Output array with scheme.
-	 * @since 2.4.0
-	 *
-	 * @return string|array|void The unescaped URL, the scheme
-	 */
-	public function the_url_wpmudev_domainmap( $path, $get_scheme = false ) {
-
-		if ( $this->is_domainmapping_active() ) {
-			global $wpdb,$blog_id;
-
-			$mapped_key = 'wpmudev_mapped_domain_' . $blog_id;
-
-			//* Check if the domain is mapped
-			$mapped_domain = $this->object_cache_get( $mapped_key );
-			if ( false === $mapped_domain ) {
-				$mapped_domain = $wpdb->get_var( $wpdb->prepare( "SELECT domain FROM {$wpdb->base_prefix}domain_mapping WHERE blog_id = %d", $blog_id ) );
-				$this->object_cache_set( $mapped_key, $mapped_domain, 3600 );
-			}
-
-			if ( ! empty( $mapped_domain ) ) {
-
-				$scheme_key = 'wpmudev_mapped_scheme_' . $blog_id;
-
-				//* Fetch scheme
-				$mappedscheme = $this->object_cache_get( $scheme_key );
-				if ( false === $mappedscheme ) {
-					$mappedscheme = $wpdb->get_var( $wpdb->prepare( "SELECT scheme FROM {$wpdb->base_prefix}domain_mapping WHERE blog_id = %d", $blog_id ) );
-					$this->object_cache_set( $scheme_key, $mappedscheme, 3600 );
-				}
-
-				if ( $mappedscheme === '1' ) {
-					$scheme_full = 'https://';
-					$scheme = 'https';
-				} else {
-					$scheme_full = 'http://';
-					$scheme = 'http';
-				}
-
-				// Put it all together
-				$url = trailingslashit( $scheme_full . $mapped_domain ) . ltrim( $path, '\/' );
-
-				if ( ! $get_scheme ) {
-					return $url;
-				} else {
-					return array( $url, $scheme );
-				}
-			}
-		}
-
-		return '';
-	}
-
-	/**
-	 * Try to get an canonical URL when Donncha Domain Mapping is active.
-	 *
-	 * @param string $path The post relative path.
-	 * @param bool $get_scheme Output array with scheme.
-	 *
-	 * @since 2.4.0
-	 *
-	 * @return string|array|void The unescaped URL, the scheme
-	 */
-	public function the_url_donncha_domainmap( $path, $get_scheme = false ) {
-
-		if ( $this->is_donncha_domainmapping_active() ) {
-			global $wpdb,$current_blog;
-
-			$scheme = is_ssl() ? 'https' : 'http';
-
-			//* This url is cached statically.
-			$url = function_exists( 'domain_mapping_siteurl' ) ? domain_mapping_siteurl( false ) : false;
-
-			$request_uri = '';
-
-			if ( $url && $url != untrailingslashit( $scheme . '://' . $current_blog->domain . $current_blog->path ) ) {
-				if ( ( defined( 'VHOST' ) && VHOST != 'yes' ) || ( defined( 'SUBDOMAIN_INSTALL' ) && SUBDOMAIN_INSTALL == false ) ) {
-					$request_uri = str_replace( $current_blog->path, '/', $_SERVER[ 'REQUEST_URI' ] );
-				}
-
-				$url = trailingslashit( $url . $request_uri ) . ltrim( $path, '\/ ' );
-
-				if ( ! $get_scheme ) {
-					return $url;
-				} else {
-					return array( $url, $scheme );
-				}
-			}
-		}
-
-		return '';
-	}
-
-	/**
-	 * Fetches og:image
-	 *
-	 * @uses get_header_image
-	 *
-	 * @param string $post_id the post ID
-	 * @param string $image output url for image
-	 * @param bool $escape Wether to escape the image url
-	 *
-	 * @since 2.2.1
-	 *
-	 * Applies filters string the_seo_framework_og_image_after_featured
-	 * Applies filters string the_seo_framework_og_image_after_header
-	 * @since 2.5.2
-	 *
-	 * @todo create options and upload area
-	 */
-	public function get_image( $post_id = '', $args = array(), $escape = true ) {
-
-		if ( empty( $post_id ) )
-			$post_id = $this->get_the_real_ID();
-
-		if ( empty( $post_id ) )
-			return '';
-
-		$default_args = $this->parse_image_args( '', '', true );
-
-		/**
-		 * Parse args.
-		 * @since 2.5.0
-		 */
-		if ( ! is_array( $args ) ) {
-			//* Old style parameters are used. Doing it wrong.
-			_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, 'Use $args = array() for parameters.', $this->the_seo_framework_version( '2.5.0' ) );
-			$args = $default_args;
-		} else if ( ! empty( $args ) ) {
-			$args = $this->parse_image_args( $args, $default_args );
-		} else {
-			$args = $default_args;
-		}
-
-		/**
-		 * Backwards compat with parse args
-		 * @since 2.5.0
-		 */
-		if ( ! isset( $args['post_id'] ) )
-			$args['post_id'] = $post_id;
-
-		//* 0. Image from argument.
-		$image = $args['image'];
-
-		$check = (bool) empty( $args['disallowed'] );
-
-		//* 1. Fetch image from featured
-		if ( empty( $image ) && ( $check || ! in_array( 'featured', $args['disallowed'] ) ) )
-			$image = $this->get_image_from_post_thumbnail( $args );
-
-		//* 2. Fetch image from fallback filter 1
-		if ( empty( $image ) )
-			$image = (string) apply_filters( 'the_seo_framework_og_image_after_featured', '' );
-
-		//* 3. Fallback: Get header image if exists
-		if ( empty( $image ) && ( $check || ! in_array( 'header', $args['disallowed'] ) ) )
-			$image = get_header_image();
-
-		//* 4. Fetch image from fallback filter 1
-		if ( empty( $image ) )
-			$image = (string) apply_filters( 'the_seo_framework_og_image_after_header', '' );
-
-		//* 5. Get the WP 4.3.0 Site Icon
-		if ( empty( $image ) && ( $check || ! in_array( 'icon', $args['disallowed'] ) ) )
-			$image = $this->site_icon();
-
-		//* 6. If there still is no image, try the "site avatar" from WPMUdev Avatars
-		if ( empty( $image ) && ( $check || ! in_array( 'wpmudev-avatars', $args['disallowed'] ) ) )
-			$image = $this->get_image_from_wpmudev_avatars();
-
-		/**
-		 * Escape in Generation.
-		 * @since 2.5.2
-		 */
-		if ( ! empty( $image ) && $escape )
-			return esc_url( $image );
-
-		return '';
-	}
-
-	/**
-	 * Parse and sanitize image args.
-	 *
-	 * @param array $args required The passed arguments.
-	 * @param array $defaults The default arguments.
-	 * @param bool $get_defaults Return the default arguments. Ignoring $args.
-	 *
-	 * Applies filters the_seo_framework_og_image_args : {
-	 *		@param string image The image url
-	 *		@param mixed size The image size
-	 *		@param bool icon Fetch Image icon
-	 *		@param array attr Image attributes
-	 *		@param array disallowed Disallowed image types : {
-	 *			array (
-	 * 				string 'featured'
-	 * 				string 'header'
-	 * 				string 'icon'
-	 * 				string 'wpmudev-avatars'
-	 *			)
-	 * 		}
-	 * }
-	 * The image set in the filter will always be used as fallback
-	 *
-	 * @since 2.5.0
-	 * @return array $args parsed args.
-	 */
-	public function parse_image_args( $args = array(), $defaults = array(), $get_defaults = false ) {
-
-		//* Passing back the defaults reduces the memory usage.
-		if ( empty( $defaults ) ) {
-			$defaults = array(
-				'post_id'	=> $this->get_the_real_ID(),
-				'image'		=> '',
-				'size'		=> 'full',
-				'icon'		=> false,
-				'attr'		=> array(),
-				'disallowed' => array(),
-			);
-
-			//* @since 2.0.1
-			$defaults = (array) apply_filters( 'the_seo_framework_og_image_args', $defaults, $args );
-		}
-
-		//* Return early if it's only a default args request.
-		if ( $get_defaults )
-			return $defaults;
-
-		//* Array merge doesn't support sanitation. We're simply type casting here.
-		$args['post_id'] 	= isset( $args['post_id'] ) 	? (int) $args['post_id'] 		: $defaults['post_id'];
-		$args['image'] 		= isset( $args['image'] ) 		? (string) $args['image'] 		: $defaults['image'];
-		$args['size'] 		= isset( $args['size'] ) 		? $args['size'] 				: $defaults['size']; // Mixed.
-		$args['icon'] 		= isset( $args['icon'] ) 		? (bool) $args['icon'] 			: $defaults['icon'];
-		$args['attr'] 		= isset( $args['attr'] ) 		? (array) $args['attr'] 		: $defaults['attr'];
-		$args['disallowed'] = isset( $args['disallowed'] ) 	? (array) $args['disallowed'] 	: $defaults['disallowed'];
-
-		return $args;
-	}
-
-	/**
-	 * Fetches image from post thumbnail.
-	 * Resizes the image between 1500px if bigger. Then it saves the image and
-	 * Keeps dimensions relative.
-	 *
-	 * @param array $args Image arguments.
-	 *
-	 * @since 2.3.0
-	 *
-	 * @return string|null the image url.
-	 */
-	public function get_image_from_post_thumbnail( $args ) {
-
-		if ( ! isset( $args['post_id'] ) )
-			$args['post_id'] = $this->get_the_real_ID();
-
-		$id = get_post_thumbnail_id( $args['post_id'] );
-
-		$image = $id ? $this->parse_og_image( $id, $args ) : '';
-
-		return $image;
-	}
-
-	/**
-	 * Fetches images id's from WooCommerce gallery
-	 *
-	 * @staticvar array $ids The image ids
-	 *
-	 * @param array $args Image arguments.
-	 *
-	 * @since 2.5.0
-	 *
-	 * @return array The image URL's.
-	 */
-	public function get_image_from_woocommerce_gallery() {
-
-		static $ids = null;
-
-		if ( isset( $ids ) )
-			return $ids;
-
-		$attachment_ids = '';
-
-		$post_id = $this->get_the_real_ID();
-
-		if ( metadata_exists( 'post', $post_id, '_product_image_gallery' ) ) {
-			$product_image_gallery = get_post_meta( $post_id, '_product_image_gallery', true );
-
-			$attachment_ids = array_filter( explode( ',', $product_image_gallery ) );
-		}
-
-		return $ids = $attachment_ids;
-	}
-
-	/**
-	 * Parses OG image to correct size
-	 *
-	 * @staticvar string $called Checks if image ID has already been fetched (to prevent duplicate output on WooCommerce).
-	 *
-	 * @param int $id The attachment ID.
-	 * @param array $args The image args
-	 *
-	 * @since 2.5.0
-	 *
-	 * @return string|empty Parsed image url or empty if already called
-	 */
-	public function parse_og_image( $id, $args = array() ) {
-
-		//* Don't do anything if $id isn't given.
-		if ( ! isset( $id ) || empty( $id ) )
-			return;
-
-		static $called = array();
-
-		if ( isset( $called[$id] ) )
-			return '';
-
-		if ( empty( $args ) )
-			$args = $this->parse_image_args( '', '', true );
-
-		$src = wp_get_attachment_image_src( $id, $args['size'], $args['icon'], $args['attr'] );
-
-		$i = $src[0]; // Source URL
-		$w = $src[1]; // Width
-		$h = $src[2]; // Height
-
-		//* Prefered 1500px, resize it
-		if ( $w > 1500 || $h > 1500 ) {
-
-			if ( $w == $h ) {
-				//* Square
-				$w = 1500;
-				$h = 1500;
-			} else if ( $w > $h ) {
-				//* Landscape
-				$dev = $w / 1500;
-
-				$h = $h / $dev;
-
-				$h = round( $h );
-				$w = 1500;
-			} else if ( $h > $w ) {
-				//* Portrait
-				$dev = $h / 1500;
-
-				$w = $w / $dev;
-
-				$w = round( $w );
-				$h = 1500;
-			}
-
-			// Get path of image and load it into the wp_get_image_editor
-			$i_file_path = get_attached_file( $id );
-
-			$i_file_old_name	= basename( get_attached_file( $id ) );
-			$i_file_ext			= pathinfo( $i_file_path, PATHINFO_EXTENSION );
-
-			if ( ! empty( $i_file_ext ) ) {
-				$i_file_dir_name 	= pathinfo( $i_file_path, PATHINFO_DIRNAME );
-				// Add trailing slash
-				$i_file_dir_name	.= ( substr( $i_file_dir_name, -1 ) == '/' ? '' : '/' );
-
-				$i_file_file_name 	= pathinfo( $i_file_path, PATHINFO_FILENAME );
-
-				// Yes I know, I should use generate_filename, but it's slower.
-				// Will look at that later. This is already 100 lines of correctly working code.
-				$new_image_dirfile 	= $i_file_dir_name . $i_file_file_name . '-' . $w . 'x' . $h . '.' . $i_file_ext;
-
-				// This should work on multisite too.
-				$upload_dir 	= wp_upload_dir();
-				$upload_url 	= $upload_dir['baseurl'];
-				$upload_basedir = $upload_dir['basedir'];
-
-				// Dub this $new_image
-				$new_image_url = preg_replace( '/' . preg_quote( $upload_basedir, '/' ) . '/', $upload_url, $new_image_dirfile );
-
-				// Generate file if it doesn't exists yet.
-				if ( ! file_exists( $new_image_dirfile ) ) {
-
-					$image_editor = wp_get_image_editor( $i_file_path );
-
-					if ( ! is_wp_error( $image_editor ) ) {
-						$image_editor->resize( $w, $h, false );
-						$image_editor->set_quality( 70 ); // Let's save some bandwidth, Facebook compresses it even further anyway.
-						$image_editor->save( $new_image_dirfile );
-					}
-				}
-
-				$i = $new_image_url;
-			}
-		}
-
-		return $called[$id] = $i;
-	}
-
-	/**
-	 * Fetches site image from WPMUdev Avatars.
-	 *
-	 * @since 2.3.0
-	 *
-	 * @return string|null the image url.
-	 */
-	public function get_image_from_wpmudev_avatars() {
-
-		$image = '';
-
-		$plugins = array( 'classes' => array( 'Avatars' ) );
-
-		if ( $this->detect_plugin( $plugins ) ) {
-			global $ms_avatar;
-
-			$path = '';
-
-			if ( isset( $ms_avatar->blog_avatar_dir ) ) {
-				global $blog_id;
-
-				$size = '256';
-
-				if ( method_exists( $ms_avatar, 'encode_avatar_folder' ) ) {
-					$file = $ms_avatar->blog_avatar_dir . $ms_avatar->encode_avatar_folder( $blog_id ) . '/blog-' . $blog_id . '-' . $size . '.png';
-				} else {
-					return '';
-				}
-
-				if ( false !== $file && is_file( $file ) ) {
-
-					$upload_dir = wp_upload_dir();
-					$upload_url = $upload_dir['baseurl'];
-
-					/**
-					 * Isn't there a more elegant core option? =/
-					 * I'm basically backwards enginering the wp_upload_dir
-					 * function to get the base url without /sites/blogid or /blogid.
-					 */
-					if ( is_multisite() && ! ( is_main_network() && is_main_site() && defined( 'MULTISITE' ) ) ) {
-						if ( ! get_site_option( 'ms_files_rewriting' ) ) {
-							if ( defined( 'MULTISITE' ) ) {
-								$upload_url = str_replace( '/sites/' . $blog_id, '', $upload_url );
-							} else {
-								// This should never run.
-								$upload_url = str_replace( '/' . $blog_id, '', $upload_url );
-							}
-						} else if ( defined( 'UPLOADS' ) && ! ms_is_switched() ) {
-							/**
-							 * Special cases. UPLOADS is defined.
-							 * Where UPLOADS is defined AND we're on the main blog AND
-							 * WPMUdev avatars is used AND file is uploaded on main blog AND
-							 * no header image is set AND no favicon is uploaded.
-							 *
-							 * So yeah: I'm not sure what to do here so I'm just gonna fall back to default.
-							 * I'll wait for a bug report.
-							 */
-							$upload_url = str_replace( '/sites/' . $blog_id, '', $upload_url );
-						}
-					}
-
-					// I think I should've used get_site_url...
-					$avatars_url = trailingslashit( trailingslashit( $upload_url ) . basename( dirname( $ms_avatar->blog_avatar_dir ) ) );
-					$path = preg_replace( '/' . preg_quote( dirname( $ms_avatar->blog_avatar_dir ) . '/', '/') . '/', $avatars_url, $file );
-
-				}
-			}
-
-			$image = ! empty( $path ) ? $path : '';
-		}
-
-		return $image;
-	}
-
-	/**
-	 * Fetches site icon brought in WordPress 4.3.0
-	 *
-	 * @param string $size 	The icon size, accepts 'full' and pixel values
-	 * @since 2.2.1
-	 *
-	 * @return string url site icon, not escaped.
-	 */
-	public function site_icon( $size = 'full' ) {
-
-		$icon = '';
-
-		if ( function_exists( 'has_site_icon' ) && $this->wp_version( '4.3.0', '>=' ) ) {
-			if ( $size == 'full' ) {
-				$site_icon_id = get_option( 'site_icon' );
-
-				$url_data = '';
-
-				if ( $site_icon_id ) {
-					$url_data = wp_get_attachment_image_src( $site_icon_id, $size );
-				}
-
-				$icon = $url_data ? $url_data[0] : '';
-			} else if ( is_int( $size ) ) {
-				$icon = get_site_icon_url( $size );
-			}
-		}
-		return $icon;
-	}
-
-	/**
-	 * Output the `index`, `follow`, `noodp`, `noydir`, `noarchive` robots meta code in array
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses genesis_get_seo_option()   Get SEO setting value.
-	 * @uses genesis_get_custom_field() Get custom field value.
-	 *
-	 * @global WP_Query $wp_query Query object.
-	 *
-	 * @return array|null robots
-	 */
-	public function robots_meta() {
-		global $wp_query;
-
-		$query_vars = is_object( $wp_query ) ? (array) $wp_query->query_vars : '';
-		$paged = is_array( $query_vars ) ? $query_vars["paged"] : '';
-
-		//* Defaults
-		$meta = array(
-			'noindex'   => $this->get_option( 'site_noindex' ) ? 'noindex' : '',
-			'nofollow'  => $this->get_option( 'site_nofollow' ) ? 'nofollow' : '',
-			'noarchive' => $this->get_option( 'site_noarchive' ) ? 'noarchive' : '',
-			'noodp'     => $this->get_option( 'noodp' ) ? 'noodp' : '',
-			'noydir'    => $this->get_option( 'noydir' ) ? 'noydir' : '',
-		);
-
-		/**
-		 * Check the Robots SEO settings, set noindex for paged archives.
-		 * @since 2.2.4
-		 */
-		if ( (int) $paged > (int) 1 )
-			$meta['noindex'] = $this->get_option( 'paged_noindex' ) ? 'noindex' : $meta['noindex'];
-
-
-		//* Check home page SEO settings, set noindex, nofollow and noarchive
-		if ( is_front_page() ) {
-			$meta['noindex']   = $this->get_option( 'homepage_noindex' ) ? 'noindex' : $meta['noindex'];
-			$meta['nofollow']  = $this->get_option( 'homepage_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $this->get_option( 'homepage_noarchive' ) ? 'noarchive' : $meta['noarchive'];
-		} else {
-			/**
-			 * Check if archive is empty, set noindex for those.
-			 *
-			 * @todo maybe create option
-			 * @since 2.2.8
-			 */
-			if ( isset( $wp_query->post_count ) && (int) 0 === $wp_query->post_count )
-				$meta['noindex'] = 'noindex';
-		}
-
-		if ( is_category() ) {
-			$term = $wp_query->get_queried_object();
-
-			$meta['noindex']   = $term->admeta['noindex'] ? 'noindex' : $meta['noindex'];
-			$meta['nofollow']  = $term->admeta['nofollow'] ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $term->admeta['noarchive'] ? 'noarchive' : $meta['noarchive'];
-
-			if ( empty( $meta['noindex'] ) )
-				$meta['noindex'] = $this->get_option( 'category_noindex' ) ? 'noindex' : $meta['noindex'];
-
-			if ( empty( $meta['nofollow'] ) )
-				$meta['nofollow'] = $this->get_option( 'category_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-
-			if ( empty( $meta['noarchive'] ) )
-				$meta['noarchive'] = $this->get_option( 'category_noindex' ) ? 'noarchive' : $meta['noarchive'];
-
-			$flag = $term->admeta['saved_flag'] != '0' ? true : false;
-
-			if ( ! $flag && isset( $term->meta ) ) {
-				if ( empty( $meta['noindex'] ) )
-					$meta['noindex'] = $term->meta['noindex'] ? 'noindex' : $meta['noindex'];
-
-				if ( empty( $meta['nofollow'] ) )
-					$meta['nofollow'] = $term->meta['nofollow'] ? 'nofollow' : $meta['nofollow'];
-
-				if ( empty( $meta['noarchive'] ) )
-					$meta['noarchive'] = $term->meta['noarchive'] ? 'noarchive' : $meta['noarchive'];
-			}
-		}
-
-		if ( is_tag() ) {
-			$term = $wp_query->get_queried_object();
-
-			$meta['noindex']   = $term->admeta['noindex'] ? 'noindex' : $meta['noindex'];
-			$meta['nofollow']  = $term->admeta['nofollow'] ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $term->admeta['noarchive'] ? 'noarchive' : $meta['noarchive'];
-
-			if ( empty( $meta['noindex'] ) )
-				$meta['noindex'] = $this->get_option( 'tag_noindex' ) ? 'noindex' : $meta['noindex'];
-
-			if ( empty( $meta['nofollow'] ) )
-				$meta['nofollow'] = $this->get_option( 'tag_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-
-			if ( empty( $meta['noarchive'] ) )
-				$meta['noarchive'] = $this->get_option( 'tag_noindex' ) ? 'noarchive' : $meta['noarchive'];
-
-			$flag = $term->admeta['saved_flag'] != '0' ? true : false;
-
-			if ( ! $flag && isset( $term->meta ) ) {
-				if ( empty( $meta['noindex'] ) )
-					$meta['noindex'] = $term->meta['noindex'] ? 'noindex' : $meta['noindex'];
-
-				if ( empty( $meta['nofollow'] ) )
-					$meta['nofollow'] = $term->meta['nofollow'] ? 'nofollow' : $meta['nofollow'];
-
-				if ( empty( $meta['noarchive'] ) )
-					$meta['noarchive'] = $term->meta['noarchive'] ? 'noarchive' : $meta['noarchive'];
-			}
-		}
-
-		// Is custom Taxonomy page. But not a category or tag. Should've recieved specific term SEO settings.
-		if ( is_tax() ) {
-			$term = get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) );
-
-			$meta['noindex']   = $term->admeta['noindex'] ? 'noindex' : $meta['noindex'];
-			$meta['nofollow']  = $term->admeta['nofollow'] ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $term->admeta['noarchive'] ? 'noarchive' : $meta['noarchive'];
-		}
-
-		if ( is_author() ) {
-
-			/**
-			 * @todo really, @todo. External plugin?
-			 */
-			/*
-			$meta['noindex']   = get_the_author_meta( 'noindex', (int) get_query_var( 'author' ) ) ? 'noindex' : $meta['noindex'];
-			$meta['nofollow']  = get_the_author_meta( 'nofollow', (int) get_query_var( 'author' ) ) ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = get_the_author_meta( 'noarchive', (int) get_query_var( 'author' ) ) ? 'noarchive' : $meta['noarchive'];
-			*/
-
-			$meta['noindex'] = $this->get_option( 'author_noindex' ) ? 'noindex' : $meta['noindex'];
-			$meta['nofollow'] = $this->get_option( 'author_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $this->get_option( 'author_noarchive' ) ? 'noarchive' : $meta['noarchive'];
-		}
-
-		if ( is_date() ) {
-			$meta['noindex'] = $this->get_option( 'date_noindex' ) ? 'noindex' : $meta['noindex'];
-			$meta['nofollow'] = $this->get_option( 'date_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $this->get_option( 'date_noarchive' ) ? 'noarchive' : $meta['noarchive'];
-		}
-
-		if ( is_search() ) {
-			$meta['noindex'] = $this->get_option( 'search_noindex' ) ? 'noindex' : $meta['noindex'];
-			$meta['nofollow'] = $this->get_option( 'search_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $this->get_option( 'search_noarchive' ) ? 'noarchive' : $meta['noarchive'];
-		}
-
-		if ( is_attachment() ) {
-			$meta['noindex']   = $this->get_option( 'attachment_noindex' ) ? 'noindex' : $meta['noindex'];
-			$meta['nofollow']  = $this->get_option( 'attachment_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $this->get_option( 'attachment_noarchive' ) ? 'noarchive' : $meta['noarchive'];
-		}
-
-		if ( $this->is_singular() ) {
-			$meta['noindex'] = $this->get_custom_field( '_genesis_noindex' ) ? 'noindex' : $meta['noindex'];
-			$meta['nofollow'] = $this->get_custom_field( '_genesis_nofollow' ) ? 'nofollow' : $meta['nofollow'];
-			$meta['noarchive'] = $this->get_custom_field( '_genesis_noarchive' ) ? 'noarchive' : $meta['noarchive'];
-		}
-
-		//* Strip empty array items
-		$meta = array_filter( $meta );
-
-		return $meta;
-	}
-
-	/**
-	 * Generates shortlink url
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param int $post_id The post ID
-	 * @return string|null Escaped site Shortlink URL
-	 */
-	public function get_shortlink( $post_id = 0 ) {
-
-		if ( $this->get_option( 'shortlink_tag' ) ) {
-
-			$path = null;
-
-			if ( $this->is_singular( $post_id ) ) {
-
-				if ( 0 == $post_id )
-					$post_id = $this->get_the_real_ID();
-
-				if ( ! empty( $post_id ) ) {
-					if ( $this->is_static_frontpage( $post_id ) ) {
-						$path = '';
-					} else {
-						$path = '?p=' . $post_id;
-					}
-				}
-			} else if ( ! is_front_page() ) {
-				$object = get_queried_object();
-
-				if ( is_category() ) {
-					$id = $object->term_id;
-					$path = '?cat=' . $id;
-				}
-
-				if ( is_tag() ) {
-					$name = $object->name;
-					$path = '?tag=' . $name;
-				}
-
-				if ( is_date() ) {
-					// This isn't exactly "short" for a shortlink...
-					$year = get_query_var( 'year' );
-					$month = get_query_var( 'monthnum' ) ? '&monthnum=' . get_query_var( 'monthnum' ) : '';
-					$day = get_query_var( 'day' ) ? '&day=' . get_query_var( 'day' ) : '';
-
-					$path = '?year=' . $year . $month . $day;
-				}
-
-				if ( is_author() ) {
-					$id = $object->ID;
-					$path = '?author=' . $id;
-				}
-
-				if ( is_tax() ) {
-					$id = $object->ID;
-					$path = '?taxonomy=' . $id;
-				}
-
-				if ( empty( $path ) ) {
-					$id = isset( $object->ID ) ? $object->ID : 0;
-
-					if ( ! empty( $id ) )
-						$path = '?p=' . $id;
-				}
-
-			} else {
-				//* Home page
-				$path = '';
-			}
-
-			if ( isset( $path ) ) {
-
-				$home_url = get_option( 'home' );
-				$scheme = is_ssl() ? 'https' : 'http';
-
-				if ( empty( $path ) ) {
-					//* Home url.
-					$url = $this->set_url_scheme( $home_url, $scheme );
-					$url = user_trailingslashit( $url );
-				} else {
-					//* Everything else.
-					$url = trailingslashit( $home_url ) . $path;
-					$url = $this->set_url_scheme( $url, $scheme );
-				}
-
-				return esc_url_raw( $url );
-			}
-		}
-
-		return '';
-	}
-
-	/**
-	 * Generates Previous and Next links
-	 *
-	 * @since 2.2.4
-	 *
-	 * @param string $prev_next Previous or next page link
-	 * @param int $post_id The post ID
-	 *
-	 * @return string|null Escaped site Pagination URL
-	 */
-	public function get_paged_url( $prev_next = 'next', $post_id = 0 ) {
-
-		if ( ! $this->get_option( 'prev_next_posts' ) && ! $this->get_option( 'prev_next_archives' ) )
-			return '';
-
-		global $wp_query;
-
-		$prev = '';
-		$next = '';
-
-		if ( $this->get_option( 'prev_next_archives' ) && ! is_singular() ) {
-
-			$paged = $this->paged();
-
-			if ( $prev_next == 'prev' )
-				$prev = $paged > 1 ? get_previous_posts_page_link() : $prev;
-
-			if ( $prev_next == 'next' )
-				$next = $paged < $wp_query->max_num_pages ? get_next_posts_page_link() : $next;
-
-		} else if ( $this->get_option( 'prev_next_posts' ) && is_singular() ) {
-
-			$page = $this->page();
-
-			$numpages = substr_count( $wp_query->post->post_content, '<!--nextpage-->' ) + 1;
-
-			if ( $numpages && ! $page ) {
-				$page = 1;
-			}
-
-			if ( $prev_next == 'prev' ) {
-				if ( $page > 1 ) {
-					$prev = (string) $this->get_paged_post_url( $page - 1, $post_id, 'prev' );
-				}
-			}
-
-			if ( $prev_next == 'next' ) {
-				if ( $page < $numpages ) {
-					$next = (string) $this->get_paged_post_url( $page + 1, $post_id, 'next' );
-				}
-			}
-
-		}
-
-		if ( ! empty( $prev ) )
-			return esc_url_raw( $prev );
-
-		if ( ! empty( $next ) )
-			return esc_url_raw( $next );
-
-		return '';
-	}
-
-	/**
-	 * Return the special URL of a paged post.
-	 *
-	 * Taken from _wp_link_page() in WordPress core, but instead of anchor markup, just return the URL.
-	 * Also adds WPMUdev Domain Mapping support and is optimized for speed.
-	 *
-	 * @uses $this->the_url_from_cache();
-	 * @since 2.2.4
-	 *
-	 * @param int $i The page number to generate the URL from.
-	 * @param int $post_id The post ID
-	 * @param string $pos Which url to get, accepts next|prev
-	 *
-	 * @return string Unescaped URL
-	 */
-	public function get_paged_post_url( $i, $post_id = 0, $pos = '' ) {
-
-		$from_option = false;
-
-		if ( $i === (int) 1 ) {
-			$url = $this->the_url_from_cache( '', $post_id, true, $from_option );
-		} else {
-			$post = get_post( $post_id );
-
-			/**
-			 * Fix the url.
-			 *
-			 * @since 2.2.5
-			 */
-			if ( $i >= (int) 2 ) {
-				//* Fix adding pagination url.
-
-				$urlfromcache = $this->the_url_from_cache( '', $post_id, false, $from_option );
-
-				// Calculate current page number.
-				$int_current = 'next' == $pos ? $i -1 : $i + 1;
-				$string_current = (string) $int_current;
-
-				if ( $i === (int) 1 ) {
-					//* We're returning to the first page. Continue normal behavior.
-					$urlfromcache = $urlfromcache;
-				} else {
-					//* We're adding a page.
-					$last_occurence = strrpos( $urlfromcache, '/' . $string_current . '/' );
-
-					if ( $last_occurence !== false )
-						$urlfromcache = substr_replace( $urlfromcache, '/', $last_occurence, strlen( '/' . $string_current . '/' ) );
-				}
-			} else {
-				$urlfromcache = $this->the_url_from_cache( '', $post_id, false, $from_option );
-			}
-
-			if ( '' == get_option( 'permalink_structure' ) || in_array( $post->post_status, array( 'draft', 'pending' ) ) ) {
-				$url = add_query_arg( 'page', $i, $urlfromcache );
-			} else if ( 'page' == get_option( 'show_on_front' ) && get_option( 'page_on_front' ) == $post->ID ) {
-				global $wp_rewrite;
-
-				$url = trailingslashit( $urlfromcache ) . user_trailingslashit( "$wp_rewrite->pagination_base/" . $i, 'single_paged' );
-			} else {
-				$url = trailingslashit( $urlfromcache ) . user_trailingslashit( $i, 'single_paged' );
-			}
-		}
-
-		return $url;
-	}
-
-	/**
-	 * Generate LD+Json search helper.
-	 *
-	 * @since 2.2.8
-	 *
-	 * @return escaped LD+json search helper string.
-	 * @TODO Create option for output.
-	 */
-	public function ld_json_search() {
-
-		/**
-		 * Applies filters the_seo_framework_json_search_output
-		 * @since 2.3.9
-		 */
-		$output = (bool) apply_filters( 'the_seo_framework_json_search_output', true );
-
-		if ( true !== $output )
-			return '';
-
-		$context = json_encode( 'http://schema.org' );
-		$webtype = json_encode( 'WebSite' );
-		$url = json_encode( esc_url( home_url( '/' ) ) );
-		$name = json_encode( $this->get_blogname() );
-		$alternatename = $name;
-		$actiontype = json_encode( 'SearchAction' );
-
-		// Remove trailing quote and add it back.
-		$target = mb_substr( json_encode( esc_url( home_url( '/?s=' ) ) ), 0, -1 ) . '{search_term_string}"';
-
-		$queryaction = json_encode( 'required name=search_term_string' );
-
-		$json = sprintf( '{"@context":%s,"@type":%s,"url":%s,"name":%s,"alternateName":%s,"potentialAction":{"@type":%s,"target":%s,"query-input":%s}}', $context, $webtype, $url, $name, $alternatename, $actiontype, $target, $queryaction );
-
-		return $json;
-	}
-
-	/**
-	 * Generate LD+Json breadcrumb helper.
-	 *
-	 * @since 2.4.2
-	 *
-	 * @return escaped LD+json search helper string.
-	 * @TODO Create option for output.
-	 */
-	public function ld_json_breadcrumbs() {
-
-		/**
-		 * Applies filters the_seo_framework_json_breadcrumb_output
-		 * @since 2.4.2
-		 */
-		$output = (bool) apply_filters( 'the_seo_framework_json_breadcrumb_output', true );
-
-		if ( true !== $output )
-			return '';
-
-		//* Used to count ancestors and categories.
-		$count = 0;
-
-		$output = '';
-
-		if ( is_single() ) {
-			//* Get categories.
-
-			$post_id = $this->get_the_real_ID();
-
-			$r = is_object_in_term( $post_id, 'category', '' );
-
-			if ( is_wp_error( $r ) || ! $r )
-				return '';
-
-			$cats = wp_get_object_terms( $post_id, 'category', array( 'fields' => 'all_with_object_id', 'orderby' => 'parent' ) );
-
-			if ( is_wp_error( $cats ) || empty( $cats ) )
-				return '';
-
-			$cat_ids = array();
-			$kittens = array();
-
-			//* Fetch cats children id's, if any.
-			foreach ( $cats as $cat ) {
-				//* The category objects. The cats.
-				$cat_id = $cat->term_id;
-
-				// Check if they have kittens.
-				$children = get_term_children( $cat_id, $cat->taxonomy );
-
-				//* No need to fetch them again, save object in the array.
-				$cat_obj[$cat_id] = $cat;
-
-				//* Save children id's as kittens.
-				$kittens[$cat_id] = $children;
-			}
-
-			$todo = array();
-			$trees = array();
-
-			/**
-			 * Build category ID tree.
-			 * Sort by parents with children ($trees). These are recursive, 3+ item scripts.
-			 * Sort by parents without children ($todo). These are singular 2 item scripts.
-			 */
-			foreach ( $kittens as $parent => $kitten ) {
-				if ( ! empty( $kitten ) ) {
-					if ( 1 == count( $kitten ) ) {
-						$trees[] = array( $kitten[0], $parent );
-					} else {
-						//* @TODO, this is very, very complicated. Requires multiple loops.
-						$trees[] = array();
-					}
-				} else {
-					$todo[] = $parent;
-				}
-			}
-
-			//* Remove Duplicates from $todo by comparing to $tree
-			foreach ( $todo as $key => $value ) {
-				foreach ( $trees as $tree ) {
-					if ( $this->in_array( $value, $tree ) )
-						unset( $todo[$key] );
-				}
-			}
-
-			$context = json_encode( 'http://schema.org' );
-			$context_type = json_encode( 'BreadcrumbList' );
-			$item_type = json_encode( 'ListItem' );
-
-			$items = '';
-
-			foreach ( $trees as $tree ) {
-				if ( ! empty( $tree ) ) {
-
-					$tree = array_reverse( $tree );
-
-					foreach ( $tree as $position => $parent_id ) {
-						$pos = $position + 2;
-
-						$cat = isset( $cat_obj[$parent_id] ) ? $cat_obj[$parent_id] : get_term_by( 'id', $parent_id, 'category', OBJECT, 'raw' );
-
-						$id = json_encode( $this->the_url( '', '', array( 'get_custom_field' => false, 'external' => true, 'is_term' => true, 'term' => $cat ) ) );
-
-						$custom_field_name = isset( $cat->admeta['doctitle'] ) ? $cat->admeta['doctitle'] : '';
-						$cat_name = ! empty( $custom_field_name ) ? $custom_field_name : $cat->name;
-						$name = json_encode( $cat_name );
-
-						$items .= sprintf( '{"@type":%s,"position":%s,"item":{"@id":%s,"name":%s}},', $item_type, (string) $pos, $id, $name );
-					}
-
-					if ( ! empty( $items ) ) {
-
-						$items = $this->ld_json_breadcrumb_first( $item_type ) . $items . $this->ld_json_breadcrumb_last( $item_type, $pos, $post_id );
-
-						//* Put it all together.
-						$breadcrumbhelper = sprintf( '{"@context":%s,"@type":%s,"itemListElement":[%s]}', $context, $context_type, $items );
-						$output .= "<script type='application/ld+json'>" . $breadcrumbhelper . "</script>" . "\r\n";
-					}
-				}
-			}
-
-			//* For each of the todo items, create a separated script.
-			if ( ! empty( $todo ) ) {
-				foreach ( $todo as $tid ) {
-
-					$items = '';
-					$cat = get_term_by( 'id', $tid, 'category', OBJECT, 'raw' );
-
-					if ( '1' !== $cat->admeta['noindex'] ) {
-
-						if ( empty( $children ) ) {
-							// The position of the current item is always static here.
-							$pos = '2';
-							$id = json_encode( $this->the_url( '', '', array( 'get_custom_field' => false, 'is_term' => true, 'term' => $cat ) ) ); // Why not external???
-
-							$custom_field_name = isset( $cat->admeta['doctitle'] ) ? $cat->admeta['doctitle'] : '';
-							$cat_name = ! empty( $custom_field_name ) ? $custom_field_name : $cat->name;
-							$name = json_encode( $cat_name );
-
-							$items .= sprintf( '{"@type":%s,"position":%s,"item":{"@id":%s,"name":%s}},', $item_type, (string) $pos, $id, $name );
-						}
-
-						if ( ! empty( $items ) ) {
-
-							$items = $this->ld_json_breadcrumb_first( $item_type ) . $items . $this->ld_json_breadcrumb_last( $item_type, $pos, $post_id );
-
-							//* Put it all together.
-							$breadcrumbhelper = sprintf( '{"@context":%s,"@type":%s,"itemListElement":[%s]}', $context, $context_type, $items );
-							$output .= "<script type='application/ld+json'>" . $breadcrumbhelper . "</script>" . "\r\n";
-						}
-					}
-				}
-			}
-		} else if ( ! is_front_page() && is_page() ) {
-			//* Get ancestors.
-			$page_id = $this->get_the_real_ID();
-
-			$parents = get_post_ancestors( $page_id );
-
-			if ( ! empty( $parents ) ) {
-
-				$context = json_encode( 'http://schema.org' );
-				$context_type = json_encode( 'BreadcrumbList' );
-				$item_type = json_encode( 'ListItem' );
-
-				$items = '';
-
-				$parents = array_reverse( $parents );
-
-				foreach ( $parents as $position => $parent_id ) {
-					$pos = $position + 2;
-
-					$id = json_encode( $this->the_url( '', $parent_id, array( 'get_custom_field' => false, 'external' => true ) ) );
-
-					$custom_field_name = $this->get_custom_field( '_genesis_title', $parent_id );
-					$parent_name = ! empty( $custom_field_name ) ? $custom_field_name : $this->title( '', '', '', array( 'term_id' => $parent_id, 'get_custom_field' => false, 'placeholder' => true, 'notagline' => true, 'description_title' => true ) );
-
-					$name = json_encode( $parent_name );
-
-					$items .= sprintf( '{"@type":%s,"position":%s,"item":{"@id":%s,"name":%s}},', $item_type, (string) $pos, $id, $name );
-				}
-
-				if ( ! empty( $items ) ) {
-
-					$items = $this->ld_json_breadcrumb_first( $item_type ) . $items . $this->ld_json_breadcrumb_last( $item_type, $pos, $page_id );
-
-					//* Put it all together.
-					$breadcrumbhelper = sprintf( '{"@context":%s,"@type":%s,"itemListElement":[%s]}', $context, $context_type, $items );
-					$output = "<script type='application/ld+json'>" . $breadcrumbhelper . "</script>" . "\r\n";
-				}
-			}
-		}
-
-		return $output;
-	}
-
-	/**
-	 * Return home page item for LD Json Breadcrumbs.
-	 *
-	 * @staticvar string $first_item.
-	 *
-	 * @since 2.4.2
-	 *
-	 * @param string $item_type the breadcrumb item type.
-	 *
-	 * @return string Home Breadcrumb item
-	 */
-	public function ld_json_breadcrumb_first( $item_type ) {
-
-		static $first_item = null;
-
-		if ( ! isset( $first_item ) ) {
-
-			if ( ! isset( $item_type ) )
-				$item_type = json_encode( 'ListItem' );
-
-			$id = json_encode( $this->the_home_url_from_cache() );
-
-			$home_title = $this->get_option( 'homepage_title' );
-
-			if ( $home_title ) {
-				$custom_name = $home_title;
-			} else if ( 'page' == get_option( 'show_on_front' ) ) {
-				$home_id = (int) get_option( 'page_on_front' );
-
-				$custom_name = $this->get_custom_field( '_genesis_title', $home_id );
-				$custom_name = $custom_name ? $custom_name : $this->get_blogname();
-			} else {
-				$custom_name = $this->get_blogname();
-			}
-
-			$custom_name = json_encode( $custom_name );
-
-			//* Add trailing comma.
-			$first_item = sprintf( '{"@type":%s,"position":%s,"item":{"@id":%s,"name":%s}},', $item_type, '1', $id, $custom_name );
-		}
-
-		return $first_item;
-	}
-
-	/**
-	 * Return current page item for LD Json Breadcrumbs.
-	 *
-	 * @staticvar string $last_item.
-	 *
-	 * @since 2.4.2
-	 *
-	 * @param string $item_type the breadcrumb item type.
-	 * @param int $pos Last known position.
-	 * @param int $post_id The current Post ID
-	 *
-	 * @staticvar string $type The breadcrumb item type.
-	 * @staticvar string $id The current post/page/archive url.
-	 * @staticvar string $name The current post/page/archive title.
-	 *
-	 * @return string Lat Breadcrumb item
-	 */
-	public function ld_json_breadcrumb_last( $item_type, $pos, $post_id ) {
-
-		// 2 (becomes 3) holds mostly true for single term items. This shouldn't run anyway. Pos should always be provided.
-		if ( ! isset( $pos ) )
-			$pos = '2';
-
-		if ( ! isset( $item_type ) ) {
-			static $type = null;
-
-			if ( ! isset( $type ) )
-				$type = json_encode( 'ListItem' );
-
-			$item_type = $type;
-		}
-
-		if ( ! isset( $post_id ) || empty( $post_id ) )
-			$post_id = $this->get_the_real_ID();
-
-		//* Add current page.
-		$pos = $pos + 1;
-
-		static $id = null;
-		static $name = null;
-
-		if ( ! isset( $id ) )
-			$id = json_encode( $this->the_url_from_cache() );
-
-		if ( ! isset( $name ) ) {
-			$custom_field = $this->get_custom_field( '_genesis_title', $post_id );
-			$name = $custom_field ? $custom_field : $this->title( '', '', '', array( 'term_id' => $post_id, 'placeholder' => true, 'notagline' => true, 'description_title' => true ) );
-			$name = json_encode( $name );
-		}
-
-		$last_item = sprintf( '{"@type":%s,"position":%s,"item":{"@id":%s,"name":%s}}', $item_type, (string) $pos, $id, $name );
-
-		return $last_item;
-	}
-
-	/**
-	 * Return LD+Json Knowledge Graph helper.
-	 *
-	 * @since 2.2.8
-	 *
-	 * @return null|escaped LD+json Knowledge Graph helper string.
-	 * @todo transient cache this.
-	 */
-	public function ld_json_knowledge() {
-
-		if ( ! $this->get_option( 'knowledge_output' ) )
-			return '';
-
-		$knowledge_type = $this->get_option( 'knowledge_type' );
-
-		/**
-		 * Forgot to add this.
-		 * @since 2.4.3
-		 */
-		$knowledge_name = $this->get_option( 'knowledge_name' );
-		$knowledge_name = ! empty( $knowledge_name ) ? $knowledge_name : $this->get_blogname();
-
-		$context = json_encode( 'http://schema.org' );
-		$type = json_encode( ucfirst( $knowledge_type ) );
-		$name = json_encode( $knowledge_name );
-		$url = json_encode( esc_url( home_url( '/' ) ) );
-
-		$logo = '';
-
-		if ( $this->get_option( 'knowledge_logo' ) && 'organization' === $knowledge_type ) {
-			$icon = $this->site_icon();
-
-			if ( ! empty( $icon ) ) {
-				$logourl = esc_url_raw( $icon );
-
-				//* Add trailing comma
-				$logo = '"logo":' . json_encode( $logourl ) . ',';
-			}
-		}
-
-		/**
-		 * Fetch option names
-		 *
-		 * @uses filter the_seo_framework_json_options
-		 */
-		$options = (array) apply_filters( 'the_seo_framework_json_options', array(
-			'knowledge_facebook',
-			'knowledge_twitter',
-			'knowledge_gplus',
-			'knowledge_instagram',
-			'knowledge_youtube',
-			'knowledge_linkedin',
-			'knowledge_pinterest',
-			'knowledge_soundcloud',
-			'knowledge_tumblr',
-		) );
-
-		$sameurls = '';
-		$comma = ',';
-
-		//* Put the urls together from the options.
-		if ( is_array( $options ) ) {
-			foreach ( $options as $option ) {
-				$the_option = $this->get_option( $option );
-
-				if ( '' !== $the_option )
-					$sameurls .= json_encode( $the_option ) . $comma;
-			}
-		}
-
-		//* Remove trailing comma
-		$sameurls = rtrim( $sameurls, $comma );
-		$json = '';
-
-		if ( ! empty( $sameurls ) )
-			$json = sprintf( '{"@context":%s,"@type":%s,"name":%s,"url":%s,%s"sameAs":[%s]}', $context, $type, $name, $url, $logo, $sameurls );
-
-		return $json;
-	}
-
-	/**
-	 * Get the archive Title.
-	 *
-	 * WordPress core function 4.1.0
-	 *
-	 * @since 2.3.6
-	 */
-	public function get_the_archive_title() {
-
-		//* Return WP Core function.
-		if ( function_exists( 'get_the_archive_title' ) )
-			return get_the_archive_title();
-
-		if ( is_category() ) {
-			/* translators: Front-end output. */
-			$title = sprintf( __( 'Category: %s', 'autodescription' ), single_cat_title( '', false ) );
-		} elseif ( is_tag() ) {
-			/* translators: Front-end output. */
-			$title = sprintf( __( 'Tag: %s', 'autodescription' ), single_tag_title( '', false ) );
-		} elseif ( is_author() ) {
-			/* translators: Front-end output. */
-			$title = sprintf( __( 'Author: %s', 'autodescription' ), '<span class="vcard">' . get_the_author() . '</span>' );
-		} elseif ( is_year() ) {
-			/* translators: Front-end output. */
-			$title = sprintf( __( 'Year: %s', 'autodescription' ), get_the_date( _x( 'Y', 'yearly archives date format', 'autodescription' ) ) );
-		} elseif ( is_month() ) {
-			/* translators: Front-end output. */
-			$title = sprintf( __( 'Month: %s', 'autodescription' ), get_the_date( _x( 'F Y', 'monthly archives date format', 'autodescription' ) ) );
-		} elseif ( is_day() ) {
-			/* translators: Front-end output. */
-			$title = sprintf( __( 'Day: %s', 'autodescription' ), get_the_date( _x( 'F j, Y', 'daily archives date format', 'autodescription' ) ) );
-		} elseif ( is_tax( 'post_format' ) ) {
-			if ( is_tax( 'post_format', 'post-format-aside' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Asides', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-gallery' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Galleries', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-image' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Images', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-video' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Videos', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-quote' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Quotes', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-link' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Links', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-status' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Statuses', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-audio' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Audio', 'post format archive title', 'autodescription' );
-			} elseif ( is_tax( 'post_format', 'post-format-chat' ) ) {
-				/* translators: Front-end output. */
-				$title = _x( 'Chats', 'post format archive title', 'autodescription' );
-			}
-		} elseif ( is_post_type_archive() ) {
-			/* translators: Front-end output. */
-			$title = sprintf( __( 'Archives: %s' ), post_type_archive_title( '', false ) );
-		} elseif ( is_tax() ) {
-			$tax = get_taxonomy( get_queried_object()->taxonomy );
-			/* translators: Front-end output. 1: Taxonomy singular name, 2: Current taxonomy term */
-			$title = sprintf( __( '%1$s: %2$s', 'autodescription' ), $tax->labels->singular_name, single_term_title( '', false ) );
-		} else {
-			/* translators: Front-end output. */
-			$title = __( 'Archives', 'autodescription' );
-		}
-
-		/**
-		* Filter the archive title.
-		*
-		* @since 4.1.0
-		*
-		* @param string $title Archive title to be displayed.
-		*/
-		return apply_filters( 'get_the_archive_title', $title );
-	}
-
-	/**
-	 * Returns cached and parsed separator option.
-	 *
-	 * @param string $type The separator type. Used to fetch option.
-	 * @param bool $escape Escape the separator.
-	 *
-	 * @staticvar array $sepcache The separator cache.
-	 * @staticvar array $sep_esc The escaped separator cache.
-	 *
-	 * @since 2.3.9
-	 */
-	public function get_separator( $type = 'title', $escape = false ) {
-
-		static $sepcache = array();
-		static $sep_esc = array();
-
-		if ( isset( $sep_esc[$type][$escape] ) )
-			return $sep_esc[$type][$escape];
-
-		if ( ! isset( $sepcache[$type] ) ) {
-			if ( 'title' == $type ) {
-				$sep_option = $this->get_option( 'title_seperator' ); // Note: typo.
-			} else {
-				$sep_option = $this->get_option( $type . '_separator' );
-			}
-
-			if ( 'pipe' === $sep_option ) {
-				$sep = '|';
-			} else if ( 'dash' === $sep_option ) {
-				$sep = '-';
-			} else if ( ! empty( $sep_option ) ) {
-				//* Encapsulate within html entities.
-				$sep = '&' . $sep_option . ';';
-			} else {
-				//* Nothing found.
-				$sep = '|';
-			}
-
-			$sepcache[$type] = $sep;
-		}
-
-		if ( $escape ) {
-			return $sep_esc[$type][$escape] = esc_html( $sepcache[$type] );
-		} else {
-			return $sep_esc[$type][$escape] = $sepcache[$type];
-		}
-	}
-
-	/**
-	 * Fetch blogname
-	 *
-	 * @staticvar string $blogname
-	 *
-	 * @since 2.5.2
-	 * @return string $blogname The trimmed and sanitized blogname
-	 */
-	public function get_blogname() {
-
-		$blogname = null;
-
-		if ( isset( $blogname ) )
-			return $blogname;
-
-		return $blogname = trim( get_bloginfo( 'name', 'display' ) );
-	}
-
-	/**
-	 * Fetch blog description.
-	 *
-	 * @staticvar string $description
-	 *
-	 * @since 2.5.2
-	 * @return string $blogname The trimmed and sanitized blog description.
-	 */
-	public function get_blogdescription() {
-
-		$description = null;
-
-		if ( isset( $description ) )
-			return $description;
-
-		return $description = trim( get_bloginfo( 'description', 'display' ) );
-	}
-
-	/**
-	 * Matches WordPress locales.
-	 * If not matched, it will calculate a locale.
-	 *
-	 * @param $match the locale to match. Defaults to WordPress locale.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return string Facebook acceptable OG locale.
-	 */
-	public function fetch_locale( $match = '' ) {
-
-		if ( empty( $match ) )
-			$match = get_locale();
-
-		$match_len = strlen( $match );
-		$valid_locales = (array) $this->fb_locales();
-		$default = 'en_US';
-
-		if ( 5 === $match_len ) {
-			//* Full locale is used.
-
-			//* Return the match if found.
-			if ( $this->in_array( $match, $valid_locales ) )
-				return $match;
-
-			//* Convert to only language portion.
-			$match = substr( $match, 0, 2 );
-			$match_len = 2;
-		}
-
-		if ( 2 === $match_len ) {
-			//* Language key is provided.
-
-			$locale_keys = (array) $this->language_keys();
-
-			//* No need to do for each loop. Just match the keys.
-			if ( $key = array_search( $match, $locale_keys ) ) {
-				//* Fetch the corresponding value from key within the language array.
-				return $valid_locales[$key];
-			}
-		}
-
-		return $default;
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Generate
+ *
+ * Generates general SEO data based on content.
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_Generate extends AutoDescription_TermData {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Output the `index`, `follow`, `noodp`, `noydir`, `noarchive` robots meta code in array
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses genesis_get_seo_option()   Get SEO setting value.
+	 * @uses genesis_get_custom_field() Get custom field value.
+	 *
+	 * @global object $wp_query
+	 *
+	 * @return array|null robots
+	 */
+	public function robots_meta() {
+
+		//* Defaults
+		$meta = array(
+			'noindex'   => $this->get_option( 'site_noindex' ) ? 'noindex' : '',
+			'nofollow'  => $this->get_option( 'site_nofollow' ) ? 'nofollow' : '',
+			'noarchive' => $this->get_option( 'site_noarchive' ) ? 'noarchive' : '',
+			'noodp'     => $this->get_option( 'noodp' ) ? 'noodp' : '',
+			'noydir'    => $this->get_option( 'noydir' ) ? 'noydir' : '',
+		);
+
+		/**
+		 * Check the Robots SEO settings, set noindex for paged archives.
+		 * @since 2.2.4
+		 */
+		if ( $this->is_archive() && $this->paged() > 1 )
+			$meta['noindex'] = $this->get_option( 'paged_noindex' ) ? 'noindex' : $meta['noindex'];
+
+		if ( $this->is_front_page() && ( $this->page() > 1 || $this->paged() > 1 ) )
+			$meta['noindex'] = $this->get_option( 'home_paged_noindex' ) ? 'noindex' : $meta['noindex'];
+
+		//* Check home page SEO settings, set noindex, nofollow and noarchive
+		if ( $this->is_front_page() ) {
+			$meta['noindex']   = empty( $meta['noindex'] ) && $this->is_option_checked( 'homepage_noindex' ) ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->is_option_checked( 'homepage_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->is_option_checked( 'homepage_noarchive' ) ? 'noarchive' : $meta['noarchive'];
+		} else {
+			global $wp_query;
+
+			/**
+			 * Check if archive is empty, set noindex for those.
+			 * @since 2.2.8
+			 *
+			 * @todo maybe create option
+			 * @priority so low... 3.0.0+
+			 */
+			if ( isset( $wp_query->post_count ) && 0 === $wp_query->post_count )
+				$meta['noindex'] = 'noindex';
+		}
+
+		if ( $this->is_category() || $this->is_tag() ) {
+			$term = get_queried_object();
+
+			$meta['noindex']   = empty( $meta['noindex'] ) && $term->admeta['noindex'] ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $term->admeta['nofollow'] ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $term->admeta['noarchive'] ? 'noarchive' : $meta['noarchive'];
+
+			if ( $this->is_category() ) {
+				$meta['noindex']   = empty( $meta['noindex'] ) && $this->is_option_checked( 'category_noindex' ) ? 'noindex' : $meta['noindex'];
+				$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->is_option_checked( 'category_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+				$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->is_option_checked( 'category_noindex' ) ? 'noarchive' : $meta['noarchive'];
+			} else if ( $this->is_tag() ) {
+				$meta['noindex']   = empty( $meta['noindex'] ) && $this->is_option_checked( 'tag_noindex' ) ? 'noindex' : $meta['noindex'];
+				$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->is_option_checked( 'tag_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+				$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->is_option_checked( 'tag_noindex' ) ? 'noarchive' : $meta['noarchive'];
+			}
+
+			$flag = '0' !== $term->admeta['saved_flag'] ? true : false;
+
+			if ( false === $flag && isset( $term->meta ) ) {
+				//* Genesis support.
+				$meta['noindex']   = empty( $meta['noindex'] ) && $term->meta['noindex'] ? 'noindex' : $meta['noindex'];
+				$meta['nofollow']  = empty( $meta['nofollow'] ) && $term->meta['nofollow'] ? 'nofollow' : $meta['nofollow'];
+				$meta['noarchive'] = empty( $meta['noarchive'] ) && $term->meta['noarchive'] ? 'noarchive' : $meta['noarchive'];
+			}
+		}
+
+		// Is custom Taxonomy page. But not a category or tag. Should've recieved specific term SEO settings.
+		if ( $this->is_tax() ) {
+			$term = get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) );
+
+			$meta['noindex']   = empty( $meta['noindex'] ) && $term->admeta['noindex'] ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $term->admeta['nofollow'] ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $term->admeta['noarchive'] ? 'noarchive' : $meta['noarchive'];
+		}
+
+		if ( $this->is_author() ) {
+			// $author_id = (int) get_query_var( 'author' );
+
+			/**
+			 * @todo
+			 * @priority high 2.6.x
+			 */
+			// $meta['noindex']   = empty( $meta['noindex'] ) && get_the_author_meta( 'noindex', $author_id ) ? 'noindex' : $meta['noindex'];
+			// $meta['nofollow']  = empty( $meta['nofollow'] ) && get_the_author_meta( 'nofollow', $author_id ) ? 'nofollow' : $meta['nofollow'];
+			// $meta['noarchive'] = empty( $meta['noarchive'] ) && get_the_author_meta( 'noarchive', $author_id ) ? 'noarchive' : $meta['noarchive'];
+
+			$meta['noindex']   = empty( $meta['noindex'] ) && $this->is_option_checked( 'author_noindex' ) ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->is_option_checked( 'author_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->is_option_checked( 'author_noarchive' ) ? 'noarchive' : $meta['noarchive'];
+		}
+
+		if ( $this->is_date() ) {
+			$meta['noindex']   = empty( $meta['noindex'] ) && $this->is_option_checked( 'date_noindex' ) ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->is_option_checked( 'date_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->is_option_checked( 'date_noarchive' ) ? 'noarchive' : $meta['noarchive'];
+		}
+
+		if ( $this->is_search() ) {
+			$meta['noindex']   = empty( $meta['noindex'] ) && $this->is_option_checked( 'search_noindex' ) ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->is_option_checked( 'search_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->is_option_checked( 'search_noarchive' ) ? 'noarchive' : $meta['noarchive'];
+		}
+
+		if ( $this->is_attachment() ) {
+			$meta['noindex']   = empty( $meta['noindex'] ) && $this->is_option_checked( 'attachment_noindex' ) ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->is_option_checked( 'attachment_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->is_option_checked( 'attachment_noarchive' ) ? 'noarchive' : $meta['noarchive'];
+		}
+
+		if ( $this->is_singular() ) {
+			$meta['noindex']   = empty( $meta['noindex'] ) && $this->get_custom_field( '_genesis_noindex' ) ? 'noindex' : $meta['noindex'];
+			$meta['nofollow']  = empty( $meta['nofollow'] ) && $this->get_custom_field( '_genesis_nofollow' ) ? 'nofollow' : $meta['nofollow'];
+			$meta['noarchive'] = empty( $meta['noarchive'] ) && $this->get_custom_field( '_genesis_noarchive' ) ? 'noarchive' : $meta['noarchive'];
+		}
+
+		/**
+		 * Applies filters the_seo_framework_robots_meta_array : array
+		 * @since 2.6.0
+		 */
+		$meta = (array) apply_filters( 'the_seo_framework_robots_meta_array', $meta );
+
+		//* Strip empty array items
+		$meta = array_filter( $meta );
+
+		return $meta;
+	}
+
+	/**
+	 * Returns cached and parsed separator option.
+	 *
+	 * @param string $type The separator type. Used to fetch option.
+	 * @param bool $escape Escape the separator.
+	 *
+	 * @staticvar array $sepcache The separator cache.
+	 * @staticvar array $sep_esc The escaped separator cache.
+	 *
+	 * @since 2.3.9
+	 */
+	public function get_separator( $type = 'title', $escape = false ) {
+
+		static $sepcache = array();
+		static $sep_esc = array();
+
+		if ( isset( $sep_esc[$type][$escape] ) )
+			return $sep_esc[$type][$escape];
+
+		if ( ! isset( $sepcache[$type] ) ) {
+			if ( 'title' === $type ) {
+				$sep_option = $this->get_option( 'title_seperator' ); // Note: typo.
+			} else {
+				$sep_option = $this->get_option( $type . '_separator' );
+			}
+
+			if ( 'pipe' === $sep_option ) {
+				$sep = '|';
+			} else if ( 'dash' === $sep_option ) {
+				$sep = '-';
+			} else if ( '' !== $sep_option ) {
+				//* Encapsulate within html entities.
+				$sep = '&' . $sep_option . ';';
+			} else {
+				//* Nothing found.
+				$sep = '|';
+			}
+
+			$sepcache[$type] = $sep;
+		}
+
+		if ( $escape ) {
+			return $sep_esc[$type][$escape] = esc_html( $sepcache[$type] );
+		} else {
+			return $sep_esc[$type][$escape] = $sepcache[$type];
+		}
+	}
+
+	/**
+	 * Fetch blogname
+	 *
+	 * @staticvar string $blogname
+	 *
+	 * @since 2.5.2
+	 * @return string $blogname The trimmed and sanitized blogname
+	 */
+	public function get_blogname() {
+
+		static $blogname = null;
+
+		if ( isset( $blogname ) )
+			return $blogname;
+
+		return $blogname = trim( get_bloginfo( 'name', 'display' ) );
+	}
+
+	/**
+	 * Fetch blog description.
+	 *
+	 * @staticvar string $description
+	 *
+	 * @since 2.5.2
+	 * @return string $blogname The trimmed and sanitized blog description.
+	 */
+	public function get_blogdescription() {
+
+		static $description = null;
+
+		if ( isset( $description ) )
+			return $description;
+
+		$description = trim( get_bloginfo( 'description', 'display' ) );
+
+		return $description = $description ? $description : $this->untitled();
+	}
+
+	/**
+	 * Matches WordPress locales.
+	 * If not matched, it will calculate a locale.
+	 *
+	 * @param $match the locale to match. Defaults to WordPress locale.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return string Facebook acceptable OG locale.
+	 */
+	public function fetch_locale( $match = '' ) {
+
+		if ( empty( $match ) )
+			$match = get_locale();
+
+		$match_len = strlen( $match );
+		$valid_locales = (array) $this->fb_locales();
+		$default = 'en_US';
+
+		if ( $match_len > 5 ) {
+			//* More than full is used. Make it just full.
+			$match = substr( $match, 0, 5 );
+			$match_len = 5;
+		}
+
+		if ( 5 === $match_len ) {
+			//* Full locale is used.
+
+			//* Return the match if found.
+			if ( in_array( $match, $valid_locales ) )
+				return $match;
+
+			//* Convert to only language portion.
+			$match = substr( $match, 0, 2 );
+			$match_len = 2;
+		}
+
+		if ( 2 === $match_len ) {
+			//* Language key is provided.
+
+			$locale_keys = (array) $this->language_keys();
+
+			//* No need to do for each loop. Just match the keys.
+			if ( $key = array_search( $match, $locale_keys ) ) {
+				//* Fetch the corresponding value from key within the language array.
+				return $valid_locales[$key];
+			}
+		}
+
+		return $default;
+	}
+
+}
Index: inc/classes/init.class.php
===================================================================
--- inc/classes/init.class.php	(revision 1413572)
+++ inc/classes/init.class.php	(working copy)
@@ -1,487 +1,412 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Init
- *
- * Initializes the plugin
- * Outputs all data in front-end header
- *
- * @since 2.1.6
- */
-class AutoDescription_Init {
-
-	/**
-	 * Allow object caching through a filter.
-	 *
-	 * @since 2.4.3
-	 *
-	 * @var bool Enable object caching.
-	 */
-	protected $use_object_cache = true;
-
-	/**
-	 * Constructor. Init actions.
-	 *
-	 * @since 2.1.6
-	 */
-	public function __construct() {
-
-		add_action( 'init', array( $this, 'autodescription_run' ), 1 );
-		add_action( 'template_redirect', array( $this, 'custom_field_redirect') );
-
-		/**
-		 * Applies filters : the_seo_framework_use_object_cache
-		 *
-		 * @since 2.4.3
-		 */
-		$this->use_object_cache = (bool) apply_filters( 'the_seo_framework_use_object_cache', true );
-
-	}
-
-	/**
-	 * Run the plugin
-	 *
-	 * @since 1.0.0
-	 */
-	public function autodescription_run() {
-
-		/**
-		 * Don't run in admin.
-		 * Don't do anything on preview either.
-		 * @since 2.2.4
-		 */
-		if ( is_admin() || is_preview() )
-			return;
-
-		$this->init_actions();
-		$this->init_filters();
-	}
-
-	/**
-	 * Initialize front-end actions.
-	 *
-	 * @since 2.5.2
-	 */
-	protected function init_actions() {
-
-		//* Remove canonical header tag from WP
-		remove_action( 'wp_head', 'rel_canonical' );
-		//* Remove shortlink.
-		remove_action( 'wp_head', 'wp_shortlink_wp_head' );
-		//* Remove adjecent rel tags.
-		remove_action( 'wp_head', 'adjacent_posts_rel_link_wp_head' );
-		//* Earlier removal of the generator tag. Doesn't require filter.
-		remove_action( 'wp_head', 'wp_generator' );
-
-		if ( $this->is_theme( 'genesis', false ) ) {
-			add_action( 'genesis_meta', array( $this, 'html_output' ), 5 );
-		} else {
-			add_action( 'wp_head', array( $this, 'html_output' ), 1 );
-		}
-	}
-
-	/**
-	 * Initialize front-end filters.
-	 *
-	 * @since 2.5.2
-	 */
-	protected function init_filters() {
-
-		//* Removes all pre_get_document_title filters.
-		remove_all_filters( 'pre_get_document_title', false );
-
-		//* New WordPress 4.4.0 filter. Hurray! It's also much faster :)
-		add_filter( 'pre_get_document_title', array( $this, 'title_from_cache' ), 10 );
-		//* Override AnsPress Theme Title
-		add_filter( 'ap_title', array( $this, 'title_from_cache' ), 99, 1 );
-		//* Override bbPress title
-		add_filter( 'bbp_title', array( $this, 'title_from_cache' ), 99, 3 );
-		//* Override Woo Themes Title
-		add_filter( 'woo_title', array( $this, 'title_from_cache'), 99 );
-
-		/**
-		 * Disables the title tag manipulation on old themes.
-		 * Applies filters the_seo_framework_manipulate_title
-		 *
-		 * @since 2.4.1
-		 */
-		if ( (bool) apply_filters( 'the_seo_framework_manipulate_title', true ) ) {
-			//* Override WordPress Title
-			add_filter( 'wp_title', array( $this, 'title_from_cache' ), 9, 3 );
-		}
-	}
-
-	/**
-	 * Header actions.
-	 *
-	 * @uses The_SEO_Framework_Load::call_function()
-	 *
-	 * @param string|array $args the arguments that will be passed
-	 * @param bool $before if the header actions should be before or after the SEO Frameworks output
-	 *
-	 * @since 2.2.6
-	 *
-	 * @return string|null
-	 */
-	public function header_actions( $args = '', $before = true ) {
-
-		$output = '';
-
-		//* Placeholder callback and args.
-		$functions = array();
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$filter_tag = $before ? 'the_seo_framework_before_output' : 'the_seo_framework_after_output';
-		$filter = (array) apply_filters( $filter_tag, $functions );
-
-		$functions = wp_parse_args( $args, $filter );
-
-		if ( ! empty( $functions ) && is_array( $functions ) ) {
-			foreach ( $functions as $function ) {
-				$arguments = isset( $function['args'] ) ? $function['args'] : '';
-
-				if ( isset( $function['callback'] ) )
-					$output .= $this->call_function( $function['callback'], '2.2.6', $arguments );
-
-			}
-		}
-
-		return $output;
-	}
-
-	/**
-	 * Output the header meta and script
-	 *
-	 * @since 1.0.0
-	 *
-	 * @param blog_id : the blog id
-	 *
-	 * Applies filters the_seo_framework_pre 	: Adds content before
-	 * 											: @param before
-	 *											: cached
-	 * Applies filters the_seo_framework_pro 	: Adds content after
-	 *											: @param after
-	 *											: cached
-	 * Applies filters the_seo_framework_indicator : True to show indicator in html
-	 *
-	 * @uses hmpl_ad_description()
-	 * @uses $this->og_image()
-	 * @uses $this->og_locale()
-	 * @uses $this->og_type()
-	 * @uses $this->og_title()
-	 * @uses $this->og_description()
-	 * @uses $this->og_url()
-	 * @uses $this->og_sitename()
-	 * @uses $this->ld_json()
-	 * @uses $this->canonical()
-	 *
-	 * Echos output.
-	 */
-	public function html_output() {
-		global $blog_id;
-
-		/**
-		 * Start the timer here. I know it doesn't calculate the initiation of
-		 * the plugin, but it will make the code smelly if I were to do so.
-		 * A static array cache counter function would make it possible, but meh.
-		 * This function takes the most time anyway.
-		 */
-		$plugin_start = microtime( true );
-
-		/**
-		 * Cache key buster
-		 * Hexadecimal revision, e.g. 0, 1, 2, e, f,
-		 *
-		 * @busted to '2' @version 2.5.2.1
-		 */
-		$revision = '2';
-		$the_id = $this->get_the_real_ID();
-		$key = $this->generate_cache_key( $the_id ) . $revision;
-
-		/**
-		 * Give each paged pages/archives a different cache key.
-		 * @since 2.2.6
-		 */
-		$page = (string) $this->page();
-		$paged = (string) $this->paged();
-
-		$cache_key = 'seo_framework_output_' . $key . '_' . $paged . '_' . $page;
-
-		$output = $this->object_cache_get( $cache_key );
-		if ( false === $output ) {
-
-			$robots = $this->robots();
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$before = (string) apply_filters( 'the_seo_framework_pre', '' );
-
-			$before_actions = $this->header_actions( '', true );
-
-			//* Limit processing on 404 or search
-			if ( ! is_404() && ! is_search() ) {
-				$output	= $this->the_description()
-						. $this->og_image()
-						. $this->og_locale()
-						. $this->og_type()
-						. $this->og_title()
-						. $this->og_description()
-						. $this->og_url()
-						. $this->og_sitename()
-						. $this->facebook_publisher()
-						. $this->facebook_author()
-						. $this->facebook_app_id()
-						. $this->article_published_time()
-						. $this->article_modified_time()
-						. $this->twitter_card()
-						. $this->twitter_site()
-						. $this->twitter_creator()
-						. $this->twitter_title()
-						. $this->twitter_description()
-						. $this->twitter_image()
-						. $this->shortlink()
-						. $this->canonical()
-						. $this->paged_urls()
-						. $this->ld_json()
-						. $this->google_site_output()
-						. $this->bing_site_output()
-						. $this->pint_site_output()
-						;
-			} else {
-				$output	= $this->og_locale()
-						. $this->og_type()
-						. $this->og_title()
-						. $this->og_url()
-						. $this->og_sitename()
-						. $this->canonical()
-						. $this->google_site_output()
-						. $this->bing_site_output()
-						. $this->pint_site_output()
-						;
-			}
-
-			$after_actions = $this->header_actions( '', false );
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$after = (string) apply_filters( 'the_seo_framework_pro', '' );
-
-			/**
-			 * @see https://wordpress.org/plugins/generator-the-seo-framework/
-			 *
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$generator = (string) apply_filters( 'the_seo_framework_generator_tag', '' );
-
-			if ( '' !== $generator )
-				$generator = '<meta name="generator" content="' . esc_attr( $generator ) . '" />' . "\r\n";
-
-			$output = $robots . $before . $before_actions . $output . $after_actions . $after . $generator;
-
-			$this->object_cache_set( $cache_key, $output, 86400 );
-		}
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$indicator = (bool) apply_filters( 'the_seo_framework_indicator', true );
-
-		$indicatorbefore = '';
-		$indicatorafter = '';
-
-		if ( true === $indicator ) {
-			$timer = (bool) apply_filters( 'the_seo_framework_indicator_timing', true );
-			$sybre = (bool) apply_filters( 'sybre_waaijer_<3', true );
-
-			$start = __( 'Start The Seo Framework', 'autodescription' );
-			$end = __( 'End The Seo Framework', 'autodescription' );
-			$me =  $sybre ? ' ' . __( 'by Sybre Waaijer', 'autodescription' ) : '';
-
-			$indicatorbefore = '<!-- ' . $start . $me . ' -->' . "\r\n";
-
-			/**
-			 * Calculate the plugin load time.
-			 * @since 2.4.0
-			 */
-			if ( true === $timer ) {
-				$indicatorafter = '<!-- ' . $end . $me . ' | ' . number_format( microtime( true ) - $plugin_start, 5 ) . 's -->' . "\r\n";
-			} else {
-				$indicatorafter = '<!-- ' . $end . $me . ' -->' . "\r\n";
-			}
-		}
-
-		$output = "\r\n" . $indicatorbefore . $output . $indicatorafter . "\r\n";
-
-		echo $output;
-	}
-
-	/**
-	 * Redirect singular page to an alternate URL.
-	 * Called outside html_output
-	 *
-	 * Applies filters the_seo_framework_allow_external_redirect
-	 *
-	 * @since 2.0.9
-	 */
-	public function custom_field_redirect() {
-
-		//* Prevent redirect from options on uneditable pages.
-		if ( ! $this->is_singular() )
-			return;
-
-		$url = $this->get_custom_field( 'redirect' );
-
-		if ( $url ) {
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$allow_external = (bool) apply_filters( 'the_seo_framework_allow_external_redirect', true );
-
-			/**
-			 * If the URL is made relative, prevent scheme issues
-			 *
-			 * Removes http:// and https://
-			 *
-			 * esc_url_raw uses is_ssl() to make the url valid again :)
-			 */
-			if ( true !== $allow_external ) {
-				$pattern 	= 	'/'
-							.	'(((http)(s)?)\:)' 	// 1: http: https:
-							. 	'(\/\/)'			// 2: slash slash
-							.	'/s'
-							;
-
-				$url = preg_replace( $pattern, '', $url );
-			}
-
-			wp_redirect( esc_url_raw( $url ), 301 );
-			exit;
-
-		}
-
-	}
-
-	/**
-	 * Object cache set wrapper.
-	 * Applies filters 'the_seo_framework_use_object_cache' : Disable object
-	 * caching for this plugin, when applicable.
-	 *
-	 * @param string $key The Object cache key.
-	 * @param mixed $data The Object cache data.
-	 * @param int $expire The Object cache expire time.
-	 * @param string $group The Object cache group.
-	 *
-	 * @since 2.4.3
-	 *
-	 * @return bool true on set, false when disabled.
-	 */
-	public function object_cache_set( $key, $data, $expire = 0, $group = 'the_seo_framework' ) {
-
-		if ( $this->use_object_cache )
-			return wp_cache_set( $key, $data, $group, $expire );
-
-		return false;
-	}
-
-	/**
-	 * Object cache get wrapper.
-	 * Applies filters 'the_seo_framework_use_object_cache' : Disable object
-	 * caching for this plugin, when applicable.
-	 *
-	 * @param string $key The Object cache key.
-	 * @param string $group The Object cache group.
-	 * @param bool $force Wether to force an update of the local cache.
-	 * @param bool $found Wether the key was found in the cache. Disambiguates a return of false, a storable value.
-	 *
-	 * @since 2.4.3
-	 *
-	 * @return mixed wp_cache_get if object caching is allowed. False otherwise.
-	 */
-	public function object_cache_get( $key, $group = 'the_seo_framework', $force = false, &$found = null ) {
-
-		if ( $this->use_object_cache )
-			return wp_cache_get( $key, $group, $force, $found );
-
-		return false;
-	}
-
-	/**
-	 * Well, this is annoying.
-	 *
-	 * @since 2.4.2
-	 * @return something that will make your head explode.
-	 */
-	public function explode() {
-		add_action( 'wp_head', array( $this, 'roll' ) );
-
-		/* the code to run this :
-		add_action( 'init', 'tsf_explode' );
-		function tsf_explode() {
-			if ( function_exists( 'the_seo_framework' ) ) {
-				$the_seo_framework = the_seo_framework();
-				if (isset( $the_seo_framework ) )
-					$the_seo_framework->call_function( array( $the_seo_framework, 'explode' ) );
-			}
-		}
-		*/
-	}
-
-	/**
-	 * Header CSS
-	 *
-	 * @since 2.5.2
-	 * @return annoying front-end CSS.
-	 */
-	public function roll() {
-		?>
-		<style>div:hover>div{-webkit-animation:troll 5s infinite cubic-bezier(0,1.5,.5,1)1s;animation:troll 5s infinite cubic-bezier(0,1.5,.5,1)1s}@-webkit-keyframes troll{100%{-webkit-transform:rotate(0)}75%{-webkit-transform:rotate(30deg)}25%{-webkit-transorm:rotate(0)}0%{-webkit-transorm:rotate(30deg)}}@keyframes troll{100%,25%{transform:rotate(0)}0%,75%{transform:rotate(30deg)}}#container:hover,.site-container:hover{-webkit-animation:none;animation:none}</style>
-		<?php
-		echo "\r\n";
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Init
+ *
+ * Outputs all data in front-end header
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_Init extends AutoDescription_Query {
+
+	/**
+	 * Allow object caching through a filter.
+	 *
+	 * @since 2.4.3
+	 *
+	 * @var bool Enable object caching.
+	 */
+	protected $use_object_cache = true;
+
+	/**
+	 * Constructor. Init actions.
+	 *
+	 * @since 2.1.6
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		add_action( 'init', array( $this, 'autodescription_run' ), 1 );
+		add_action( 'template_redirect', array( $this, 'custom_field_redirect') );
+
+		/**
+		 * Applies filters : the_seo_framework_use_object_cache
+		 *
+		 * @since 2.4.3
+		 */
+		$this->use_object_cache = (bool) apply_filters( 'the_seo_framework_use_object_cache', true );
+
+	}
+
+	/**
+	 * Run the plugin
+	 *
+	 * @since 1.0.0
+	 */
+	public function autodescription_run() {
+
+		/**
+		 * Don't run in admin.
+		 * Don't do anything on preview either.
+		 * @since 2.2.4
+		 */
+		if ( $this->is_admin() || $this->is_preview() )
+			return;
+
+		$this->init_actions();
+		$this->init_filters();
+
+	}
+
+	/**
+	 * Initialize front-end actions.
+	 *
+	 * @since 2.5.2
+	 */
+	protected function init_actions() {
+
+		//* Remove canonical header tag from WP
+		remove_action( 'wp_head', 'rel_canonical' );
+		//* Remove shortlink.
+		remove_action( 'wp_head', 'wp_shortlink_wp_head' );
+		//* Remove adjecent rel tags.
+		remove_action( 'wp_head', 'adjacent_posts_rel_link_wp_head' );
+		//* Earlier removal of the generator tag. Doesn't require filter.
+		remove_action( 'wp_head', 'wp_generator' );
+
+		if ( $this->is_theme( 'genesis', false ) ) {
+			add_action( 'genesis_meta', array( $this, 'html_output' ), 5 );
+		} else {
+			add_action( 'wp_head', array( $this, 'html_output' ), 1 );
+		}
+
+	}
+
+	/**
+	 * Initialize front-end filters.
+	 *
+	 * @since 2.5.2
+	 */
+	protected function init_filters() {
+
+		//* Removes all pre_get_document_title filters.
+		remove_all_filters( 'pre_get_document_title', false );
+
+		//* New WordPress 4.4.0 filter. Hurray! It's also much faster :)
+		add_filter( 'pre_get_document_title', array( $this, 'title_from_cache' ), 10 );
+		//* Override AnsPress Theme Title
+		add_filter( 'ap_title', array( $this, 'title_from_cache' ), 99, 1 );
+		//* Override bbPress title
+		add_filter( 'bbp_title', array( $this, 'title_from_cache' ), 99, 3 );
+		//* Override Woo Themes Title
+		add_filter( 'woo_title', array( $this, 'title_from_cache'), 99 );
+
+		/**
+		 * Disables the title tag manipulation on old themes.
+		 * Applies filters the_seo_framework_manipulate_title
+		 *
+		 * @since 2.4.1
+		 */
+		if ( (bool) apply_filters( 'the_seo_framework_manipulate_title', true ) ) {
+			//* Override WordPress Title
+			add_filter( 'wp_title', array( $this, 'title_from_cache' ), 9, 3 );
+		}
+
+	}
+
+	/**
+	 * Header actions.
+	 *
+	 * @uses The_SEO_Framework_Load::call_function()
+	 *
+	 * @param string|array $args the arguments that will be passed
+	 * @param bool $before if the header actions should be before or after the SEO Frameworks output
+	 *
+	 * @since 2.2.6
+	 *
+	 * @return string|null
+	 */
+	public function header_actions( $args = '', $before = true ) {
+
+		$output = '';
+
+		//* Placeholder callback and args.
+		$functions = array();
+
+		/**
+		 * Applies filters 'the_seo_framework_before_output' : array after functions output
+		 * Applies filters 'the_seo_framework_after_output' : array after functions output
+		 */
+		$filter_tag = $before ? 'the_seo_framework_before_output' : 'the_seo_framework_after_output';
+		$filter = (array) apply_filters( $filter_tag, $functions );
+
+		$functions = wp_parse_args( $args, $filter );
+
+		if ( $functions && is_array( $functions ) ) {
+			foreach ( $functions as $function ) {
+				$arguments = isset( $function['args'] ) ? $function['args'] : '';
+
+				if ( isset( $function['callback'] ) )
+					$output .= $this->call_function( $function['callback'], '2.2.6', $arguments );
+
+			}
+		}
+
+		return $output;
+	}
+
+	/**
+	 * Output the header meta and script
+	 *
+	 * @since 1.0.0
+	 *
+	 * @param blog_id : the blog id
+	 *
+	 * Applies filters the_seo_framework_pre 	: Adds content before
+	 * 											: @param before
+	 *											: cached
+	 * Applies filters the_seo_framework_pro 	: Adds content after
+	 *											: @param after
+	 *											: cached
+	 * Applies filters the_seo_framework_generator_tag : String generator tag content
+	 * Applies filters the_seo_framework_indicator : True to show indicator in html
+	 *
+	 * @uses hmpl_ad_description()
+	 * @uses $this->og_image()
+	 * @uses $this->og_locale()
+	 * @uses $this->og_type()
+	 * @uses $this->og_title()
+	 * @uses $this->og_description()
+	 * @uses $this->og_url()
+	 * @uses $this->og_sitename()
+	 * @uses $this->ld_json()
+	 * @uses $this->canonical()
+	 *
+	 * Echos output.
+	 */
+	public function html_output() {
+
+		do_action( 'the_seo_framework_do_before_output' );
+
+		/**
+		 * Start the timer here. I know it doesn't calculate the initiation of
+		 * the plugin, but it will make the code smelly if I were to do so.
+		 * A static array cache counter function would make it possible, but meh.
+		 * This function takes the most time anyway.
+		 */
+		$init_start = microtime( true );
+		$memory_start = $this->the_seo_framework_debug ? $this->profile( false, false, 'memory', 'html_output' ) : 0;
+
+		/**
+		 * Cache key buster
+		 * Hexadecimal revision, e.g. 0, 1, 2, e, f,
+		 *
+		 * @busted to '2' @version 2.5.2.1
+		 */
+		$revision = '2';
+		$the_id = $this->get_the_real_ID();
+		$key = $this->generate_cache_key( $the_id ) . $revision;
+
+		/**
+		 * Give each paged pages/archives a different cache key.
+		 * @since 2.2.6
+		 */
+		$page = (string) $this->page();
+		$paged = (string) $this->paged();
+
+		$cache_key = 'seo_framework_output_' . $key . '_' . $paged . '_' . $page;
+
+		$output = $this->object_cache_get( $cache_key );
+		if ( false === $output ) {
+
+			$robots = $this->robots();
+
+			$before = (string) apply_filters( 'the_seo_framework_pre', '' );
+
+			$before_actions = $this->header_actions( '', true );
+
+			//* Limit processing on 404 or search
+			if ( $this->is_404() || $this->is_search() ) {
+				$output	= $this->og_locale()
+						. $this->og_type()
+						. $this->og_title()
+						. $this->og_url()
+						. $this->og_sitename()
+						. $this->google_site_output()
+						. $this->bing_site_output()
+						. $this->yandex_site_output()
+						. $this->pint_site_output()
+						;
+			} else {
+				$output	= $this->the_description()
+						. $this->og_image()
+						. $this->og_locale()
+						. $this->og_type()
+						. $this->og_title()
+						. $this->og_description()
+						. $this->og_url()
+						. $this->og_sitename()
+						. $this->facebook_publisher()
+						. $this->facebook_author()
+						. $this->facebook_app_id()
+						. $this->article_published_time()
+						. $this->article_modified_time()
+						. $this->twitter_card()
+						. $this->twitter_site()
+						. $this->twitter_creator()
+						. $this->twitter_title()
+						. $this->twitter_description()
+						. $this->twitter_image()
+						. $this->shortlink()
+						. $this->canonical()
+						. $this->paged_urls()
+						. $this->ld_json()
+						. $this->google_site_output()
+						. $this->bing_site_output()
+						. $this->yandex_site_output()
+						. $this->pint_site_output()
+						;
+			}
+
+			$after_actions = $this->header_actions( '', false );
+
+			$after = (string) apply_filters( 'the_seo_framework_pro', '' );
+
+			/**
+			 * @see https://wordpress.org/plugins/generator-the-seo-framework/
+			 */
+			$generator = (string) apply_filters( 'the_seo_framework_generator_tag', '' );
+
+			if ( '' !== $generator )
+				$generator = '<meta name="generator" content="' . esc_attr( $generator ) . '" />' . "\r\n";
+
+			$output = $robots . $before . $before_actions . $output . $after_actions . $after . $generator;
+
+			$this->object_cache_set( $cache_key, $output, 86400 );
+		}
+
+		$indicator = (bool) apply_filters( 'the_seo_framework_indicator', true );
+
+		$indicatorbefore = '';
+		$indicatorafter = '';
+
+		if ( $indicator ) {
+			$timer = (bool) apply_filters( 'the_seo_framework_indicator_timing', true );
+			$sybre = (bool) apply_filters( 'sybre_waaijer_<3', true );
+
+			$start = __( 'Start The Seo Framework', 'autodescription' );
+			$end = __( 'End The Seo Framework', 'autodescription' );
+			$me =  $sybre ? ' ' . __( 'by Sybre Waaijer', 'autodescription' ) : '';
+
+			$indicatorbefore = '<!-- ' . $start . $me . ' -->' . "\r\n";
+
+			/**
+			 * Calculate the plugin load time.
+			 * @since 2.4.0
+			 */
+			if ( $timer ) {
+				$memory = $this->the_seo_framework_debug ? ' | ' . number_format( $this->profile( false, true, 'memory', 'html_output' ) / 1024, 2 ) . ' kiB' : '';
+				$indicatorafter = '<!-- ' . $end . $me . ' | ' . number_format( microtime( true ) - $init_start, 5 ) . 's' . $memory . ' -->' . "\r\n";
+			} else {
+				$indicatorafter = '<!-- ' . $end . $me . ' -->' . "\r\n";
+			}
+		}
+
+		$output = "\r\n" . $indicatorbefore . $output . $indicatorafter . "\r\n";
+
+		do_action( 'the_seo_framework_do_after_output' );
+
+		echo $output;
+	}
+
+	/**
+	 * Redirect singular page to an alternate URL.
+	 * Called outside html_output
+	 *
+	 * @since 2.0.9
+	 */
+	public function custom_field_redirect() {
+
+		//* Prevent redirect from options on uneditable pages.
+		if ( ! $this->is_singular() )
+			return;
+
+		$url = $this->get_custom_field( 'redirect' );
+
+		if ( $url ) {
+
+			$allow_external = $this->allow_external_redirect();
+
+			/**
+			 * If the URL is made relative, prevent scheme issues
+			 *
+			 * Removes http:// and https://
+			 *
+			 * esc_url_raw uses is_ssl() to make the url valid again :)
+			 */
+			if ( true !== $allow_external ) {
+				$pattern 	= 	'/'
+							.	'(((http)(s)?)\:)' 	// 1: http: https:
+							. 	'(\/\/)'			// 2: slash slash
+							.	'/s'
+							;
+
+				$url = preg_replace( $pattern, '', $url );
+			}
+
+			wp_redirect( esc_url_raw( $url ), 301 );
+			exit;
+		}
+
+	}
+
+	/**
+	 * Well, this is annoying.
+	 *
+	 * @since 2.4.2
+	 * @return something that will make your head explode.
+	 */
+	public function explode() {
+		add_action( 'wp_head', array( $this, 'roll' ) );
+
+		/* the code to run this :
+		add_action( 'init', 'tsf_explode' );
+		function tsf_explode() {
+			if ( function_exists( 'the_seo_framework' ) ) {
+				$the_seo_framework = the_seo_framework();
+				if ( isset( $the_seo_framework ) )
+					$the_seo_framework->explode();
+			}
+		}
+		*/
+	}
+
+	/**
+	 * After using explosions, you tend to roll away.
+	 *
+	 * @since 2.5.2
+	 */
+	public function roll() {
+		?>
+		<style>div:hover>div{-webkit-animation:troll 5s infinite cubic-bezier(0,1.5,.5,1)1s;animation:troll 5s infinite cubic-bezier(0,1.5,.5,1)1s}@-webkit-keyframes troll{100%{-webkit-transform:rotate(0)}75%{-webkit-transform:rotate(30deg)}25%{-webkit-transorm:rotate(0)}0%{-webkit-transorm:rotate(30deg)}}@keyframes troll{100%,25%{transform:rotate(0)}0%,75%{transform:rotate(30deg)}}#container:hover,.site-container:hover{-webkit-animation:none;animation:none}</style>
+		<?php
+		echo "\r\n";
+	}
+
+}
Index: inc/classes/inpost.class.php
===================================================================
--- inc/classes/inpost.class.php	(revision 1413572)
+++ inc/classes/inpost.class.php	(working copy)
@@ -1,670 +1,674 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Inpost
- *
- * Outputs Taxonomy, Post and Page meta boxes
- *
- * @since 2.2.2
- */
-class AutoDescription_Inpost extends AutoDescription_PageOptions {
-
-	/**
-	 * Add inpost SEO Bar through a filter.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @var bool|string Wether and where to show the inpost SEO bar.
-	 */
-	protected $inpost_seo_bar = false;
-
-	/**
-	 * Constructor, load parent constructor
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		//* Enqueue inpost meta boxes
-		add_action( 'add_meta_boxes', array( $this, 'add_inpost_seo_box_init' ), 5 );
-
-		//* Enqueue taxonomy meta boxes
-		add_action( 'admin_init', array( $this, 'add_taxonomy_seo_box_init' ), 9 );
-
-		/**
-		 * Applies filters bool|string the_seo_framework_inpost_seo_bar :
-		 * Wether to output the SEO bar within the inpost SEO Settings metabox.
-		 * @param 	: string 'above' Outputs it above the Settings
-		 * 			: string 'below' Outputs it below the Settings
-		 * 			: bool false No output.
-		 * @since 2.5.2
-		 */
-		$this->inpost_seo_bar = apply_filters( 'the_seo_framework_inpost_seo_bar', false );
-	}
-
-	/**
-	 * Render the SEO meta box
-	 *
-	 * Called outside autodescription_run
-	 *
-	 * Applies the_seo_framework_seobox_output filters. Return false to disable the meta boxes
-	 *
-	 * @since 2.0.0
-	 */
-	public function add_inpost_seo_box_init() {
-
-		if ( $this->detect_seo_plugins() )
-			return '';
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$show_seobox = (bool) apply_filters( 'the_seo_framework_seobox_output', true );
-
-		if ( $show_seobox )
-			add_action( 'add_meta_boxes', array( $this, 'add_inpost_seo_box' ), 10 );
-	}
-
-	/**
-	 * Adds SEO Meta boxes within Taxonomy screens
-	 *
-	 * @since 2.1.8
-	 *
-	 * @options Genesis : Merge these options with Genesis options. Prevents lost data.
-	 */
-	public function add_taxonomy_seo_box_init() {
-		// Add taxonomy meta boxes
-		foreach ( get_taxonomies( array( 'public' => true ) ) as $tax_name )
-			add_action( $tax_name . '_edit_form', array( &$this, 'pre_seo_box' ), 10, 2 );
-
-	}
-
-	/**
-	 * Adds SEO Meta boxes beneath every page/post edit screen
-	 *
-	 * High priority, this box is seen right below the post/page edit screen.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @options Genesis : Merge these options with Genesis options. Prevents lost data.
-	 *
-	 * Rewritten to reduce resource usage. It now supports not only set Posts
-	 * and Pages, but all kinds of types.
-	 * @since 2.3.5
-	 */
-	public function add_inpost_seo_box() {
-
-		/**
-		 * @uses $this->post_type_supports_custom_seo()
-		 * @since 2.3.9
-		 */
-		if ( $this->post_type_supports_custom_seo() ) {
-			global $current_screen;
-
-			$screen = $current_screen->post_type;
-
-			$object = get_post_type_object( $screen );
-
-			if ( is_object( $object ) ) {
-				$labels = isset( $object->labels ) ? $object->labels : '';
-
-				if ( ! empty( $labels ) ) {
-					$singular_name = isset( $labels->singular_name ) ? $labels->singular_name : $labels->name;
-
-					//* Title and type are used interchangeably.
-					$title = $type = $singular_name;
-
-					$args = array( $type, 'is_post_page' );
-
-					// Metabox HTML class/id
-					$id = 'theseoframework-inpost-box';
-
-					// Note: Pass on the object $this
-					add_meta_box( $id, sprintf( __( '%s SEO Settings', 'autodescription' ), $title ), array( &$this, 'pre_seo_box' ), $screen, 'normal', 'high', $args );
-				}
-			}
-		}
-
-	}
-
-	/**
-	 * Determines which arguments should be used
-	 *
-	 * @since 2.1.8
-	 *
-	 * @used by add_inpost_seo_box
-	 *
-	 * @param $object the page/post/taxonomy object
-	 * @param $args the page/post arguments or taxonomy slug
-	 */
-	public function pre_seo_box( $object, $args ) {
-
-		if ( is_array( $args ) && isset( $args['args'] ) ) {
-			$args_split = $args['args'];
-
-			$page = $args_split[1];
-
-			// Return $args as array on post/page
-			if ( $page === 'is_post_page') {
-				// Note: Passes through object.
-				return $this->inpost_seo_box( $object, (array) $args );
-			}
-		} else {
-			// Note: Passes through object.
-			// Empty the arguments, if any.
-			return $this->inpost_seo_box( $object, $args = '' );
-		}
-	}
-
-	/**
-	 * Callback for in-post SEO meta box.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @param array $post		The post object
-	 *
-	 * @param object $object 	the page/post/taxonomy object
-	 * @param array $args 		the page/post arguments or taxonomy slug
-	 *
-	 * @uses $this->get_custom_field() Get custom field value.
-	 *
-	 * Note: Passed through object $object by reference
-	 */
-	public function inpost_seo_box( &$object, $args ) {
-
-		//* Determines if it's inside a meta box or within a taxonomy page.
-		$nobox = false;
-
-		// Args are passed.
-		if ( is_array( $args ) && isset( $args['args'] ) ) {
-			$args_split = $args['args'];
-
-			//* The post type callback arg (translated)
-			$type = $args_split[0];
-			//* The kind of page we're on.
-			$page = $args_split[1];
-
-			// Only add nonce on post/page edit screen
-			if ( 'is_post_page' === $page ) {
-				wp_nonce_field( 'inpost_seo_save', 'hmpl_ad_inpost_seo_nonce' );
-			} else {
-				// This shouldn't happen.
-				return '';
-			}
-		} else {
-			$term = get_term_by( 'id', $object->term_id, $object->taxonomy, OBJECT );
-
-			if ( ! empty( $term ) && is_object( $term ) ) {
-				$tax_type = $term->taxonomy;
-
-				/**
-				 * Dynamically fetch the term name.
-				 *
-				 * @since 2.3.1
-				 */
-				$term_labels = $this->get_tax_labels( $tax_type );
-
-				if ( isset( $term_labels ) ) {
-					$type = isset( $term_labels->singular_name ) ? $term_labels->singular_name : null;
-					$type = ! isset( $type ) && isset( $term_labels->name ) ? $term_labels->name : $type;
-				}
-			}
-
-			if ( ! isset( $type ) ) {
-				// Fallback to Page as it is generic.
-				$type = __( 'Page', 'autodescription' );
-			}
-
-			$nobox = true;
-		}
-
-		if ( $nobox ) {
-			$this->tt_inpost_box( $type, $object );
-		} else {
-			$this->page_inpost_box( $type );
-		}
-
-	}
-
-	/**
-	 * Callback function for Taxonomy and Terms inpost box.
-	 *
-	 * @since 2.3.5
-	 *
-	 * @param string $type The TT type name.
-	 * @param object $object The TT object.
-	 */
-	public function tt_inpost_box( $type, $object ) {
-
-		do_action( 'the_seo_framework_pre_tt_inpost_box' );
-
-		//* Get the language the Google page should assume.
-		$language = $this->google_language();
-
-		$ad_doctitle = isset( $object->admeta['doctitle'] ) ? $object->admeta['doctitle'] : '';
-		$ad_description = isset( $object->admeta['description'] ) ? $object->admeta['description'] : '';
-		$ad_noindex = isset( $object->admeta['noindex'] ) ? $object->admeta['noindex'] : '';
-		$ad_nofollow = isset( $object->admeta['nofollow'] ) ? $object->admeta['nofollow'] : '';
-		$ad_noarchive = isset( $object->admeta['noarchive'] ) ? $object->admeta['noarchive'] : '';
-		$flag = isset( $object->admeta['saved_flag'] ) ? (bool) $object->admeta['saved_flag'] : false;
-
-		//* Genesis data fetch. This will override our options with Genesis options.
-		if ( ! $flag && isset( $object->meta ) ) {
-			if ( empty( $ad_doctitle ) && isset( $object->meta['doctitle'] ) )
-				$ad_doctitle = $object->meta['doctitle'];
-
-			if ( empty( $ad_description ) && isset( $object->meta['description'] ) )
-				$ad_description = $object->meta['description'];
-
-			if ( empty( $ad_noindex ) && isset( $object->meta['noindex'] ) )
-				$ad_noindex = $object->meta['noindex'];
-
-			if ( empty( $ad_nofollow ) && isset( $object->meta['nofollow'] ) )
-				$ad_nofollow = $object->meta['nofollow'];
-
-			if ( empty( $ad_noarchive ) && isset( $object->meta['noarchive'] ) )
-				$ad_noarchive = $object->meta['doctitle'];
-		}
-
-		//* Fetch Term ID and taxonomy.
-		$term_id = $object->term_id;
-		$taxonomy = $object->taxonomy;
-
-		$generated_doctitle_args = array(
-			'term_id' => $term_id,
-			'taxonomy' => $taxonomy,
-			'placeholder' => true,
-			'meta' => true,
-			'get_custom_field' => false
-		);
-
-		$generated_description_args = array(
-			'id' => $term_id,
-			'taxonomy' => $taxonomy
-		);
-
-		//* Generate title and description.
-		$generated_doctitle = $this->title( '', '', '', $generated_doctitle_args );
-		$generated_description = $this->generate_description_from_id( $generated_description_args );
-
-		/**
-		 * Calculate true Title length
-		 *
-		 * @since 2.2.4
-		 */
-		$blog_name = $this->get_blogname();
-
-		/**
-		 * Separator doesn't matter. Since html_entity_decode is used.
-		 * Order doesn't matter either. Since it's just used for length calculation.
-		 *
-		 * @since 2.3.4
-		 */
-		$ad_doctitle_len	= ! empty ( $ad_doctitle ) 		? $ad_doctitle . " | " . $blog_name : $generated_doctitle;
-		$ad_description_len = ! empty ( $ad_description )	? $ad_description : $generated_description;
-
-		/**
-		 * Convert to what Google outputs.
-		 *
-		 * This will convert e.g. &raquo; to a single length character.
-		 * @since 2.3.4
-		 */
-		$tit_len_parsed = html_entity_decode( $ad_doctitle_len );
-		$desc_len_parsed = html_entity_decode( $ad_description_len );
-
-		/**
-		 * Generate static placeholder for when title or description is emptied
-		 *
-		 * @since 2.2.4
-		 */
-		$doctitle_placeholder = $generated_doctitle;
-		$description_placeholder = $generated_description;
-
-		?>
-		<h3><?php printf( __( '%s SEO Settings', 'autodescription' ), $type ); ?></h3>
-
-		<table class="form-table">
-			<tbody>
-
-				<?php if ( 'above' === $this->inpost_seo_bar ) : ?>
-				<tr>
-					<th scope="row" valign="top"><?php _e( 'Doing it Right', 'autodescription' ); ?></th>
-					<td>
-						<?php echo $this->post_status( $term_id, $taxonomy, true ); ?>
-					</td>
-				</tr>
-				<?php endif; ?>
-
-				<tr class="form-field">
-					<th scope="row" valign="top">
-						<label for="autodescription-meta[doctitle]">
-							<strong><?php printf( __( '%s Title', 'autodescription' ), $type ); ?></strong>
-							<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#3" target="_blank" title="<?php _e( 'Recommended Length: 50 to 55 characters', 'autodescription' ) ?>">[?]</a>
-						</label>
-					</th>
-					<td>
-						<div id="autodescription-title-wrap">
-							<input name="autodescription-meta[doctitle]" id="autodescription-meta[doctitle]" type="text" placeholder="<?php echo $doctitle_placeholder ?>" value="<?php echo esc_attr( $ad_doctitle ); ?>" size="40" />
-							<span id="autodescription-title-offset" class="hide-if-no-js"></span><span id="autodescription-title-placeholder" class="hide-if-no-js"></span>
-						</div>
-						<p class="description"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription-meta[doctitle]_chars">'. mb_strlen( $tit_len_parsed ) .'</span>' ); ?></p>
-					</td>
-				</tr>
-
-				<tr class="form-field">
-					<th scope="row" valign="top">
-						<label for="autodescription-meta[description]">
-							<strong><?php printf( __( '%s Meta Description', 'autodescription' ), $type ); ?></strong>
-							<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#1" target="_blank" title="<?php _e( 'Recommended Length: 145 to 155 characters', 'autodescription' ) ?>">[?]</a>
-						</label>
-					</th>
-					<td>
-						<textarea name="autodescription-meta[description]" id="autodescription-meta[description]" placeholder="<?php echo $description_placeholder ?>" rows="5" cols="50" class="large-text"><?php echo esc_html( $ad_description ); ?></textarea>
-						<p class="description"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription-meta[description]_chars">'. mb_strlen( $desc_len_parsed ) .'</span>' ); ?></p>
-					</td>
-				</tr>
-
-				<tr>
-					<th scope="row" valign="top"><?php _e( 'Robots Meta Settings', 'autodescription' ); ?></th>
-					<td>
-						<label for="autodescription-meta[noindex]"><input name="autodescription-meta[noindex]" id="autodescription-meta[noindex]" type="checkbox" value="1" <?php checked( $ad_noindex ); ?> />
-							<?php printf( __( 'Apply %s to this %s', 'autodescription' ), $this->code_wrap( 'noindex' ), $type ); ?>
-							<a href="https://support.google.com/webmasters/answer/93710?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to show this page in their search results', 'autodescription' ) ) ?>">[?]</a>
-						</label>
-
-						<br />
-
-						<label for="autodescription-meta[nofollow]"><input name="autodescription-meta[nofollow]" id="autodescription-meta[nofollow]" type="checkbox" value="1" <?php checked( $ad_nofollow ); ?> />
-							<?php printf( __( 'Apply %s to this %s', 'autodescription' ), $this->code_wrap( 'nofollow' ), $type ); ?>
-							<a href="https://support.google.com/webmasters/answer/96569?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to follow links on this page', 'autodescription' ) ) ?>">[?]</a>
-						</label>
-
-						<br />
-
-						<label for="autodescription-meta[noarchive]"><input name="autodescription-meta[noarchive]" id="autodescription-meta[noarchive]" type="checkbox" value="1" <?php checked( $ad_noarchive ); ?> />
-							<?php printf( __( 'Apply %s to this %s', 'autodescription' ), $this->code_wrap( 'noarchive' ), $type ); ?>
-							<a href="https://support.google.com/webmasters/answer/79812?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to save a cached copy this page', 'autodescription' ) ) ?>">[?]</a>
-						</label>
-
-						<?php // Saved flag, if set then it won't fetch for Genesis meta anymore ?>
-						<label class="hidden" for="autodescription-meta[saved_flag]">
-							<input name="autodescription-meta[saved_flag]" id="autodescription-meta[saved_flag]" type="checkbox" value="1" checked='checked' />
-						</label>
-					</td>
-				</tr>
-
-				<?php if ( 'below' === $this->inpost_seo_bar ) : ?>
-				<tr>
-					<th scope="row" valign="top"><?php _e( 'Doing it Right', 'autodescription' ); ?></th>
-					<td>
-						<?php echo $this->post_status( $term_id, $taxonomy, true ); ?>
-					</td>
-				</tr>
-				<?php endif; ?>
-
-			</tbody>
-		</table>
-		<?php
-
-		do_action( 'the_seo_framework_pro_tt_inpost_box' );
-	}
-
-	/**
-	 * Callback function for Post and Pages inpost metabox.
-	 *
-	 * @since 2.3.5
-	 *
-	 * @param string $type The post type name.
-	 */
-	public function page_inpost_box( $type ) {
-
-		do_action( 'the_seo_framework_pre_page_inpost_box' );
-
-		//* Get the language the Google page should assume.
-		$language = $this->google_language();
-
-		$post_id = $this->get_the_real_ID();
-		$is_static_frontpage = $this->is_static_frontpage( $post_id );
-		$title = $this->get_custom_field( '_genesis_title', $post_id );
-
-		$page_on_front_option = get_option( 'page_on_front' );
-
-		/**
-		 * Generate static placeholder for when title or description is emptied
-		 *
-		 * @since 2.2.4
-		 *
-		 * Fetch description from Home Page SEO Settings placeholder if it exists.
-		 * @since 2.2.5
-		 *
-		 * Generate description for Posts Page if selected in customizer.
-		 * @since 2.2.8
-		 */
-		if ( $is_static_frontpage ) {
-			//* Front page.
-			$generated_doctitle_args = array(
-				'page_on_front' => true,
-				'placeholder' => true,
-				'meta'	=> true,
-				'get_custom_field' => false,
-			);
-
-			$generated_description_args = array(
-				'id' => $post_id,
-				'is_home' => true,
-				'get_custom_field' => true,
-			);
-		} else if ( $this->is_blog_page( $post_id ) ) {
-			//* Page for posts.
-			$generated_doctitle_args = array(
-				'placeholder' => true,
-				'meta'	=> true,
-				'get_custom_field' => false,
-			);
-
-			$generated_description_args = array(
-				'id' => $post_id,
-				'page_for_posts' => true,
-			);
-		} else {
-			$generated_doctitle_args = array(
-				'placeholder' => true,
-				'meta'	=> true,
-				'get_custom_field' => false,
-			);
-
-			$generated_description_args = array(
-				'id' => $post_id,
-			);
-		}
-		$generated_doctitle = $this->title( '', '', '', $generated_doctitle_args );
-		$generated_description = $this->generate_description_from_id( $generated_description_args );
-
-		/**
-		 * Special check for home page.
-		 *
-		 * @since 2.3.4
-		 */
-		if ( $is_static_frontpage && ! $this->get_option( 'homepage_tagline' ) ) {
-			$tit_len_pre = ! empty( $title ) ? $title : $generated_doctitle;
-		} else if ( $is_static_frontpage ) {
-			$tit_len_pre = ! empty( $title ) ? $title . " | " . $this->get_blogdescription() : $generated_doctitle;
-		} else {
-			/**
-			 * Calculate true Title length
-			 *
-			 * @since 2.2.4
-			 */
-			$blog_name = $this->get_blogname();
-
-			/**
-			 * Separator doesn't matter. Since html_entity_decode is used.
-			 * Order doesn't matter either. Since it's just used for length calculation.
-			 *
-			 * @since 2.3.4
-			 */
-			$tit_len_pre = ! empty( $title ) ? $title . " | " . $blog_name : $generated_doctitle;
-		}
-
-		//* Fetch description from option.
-		$description = $this->get_custom_field( '_genesis_description' );
-
-		/**
-		 * Calculate current description length
-		 *
-		 * Reworked.
-		 * @since 2.3.4
-		 */
-		if ( $is_static_frontpage ) {
-			//* The homepage description takes precedence.
-			$homepage_description = $this->get_option( 'homepage_description' );
-
-			if ( ! empty( $description ) ) {
-				$desc_len_pre = ! empty( $homepage_description ) ? $homepage_description : $description;
-			} else {
-				$desc_len_pre = ! empty( $homepage_description ) ? $homepage_description : $generated_description;
-			}
-		} else {
-			$desc_len_pre = ! empty( $description ) ? $description : $generated_description;
-		}
-
-		/**
-		 * Convert to what Google outputs.
-		 *
-		 * This will convert e.g. &raquo; to a single length character.
-		 * @since 2.3.4
-		 */
-		$tit_len_parsed = html_entity_decode( $tit_len_pre );
-		$desc_len_parsed = html_entity_decode( $desc_len_pre );
-
-		/**
-		 * Generate static placeholder for when title or description is emptied
-		 *
-		 * Now within aptly named vars.
-		 * @since 2.3.4
-		 */
-		$doctitle_placeholder = $generated_doctitle;
-		$description_placeholder = $generated_description;
-
-		//* Fetch Canonical URL.
-		$canonical = $this->get_custom_field( '_genesis_canonical_uri' );
-		//* Fetch Canonical URL Placeholder.
-		$canonical_placeholder = $this->the_url_from_cache( '', $post_id, false, false );
-
-		?>
-		<?php if ( 'above' === $this->inpost_seo_bar ) : ?>
-		<p>
-			<strong><?php _e( 'Doing it Right', 'autodescription' ); ?></strong>
-			<div><?php echo $this->post_status( $post_id, 'inpost', true ); ?></div>
-		</p>
-		<?php endif; ?>
-
-		<p>
-			<label for="autodescription_title"><strong><?php printf( __( 'Custom %s Title', 'autodescription' ), $type ); ?></strong>
-				<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#3" target="_blank" title="<?php _e( 'Recommended Length: 50 to 55 characters', 'autodescription' ) ?>">[?]</a>
-				<span class="description"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription_title_chars">'. mb_strlen( $tit_len_parsed ) .'</span>' ); ?></span>
-			</label>
-		</p>
-		<p>
-			<div id="autodescription-title-wrap">
-				<input class="large-text" type="text" name="autodescription[_genesis_title]" id="autodescription_title" placeholder="<?php echo $doctitle_placeholder ?>" value="<?php echo esc_attr( $this->get_custom_field( '_genesis_title' ) ); ?>" />
-				<span id="autodescription-title-offset" class="hide-if-no-js"></span><span id="autodescription-title-placeholder" class="hide-if-no-js"></span>
-			</div>
-		</p>
-
-		<p>
-			<label for="autodescription_description">
-				<strong><?php printf( __( 'Custom %s Description', 'autodescription' ), $type ); ?></strong>
-				<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#1" target="_blank" title="<?php _e( 'Recommended Length: 145 to 155 characters', 'autodescription' ) ?>">[?]</a>
-				<span class="description"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription_description_chars">'. mb_strlen( $desc_len_parsed ) .'</span>' ); ?></span>
-			</label>
-		</p>
-		<p>
-			<textarea class="large-text" name="autodescription[_genesis_description]" id="autodescription_description" placeholder="<?php echo $description_placeholder ?>" rows="4" cols="4"><?php echo esc_textarea( $this->get_custom_field( '_genesis_description' ) ); ?></textarea>
-		</p>
-
-		<p>
-			<label for="autodescription_canonical">
-				<strong><?php _e( 'Custom Canonical URL', 'autodescription' ); ?></strong>
-				<a href="https://support.google.com/webmasters/answer/139066?hl=<?php echo $language; ?>" target="_blank" title="&lt;link rel=&quot;canonical&quot; /&gt;">[?]</a>
-			</label>
-		</p>
-		<p>
-			<input class="large-text" type="text" name="autodescription[_genesis_canonical_uri]" id="autodescription_canonical" placeholder="<?php echo $canonical_placeholder ?>" value="<?php echo esc_url( $this->get_custom_field( '_genesis_canonical_uri' ) ); ?>" />
-		</p>
-
-		<p><strong><?php _e( 'Robots Meta Settings', 'autodescription' ); ?></strong></p>
-		<p>
-			<label for="autodescription_noindex"><input type="checkbox" name="autodescription[_genesis_noindex]" id="autodescription_noindex" value="1" <?php checked( $this->get_custom_field( '_genesis_noindex' ) ); ?> />
-				<?php printf( __( 'Apply %s to this %s', 'autodescription' ), $this->code_wrap( 'noindex' ), $type ); ?>
-				<a href="https://support.google.com/webmasters/answer/93710?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to show this page in their search results', 'autodescription' ) ) ?>">[?]</a>
-			</label>
-
-			<br />
-
-			<label for="autodescription_nofollow"><input type="checkbox" name="autodescription[_genesis_nofollow]" id="autodescription_nofollow" value="1" <?php checked( $this->get_custom_field( '_genesis_nofollow' ) ); ?> />
-				<?php printf( __( 'Apply %s to this %s', 'autodescription' ), $this->code_wrap( 'nofollow' ), $type ); ?>
-				<a href="https://support.google.com/webmasters/answer/96569?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to follow links on this page', 'autodescription' ) ) ?>">[?]</a>
-			</label>
-
-			<br />
-
-			<label for="autodescription_noarchive"><input type="checkbox" name="autodescription[_genesis_noarchive]" id="autodescription_noarchive" value="1" <?php checked( $this->get_custom_field( '_genesis_noarchive' ) ); ?> />
-				<?php printf( __( 'Apply %s to this %s', 'autodescription' ), $this->code_wrap( 'noarchive' ), $type ); ?>
-				<a href="https://support.google.com/webmasters/answer/79812?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to save a cached copy this page', 'autodescription' ) ) ?>">[?]</a>
-			</label>
-
-			<?php // Saved flag, if set then it won't fetch for genesis meta anymore ?>
-			<label class="hidden" for="autodescription_saved_flag">
-				<input name="autodescription[saved_flag]" id="autodescription[saved_flag]" type="checkbox" value="1" checked='checked' />
-			</label>
-		</p>
-
-		<p><strong><?php _e( 'Local Search Settings', 'autodescription' ); ?></strong></p>
-		<p>
-			<label for="autodescription_exclude_local_search"><input type="checkbox" name="autodescription[exclude_local_search]" id="autodescription_exclude_local_search" value="1" <?php checked( $this->get_custom_field( 'exclude_local_search' ) ); ?> />
-				<?php printf( __( 'Exclude this %s from local search', 'autodescription' ), $type ); ?>
-				<span title="<?php printf( __( 'This excludes this %s from local on-site search results', 'autodescription' ), $type ) ?>">[?]</span>
-			</label>
-		</p>
-
-		<p>
-			<label for="autodescription_redirect">
-				<strong><?php _e( 'Custom 301 Redirect URL', 'autodescription' ); ?></strong>
-				<a href="https://support.google.com/webmasters/answer/93633?hl=<?php echo $language; ?>" target="_blank" title="301 Redirect">[?]</a>
-			</label>
-		</p>
-		<p>
-			<input class="large-text" type="text" name="autodescription[redirect]" id="genesis_redirect" value="<?php echo esc_url( $this->get_custom_field( 'redirect' ) ); ?>" />
-		</p>
-
-		<?php if ( 'below' === $this->inpost_seo_bar ) : ?>
-		<p>
-			<strong><?php _e( 'Doing it Right', 'autodescription' ); ?></strong>
-			<div><?php echo $this->post_status( $post_id, 'inpost', true ); ?></div>
-		</p>
-		<?php endif;
-
-		do_action( 'the_seo_framework_pro_page_inpost_box' );
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Inpost
+ *
+ * Outputs Taxonomy, Post and Page meta boxes
+ *
+ * @since 2.2.2
+ */
+class AutoDescription_Inpost extends AutoDescription_PageOptions {
+
+	/**
+	 * Add inpost SEO Bar through a filter.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @var bool|string Whether and where to show the inpost SEO bar.
+	 */
+	protected $inpost_seo_bar = false;
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		//* Enqueue Inpost meta boxes.
+		add_action( 'add_meta_boxes', array( $this, 'add_inpost_seo_box_init' ), 5 );
+
+		//* Enqueue Taxonomy meta output.
+		add_action( 'current_screen', array( $this, 'add_taxonomy_seo_box_init' ), 10 );
+
+		/**
+		 * Applies filters bool|string the_seo_framework_inpost_seo_bar :
+		 * Whether to output the SEO bar within the inpost SEO Settings metabox.
+		 * @param 	: string 'above' Outputs it above the Settings
+		 * 			: string 'below' Outputs it below the Settings
+		 * 			: bool false No output.
+		 * @since 2.5.2
+		 */
+		$this->inpost_seo_bar = apply_filters( 'the_seo_framework_inpost_seo_bar', false );
+
+	}
+
+	/**
+	 * Render the SEO meta box
+	 *
+	 * Called outside autodescription_run
+	 *
+	 * Applies filters the_seo_framework_seobox_output : bool
+	 *
+	 * @since 2.0.0
+	 */
+	public function add_inpost_seo_box_init() {
+
+		if ( $this->detect_seo_plugins() )
+			return;
+
+		$show_seobox = (bool) apply_filters( 'the_seo_framework_seobox_output', true );
+
+		if ( $show_seobox )
+			add_action( 'add_meta_boxes', array( $this, 'add_inpost_seo_box' ), 10, 2 );
+
+	}
+
+	/**
+	 * Adds SEO Meta boxes within Taxonomy screens.
+	 *
+	 * @since 2.1.8
+	 */
+	public function add_taxonomy_seo_box_init() {
+
+		//* @since 2.6.0
+		if ( $this->detect_seo_plugins() )
+			return;
+
+		//* @since 2.6.0
+		if ( $this->is_term_edit() ) {
+
+			/**
+			 * High priority, this box is seen right below the post/page edit screen.
+			 * Applies filters 'the_seo_framework_term_metabox_priority' : int
+			 *
+			 * @since 2.6.0
+			 */
+			$priority = (int) apply_filters( 'the_seo_framework_term_metabox_priority', 0 );
+
+			//* Add taxonomy meta boxes
+			foreach ( get_taxonomies( array( 'public' => true ) ) as $tax_name )
+				add_action( $tax_name . '_edit_form', array( $this, 'pre_seo_box' ), $priority, 2 );
+
+		}
+
+	}
+
+	/**
+	 * Adds SEO Meta boxes beneath every page/post edit screen.
+	 *
+	 * @param string $post_type The current Post Type.
+	 * @param object $post The post Object. Unused.
+	 *
+	 * @since 2.0.0
+	 */
+	public function add_inpost_seo_box( $post_type, $post ) {
+
+		/**
+		 * @uses $this->post_type_supports_custom_seo()
+		 * @since 2.3.9
+		 */
+		if ( $this->post_type_supports_custom_seo( $post_type ) ) {
+
+			$post = get_post_type_object( $post_type );
+
+			if ( is_object( $post ) ) {
+				$labels = isset( $post->labels ) ? $post->labels : '';
+
+				if ( $labels ) {
+					//* Title and type are used interchangeably.
+					$title = isset( $labels->singular_name ) ? $labels->singular_name : $labels->name;
+					$args = array( $title, 'is_post_page' );
+
+					/**
+					 * Applies filters the_seo_framework_metabox_id : string The metabox priority and class ID.
+					 * @since 2.6.0
+					 * @NOTE warning: might cause CSS and JS conflicts.
+					 * @TODO solve note.
+					 * @priority medium 2.7.0
+					 */
+					$id = (string) apply_filters( 'the_seo_framework_metabox_id', 'theseoframework-inpost-box' );
+					$context = 'normal';
+
+					/**
+					 * High priority, this box is seen right below the post/page edit screen.
+					 * Applies filters 'the_seo_framework_metabox_priority' : string
+					 * Accepts 'high', 'default', 'low'
+					 * @since 2.6.0
+					 */
+					$priority = (string) apply_filters( 'the_seo_framework_metabox_priority', 'high' );
+
+					// Note: Pass on the object $this
+					add_meta_box( $id, sprintf( __( '%s SEO Settings', 'autodescription' ), $title ), array( $this, 'pre_seo_box' ), $post_type, $context, $priority, $args );
+				}
+			}
+		}
+
+	}
+
+	/**
+	 * Determines which arguments should be used
+	 *
+	 * @since 2.1.8
+	 *
+	 * @used by add_inpost_seo_box
+	 *
+	 * @param $object the page/post/taxonomy object
+	 * @param $args the page/post arguments or taxonomy slug.
+	 *
+	 * @return string Inpost SEO box.
+	 */
+	public function pre_seo_box( $object, $args ) {
+
+		if ( is_array( $args ) && isset( $args['args'] ) ) {
+			$args_split = $args['args'];
+
+			$page = $args_split[1];
+
+			// Return $args as array on post/page
+			if ( 'is_post_page' === $page ) {
+				// Note: Passes through object.
+				return $this->inpost_seo_box( $object, (array) $args );
+			}
+		} else {
+			//* Note: Passes object.
+			// Empty the arguments, if any.
+			return $this->inpost_seo_box( $object, $args = '' );
+		}
+
+		return '';
+	}
+
+	/**
+	 * Callback for in-post SEO meta box.
+	 *
+	 * @since 2.0.0
+	 * @access private
+	 *
+	 * @param array $post		The post object
+	 *
+	 * @param object $object 	the page/post/taxonomy object
+	 * @param array $args 		the page/post arguments or taxonomy slug
+	 *
+	 * @uses $this->get_custom_field() Get custom field value.
+	 *
+	 * Note: Passed through object $object by reference
+	 */
+	public function inpost_seo_box( $object, $args ) {
+
+		//* Determines if it's inside a meta box or within a taxonomy page.
+		$is_term = false;
+
+		// Args are passed.
+		if ( is_array( $args ) && isset( $args['args'] ) ) {
+			$args_split = $args['args'];
+
+			//* The post type callback arg (translated)
+			$type = $args_split[0];
+			//* The kind of page we're on.
+			$page = $args_split[1];
+
+			// Only add nonce on post/page edit screen
+			if ( 'is_post_page' === $page ) {
+				wp_nonce_field( 'inpost_seo_save', 'hmpl_ad_inpost_seo_nonce' );
+			} else {
+				// This shouldn't happen.
+				return;
+			}
+		} else if ( is_object( $object ) ) {
+
+			//* Singular name.
+			$type = $this->get_the_term_name( $object, true, false );
+
+			//* Plural name.
+			if ( empty( $type ) )
+				$type = $this->get_the_term_name( $object, false, false );
+
+			if ( empty( $type ) ) {
+				// Fallback to Page as it is generic.
+				$type = __( 'Page', 'autodescription' );
+			}
+
+			$is_term = true;
+		}
+
+		//* Echo output.
+		if ( $is_term ) {
+			$this->tt_inpost_box( $type, $object );
+		} else {
+			$this->page_inpost_box( $type );
+		}
+
+	}
+
+	/**
+	 * Callback function for Taxonomy and Terms inpost box.
+	 *
+	 * @since 2.3.5
+	 * @access private
+	 *
+	 * @param string $type The TT type name.
+	 * @param object $object The TT object.
+	 */
+	public function tt_inpost_box( $type, $object ) {
+
+		do_action( 'the_seo_framework_pre_tt_inpost_box' );
+
+		//* Get the language the Google page should assume.
+		$language = $this->google_language();
+
+		$data = $this->get_term_data( $object );
+
+		$title = isset( $data['title'] ) ? $data['title'] : '';
+		$description = isset( $data['description'] ) ? $data['description'] : '';
+		$noindex = isset( $data['noindex'] ) ? $data['noindex'] : '';
+		$nofollow = isset( $data['nofollow'] ) ? $data['nofollow'] : '';
+		$noarchive = isset( $data['noarchive'] ) ? $data['noarchive'] : '';
+
+		//* Fetch Term ID and taxonomy.
+		$term_id = $object->term_id;
+		$taxonomy = $object->taxonomy;
+
+		$generated_doctitle_args = array(
+			'term_id' => $term_id,
+			'taxonomy' => $taxonomy,
+			'placeholder' => true,
+			'get_custom_field' => false,
+		);
+
+		$generated_description_args = array(
+			'id' => $term_id,
+			'taxonomy' => $taxonomy,
+			'get_custom_field' => false,
+		);
+
+		//* Generate title and description.
+		$generated_doctitle = $this->title( '', '', '', $generated_doctitle_args );
+		$generated_description = $this->generate_description( '', $generated_description_args );
+
+		$blog_name = $this->get_blogname();
+		$add_additions = $this->add_title_additions();
+
+		/**
+		 * Separator doesn't matter. Since html_entity_decode is used.
+		 * Order doesn't matter either. Since it's just used for length calculation.
+		 *
+		 * @since 2.3.4
+		 */
+		$doc_pre_rem = $add_additions ? $title . " | " . $blog_name : $title;
+		$title_len = $title ? $doc_pre_rem : $generated_doctitle;
+		$description_len = $description	? $description : $generated_description;
+
+		/**
+		 * Convert to what Google outputs.
+		 *
+		 * This will convert e.g. &raquo; to a single length character.
+		 * @since 2.3.4
+		 */
+		$tit_len_parsed = html_entity_decode( $title_len );
+		$desc_len_parsed = html_entity_decode( $description_len );
+
+		/**
+		 * Generate static placeholder for when title or description is emptied
+		 *
+		 * @since 2.2.4
+		 */
+		$title_placeholder = $generated_doctitle;
+		$description_placeholder = $generated_description;
+
+		?>
+		<h3><?php printf( __( '%s SEO Settings', 'autodescription' ), $type ); ?></h3>
+
+		<table class="form-table">
+			<tbody>
+
+				<?php if ( 'above' === $this->inpost_seo_bar ) : ?>
+				<tr>
+					<th scope="row" valign="top"><?php _e( 'Doing it Right', 'autodescription' ); ?></th>
+					<td>
+						<?php echo $this->post_status( $term_id, $taxonomy, true ); ?>
+					</td>
+				</tr>
+				<?php endif; ?>
+
+				<tr class="form-field">
+					<th scope="row" valign="top">
+						<label for="autodescription-meta[doctitle]">
+							<strong><?php printf( __( '%s Title', 'autodescription' ), $type ); ?></strong>
+							<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#3" target="_blank" title="<?php _e( 'Recommended Length: 50 to 55 characters', 'autodescription' ) ?>">[?]</a>
+						</label>
+					</th>
+					<td>
+						<div id="autodescription-title-wrap">
+							<input name="autodescription-meta[doctitle]" id="autodescription-meta[doctitle]" type="text" placeholder="<?php echo $title_placeholder ?>" value="<?php echo esc_attr( $title ); ?>" size="40" />
+							<span id="autodescription-title-offset" class="hide-if-no-js"></span><span id="autodescription-title-placeholder" class="hide-if-no-js"></span>
+						</div>
+						<p class="description theseoframework-counter"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription-meta[doctitle]_chars">'. mb_strlen( $tit_len_parsed ) .'</span>' ); ?></p>
+					</td>
+				</tr>
+
+				<tr class="form-field">
+					<th scope="row" valign="top">
+						<label for="autodescription-meta[description]">
+							<strong><?php printf( __( '%s Meta Description', 'autodescription' ), $type ); ?></strong>
+							<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#1" target="_blank" title="<?php _e( 'Recommended Length: 145 to 155 characters', 'autodescription' ) ?>">[?]</a>
+						</label>
+					</th>
+					<td>
+						<textarea name="autodescription-meta[description]" id="autodescription-meta[description]" placeholder="<?php echo $description_placeholder ?>" rows="5" cols="50" class="large-text"><?php echo esc_html( $description ); ?></textarea>
+						<p class="description theseoframework-counter"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription-meta[description]_chars">'. mb_strlen( $desc_len_parsed ) .'</span>' ); ?></p>
+					</td>
+				</tr>
+
+				<tr>
+					<th scope="row" valign="top"><?php _e( 'Robots Meta Settings', 'autodescription' ); ?></th>
+					<td>
+						<label for="autodescription-meta[noindex]"><input name="autodescription-meta[noindex]" id="autodescription-meta[noindex]" type="checkbox" value="1" <?php checked( $noindex ); ?> />
+							<?php printf( __( 'Apply %s to this term', 'autodescription' ), $this->code_wrap( 'noindex' ) ); ?>
+							<a href="https://support.google.com/webmasters/answer/93710?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to show this page in their search results', 'autodescription' ) ) ?>">[?]</a>
+						</label>
+
+						<br>
+
+						<label for="autodescription-meta[nofollow]"><input name="autodescription-meta[nofollow]" id="autodescription-meta[nofollow]" type="checkbox" value="1" <?php checked( $nofollow ); ?> />
+							<?php printf( __( 'Apply %s to this term', 'autodescription' ), $this->code_wrap( 'nofollow' ) ); ?>
+							<a href="https://support.google.com/webmasters/answer/96569?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to follow links on this page', 'autodescription' ) ) ?>">[?]</a>
+						</label>
+
+						<br>
+
+						<label for="autodescription-meta[noarchive]"><input name="autodescription-meta[noarchive]" id="autodescription-meta[noarchive]" type="checkbox" value="1" <?php checked( $noarchive ); ?> />
+							<?php printf( __( 'Apply %s to this term', 'autodescription' ), $this->code_wrap( 'noarchive' ) ); ?>
+							<a href="https://support.google.com/webmasters/answer/79812?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to save a cached copy of this page', 'autodescription' ) ) ?>">[?]</a>
+						</label>
+
+						<?php // Saved flag, if set then it won't fetch for Genesis meta anymore ?>
+						<label class="hidden" for="autodescription-meta[saved_flag]">
+							<input name="autodescription-meta[saved_flag]" id="autodescription-meta[saved_flag]" type="checkbox" value="1" checked='checked' />
+						</label>
+					</td>
+				</tr>
+
+				<?php if ( 'below' === $this->inpost_seo_bar ) : ?>
+				<tr>
+					<th scope="row" valign="top"><?php _e( 'Doing it Right', 'autodescription' ); ?></th>
+					<td>
+						<?php echo $this->post_status( $term_id, $taxonomy, true ); ?>
+					</td>
+				</tr>
+				<?php endif; ?>
+
+			</tbody>
+		</table>
+		<?php
+
+		do_action( 'the_seo_framework_pro_tt_inpost_box' );
+
+	}
+
+	/**
+	 * Callback function for Post and Pages inpost metabox.
+	 *
+	 * @since 2.3.5
+	 * @access private
+	 *
+	 * @param string $type The post type name.
+	 */
+	public function page_inpost_box( $type ) {
+
+		do_action( 'the_seo_framework_pre_page_inpost_box' );
+
+		//* Get the language the Google page should assume.
+		$language = $this->google_language();
+
+		$post_id = $this->get_the_real_ID();
+		$is_static_frontpage = $this->is_static_frontpage( $post_id );
+
+		$title = $this->get_custom_field( '_genesis_title', $post_id );
+
+		$page_on_front_option = get_option( 'page_on_front' );
+
+		/**
+		 * Generate static placeholder for when title or description is emptied
+		 *
+		 * @since 2.2.4
+		 *
+		 * Fetch description from Home Page SEO Settings placeholder if it exists.
+		 * @since 2.2.5
+		 *
+		 * Generate description for Posts Page if selected in customizer.
+		 * @since 2.2.8
+		 */
+		if ( $is_static_frontpage ) {
+			//* Front page.
+			$generated_doctitle_args = array(
+				'page_on_front' => true,
+				'placeholder' => true,
+				'meta'	=> true,
+				'get_custom_field' => false,
+			);
+
+			$generated_description_args = array(
+				'id' => $post_id,
+				'is_home' => true,
+				'get_custom_field' => true,
+			);
+		} else if ( $this->is_blog_page( $post_id ) ) {
+			//* Page for posts.
+			$generated_doctitle_args = array(
+				'placeholder' => true,
+				'meta'	=> true,
+				'get_custom_field' => false,
+			);
+
+			$generated_description_args = array(
+				'id' => $post_id,
+				'page_for_posts' => true,
+			);
+		} else {
+			$generated_doctitle_args = array(
+				'placeholder' => true,
+				'meta'	=> true,
+				'get_custom_field' => false,
+			);
+
+			$generated_description_args = array(
+				'id' => $post_id,
+			);
+		}
+		$generated_doctitle = $this->title( '', '', '', $generated_doctitle_args );
+		$generated_description = $this->generate_description_from_id( $generated_description_args );
+
+		/**
+		 * Special check for home page.
+		 *
+		 * @since 2.3.4
+		 */
+		if ( $is_static_frontpage ) {
+			if ( $this->get_option( 'homepage_tagline' ) ) {
+				$tit_len_pre = $title ? $title . " | " . $this->get_blogdescription() : $generated_doctitle;
+			} else {
+				$tit_len_pre = $title ? $title : $generated_doctitle;
+			}
+		} else {
+			/**
+			 * Separator doesn't matter. Since html_entity_decode is used.
+			 * Order doesn't matter either. Since it's just used for length calculation.
+			 *
+			 * @since 2.3.4
+			 */
+			if ( $this->add_title_additions() ) {
+				$tit_len_pre = $title ? $title . " | " . $this->get_blogname() : $generated_doctitle;
+			} else {
+				$tit_len_pre = $title ? $title : $generated_doctitle;
+			}
+		}
+
+		//* Fetch description from option.
+		$description = $this->get_custom_field( '_genesis_description' );
+
+		/**
+		 * Calculate current description length
+		 *
+		 * Reworked.
+		 * @since 2.3.4
+		 */
+		if ( $is_static_frontpage ) {
+			//* The homepage description takes precedence.
+			$homepage_description = $this->get_option( 'homepage_description' );
+
+			if ( $description ) {
+				$desc_len_pre = $homepage_description ? $homepage_description : $description;
+			} else {
+				$desc_len_pre = $homepage_description ? $homepage_description : $generated_description;
+			}
+		} else {
+			$desc_len_pre = $description ? $description : $generated_description;
+		}
+
+		/**
+		 * Convert to what Google outputs.
+		 *
+		 * This will convert e.g. &raquo; to a single length character.
+		 * @since 2.3.4
+		 */
+		$tit_len_parsed = html_entity_decode( $tit_len_pre );
+		$desc_len_parsed = html_entity_decode( $desc_len_pre );
+
+		/**
+		 * Generate static placeholder for when title or description is emptied
+		 *
+		 * Now within aptly named vars.
+		 * @since 2.3.4
+		 */
+		$doctitle_placeholder = $generated_doctitle;
+		$description_placeholder = $generated_description;
+
+		//* Fetch Canonical URL.
+		$canonical = $this->get_custom_field( '_genesis_canonical_uri' );
+		//* Fetch Canonical URL Placeholder.
+		$canonical_placeholder = $this->the_url_from_cache( '', $post_id, false, false );
+
+		?>
+		<?php if ( 'above' === $this->inpost_seo_bar ) : ?>
+		<p>
+			<strong><?php _e( 'Doing it Right', 'autodescription' ); ?></strong>
+			<div><?php echo $this->post_status( $post_id, 'inpost', true ); ?></div>
+		</p>
+		<?php endif; ?>
+
+		<p>
+			<label for="autodescription_title"><strong><?php printf( __( 'Custom %s Title', 'autodescription' ), $type ); ?></strong>
+				<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#3" target="_blank" title="<?php _e( 'Recommended Length: 50 to 55 characters', 'autodescription' ); ?>">[?]</a>
+				<span class="description theseoframework-counter"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription_title_chars">'. mb_strlen( $tit_len_parsed ) .'</span>' ); ?></span>
+			</label>
+		</p>
+		<p>
+			<div id="autodescription-title-wrap">
+				<input class="large-text" type="text" name="autodescription[_genesis_title]" id="autodescription_title" placeholder="<?php echo $doctitle_placeholder ?>" value="<?php echo esc_attr( $this->get_custom_field( '_genesis_title' ) ); ?>" />
+				<span id="autodescription-title-offset" class="hide-if-no-js"></span><span id="autodescription-title-placeholder" class="hide-if-no-js"></span>
+			</div>
+		</p>
+
+		<p>
+			<label for="autodescription_description">
+				<strong><?php printf( __( 'Custom %s Description', 'autodescription' ), $type ); ?></strong>
+				<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#1" target="_blank" title="<?php _e( 'Recommended Length: 145 to 155 characters', 'autodescription' ); ?>">[?]</a>
+				<span class="description theseoframework-counter"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="autodescription_description_chars">'. mb_strlen( $desc_len_parsed ) .'</span>' ); ?></span>
+			</label>
+		</p>
+		<p>
+			<textarea class="large-text" name="autodescription[_genesis_description]" id="autodescription_description" placeholder="<?php echo $description_placeholder ?>" rows="4" cols="4"><?php echo esc_textarea( $this->get_custom_field( '_genesis_description' ) ); ?></textarea>
+		</p>
+
+		<p>
+			<label for="autodescription_canonical">
+				<strong><?php _e( 'Custom Canonical URL', 'autodescription' ); ?></strong>
+				<a href="https://support.google.com/webmasters/answer/139066?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Preferred %s URL location', 'autodescription' ), $type ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input class="large-text" type="text" name="autodescription[_genesis_canonical_uri]" id="autodescription_canonical" placeholder="<?php echo $canonical_placeholder ?>" value="<?php echo esc_url( $this->get_custom_field( '_genesis_canonical_uri' ) ); ?>" />
+		</p>
+
+		<p><strong><?php _e( 'Robots Meta Settings', 'autodescription' ); ?></strong></p>
+		<p>
+			<label for="autodescription_noindex"><input type="checkbox" name="autodescription[_genesis_noindex]" id="autodescription_noindex" value="1" <?php checked( $this->get_custom_field( '_genesis_noindex' ) ); ?> />
+				<?php
+					/* translators: 1: Option, 2: Post or Page */
+					printf( __( 'Apply %1$s to this %2$s', 'autodescription' ), $this->code_wrap( 'noindex' ), $type );
+				?>
+				<a href="https://support.google.com/webmasters/answer/93710?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to show this %s in their search results', 'autodescription' ), $type ); ?>">[?]</a>
+			</label>
+
+			<br>
+
+			<label for="autodescription_nofollow"><input type="checkbox" name="autodescription[_genesis_nofollow]" id="autodescription_nofollow" value="1" <?php checked( $this->get_custom_field( '_genesis_nofollow' ) ); ?> />
+				<?php
+					/* translators: 1: Option, 2: Post or Page */
+					printf( __( 'Apply %1$s to this %2$s', 'autodescription' ), $this->code_wrap( 'nofollow' ), $type );
+				?>
+				<a href="https://support.google.com/webmasters/answer/96569?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to follow links on this %s', 'autodescription' ), $type ); ?>">[?]</a>
+			</label>
+
+			<br>
+
+			<label for="autodescription_noarchive"><input type="checkbox" name="autodescription[_genesis_noarchive]" id="autodescription_noarchive" value="1" <?php checked( $this->get_custom_field( '_genesis_noarchive' ) ); ?> />
+				<?php
+					/* translators: 1: Option, 2: Post or Page */
+					printf( __( 'Apply %1$s to this %2$s', 'autodescription' ), $this->code_wrap( 'noarchive' ), $type );
+				?>
+				<a href="https://support.google.com/webmasters/answer/79812?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to save a cached copy of this %s', 'autodescription' ), $type ); ?>">[?]</a>
+			</label>
+
+			<?php // Saved flag, if set then it won't fetch for genesis meta anymore ?>
+			<label class="hidden" for="autodescription_saved_flag">
+				<input name="autodescription[saved_flag]" id="autodescription[saved_flag]" type="checkbox" value="1" checked='checked' />
+			</label>
+		</p>
+
+		<p><strong><?php _e( 'Local Search Settings', 'autodescription' ); ?></strong></p>
+		<p>
+			<label for="autodescription_exclude_local_search"><input type="checkbox" name="autodescription[exclude_local_search]" id="autodescription_exclude_local_search" value="1" <?php checked( $this->get_custom_field( 'exclude_local_search' ) ); ?> />
+				<?php printf( __( 'Exclude this %s from local search', 'autodescription' ), $type ); ?>
+				<span title="<?php printf( __( 'This excludes this %s from local on-site search results', 'autodescription' ), $type ); ?>">[?]</span>
+			</label>
+		</p>
+
+		<p>
+			<label for="autodescription_redirect">
+				<strong><?php _e( 'Custom 301 Redirect URL', 'autodescription' ); ?></strong>
+				<a href="https://support.google.com/webmasters/answer/93633?hl=<?php echo $language; ?>" target="_blank" title="<?php _e( 'This will force visitors to go to another URL', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input class="large-text" type="text" name="autodescription[redirect]" id="genesis_redirect" value="<?php echo esc_url( $this->get_custom_field( 'redirect' ) ); ?>" />
+		</p>
+
+		<?php if ( 'below' === $this->inpost_seo_bar ) : ?>
+		<p>
+			<strong><?php _e( 'Doing it Right', 'autodescription' ); ?></strong>
+			<div><?php echo $this->post_status( $post_id, 'inpost', true ); ?></div>
+		</p>
+		<?php endif;
+
+		do_action( 'the_seo_framework_pro_page_inpost_box' );
+
+	}
+
+}
Index: inc/classes/metaboxes.class.php
===================================================================
--- inc/classes/metaboxes.class.php	(revision 1413572)
+++ inc/classes/metaboxes.class.php	(working copy)
@@ -1,1889 +1,2403 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Metaboxes
- *
- * Outputs Network and Site SEO settings meta boxes
- *
- * @since 2.2.2
- */
-class AutoDescription_Metaboxes extends AutoDescription_Networkoptions {
-
-	/**
-	 * List of Title Separators
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var array Title Separator list
-	 *
-	 * @fixed Typo (seperator -> separator)
-	 * @since 2.3.4
-	 */
-	protected $title_separator = array();
-
-	/**
-	 * List of Twitter Card types
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var array Twitter Card types
-	 */
-	protected $twitter_card = array();
-
-	/**
-	 * Constructor, load parent constructor
-	 *
-	 * Cache various variables.
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		$this->title_separator = array(
-			'pipe'		=> '|',
-			'dash'		=> '-',
-			'ndash'		=> '&ndash;',
-			'mdash'		=> '&mdash;',
-			'bull'		=> '&bull;',
-			'middot'	=> '&middot;',
-			'lsaquo'	=> '&lsaquo;',
-			'rsaquo'	=> '&rsaquo;',
-			'frasl'		=> '&frasl;',
-			'laquo'		=> '&laquo;',
-			'raquo'		=> '&raquo;',
-			'le'		=> '&le;',
-			'ge'		=> '&ge;',
-			'lt'		=> '&lt;',
-			'gt'		=> '&gt;',
-		);
-
-		$this->twitter_card = array(
-			'summary' 				=> 'summary',
-			'summary_large_image'	=> 'summary-large-image',
-			'photo' 				=> 'photo',
-		);
-	}
-
-	/**
-	 * Setting nav tab wrappers.
-	 * Outputs Tabs and settings content.
-	 *
-	 * @param string $id The Nav Tab ID
-	 * @param array $tabs the tab content {
-	 *		$tabs = tab ID key = array(
-	 *			$tabs['name'] => tab name
-	 *			$tabs['callback'] => string|array callback function
-	 *			$tabs['dashicon'] => string Dashicon
-	 *			$tabs['args'] => mixed optional callback function args
-	 *		)
-	 *	}
-	 * @param string $version the The SEO Framework version
-	 * @param bool $use_tabs Wether to output tabs, only works when $tabs only has one count.
-	 *
-	 * @since 2.3.6
-	 *
-	 * @todo (2.5.3) Rework with radio buttons without WP Core dependancies.
-	 */
-	public function nav_tab_wrapper( $id, $tabs = array(), $version = '2.3.6', $use_tabs = true ) {
-		/**
-		 * Start navigation
-		 *
-		 * Don't output navigation if $use_tabs is false and the amount of tabs is 1 or lower.
-		 */
-		if ( $use_tabs || count( $tabs ) > (int) 1 ) {
-			?>
-			<h3 class="nav-tab-wrapper hide-if-no-js" id="<?php echo $id; ?>-tabs-js">
-			<?php
-				$count = 1;
-				foreach ( $tabs as $tab => $value ) {
-
-					$dashicon = isset( $value['dashicon'] ) ? $value['dashicon'] : '';
-					$name = isset( $value['name'] ) ? $value['name'] : '';
-
-					?>
-					<span>
-						<input type="radio" class="<?php echo $id; ?>-tabs-radio" id="<?php echo $id; ?>-tab-<?php echo $tab ?>" name="<?php echo $id; ?>-tabs" <?php echo $count == abs(1) ? 'checked' : ''; ?>>
-						<label for="<?php echo $id; ?>-tab-<?php echo $tab ?>" class="nav-tab <?php echo $count == abs(1) ? 'nav-tab-active' : '' ?>">
-							<?php echo ! empty( $dashicon ) ? '<span class="dashicons dashicons-' . esc_attr( $dashicon ) . ' dashicons-tabs"></span>' : ''; ?>
-							<?php echo ! empty( $name ) ? '<span class="seoframework-nav-desktop">' . esc_attr( $name ) . '</span>' : ''; ?>
-						</label>
-					</span>
-					<?php
-
-					$count++;
-				}
-			?>
-			</h3>
-			<?php
-		}
-
-		/**
-		 * Start settings content
-		 */
-		$_count = 1;
-		foreach ( $tabs as $tab => $value ) {
-
-			$dashicon = isset( $value['dashicon'] ) ? $value['dashicon'] : '';
-			$name = isset( $value['name'] ) ? $value['name'] : '';
-
-			?>
-			<div class="<?php echo $id; ?>-tab-content <?php echo (int) 1 === $_count ? 'checked-tab' : ''; ?> <?php echo (int) 1 !== $_count ? 'hide-if-js' : ''; ?>" id="<?php echo $id; ?>-tab-<?php echo $tab ?>-box">
-				<h3 class="nav-tab-wrapper hide-if-js">
-					<span class="nav-tab nav-tab-active">
-						<?php echo ! empty( $dashicon ) ? '<span class="dashicons dashicons-' . esc_attr( $dashicon ) . ' dashicons-tabs"></span>' : ''; ?>
-						<?php
-						// This is no-javascript
-						echo ! empty( $name ) ? esc_attr( $name ) : '';
-						?>
-					</span>
-				</h3>
-			<?php
-				$callback = isset( $value['callback'] ) ? $value['callback'] : '';
-
-				if ( ! empty( $callback ) ) {
-					$params = isset( $value['args'] ) ? $value['args'] : '';
-					$output = $this->call_function( $callback, $version, $params );
-					echo $output;
-				}
-
-			?>
-			</div>
-			<?php
-
-			$_count++;
-		}
-	}
-
-	/**
-	 * Title meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @see $this->title_metabox()	Callback for Title Settings box.
-	 */
-	public function title_metabox() {
-
-		do_action( 'the_seo_framework_title_metabox_before' );
-
-		$title_separator = $this->title_separator;
-
-		$recommended = ' class="recommended" title="' . esc_attr__( 'Recommended', 'autodescription' ) . '"';
-
-		$latest_post_id = $this->get_latest_post_id();
-
-		if ( ! empty( $latest_post_id ) ) {
-			$post = get_post( $latest_post_id, OBJECT );
-			$title = esc_attr( $post->post_title );
-		} else {
-			$title = esc_attr__( 'Example Post Title', 'autodescription' );
-		}
-
-		$blogname = $this->get_blogname();
-
-		$sep_option = $this->get_field_value( 'title_seperator' ); // Note: typo.
-		$sep = array_search( $sep_option, array_flip( $title_separator ), false );
-
-		$example_left = '<em><span class="title-additions-js">' . $blogname . '<span class="autodescription-sep-js">' . " $sep " . '</span></span>' . $title . '</em>';
-		$example_right = '<em>' . $title . '<span class="title-additions-js"><span class="autodescription-sep-js">' . " $sep " . '</span>' . $blogname . '</span></em>';
-
-		$home_page_has_option = __( 'The Home Page has a specific option.', 'autodescription' );
-
-		?>
-		<fieldset>
-			<legend><h4><?php _e( 'Document Title Separator', 'autodescription' ); ?></h4></legend>
-			<p id="title-separator" class="fields">
-			<?php foreach ( $title_separator as $name => $html ) { ?>
-				<input type="radio" name="<?php $this->field_name( 'title_seperator' ); ?>" id="<?php $this->field_id( 'title_seperator_' . $name ); ?>" value="<?php echo $name ?>" <?php checked( $this->get_field_value( 'title_seperator' ), $name ); ?> />
-				<label for="<?php $this->field_id( 'title_seperator_' . $name ); ?>" <?php echo ( $name == 'pipe' || $name == 'dash' ) ? $recommended : ''; ?>><?php echo $html ?></label>
-			<?php } ?>
-			</p>
-			<span class="description"><?php _e( 'If the title consists of two parts (original title and optional addition), then the separator will go in between them.', 'autodescription' ); ?></span>
-		</fieldset>
-
-		<hr>
-
-		<fieldset>
-			<legend><h4><?php _e( 'Document Title Additions Location', 'autodescription' ); ?></h4></legend>
-			<span class="description"><?php _e( 'Determines which side the added title text will go on.', 'autodescription' ); ?></span>
-
-			<p id="title-location" class="fields">
-				<span>
-					<input type="radio" name="<?php $this->field_name( 'title_location' ); ?>" id="<?php $this->field_id( 'title_location_left' ); ?>" value="left" <?php checked( $this->get_field_value( 'title_location' ), 'left' ); ?> />
-					<label for="<?php $this->field_id( 'title_location_left' ); ?>">
-						<span><?php _e( 'Left:', 'autodescription' ); ?></span>
-						<?php echo $this->code_wrap_noesc( $example_left ) ?>
-					</label>
-				</span>
-				<span>
-					<input type="radio" name="<?php $this->field_name( 'title_location' ); ?>" id="<?php $this->field_id( 'title_location_right' ); ?>" value="right" <?php checked( $this->get_field_value( 'title_location' ), 'right' ); ?> />
-					<label for="<?php $this->field_id( 'title_location_right' ); ?>">
-						<span><?php _e( 'Right:', 'autodescription' ); ?></span>
-						<?php echo $this->code_wrap_noesc( $example_right ); ?>
-					</label>
-				</span>
-			</p>
-			<span class="description"><?php echo $home_page_has_option; ?></span>
-		</fieldset>
-
-		<?php
-		//* Only add this option if the theme is doing it right.
-		if ( $this->theme_title_doing_it_right() ) : ?>
-			<hr>
-
-			<h4><?php _e( 'Remove Blogname from Title', 'autodescription' ); ?></h4>
-			<p id="title-additions-toggle">
-				<label for="<?php $this->field_id( 'title_rem_additions' ); ?>">
-					<input type="checkbox" name="<?php $this->field_name( 'title_rem_additions' ); ?>" id="<?php $this->field_id( 'title_rem_additions' ); ?>" <?php $this->is_conditional_checked( 'title_rem_additions' ); ?> value="1" <?php checked( $this->get_field_value( 'title_rem_additions' ) ); ?> />
-					<?php _e( 'Remove blogname from title?', 'autodescription' ); ?>
-				</label>
-				<span title="<?php _e( 'This might decouple your posts and pages from the rest of the of the website.', 'autodescription' ); ?>">[?]</span>
-			</p>
-			<span class="description"><?php _e( 'Only use this option if you are aware of its SEO effects.', 'autodescription' ); ?></span>
-			<span class="description"><?php echo $home_page_has_option; ?></span>
-		<?php endif;
-
-		do_action( 'the_seo_framework_title_metabox_after' );
-	}
-
-	/**
-	 * Description meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.3.4
-	 *
-	 * @see $this->description_metabox()	Callback for Description Settings box.
-	 */
-	public function description_metabox() {
-
-		do_action( 'the_seo_framework_description_metabox_before' );
-
-		$language = $this->google_language();
-
-		//* Let's use the same separators as for the title.
-		$description_separator = $this->title_separator;
-
-		$recommended = ' class="recommended" title="' . __( 'Recommended', 'autodescription' ) . '"';
-
-		$blogname = $this->get_blogname();
-
-		$sep_option = $this->get_field_value( 'description_separator' );
-		$sep_from_options = $this->get_option( 'description_separator' );
-
-		// Let's set a default.
-		$sep_option = $sep_from_options ? $sep_option : 'pipe';
-
-		$sep = array_search( $sep_option, array_flip( $description_separator ), false );
-
-		/**
-		 * Generate example.
-		 */
-		$page_title = __( 'Example Title', 'autodescription' );
-		$on = _x( 'on', 'Placement. e.g. Post Title "on" Blog Name', 'autodescription' );
-		$excerpt = __( 'This is an example description&#8230;', 'autodescription' );
-
-		$page_title = $this->escape_description( $page_title );
-		$on = $this->escape_description( $on );
-		$excerpt = $this->escape_description( $excerpt );
-
-		//* Put it together.
-		$example 	= $page_title
-					. '<span class="on-blogname-js">' . " $on " . $blogname . '</span>'
-					. '<span class="autodescription-descsep-js">' . " $sep " . '</span>'
-					. $excerpt
-					;
-
-		/**
-		 * Generate no-JS example
-		 * Fetch description additions.
-		 */
-		$description_additions = $this->get_option( 'description_blogname' );
-
-		//* Add or remove additions based on option.
-		$example_nojs_onblog = $description_additions ? " $on " . $blogname : '';
-
-		$example_nojs = $page_title . $example_nojs_onblog . " $sep " . $excerpt;
-
-		?>
-		<h4><?php _e( 'Example Automated Description Output', 'autodescription' ); ?></h4>
-		<p class="hide-if-no-js"><?php echo $this->code_wrap_noesc( $example ); ?></p>
-		<p class="hide-if-js"><?php echo $this->code_wrap( $example_nojs ); ?></p>
-
-		<hr>
-
-		<fieldset>
-			<legend><h4><?php _e( 'Description Excerpt Separator', 'autodescription' ); ?></h4></legend>
-			<p id="description-separator" class="fields">
-			<?php foreach ( $description_separator as $name => $html ) { ?>
-				<input type="radio" name="<?php $this->field_name( 'description_separator' ); ?>" id="<?php $this->field_id( 'description_separator' . $name ); ?>" value="<?php echo $name ?>" <?php checked( $sep_option, $name ); ?> />
-				<label for="<?php $this->field_id( 'description_separator' . $name ); ?>" <?php echo ( $name == 'pipe' || $name == 'dash' ) ? $recommended : ''; ?>><?php echo $html ?></label>
-			<?php } ?>
-			</p>
-			<span class="description"><?php _e( 'If the Automated Description consists of two parts (title and excerpt), then the separator will go in between them.', 'autodescription' ); ?></span>
-		</fieldset>
-
-		<hr>
-
-		<h4><?php _e( 'Add Blogname to Description', 'autodescription' ); ?></h4>
-		<p id="description-onblogname-toggle">
-			<label for="<?php $this->field_id( 'description_blogname' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'description_blogname' ); ?>" id="<?php $this->field_id( 'description_blogname' ); ?>" <?php $this->is_conditional_checked( 'description_blogname' ); ?> value="1" <?php checked( $this->get_field_value( 'description_blogname' ) ); ?> />
-				<?php _e( 'Add blogname to automated description?', 'autodescription' ); ?>
-			</label>
-		</p>
-		<?php
-
-		do_action( 'the_seo_framework_description_metabox_after' );
-	}
-
-	/**
-	 * Robots meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @see $this->robots_metabox()      Callback for Robots Settings box.
-	 */
-	public function robots_metabox( $args = array() ) {
-
-		do_action( 'the_seo_framework_robots_metabox_before' );
-
-		//* Robots types
-		$types = array(
-			'category' => __( 'Category', 'autodescription'),
-			'tag' => __( 'Tag', 'autodescription'),
-			'author' => __( 'Author', 'autodescription'),
-			'date' => __( 'Date', 'autodescription'),
-			'search' => __( 'Search Pages', 'autodescription'),
-			'attachment' => __( 'Attachment Pages', 'autodescription'),
-			'site' => __( 'the entire site', 'autodescription'),
-		);
-
-		//* Robots i18n
-		$robots = array(
-			'noindex' =>  array(
-				'value' => 'noindex',
-				'name' 	=> __( 'NoIndex', 'autodescription'),
-				'desc' 	=> __( 'These options prevent indexing of the selected archives. If you enable this, the selected archives will be removed from search engine result pages.', 'autodescription' ),
-			),
-			'nofollow' =>  array(
-				'value' => 'nofollow',
-				'name'	=> __( 'NoFollow', 'autodescription'),
-				'desc'	=> __( 'These options prevent links from being followed on the selected archives. If you enable this, the selected archives in-page links will gain no SEO value, including your own links.', 'autodescription' ),
-			),
-			'noarchive' =>  array(
-				'value' => 'noarchive',
-				'name'	=> __( 'NoArchive', 'autodescription'),
-				'desc'	=> __( 'These options prevent caching of the selected archives. If you enable this, search engines will not create a cached copy of the selected archives.', 'autodescription' ),
-			),
-		);
-
-		/**
-		 * Parse tabs content
-		 *
-		 * @param array $default_tabs { 'id' = The identifier =>
-		 *			array(
-		 *				'name' 		=> The name
-		 *				'callback'	=> function callback
-		 *				'dashicon'	=> WordPress Dashicon
-		 *				'args'		=> function args
-		 *			)
-		 * }
-		 *
-		 * @since 2.2.2
-		 */
-		$default_tabs = array(
-				'general' => array(
-					'name' 		=> __( 'General', 'autodescription' ),
-					'callback'	=> array( $this, 'robots_metabox_general_tab' ),
-					'dashicon'	=> 'admin-generic',
-					'args'		=> '',
-				),
-				'index' => array(
-					'name' 		=> __( 'Indexing', 'autodescription' ),
-					'callback'	=> array( $this, 'robots_metabox_no_tab' ),
-					'dashicon'	=> 'filter',
-					'args'		=> array( $types, $robots['noindex'] ),
-				),
-				'follow' => array(
-					'name'		=> __( 'Following', 'autodescription'),
-					'callback'	=> array( $this, 'robots_metabox_no_tab' ),
-					'dashicon'	=> 'editor-unlink',
-					'args'		=> array( $types, $robots['nofollow'] ),
-				),
-				'archive' => array(
-					'name'		=> __( 'Archiving', 'autodescription'),
-					'callback'	=> array( $this, 'robots_metabox_no_tab' ),
-					'dashicon'	=> 'download',
-					'args'		=> array( $types, $robots['noarchive'] ),
-				),
-			);
-
-		/**
-		 * Filter robots_settings_tabs
-		 *
-		 * Used to extend Social tabs
-		 * @since 2.2.4
-		 *
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$defaults = (array) apply_filters( 'the_seo_framework_robots_settings_tabs', $default_tabs, $args );
-
-		$tabs = wp_parse_args( $args, $defaults );
-
-		$this->nav_tab_wrapper( 'robots', $tabs, '2.2.4' );
-
-		do_action( 'the_seo_framework_robots_metabox_after' );
-
-	}
-
-	/**
-	 * Robots Metabox General Tab output
-	 *
-	 * @since 2.2.4
-	 */
-	protected function robots_metabox_general_tab() {
-		?>
-		<h4><?php printf( __( 'Open Directory Settings', 'autodescription' ) ); ?></h4>
-		<p><span class="description"><?php printf( __( "Sometimes, search engines use resources from certain Directories to find titles and descriptions for your content. You generally don't want them to do so. Turn these options on to prevent them from doing so.", 'autodescription' ), $this->code_wrap( 'noodp' ), $this->code_wrap( 'noydir' ) ); ?></span></p>
-		<p><span class="description"><?php printf( __( "The Open Directory Project and the Yahoo! Directory may contain outdated SEO values. Therefore, it's best to leave these options checked.", 'autodescription' ) ); ?></span></p>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'noodp' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'noodp' ); ?>" id="<?php $this->field_id( 'noodp' ); ?>" <?php $this->is_conditional_checked( 'noodp' ); ?> value="1" <?php checked( $this->get_field_value( 'noodp' ) ); ?> />
-				<?php printf( __( 'Apply %s to the entire site?', 'autodescription' ), $this->code_wrap( 'noodp' ) ) ?>
-			</label>
-
-			<br />
-
-			<label for="<?php $this->field_id( 'noydir' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'noydir' ); ?>" id="<?php $this->field_id( 'noydir' ); ?>"  <?php $this->is_conditional_checked( 'noydir' ); ?> value="1" <?php checked( $this->get_field_value( 'noydir' ) ); ?> />
-				<?php printf( __( 'Apply %s to the entire site?', 'autodescription' ), $this->code_wrap( 'noydir' ) ) ?>
-			</label>
-		</p>
-
-		<hr>
-
-		<h4><?php printf( __( 'Paged Archive Settings', 'autodescription' ) ); ?></h4>
-		<p><span class="description"><?php printf( __( "Indexing the second or later page of any archive might cause duplication errors, search engines look down upon them. Therefore it's recommended to disable indexing of those pages.", 'autodescription' ), $this->code_wrap( 'noodp' ), $this->code_wrap( 'noydir' ) ); ?></span></p>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'paged_noindex' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'paged_noindex' ); ?>" id="<?php $this->field_id( 'paged_noindex' ); ?>" <?php $this->is_conditional_checked( 'paged_noindex' ); ?> value="1" <?php checked( $this->get_field_value( 'paged_noindex' ) ); ?> />
-				<?php printf( __( 'Apply %s to every second or later archive page?', 'autodescription' ), $this->code_wrap( 'noindex' ) ) ?>
-			</label>
-		</p>
-		<?php
-	}
-
-	/**
-	 * Robots Metabox
-	 *		No-: Index/Follow/Archive
-	 * Tab output
-	 *
-	 * @since 2.2.4
-	 */
-	protected function robots_metabox_no_tab( $types, $robots ) {
-
-		$ro_value = $robots['value'];
-		$ro_name = $robots['name'];
-		$ro_i18n = $robots['desc'];
-
-		?>
-		<h4><?php printf( __( '%s Robots Settings', 'autodescription' ), $ro_name ); ?></h4>
-		<p><span class="description"><?php echo $ro_i18n ?></span></p>
-		<p class="fields">
-			<?php
-			foreach ( $types as $type => $i18n ) {
-				if ( $type == 'site' || $type == 'attachment' || $type == 'search' ) {
-
-					//* Add <hr> if it's 'site'
-					echo $type == 'site' ? '<hr>' : '';
-
-					?>
-					<label for="<?php $this->field_id( $type . '_' . $ro_value ); ?>">
-						<input type="checkbox" name="<?php $this->field_name( $type . '_' . $ro_value ); ?>" <?php $this->is_conditional_checked( $type . '_' . $ro_value ); ?> id="<?php $this->field_id( $type . '_' . $ro_value ); ?>" value="1" <?php checked( $this->get_field_value( $type . '_' . $ro_value ) ); ?> />
-						<?php printf( __( 'Apply %s to %s?', 'autodescription' ), $this->code_wrap( $ro_name ), $i18n ); ?>
-					</label>
-					<br />
-					<?php
-				} else {
-					?>
-					<label for="<?php $this->field_id( $type . '_' . $ro_value ); ?>">
-						<input type="checkbox" name="<?php $this->field_name( $type . '_' . $ro_value ); ?>" <?php $this->is_conditional_checked( $type . '_' . $ro_value ); ?> id="<?php $this->field_id( $type . '_' . $ro_value ); ?>" value="1" <?php checked( $this->get_field_value( $type . '_' . $ro_value ) ); ?> />
-						<?php printf( __( 'Apply %s to %s Archives?', 'autodescription' ), $this->code_wrap( $ro_name ), $i18n ); ?>
-					</label>
-					<br />
-					<?php
-				}
-			}
-			?>
-		</p>
-		<?php
-
-	}
-
-	/**
-	 * Home Page meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses globals $wpdb fetch post for example
-	 *
-	 * @see $this->homepage_metabox()      Callback for Title Settings box.
-	 */
-	public function homepage_metabox() {
-
-		do_action( 'the_seo_framework_homepage_metabox_before' );
-
-		/**
-		 * @param string $language The language for help pages. See $this->google_language();
-		 */
-		$language = $this->google_language();
-
-		/**
-		 * @param bool $home_is_blog_notify True if homepage is blog, false if single page/post
-		 * @param bool $home_title_frompost True if home inpost title is filled in. False if not.
-		 * @param bool $home_description_frompost True if home inpost title is filled in. False if not.
-		 */
-		$home_is_blog_notify = false;
-		$home_title_frompost = false;
-		$home_description_frompost = false;
-
-		/**
-		 * Notify the user that the data is pulled from the post.
-		 */
-		$description_from_post_message = '';
-		$title_from_post_message  = '';
-
-		// Setting up often used Translations
-		$title_i18n = __( 'Title', 'autodescription' );
-		$description_i18n = __( 'Description', 'autodescription' );
-		$home_page_i18n = __( 'Home Page', 'autodescription' );
-
-		//* Is the frontpage static or a blog?
-		if ( 'page' == get_option( 'show_on_front' ) ) {
-			$home_id = (int) get_option( 'page_on_front' );
-		} else {
-			$home_id = 0;
-			$home_is_blog_notify = true;
-		}
-
-		// Get title separator
-		$title_separator = $this->title_separator;
-		$sep_option = $this->get_field_value( 'title_seperator' ); // Note: typo
-		$sep = array_search( $sep_option, array_flip( $title_separator ), false );
-
-		$home_title = $this->get_field_value( 'homepage_title' );
-		$frompost_title = $home_is_blog_notify ? '' : $this->get_custom_field( '_genesis_title', $home_id );
-
-		/**
-		 * @since 2.2.4
-		 *
-		 * Reworked. It now checks if the home is blog, the Home Page Metabox
-		 * title and the frompost title.
-		 * @since 2.3.4
-		 */
-		if ( empty( $home_title ) && ! $home_is_blog_notify && ! empty( $frompost_title ) )
-			$home_title_frompost = true;
-
-		//* Get blog tagline
-		$blog_description = $this->get_blogdescription();
-
-		/**
-		 * Homepage Tagline settings.
-		 * @since 2.3.8
-		 *
-		 * @param string $home_tagline The tagline option.
-		 * @param string $home_tagline_placeholder The option placeholder. Always defaults to description.
-		 * @param string|void $home_tagline_value The tagline input value.
-		 * @param string $blog_description Override blog description with option if applicable.
-		 */
-		$home_tagline = $this->get_field_value( 'homepage_title_tagline' );
-		$home_tagline_placeholder = $blog_description;
-		$home_tagline_value = $home_tagline ? $home_tagline : '';
-		$blog_description = $home_tagline_value ? $home_tagline_value : $blog_description;
-
-		/**
-		 * Create a placeholder if there's no custom HomePage title found.
-		 * @since 2.2.4
-		 *
-		 * Reworked. Creates placeholders for when it's being emptied.
-		 * @since 2.3.4
-		 */
-		if ( ! empty( $frompost_title ) ) {
-			//* Fetch frompost title.
-			if ( $this->get_option( 'homepage_tagline' ) ) {
-				$home_title_placeholder = $frompost_title . " $sep " . $blog_description;
-			} else {
-				$home_title_placeholder = $frompost_title;
-			}
-		} else if ( ! empty( $home_title ) ) {
-			//* Fetch default title
-			$blogname = $this->get_blogname();
-
-			if ( $this->get_option( 'homepage_tagline' ) ) {
-				$home_title_placeholder = $blogname . " $sep " . $blog_description;
-			} else {
-				$home_title_placeholder = $blogname;
-			}
-		} else {
-			//* All is empty. Use default title.
-			$home_title_placeholder = $this->title( '', '', '', array( 'page_on_front' => true ) );
-		}
-
-		/**
-		 * If the home title is fetched from the post, notify about that instead.
-		 * @since 2.2.4
-		 *
-		 * Added 'Note:'
-		 * @since 2.2.5
-		 *
-		 * Nesting often used translations
-		 */
-		if ( $home_title_frompost )
-			$title_from_post_message = __( 'Note:', 'autodescription' ) . ' ' . sprintf( __( 'The %s is fetched from the %s on the %s.', 'autodescription' ), $title_i18n, __( 'Page SEO Settings', 'autodescription' ), $home_page_i18n );
-
-		/**
-		 * Generate example for Title Additions Location
-		 *
-		 * Double (nested) check.
-		 * @param string $frompost_title The possible title from the post.
-		 */
-		$title_example_pre = ! empty( $home_title ) ? $home_title : $frompost_title;
-		$title_example = ! empty( $title_example_pre ) ? $title_example_pre : $this->get_blogname();
-
-		/**
-		 * Check for options to calculate title length.
-		 *
-		 * @since 2.3.4
-		 */
-		if ( ! empty( $home_title ) ) {
-			if ( $this->get_option( 'homepage_tagline' ) ) {
-				$tit_len_pre = $home_title . " $sep " . $blog_description;
-			} else {
-				$tit_len_pre = $home_title;
-			}
-		} else {
-			$tit_len_pre = $home_title_placeholder;
-		}
-
-		//* Fetch the description from the home page.
-		$frompost_description = $home_is_blog_notify ? '' : $this->get_custom_field( '_genesis_description', $home_id );
-
-		//* Fetch the HomePage Description option.
-		$home_description = $this->get_field_value( 'homepage_description' );
-
-		/**
-		 * Create a placeholder if there's no custom HomePage description found.
-		 * @since 2.2.4
-		 *
-		 * Reworked. Always create a placeholder.
-		 * @since 2.3.4
-		 */
-		if ( ! empty( $frompost_description ) ) {
-			$description_placeholder = $frompost_description;
-		} else {
-			$description_args = array(
-				'id' => $home_id,
-				'is_home' => true,
-				'get_custom_field' => false
-			);
-
-			$description_placeholder = $this->generate_description( '', $description_args );
-		}
-
-		/**
-		 * Checks if the home is blog, the Home Page Metabox description and
-		 * the frompost description.
-		 * @since 2.3.4
-		 */
-		if ( empty( $home_description ) && ! $home_is_blog_notify && ! empty( $frompost_description )  )
-			$home_description_frompost = true;
-
-		/**
-		 *
-		 * If the HomePage Description empty, it will check for the InPost
-		 * Description set on the Home Page. And it will set the InPost
-		 * Description as placeholder.
-		 *
-		 * Nesting often used translations.
-		 *
-		 * Notify that the homepage is a blog.
-		 * @since 2.2.2
-		 *
-		 * If the home description is fetched from the post, notify about that instead.
-		 * @since 2.2.4
-		 *
-		 * Added 'Note:'
-		 * Removed notify that homepage is a blog.
-		 * @since 2.2.5
-		 */
-		if ( $home_description_frompost )
-			$description_from_post_message = __( 'Note:', 'autodescription' ) . ' ' . sprintf( __( 'The %s is fetched from the %s on the %s.', 'autodescription' ), $description_i18n, __( 'Page SEO Settings', 'autodescription' ), $home_page_i18n );
-
-		$desc_len_pre = ! empty( $home_description ) ? $home_description : $description_placeholder;
-
-		/**
-		 * Convert to what Google outputs.
-		 *
-		 * This will convert e.g. &raquo; to a single length character.
-		 * @since 2.3.4
-		 */
-		$tit_len = html_entity_decode( $tit_len_pre );
-		$desc_len = html_entity_decode( $desc_len_pre );
-
-		/**
-		 * Generate Examples for both left and right seplocations.
-		 */
-		$example_left = '<em><span class="custom-title-js">' . esc_attr( $title_example ) . '</span><span class="custom-blogname-js"><span class="autodescription-sep-js"> ' . esc_attr( $sep ) . ' </span><span class="custom-tagline-js">' . esc_attr( $blog_description ) . '</span></span></span>' . '</em>';
-		$example_right = '<em>' . '<span class="custom-blogname-js"><span class="custom-tagline-js">' . esc_attr( $blog_description ) . '</span><span class="autodescription-sep-js"> ' . esc_attr( $sep ) . ' </span></span><span class="custom-title-js">' . esc_attr( $title_example ) . '</span></em>';
-
-		$noindex_post = $this->get_custom_field( '_genesis_noindex', $home_id );
-		$nofollow_post = $this->get_custom_field( '_genesis_nofollow', $home_id );
-		$noarchive_post = $this->get_custom_field( '_genesis_noarchive', $home_id );
-
-		/**
-		 * Shows user that the setting is checked on the home page.
-		 * Adds starting - with space to maintain readability.
-		 *
-		 * @since 2.2.4
-		 */
-		if ( $noindex_post || $nofollow_post || $noarchive_post ) {
-			$checked_home = ' - <a href="' . esc_url( admin_url( 'post.php?post=' . $home_id . '&action=edit#theseoframework-inpost-box' ) ) . '" target="_blank" class="attention" title="' . __( 'View Home Page Settings', 'autodescription' ) . '" >' . __( 'Checked in Page', 'autodescription' ) . '</a>';
-		} else {
-			$checked_home = '';
-		}
-
-		?>
-		<p><span class="description"><?php printf( __( 'These settings will take precedence over the settings set within the home page page edit screen, if any.', 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<fieldset>
-			<legend><h4><?php _e( 'Document Title Additions Location', 'autodescription' ); ?></h4></legend>
-			<span class="description"><?php _e( 'Determines which side the added title text will go on.', 'autodescription' ); ?></span>
-
-			<p id="home-title-location" class="fields">
-				<span>
-					<input type="radio" name="<?php $this->field_name( 'home_title_location' ); ?>" id="<?php $this->field_id( 'home_title_location_left' ); ?>" value="left" <?php checked( $this->get_field_value( 'home_title_location' ), 'left' ); ?> />
-					<label for="<?php $this->field_id( 'home_title_location_left' ); ?>">
-						<span><?php _e( 'Left:', 'autodescription' ); ?></span>
-						<?php echo ( $example_left ) ? $this->code_wrap_noesc( $example_left ) : ''; ?>
-					</label>
-				</span>
-				<span>
-					<input type="radio" name="<?php $this->field_name( 'home_title_location' ); ?>" id="<?php $this->field_id( 'home_title_location_right' ); ?>" value="right" <?php checked( $this->get_field_value( 'home_title_location' ), 'right' ); ?> />
-					<label for="<?php $this->field_id( 'home_title_location_right' ); ?>">
-						<span><?php _e( 'Right:', 'autodescription' ); ?></span>
-						<?php echo ( $example_right ) ? $this->code_wrap_noesc( $example_right ) : ''; ?>
-					</label>
-				</span>
-			</p>
-		</fieldset>
-
-		<hr>
-
-		<h4 style="margin-top:0;"><?php printf( __( '%s Tagline', 'autodescription' ), $home_page_i18n ); ?></h4>
-		<p id="title-tagline-toggle">
-			<label for="<?php $this->field_id( 'homepage_tagline' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'homepage_tagline' ); ?>" id="<?php $this->field_id( 'homepage_tagline' ); ?>" <?php $this->is_conditional_checked( 'homepage_tagline' ); ?> value="1" <?php checked( $this->get_field_value( 'homepage_tagline' ) ); ?> />
-				<?php printf( __( 'Add site description (tagline) to the Title on the %s?', 'autodescription' ), $home_page_i18n ); ?>
-			</label>
-		</p>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'homepage_title_tagline' ); ?>">
-				<strong><?php printf( __( 'Custom %s Title Tagline', 'autodescription' ), $home_page_i18n ); ?></strong>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'homepage_title_tagline' ); ?>" class="large-text" id="<?php $this->field_id( 'homepage_title_tagline' ); ?>" placeholder="<?php echo $home_tagline_placeholder ?>" value="<?php echo esc_attr( $home_tagline_value ); ?>" />
-		</p>
-
-		<hr>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'homepage_title' ); ?>">
-				<strong><?php printf( __( 'Custom %s Title', 'autodescription' ), $home_page_i18n ); ?></strong>
-				<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#3" target="_blank" title="<?php _e( 'Recommended Length: 50 to 55 characters', 'autodescription' ) ?>">[?]</a>
-				<span class="description"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="' . $this->field_id( 'homepage_title', false ) . '_chars">'. mb_strlen( $tit_len ) .'</span>' ); ?></span>
-			</label>
-		</p>
-		<p class="fields">
-			<div id="autodescription-title-wrap">
-				<input type="text" name="<?php $this->field_name( 'homepage_title' ); ?>" class="large-text" id="<?php $this->field_id( 'homepage_title' ); ?>" placeholder="<?php echo $home_title_placeholder ?>" value="<?php echo esc_attr( $home_title ); ?>" />
-				<span id="autodescription-title-offset" class="hide-if-no-js"></span><span id="autodescription-title-placeholder" class="hide-if-no-js"></span>
-			</div>
-			<?php
-			if ( $title_from_post_message ) {
-				echo '<br /><span class="description">' . $title_from_post_message . '</span>';
-			}
-			?>
-		</p>
-
-		<hr>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'homepage_description' ); ?>">
-				<strong><?php printf( __( 'Custom %s Description', 'autodescription' ), $home_page_i18n ); ?></strong>
-				<a href="https://support.google.com/webmasters/answer/35624?hl=<?php echo $language; ?>#1" target="_blank" title="<?php _e( 'Recommended Length: 145 to 155 characters', 'autodescription' ) ?>">[?]</a>
-				<span class="description"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="' . $this->field_id( 'homepage_description', false ) . '_chars">'. mb_strlen( $desc_len ) .'</span>' ); ?></span>
-			</label>
-		</p>
-		<p>
-			<textarea name="<?php $this->field_name( 'homepage_description' ); ?>" class="large-text" id="<?php $this->field_id( 'homepage_description' ); ?>" rows="3" cols="70"  placeholder="<?php echo $description_placeholder ?>"><?php echo esc_textarea( $home_description ); ?></textarea>
-			<br />
-			<span class="description"><?php _e( 'The meta description can be used to determine the text used under the title on search engine results pages.', 'autodescription' ); ?></span>
-			<?php
-			if ( $description_from_post_message ) {
-				echo '<br /><span class="description">' . $description_from_post_message . '</span>';
-			}
-			?>
-
-		</p>
-
-		<hr>
-
-		<h4><?php _e( 'Homepage Robots Meta Settings', 'autodescription' ); ?></h4>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'homepage_noindex' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'homepage_noindex' ); ?>" id="<?php $this->field_id( 'homepage_noindex' ); ?>" <?php $this->is_conditional_checked( 'homepage_noindex' ); ?> value="1" <?php checked( $this->get_field_value( 'homepage_noindex' ) ); ?> />
-				<?php printf( __( 'Apply %s to the %s?', 'autodescription' ), $this->code_wrap( 'noindex' ), $home_page_i18n ); ?>
-				<a href="https://support.google.com/webmasters/answer/93710?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to show this page in their search results', 'autodescription' ) ) ?>">[?]</a>
-				<?php echo $noindex_post ? $checked_home : ''; ?>
-			</label>
-
-			<br />
-
-			<label for="<?php $this->field_id( 'homepage_nofollow' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'homepage_nofollow' ); ?>" id="<?php $this->field_id( 'homepage_nofollow' ); ?>" <?php $this->is_conditional_checked( 'homepage_nofollow' ); ?> value="1" <?php checked( $this->get_field_value( 'homepage_nofollow' ) ); ?> />
-				<?php printf( __( 'Apply %s to the %s?', 'autodescription' ), $this->code_wrap( 'nofollow' ), $home_page_i18n ); ?>
-				<a href="https://support.google.com/webmasters/answer/96569?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to follow links on this page', 'autodescription' ) ) ?>">[?]</a>
-				<?php echo $nofollow_post ? $checked_home : ''; ?>
-			</label>
-
-			<br />
-
-			<label for="<?php $this->field_id( 'homepage_noarchive' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'homepage_noarchive' ); ?>" id="<?php $this->field_id( 'homepage_noarchive' ); ?>" <?php $this->is_conditional_checked( 'homepage_noarchive' ); ?> value="1" <?php checked( $this->get_field_value( 'homepage_noarchive' ) ); ?> />
-				<?php printf( __( 'Apply %s to the %s?', 'autodescription' ), $this->code_wrap( 'noarchive' ), $home_page_i18n ); ?>
-				<a href="https://support.google.com/webmasters/answer/79812?hl=<?php echo $language; ?>" target="_blank" title="<?php printf( __( 'Tell Search Engines not to save a cached copy this page', 'autodescription' ) ) ?>">[?]</a>
-				<?php echo $noarchive_post ? $checked_home : ''; ?>
-			</label>
-		</p>
-
-		<?php
-		// Add notice if any options are checked on the post.
-		if ( $noindex_post || $nofollow_post || $noarchive_post ) {
-			?><p><span class="description"><?php printf( __( 'Note: If any of these options are unchecked, but are checked on the homepage, they will be output regardless.', 'autodescription' ) ); ?></span></p><?php
-		}
-
-		do_action( 'the_seo_framework_homepage_metabox_after' );
-
-	}
-
-	/**
-	 * Social meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses $this->social_metabox_general_tab()
-	 * @uses $this->social_metabox_facebook_tab()
-	 * @uses $this->social_metabox_twitter_tab()
-	 *
-	 * @applies filter 'social_settings_tabs'
-	 *
-	 * @param array $args the social tabs arguments
-	 */
-	public function social_metabox( $args = array() ) {
-
-		do_action( 'the_seo_framework_social_metabox_before' );
-
-		/**
-		 * Parse tabs content
-		 *
-		 * @param array $default_tabs { 'id' = The identifier =>
-		 *			array(
-		 *				'name' 		=> The name
-		 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
-		 *				'dashicon'	=> Desired dashicon
-		 *			)
-		 * }
-		 *
-		 * @since 2.2.2
-		 */
-		$default_tabs = array(
-			'general' => array(
-				'name' 		=> __( 'General', 'autodescription' ),
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'social_metabox_general_tab' ),
-				'dashicon'	=> 'admin-generic',
-			),
-			'facebook' => array(
-				'name'		=> 'Facebook',
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'social_metabox_facebook_tab' ),
-				'dashicon'	=> 'facebook-alt',
-			),
-			'twitter' => array(
-				'name'		=> 'Twitter',
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'social_metabox_twitter_tab' ),
-				'dashicon'	=> 'twitter',
-			),
-			'postdates' => array(
-				'name'		=> __( 'Post Dates', 'autodescription' ),
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'social_metabox_postdates_tab' ),
-				'dashicon'	=> 'backup',
-			),
-			'relationships' => array(
-				'name'		=> __( 'Link Relationships', 'autodescription' ),
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'social_metabox_relationships_tab' ),
-				'dashicon'	=> 'leftright',
-			),
-		);
-
-		/**
-		 * Filter social_settings_tabs
-		 *
-		 * Used to extend Social tabs
-		 *
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$defaults = (array) apply_filters( 'the_seo_framework_social_settings_tabs', $default_tabs );
-
-		$tabs = wp_parse_args( $args, $defaults );
-
-		$this->nav_tab_wrapper( 'social', $tabs, '2.2.2' );
-
-		do_action( 'the_seo_framework_social_metabox_after' );
-
-	}
-
-	/**
-	 * Social Metabox General Tab output
-	 *
-	 * @since 2.2.2
-	 *
-	 * @see $this->social_metabox() Callback for Social Settings box.
-	 */
-	protected function social_metabox_general_tab() {
-
-		?>
-		<h4><?php _e( 'Site Shortlink Settings', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( 'The shortlink tag might have some use for 3rd party service discoverability, but it has little to no SEO value whatsoever.', 'autodescription') ); ?></span></p>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'shortlink_tag' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'shortlink_tag' ); ?>" id="<?php $this->field_id( 'shortlink_tag' ); ?>" <?php $this->is_conditional_checked( 'shortlink_tag' ); ?> value="1" <?php checked( $this->get_field_value( 'shortlink_tag' ) ); ?> />
-				<?php _e( 'Output shortlink tag?', 'autodescription' ); ?>
-			</label>
-		</p>
-
-		<hr>
-
-		<h4><?php _e( 'Output Meta Tags', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( 'Output various meta tags for social site integration, among other 3rd party services.', 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'og_tags' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'og_tags' ); ?>" id="<?php $this->field_id( 'og_tags' ); ?>" <?php $this->is_conditional_checked( 'og_tags' ); ?>  value="1" <?php checked( $this->get_field_value( 'og_tags' ) ); ?> />
-				<?php _e( 'Output Open Graph meta tags?', 'autodescription' ); ?>
-			</label>
-			<p class="description"><?php _e( 'Facebook, Twitter, Pinterest and many other social sites make use of these tags.', 'autodescription' ); ?></p>
-			<?php
-			if ( $this->has_og_plugin() ) {
-				?>
-				<p class="description"><?php _e( 'Note: Another Open Graph plugin has been detected. This means not all Open Graph meta tags will be output.', 'autodescription' ); ?></p>
-				<?php
-			}
-			?>
-		</p>
-
-		<hr>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'facebook_tags' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'facebook_tags' ); ?>" id="<?php $this->field_id( 'facebook_tags' ); ?>" <?php $this->is_conditional_checked( 'facebook_tags' ); ?> value="1" <?php checked( $this->get_field_value( 'facebook_tags' ) ); ?> />
-				<?php _e( 'Output Facebook meta tags?', 'autodescription' ); ?>
-			</label>
-			<p class="description"><?php printf( __( 'Output various tags targetted at %s.', 'autodescription' ), 'Facebook' ); ?></p>
-		</p>
-
-		<hr>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'twitter_tags' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'twitter_tags' ); ?>" id="<?php $this->field_id( 'twitter_tags' ); ?>" <?php $this->is_conditional_checked( 'twitter_tags' ); ?> value="1" <?php checked( $this->get_field_value( 'twitter_tags' ) ); ?> />
-				<?php _e( 'Output Twitter meta tags?', 'autodescription' ); ?>
-				<p class="description"><?php printf( __( 'Output various tags targetted at %s.', 'autodescription' ), 'Twitter' ); ?></p>
-			</label>
-		</p>
-		<?php
-	}
-
-	/**
-	 * Social Metabox Open Graph Tab Output
-	 *
-	 * @since 2.2.2
-	 * @TODO
-	 *
-	 * @see $this->social_metabox() Callback for Social Settings box.
-	 */
-	protected function social_metabox_opengraph_tab() {
-		?><h4>Coming soon!</h4><?php
-	}
-
-	/**
-	 * Social Metabox Facebook Tab Output
-	 *
-	 * @since 2.2.2
-	 *
-	 * @see $this->social_metabox() Callback for Social Settings box.
-	 */
-	protected function social_metabox_facebook_tab() {
-
-		$fb_author = $this->get_field_value( 'facebook_author' );
-		$fb_author_placeholder = empty( $fb_publisher ) ? _x( 'http://www.facebook.com/YourPersonalProfile', 'Example Facebook Personal URL', 'autodescription' ) : '';
-
-		$fb_publisher = $this->get_field_value( 'facebook_publisher' );
-		$fb_publisher_placeholder = empty( $fb_publisher ) ? _x( 'http://www.facebook.com/YourVerifiedBusinessProfile', 'Example Verified Facebook Business URL', 'autodescription' ) : '';
-
-		$fb_appid = $this->get_field_value( 'facebook_appid' );
-		$fb_appid_placeholder = empty( $fb_appid ) ? '123456789012345' : '';
-
-		?>
-		<h4><?php _e( 'Default Facebook Integration Settings', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( 'Facebook post sharing works mostly through Open Graph. However, you can also link your Business and Personal Facebook pages, among various other options.', 'autodescription' ) ); ?></span></p>
-		<p><span class="description"><?php printf( __( 'When these options are filled in, Facebook might link your Facebook Profiles to be followed and liked when your post or page is shared.', 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'facebook_author' ); ?>">
-				<strong><?php _e( 'Article Author Facebook URL', 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( 'https://facebook.com/me' ); ?>" class="description" target="_blank" title="<?php _e( 'Your Facebook profile.', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'facebook_author' ); ?>" class="large-text" id="<?php $this->field_id( 'facebook_author' ); ?>" placeholder="<?php echo $fb_author_placeholder ?>" value="<?php echo esc_attr( $fb_author ); ?>" />
-		</p>
-
-		<p>
-			<label for="<?php $this->field_id( 'facebook_publisher' ); ?>">
-				<strong><?php _e( 'Article Publisher Facebook URL', 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( 'https://instantarticles.fb.com/' ); ?>" class="description" target="_blank" title="<?php _e( 'To use this, you need to be a verified business.', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'facebook_publisher' ); ?>" class="large-text" id="<?php $this->field_id( 'facebook_publisher' ); ?>" placeholder="<?php echo $fb_publisher_placeholder ?>" value="<?php echo esc_attr( $fb_publisher ); ?>" />
-		</p>
-
-		<p>
-			<label for="<?php $this->field_id( 'facebook_appid' ); ?>">
-				<strong><?php _e( 'Facebook App ID', 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( 'https://developers.facebook.com/apps' ); ?>" target="_blank" class="description" title="<?php _e( 'Get Facebook App ID', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'facebook_appid' ); ?>" class="large-text" id="<?php $this->field_id( 'facebook_appid' ); ?>" placeholder="<?php echo $fb_appid_placeholder ?>" value="<?php echo esc_attr( $fb_appid ); ?>" />
-		</p>
-		<?php
-
-	}
-
-	/**
-	 * Social Metabox Twitter Tab Output
-	 *
-	 * @since 2.2.2
-	 *
-	 * @see $this->social_metabox() Callback for Social Settings box.
-	 */
-	protected function social_metabox_twitter_tab() {
-
-		$tw_site = $this->get_field_value( 'twitter_site' );
-		$tw_site_placeholder = empty( $tw_site ) ? _x( '@your-site-username', 'Twitter @username', 'autodescription' ) : '';
-
-		$tw_creator = $this->get_field_value( 'twitter_creator' );
-		$tw_creator_placeholder = empty( $tw_creator ) ? _x( '@your-personal-username', 'Twitter @username', 'autodescription' ) : '';
-
-		?>
-		<h4><?php _e( 'Default Twitter Integration Settings', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( 'Twitter post sharing works mostly through Open Graph. However, you can also link your Business and Personal Twitter pages, among various other options.', 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<fieldset id="twitter-cards">
-			<legend><h4><?php _e( 'Twitter Card Type', 'autodescription' ); ?></h4></legend>
-			<span class="description"><?php printf( __( 'What kind of Twitter card would you like to use? It will default to %s if no image is found.', 'autodescription' ), $this->code_wrap( 'Summary' ) ); ?></span>
-
-			<?php
-			$twitter_card = $this->twitter_card;
-			foreach ( $twitter_card as $type => $name ) {
-				?>
-				<p>
-					<span>
-						<input type="radio" name="<?php $this->field_name( 'twitter_card' ); ?>" id="<?php $this->field_id( 'twitter_card_' . $type ); ?>" value="<?php echo $type ?>" <?php checked( $this->get_field_value( 'twitter_card' ), $type ); ?> />
-						<label for="<?php $this->field_id( 'twitter_card_' . $type ); ?>">
-							<span><?php echo $this->code_wrap( ucfirst( $name ) ); ?></span>
-							<a class="description" href="<?php echo esc_url('https://dev.twitter.com/cards/types/' . $name ); ?>" target="_blank" title="Twitter Card <?php echo ucfirst( $name ) . ' ' . __( 'Example', 'autodescription' ); ?>"><?php _e( 'Example', 'autodescription' ); ?></a>
-						</label>
-					</span>
-				</p>
-				<?php
-			}
-			?>
-		</fieldset>
-
-		<hr>
-
-		<p><span class="description"><?php printf( __( 'When the following options are filled in, Twitter might link your Twitter Site or Personal Profile when your post or page is shared.', 'autodescription' ) ); ?></span></p>
-		<p>
-			<label for="<?php $this->field_id( 'twitter_site' ); ?>">
-				<strong><?php _e( "Your Website's Twitter Profile", 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( 'https://twitter.com/home' ); ?>" target="_blank" class="description" title="<?php _e( 'Find your @username', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'twitter_site' ); ?>" class="large-text" id="<?php $this->field_id( 'twitter_site' ); ?>" placeholder="<?php echo $tw_site_placeholder ?>" value="<?php echo esc_attr( $tw_site ); ?>" />
-		</p>
-
-		<p>
-			<label for="<?php $this->field_id( 'twitter_creator' ); ?>">
-				<strong><?php _e( 'Your Personal Twitter Profile', 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( 'https://twitter.com/home' ); ?>" target="_blank" class="description" title="<?php _e( 'Find your @username', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'twitter_creator' ); ?>" class="large-text" id="<?php $this->field_id( 'twitter_creator' ); ?>" placeholder="<?php echo $tw_creator_placeholder ?>" value="<?php echo esc_attr( $tw_creator ); ?>" />
-		</p>
-		<?php
-
-	}
-
-	/**
-	 * Social Metabox PostDates Tab Output
-	 *
-	 * @since 2.2.4
-	 *
-	 * @see $this->social_metabox() Callback for Social Settings box.
-	 */
-	public function social_metabox_postdates_tab() {
-
-		$pages_i18n = __( 'Pages', 'autodescription' );
-		$posts_i18n = __( 'Posts', 'autodescription' );
-		$home_i18n = __( 'Home Page', 'autodescription' );
-
-		?>
-		<h4><?php printf( __( 'Post Dates Settings', 'autodescription' ) ); ?></h4>
-		<p><span class="description"><?php _e( "Some Search Engines output the publishing date and modified date next to the search results. These help search engines find new content and could impact SEO value.", 'autodescription' ); ?></span></p>
-		<p><span class="description"><?php _e( "It's recommended on posts, it's not recommended on pages unless you modify or create new pages frequently.", 'autodescription' ); ?></span></p>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'post_publish_time' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'post_publish_time' ); ?>" id="<?php $this->field_id( 'post_publish_time' ); ?>" <?php $this->is_conditional_checked( 'post_publish_time' ); ?> value="1" <?php checked( $this->get_field_value( 'post_publish_time' ) ); ?> />
-				<?php printf( __( 'Add %s to %s?', 'autodescription' ), $this->code_wrap( 'article:published_time' ), $posts_i18n ); ?>
-			</label>
-			<br />
-			<label for="<?php $this->field_id( 'page_publish_time' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'page_publish_time' ); ?>" id="<?php $this->field_id( 'page_publish_time' ); ?>" <?php $this->is_conditional_checked( 'page_publish_time' ); ?> value="1" <?php checked( $this->get_field_value( 'page_publish_time' ) ); ?> />
-				<?php printf( __( 'Add %s to %s?', 'autodescription' ), $this->code_wrap( 'article:published_time' ), $pages_i18n ); ?>
-			</label>
-		</p>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'post_modify_time' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'post_modify_time' ); ?>" id="<?php $this->field_id( 'post_modify_time' ); ?>" <?php $this->is_conditional_checked( 'post_modify_time' ); ?> value="1" <?php checked( $this->get_field_value( 'post_modify_time' ) ); ?> />
-				<?php printf( __( 'Add %s to %s?', 'autodescription' ), $this->code_wrap( 'article:modified_time' ), $posts_i18n ); ?>
-			</label>
-			<br />
-			<label for="<?php $this->field_id( 'page_modify_time' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'page_modify_time' ); ?>" id="<?php $this->field_id( 'page_modify_time' ); ?>" <?php $this->is_conditional_checked( 'page_modify_time' ); ?> value="1" <?php checked( $this->get_field_value( 'page_modify_time' ) ); ?> />
-				<?php printf( __( 'Add %s to %s?', 'autodescription' ), $this->code_wrap( 'article:modified_time' ), $pages_i18n ); ?>
-			</label>
-		</p>
-
-		<hr>
-
-		<h4><?php printf( __( 'Home Page', 'autodescription' ) ); ?></h4>
-		<p><span class="description"><?php _e( "Because you only publish the home page once, Search Engines might think your site is outdated. This can be prevented by disabling the following options.", 'autodescription' ); ?></span></p>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'home_publish_time' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'home_publish_time' ); ?>" id="<?php $this->field_id( 'home_publish_time' ); ?>" <?php $this->is_conditional_checked( 'home_publish_time' ); ?> value="1" <?php checked( $this->get_field_value( 'home_publish_time' ) ); ?> />
-				<?php printf( __( 'Add %s to the %s?', 'autodescription' ), $this->code_wrap( 'article:published_time' ), $home_i18n ); ?>
-			</label>
-			<br />
-			<label for="<?php $this->field_id( 'home_modify_time' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'home_modify_time' ); ?>" id="<?php $this->field_id( 'home_modify_time' ); ?>" <?php $this->is_conditional_checked( 'home_modify_time' ); ?> value="1" <?php checked( $this->get_field_value( 'home_modify_time' ) ); ?> />
-				<?php printf( __( 'Add %s to the %s?', 'autodescription' ), $this->code_wrap( 'article:modified_time' ), $home_i18n ); ?>
-			</label>
-		</p>
-		<?php
-	}
-
-	/**
-	 * Social Metabox Relationships Tab Output
-	 *
-	 * @since 2.2.4
-	 *
-	 * @see $this->social_metabox() Callback for Social Settings box.
-	 */
-	public function social_metabox_relationships_tab() {
-
-		?>
-		<h4><?php printf( __( 'Link Relationship Settings', 'autodescription' ) ); ?></h4>
-		<p><span class="description"><?php _e( "Some Search Engines look for relations between content of your pages. If you have multiple pages for a single Post or Page, or have archives indexed, this option will help Search Engines look for the right page to display in the Search Results.", 'autodescription' ); ?></span></p>
-		<p><span class="description"><?php _e( "It's recommended to turn this option on for better SEO consistency and to prevent duplicated content errors.", 'autodescription' ); ?></span></p>
-		<hr>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'prev_next_posts' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'prev_next_posts' ); ?>" id="<?php $this->field_id( 'prev_next_posts' ); ?>" <?php $this->is_conditional_checked( 'prev_next_posts' ); ?> value="1" <?php checked( $this->get_field_value( 'prev_next_posts' ) ); ?> />
-				<?php printf( __( 'Add %s link tags to Posts and Pages?', 'autodescription' ), $this->code_wrap( 'rel' ) ); ?>
-			</label>
-			<br />
-			<label for="<?php $this->field_id( 'prev_next_archives' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'prev_next_archives' ); ?>" id="<?php $this->field_id( 'prev_next_archives' ); ?>" <?php $this->is_conditional_checked( 'prev_next_archives' ); ?> value="1" <?php checked( $this->get_field_value( 'prev_next_archives' ) ); ?> />
-				<?php printf( __( 'Add %s link tags to Archives?', 'autodescription' ), $this->code_wrap( 'rel' ) ); ?>
-			</label>
-		</p>
-		<?php
-	}
-
-	/**
-	 * Webmaster meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.2.4
-	 */
-	public function webmaster_metabox() {
-
-		do_action( 'the_seo_framework_webmaster_metabox_before' );
-
-		$site_url = $this->the_home_url_from_cache();
-		$language = $this->google_language();
-
-		$bing_site_url = "https://www.bing.com/webmaster/configure/verify/ownership?url=" . urlencode( $site_url );
-		$google_site_url = "https://www.google.com/webmasters/verification/verification?hl=" . $language . "&siteUrl=" . $site_url;
-		$pint_site_url = "https://analytics.pinterest.com/";
-
-		?>
-		<h4><?php _e( 'Webmaster Integration Settings', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( "When adding your site to Google, Bing and other Webmaster Tools, you'll be asked to add a code or file to your site for verification purposes. These options will help you easily integrate those codes.", 'autodescription' ) ); ?></span></p>
-		<p><span class="description"><?php printf( __( "Verifying your website has no SEO value whatsoever. But you might gain added benefits such as search ranking insights to help you improve your Website's content.", 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<p>
-			<label for="<?php $this->field_id( 'google_verification' ); ?>">
-				<strong><?php _e( "Google Webmaster Verification Code", 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( $google_site_url ); ?>" target="_blank" class="description" title="<?php _e( 'Get the Google Verification code', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'google_verification' ); ?>" class="large-text" id="<?php $this->field_id( 'google_verification' ); ?>" placeholder="ABC1d2eFg34H5iJ6klmNOp7qRstUvWXyZaBc8dEfG9" value="<?php echo esc_attr( $this->get_field_value( 'google_verification' ) ); ?>" />
-		</p>
-
-		<p>
-			<label for="<?php $this->field_id( 'bing_verification' ); ?>">
-				<strong><?php _e( "Bing Webmaster Verification Code", 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( $bing_site_url ); ?>" target="_blank" class="description" title="<?php _e( 'Get Bing Verification Code', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'bing_verification' ); ?>" class="large-text" id="<?php $this->field_id( 'bing_verification' ); ?>" placeholder="123A456B78901C2D3456E7890F1A234D" value="<?php echo esc_attr( $this->get_field_value( 'bing_verification' ) ); ?>" />
-		</p>
-
-		<p>
-			<label for="<?php $this->field_id( 'pint_verification' ); ?>">
-				<strong><?php _e( "Pinterest Analytics Verification Code", 'autodescription' ); ?></strong>
-				<a href="<?php echo esc_url( $pint_site_url ); ?>" target="_blank" class="description" title="<?php _e( 'Get Pinterest Verification Code', 'autodescription' ); ?>">[?]</a>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'pint_verification' ); ?>" class="large-text" id="<?php $this->field_id( 'pint_verification' ); ?>" placeholder="123456a7b8901de2fa34bcdef5a67b98" value="<?php echo esc_attr( $this->get_field_value( 'pint_verification' ) ); ?>" />
-		</p>
-		<?php
-
-		do_action( 'the_seo_framework_webmaster_metabox_after' );
-
-	}
-
-	/**
-	 * Knowlegde Graph metabox on the Site SEO Settings page.
-	 *
-	 * @since 2.2.8
-	 *
-	 * @see $this->knowledge_metabox() Callback for Social Settings box.
-	 */
-	public function knowledge_metabox( $args = array() ) {
-
-		do_action( 'the_seo_framework_knowledge_metabox_before' );
-
-		/**
-		 * Parse tabs content
-		 *
-		 * @param array $default_tabs { 'id' = The identifier =>
-		 *			array(
-		 *				'name' 		=> The name
-		 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
-		 *				'dashicon'	=> Desired dashicon
-		 *			)
-		 * }
-		 *
-		 * @since 2.2.8
-		 */
-		$default_tabs = array(
-			'general' => array(
-				'name' 		=> __( 'General', 'autodescription' ),
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'knowledge_metabox_general_tab' ),
-				'dashicon'	=> 'admin-generic',
-			),
-			'website' => array(
-				'name'		=> __( 'Website', 'autodescription' ),
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'knowledge_metabox_about_tab' ),
-				'dashicon'	=> 'admin-home',
-			),
-			'social' => array(
-				'name'		=> 'Social Sites',
-				'callback'	=> array( 'AutoDescription_Metaboxes', 'knowledge_metabox_social_tab' ),
-				'dashicon'	=> 'networking',
-			),
-		);
-
-		/**
-		 * Applies filter knowledgegraph_settings_tabs
-		 *
-		 * Used to extend Knowledge Graph tabs
-		 *
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$defaults = (array) apply_filters( 'the_seo_framework_knowledgegraph_settings_tabs', $default_tabs );
-
-		$tabs = wp_parse_args( $args, $defaults );
-
-		$this->nav_tab_wrapper( 'knowledge', $tabs, '2.2.8' );
-
-		do_action( 'the_seo_framework_knowledge_metabox_after' );
-
-	}
-
-	/**
-	 * Knowledge Graph Metabox General Tab Output
-	 *
-	 * @since 2.2.8
-	 *
-	 * @see $this->knowledge_metabox() Callback for Knowledge Graph Settings box.
-	 */
-	public function knowledge_metabox_general_tab() {
-
-		?>
-		<h4><?php _e( 'Knowledge Graph Settings', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( "The Knowledge Graph lets Google and other Search Engines know where to find you or your organization and its relevant content.", 'autodescription' ) ); ?></span></p>
-		<p><span class="description"><?php printf( __( "Google is becoming more of an 'Answer Engine' than a 'Search Engine'. Setting up these options has a huge positive impact on the SEO value of your website.", 'autodescription' ) ); ?></span></p>
-
-		<p class="fields">
-			<label for="<?php $this->field_id( 'knowledge_output' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'knowledge_output' ); ?>" id="<?php $this->field_id( 'knowledge_output' ); ?>" <?php $this->is_conditional_checked( 'knowledge_output' ); ?> value="1" <?php checked( $this->get_field_value( 'knowledge_output' ) ); ?> />
-				<?php _e( 'Output Knowledge tags?', 'autodescription' ); ?>
-			</label>
-		</p>
-
-		<?php
-		if ( $this->wp_version( '4.3.0', '>=' ) ) :
-		?>
-			<hr>
-
-			<h4><?php printf( _x( "Website logo", 'WordPress Customizer', 'autodescription' ) ); ?></h4>
-			<p class="fields">
-				<label for="<?php $this->field_id( 'knowledge_logo' ); ?>">
-					<input type="checkbox" name="<?php $this->field_name( 'knowledge_logo' ); ?>" id="<?php $this->field_id( 'knowledge_logo' ); ?>" <?php $this->is_conditional_checked( 'knowledge_logo' ); ?> value="1" <?php checked( $this->get_field_value( 'knowledge_logo' ) ); ?> />
-					<?php _e( 'Use the Favicon from Customizer as Organization Logo?', 'autodescription' ); ?>
-				</label>
-			</p>
-			<p><span class="description"><?php printf( __( "This option only has effect when this site represents an Organization. If left disabled, Search Engines will look elsewhere for a logo, if it exists and is assigned as a logo.", 'autodescription' ) ); ?></span></p>
-
-		<?php
-		endif;
-
-	}
-
-	/**
-	 * Knowledge Graph Metabox About Tab Output
-	 *
-	 * @since 2.2.8
-	 *
-	 * @see $this->knowledge_metabox() Callback for Knowledge Graph Settings box.
-	 */
-	public function knowledge_metabox_about_tab() {
-
-		$blogname = $this->get_blogname();
-
-		?>
-		<h4><?php _e( 'About this website', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( 'About who or what is your website?', 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<p>
-			<label for="<?php $this->field_id( 'knowledge_type' ); ?>"><?php _ex( 'This website represents:', '...Organization or Person.', 'autodescription' ); ?></label>
-			<select name="<?php $this->field_name( 'knowledge_type' ); ?>" id="<?php $this->field_id( 'knowledge_type' ); ?>">
-			<?php
-			$knowledge_type = (array) apply_filters(
-				'the_seo_framework_knowledge_types',
-				array(
-					'organization'	=> __( 'An Organization', 'autodescription' ),
-					'person' 		=> __( 'A Person', 'autodescription' ),
-				)
-			);
-			foreach ( $knowledge_type as $value => $name )
-				echo '<option value="' . esc_attr( $value ) . '"' . selected( $this->get_field_value( 'knowledge_type' ), esc_attr( $value ), false ) . '>' . esc_html( $name ) . '</option>' . "\n";
-			?>
-			</select>
-		</p>
-
-		<hr>
-
-		<p>
-			<label for="<?php $this->field_id( 'knowledge_name' ); ?>">
-				<strong><?php _e( "The organization or personal name", 'autodescription' ); ?></strong>
-			</label>
-		</p>
-		<p class="fields">
-			<input type="text" name="<?php $this->field_name( 'knowledge_name' ); ?>" class="large-text" id="<?php $this->field_id( 'knowledge_name' ); ?>" placeholder="<?php echo esc_attr( $blogname ) ?>" value="<?php echo esc_attr( $this->get_field_value( 'knowledge_name' ) ); ?>" />
-		</p>
-		<?php
-
-	}
-
-	/**
-	 * Knowledge Graph Metabox Social Tab Output
-	 *
-	 * @since 2.2.8
-	 *
-	 * @see $this->knowledge_metabox() Callback for Knowledge Graph Settings box.
-	 */
-	public function knowledge_metabox_social_tab() {
-
-		?>
-		<h4><?php _e( 'Social Pages connected to this website', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php _e( "Don't have a page at a site or is the profile only privately accessible? Leave that field empty. Unsure? Fill it in anyway.", 'autodescription' ); ?></span></p>
-		<p><span class="description"><?php _e( "Add the link that leads directly to the social page of this website.", 'autodescription' ); ?></span></p>
-
-		<hr>
-
-		<?php
-		$connectedi18n = _x( 'RelatedProfile', 'Example link placeholder for a social profile', 'autodescription' );
-		$profile18n = _x( 'Profile', 'Social Profile', 'autodescription' );
-
-		/**
-		 * @todo maybe genericons?
-		 */
-
-		$socialsites = array(
-			'facebook' => array(
-				'option'		=> 'knowledge_facebook',
-				'dashicon'		=> 'dashicons-facebook',
-				'desc' 			=> 'Facebook ' . __( 'Page', 'autodescription' ),
-				'placeholder'	=> 'http://www.facebook.com/' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://facebook.com/me' ),
-			),
-			'twitter' => array(
-				'option'		=> 'knowledge_twitter',
-				'dashicon'		=> 'dashicons-twitter',
-				'desc' 			=> 'Twitter ' . $profile18n,
-				'placeholder'	=> 'http://www.twitter.com/' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://twitter.com/home' ), // No example link available.
-			),
-			'gplus' => array(
-				'option'		=> 'knowledge_gplus',
-				'dashicon'		=> 'dashicons-googleplus',
-				'desc' 			=>  'Google+ ' . $profile18n,
-				'placeholder'	=> 'https://plus.google.com/' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://plus.google.com/me' ),
-			),
-			'instagram' => array(
-				'option'		=> 'knowledge_instagram',
-				'dashicon'		=> 'genericon-instagram',
-				'desc' 			=> 'Instagram ' . $profile18n,
-				'placeholder'	=> 'http://instagram.com/' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://instagram.com/' ), // No example link available.
-			),
-			'youtube' => array(
-				'option'		=> 'knowledge_youtube',
-				'dashicon'		=> 'genericon-youtube',
-				'desc' 			=> 'Youtube ' . $profile18n,
-				'placeholder'	=> 'http://www.youtube.com/' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://www.youtube.com/user/%2f' ), // Yes a double slash.
-			),
-			'linkedin' => array(
-				'option'		=> 'knowledge_linkedin',
-				'dashicon'		=> 'genericon-linkedin-alt',
-				'desc' 			=> 'LinkedIn ' . $profile18n . ' ID',
-				'placeholder'	=> 'http://www.linkedin.com/profile/view?id=' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://www.linkedin.com/profile/view' ), // This generates a query arg. We should allow that.
-			),
-			'pinterest' => array(
-				'option'		=> 'knowledge_pinterest',
-				'dashicon'		=> 'genericon-pinterest-alt',
-				'desc' 			=> 'Pinterest ' . $profile18n,
-				'placeholder'	=> 'https://www.pinterest.com/' . $connectedi18n . '/',
-				'examplelink'	=> esc_url( 'https://www.pinterest.com/me/' ),
-			),
-			'soundcloud' => array(
-				'option'		=> 'knowledge_soundcloud',
-				'dashicon'		=> 'genericon-cloud', // I know, it's not the real one. D:
-				'desc' 			=> 'SoundCloud ' . $profile18n,
-				'placeholder'	=> 'https://soundcloud.com/' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://soundcloud.com/you' ),
-			),
-			'tumblr' => array(
-				'option'		=> 'knowledge_tumblr',
-				'dashicon'		=> 'genericon-tumblr',
-				'desc' 			=> 'Tumblr ' . __( 'Blog', 'autodescription' ),
-				'placeholder'	=> 'https://tumblr.com/blog/' . $connectedi18n,
-				'examplelink'	=> esc_url( 'https://www.tumblr.com/dashboard' ),  // No example link available.
-			),
-		);
-
-		foreach ( $socialsites as $key => $value ) {
-			?>
-			<p>
-				<label for="<?php $this->field_id( $value['option'] ); ?>">
-					<strong><?php echo $value['desc'] ?></strong>
-					<?php
-					if ( ! empty( $value['examplelink'] ) ) {
-						?><a href="<?php echo esc_url( $value['examplelink'] ); ?>" target="_blank">[?]</a><?php
-					}
-					?>
-				</label>
-			</p>
-			<p class="fields">
-				<input type="text" name="<?php $this->field_name( $value['option'] ); ?>" class="large-text" id="<?php $this->field_id( $value['option'] ); ?>" placeholder="<?php echo esc_attr( $value['placeholder'] ) ?>" value="<?php echo esc_attr( $this->get_field_value( $value['option'] ) ); ?>" />
-			</p>
-			<?php
-		}
-
-	}
-
-	/**
-	 * Sitemaps meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
-	 */
-	public function sitemaps_metabox( $args = array() ) {
-
-		do_action( 'the_seo_framework_sitemaps_metabox_before' );
-
-		if ( '' == get_option( 'permalink_structure' ) ) {
-
-			$permalink_settings_url = esc_url( admin_url( 'options-permalink.php' ) );
-			$here = '<a href="' . $permalink_settings_url  . '" target="_blank" title="' . __( 'Permalink settings', 'autodescription' ) . '">' . _x( 'here', 'The sitemap can be found %s.', 'autodescription' ) . '</a>';
-
-			?>
-			<h4><?php _e( "You're using the default permalink structure.", 'autodescription' ); ?></h4>
-			<p><span class="description"><?php _e( "This means we can't output the sitemap through WordPress rewrite.", 'autodescription' ); ?></span></p>
-			<hr>
-			<p><span class="description"><?php printf( _x( "Change your permalink settings %s (Recommended: 'postname').", '%s = here', 'autodescription' ), $here ); ?></span></p>
-			<?php
-
-		} else {
-
-			/**
-			 * Parse tabs content
-			 *
-			 * @param array $default_tabs { 'id' = The identifier =>
-			 *			array(
-			 *				'name' 		=> The name
-			 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
-			 *				'dashicon'	=> Desired dashicon
-			 *			)
-			 * }
-			 *
-			 * @since 2.2.9
-			 */
-			$default_tabs = array(
-				'general' => array(
-					'name' 		=> __( 'General', 'autodescription' ),
-					'callback'	=> array( 'AutoDescription_Metaboxes', 'sitemaps_metabox_general_tab' ),
-					'dashicon'	=> 'admin-generic',
-				),
-				'robots' => array(
-					'name'		=> 'Robots.txt',
-					'callback'	=> array( 'AutoDescription_Metaboxes', 'sitemaps_metabox_robots_tab' ),
-					'dashicon'	=> 'share-alt2',
-				),
-				'timestamps' => array(
-					'name'		=> __( 'Timestamps', 'autodescription' ),
-					'callback'	=> array( 'AutoDescription_Metaboxes', 'sitemaps_metabox_timestamps_tab' ),
-					'dashicon'	=> 'backup',
-				),
-				'notify' => array(
-					'name'		=> _x( 'Ping', 'Ping or notify search engine', 'autodescription' ),
-					'callback'	=> array( 'AutoDescription_Metaboxes', 'sitemaps_metabox_notify_tab' ),
-					'dashicon'	=> 'megaphone',
-				),
-			);
-
-			/**
-			 * Applies filter the_seo_framework_sitemaps_settings_tabs
-			 *
-			 * Used to extend Knowledge Graph tabs
-			 *
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$defaults = (array) apply_filters( 'the_seo_framework_sitemaps_settings_tabs', $default_tabs );
-
-			$tabs = wp_parse_args( $args, $defaults );
-			$use_tabs = true;
-
-			$sitemap_plugin = $this->has_sitemap_plugin();
-			$robots_detected = $this->has_robots_txt();
-			$sitemap_detected = $this->has_sitemap_xml();
-
-			/**
-			 * Remove the timestamps and notify submenus
-			 * @since 2.5.2
-			 */
-			if ( $sitemap_plugin || $sitemap_detected ) {
-				unset( $tabs['timestamps'] );
-				unset( $tabs['notify'] );
-			}
-
-			/**
-			 * Remove the robots submenu
-			 * @since 2.5.2
-			 */
-			if ( $robots_detected ) {
-				unset( $tabs['robots'] );
-			}
-
-			if ( $robots_detected && ( $sitemap_plugin || $sitemap_detected ) )
-				$use_tabs = false;
-
-			$this->nav_tab_wrapper( 'sitemaps', $tabs, '2.2.8', $use_tabs );
-
-		}
-
-		do_action( 'the_seo_framework_sitemaps_metabox_after' );
-
-	}
-
-	/**
-	 * Sitemaps Metabox General Tab Output
-	 *
-	 * @since 2.2.9
-	 *
-	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
-	 */
-	public function sitemaps_metabox_general_tab() {
-
-		$site_url = $this->the_home_url_from_cache( true );
-
-		$sitemap_url = $site_url . 'sitemap.xml';
-		$has_sitemap_plugin = $this->has_sitemap_plugin();
-		$sitemap_detected = $this->has_sitemap_xml();
-
-		?>
-		<h4><?php _e( 'Sitemap Integration Settings', 'autodescription' ); ?></h4>
-		<?php
-
-		if ( $has_sitemap_plugin ) {
-			?>
-			<p><span class="description"><?php _e( "Another active sitemap plugin has been detected. This means that the sitemap functionality has been replaced.", 'autodescription' ); ?></span></p>
-			<?php
-		} else if ( $sitemap_detected ) {
-			?>
-			<p><span class="description"><?php _e( "A sitemap has been detected in the root folder of your website. This means that the sitemap functionality has no effect.", 'autodescription' ); ?></span></p>
-			<?php
-		} else {
-			?>
-			<p><span class="description"><?php printf( __( "The Sitemap is an XML file that lists pages and posts for your site along with optional metadata about each post or page. This helps Search Engines crawl your site easier.", 'autodescription' ) ); ?></span></p>
-			<p><span class="description"><?php printf( __( "The optional metadata include the post and page modified time and a page priority indication, which is automated.", 'autodescription' ) ); ?></span></p>
-
-			<hr>
-
-			<h4 style="margin-top:0;"><?php printf( __( 'Sitemap Output', 'autodescription' ) ); ?></h4>
-			<p>
-				<label for="<?php $this->field_id( 'sitemaps_output' ); ?>">
-					<input type="checkbox" name="<?php $this->field_name( 'sitemaps_output' ); ?>" id="<?php $this->field_id( 'sitemaps_output' ); ?>" <?php $this->is_conditional_checked( 'sitemaps_output' ); ?> value="1" <?php checked( $this->get_field_value( 'sitemaps_output' ) ); ?> />
-					<?php printf( __( 'Output Sitemap?', 'autodescription' ) ); ?>
-				</label>
-			</p>
-			<?php
-		}
-
-		if ( ! ( $has_sitemap_plugin || $sitemap_detected ) && $this->get_option( 'sitemaps_output' ) ) {
-			$here =  '<a href="' . $sitemap_url  . '" target="_blank" title="' . __( 'View sitemap', 'autodescription' ) . '">' . _x( 'here', 'The sitemap can be found %s.', 'autodescription' ) . '</a>';
-
-			?><p><span class="description"><?php printf( _x( 'The sitemap can be found %s.', '%s = here', 'autodescription' ), $here ); ?></span></p><?php
-		}
-
-	}
-
-	/**
-	 * Sitemaps Metabox Robots Tab Output
-	 *
-	 * @since 2.2.9
-	 *
-	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
-	 */
-	public function sitemaps_metabox_robots_tab() {
-
-		$site_url = $this->the_home_url_from_cache( true );
-
-		$robots_url = trailingslashit( $site_url ) . 'robots.txt';
-		$here =  '<a href="' . $robots_url  . '" target="_blank" title="' . __( 'View robots.txt', 'autodescription' ) . '">' . _x( 'here', 'The sitemap can be found %s.', 'autodescription' ) . '</a>';
-
-		?>
-		<h4><?php printf( __( 'Robots.txt Settings', 'autodescription' ) ) ?></h4>
-		<p><span><?php printf( __( 'The robots.txt file is the first thing Search Engine look for. If you add the sitemap location in the robots.txt file, then search engines will look for and index the sitemap.', 'autodescription' ) ); ?></span></p>
-		<p><span><?php printf( __( 'If you do not add the sitemap location to the robots.txt file, you will need to notify search engines manually through the Webmaster Console provided by the search engines.', 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<h4><?php printf( __( 'Add sitemap location in robots.txt', 'autodescription' ) ); ?></h4>
-		<p>
-			<label for="<?php $this->field_id( 'sitemaps_robots' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'sitemaps_robots' ); ?>" id="<?php $this->field_id( 'sitemaps_robots' ); ?>" <?php $this->is_conditional_checked( 'sitemaps_robots' ); ?> value="1" <?php checked( $this->get_field_value( 'sitemaps_robots' ) ); ?> />
-				<?php printf( __( 'Add sitemap location in robots?', 'autodescription' ) ); ?>
-			</label>
-		</p>
-
-		<hr>
-
-		<p><span class="description"><?php printf( _x( 'The robots.txt file can be found %s.', '%s = here', 'autodescription' ), $here ); ?></span></p>
-		<?php
-
-	}
-
-	/**
-	 * Sitemaps Metabox Timestamps Tab Output
-	 *
-	 * @since 2.2.9
-	 *
-	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
-	 */
-	public function sitemaps_metabox_timestamps_tab() {
-
-		?>
-		<h4><?php printf( __( 'Timestamps Settings', 'autodescription' ) ); ?></h4>
-		<p><span class="description"><?php printf( __( 'The modified time hint Search Engines where to look for content changes. It has no impact on SEO value unless you drastically change pages or posts. It then depends on how well your content is constructed.', 'autodescription' ) ); ?></span></p>
-		<p><span class="description"><?php printf( __( "By default, the sitemap only outputs the modified date if you've enabled them within the Social Metabox. This setting overrides those settings for the Sitemap.", 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<h4><?php printf( __( 'Output Modified Date', 'autodescription' ) ); ?></h4>
-		<p>
-			<label for="<?php $this->field_id( 'sitemaps_modified' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'sitemaps_modified' ); ?>" id="<?php $this->field_id( 'sitemaps_modified' ); ?>" <?php $this->is_conditional_checked( 'sitemaps_modified' ); ?> value="1" <?php checked( $this->get_field_value( 'sitemaps_modified' ) ); ?> />
-				<?php printf( __( 'Add %s to the sitemap?', 'autodescription' ), $this->code_wrap( '<lastmod>' ) ); ?>
-			</label>
-		</p>
-		<?php
-
-	}
-
-	/**
-	 * Sitemaps Metabox Notify Tab Output
-	 *
-	 * @since 2.2.9
-	 *
-	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
-	 */
-	public function sitemaps_metabox_notify_tab() {
-
-		?>
-		<h4><?php printf( __( 'Ping Settings', 'autodescription' ) ); ?></h4>
-		<p><span class="description"><?php printf( __( "Notifying Search Engines of a sitemap change is helpful to get your content indexed as soon as possible.", 'autodescription' ) ); ?></span></p>
-		<p><span class="description"><?php printf( __( "By default this will happen at most once an hour.", 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<h4><?php printf( __( 'Notify Search Engines', 'autodescription' ) ); ?></h4>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'ping_google' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'ping_google' ); ?>" id="<?php $this->field_id( 'ping_google' ); ?>" <?php $this->is_conditional_checked( 'ping_google' ); ?> value="1" <?php checked( $this->get_field_value( 'ping_google' ) ); ?> />
-				<?php printf( __( 'Notify %s about sitemap changes?', 'autodescription' ), 'Google' ); ?>
-			</label>
-			<br />
-			<label for="<?php $this->field_id( 'ping_bing' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'ping_bing' ); ?>" id="<?php $this->field_id( 'ping_bing' ); ?>" <?php $this->is_conditional_checked( 'ping_bing' ); ?> value="1" <?php checked( $this->get_field_value( 'ping_bing' ) ); ?> />
-				<?php printf( __( 'Notify %s about sitemap changes?', 'autodescription' ), 'Bing' ); ?>
-			</label>
-			<br />
-			<label for="<?php $this->field_id( 'ping_yahoo' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'ping_yahoo' ); ?>" id="<?php $this->field_id( 'ping_yahoo' ); ?>" <?php $this->is_conditional_checked( 'ping_yahoo' ); ?> value="1" <?php checked( $this->get_field_value( 'ping_yahoo' ) ); ?> />
-				<?php printf( __( 'Notify %s about sitemap changes?', 'autodescription' ), 'Yahoo' ); ?>
-			</label>
-		</p>
-		<?php
-
-	}
-
-	/**
-	 * Feed meta box on the Site SEO Settings page.
-	 *
-	 * @since 2.5.2
-	 */
-	public function feed_metabox() {
-
-		do_action( 'the_seo_framework_feed_metabox_before' );
-
-		$site_url = $this->the_home_url_from_cache( true );
-
-		$feed_url = esc_url( user_trailingslashit( $site_url . 'feed' ) );
-
-		?>
-		<h4><?php _e( 'Content Feed Settings', 'autodescription' ); ?></h4>
-		<p><span class="description"><?php printf( __( "Sometimes, your content can get stolen by robots through the WordPress feeds. This can cause duplicated content issues. To prevent these issues from happening, it's recommended to convert the feed's content into an excerpt.", 'autodescription' ) ); ?></span></p>
-		<p><span class="description"><?php printf( __( "Adding a backlink below the feed's content will also let the visitors know where the content came from.", 'autodescription' ) ); ?></span></p>
-
-		<hr>
-
-		<h4><?php _e( 'Change Feed Settings', 'autodescription' ); ?></h4>
-		<p class="fields">
-			<label for="<?php $this->field_id( 'excerpt_the_feed' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'excerpt_the_feed' ); ?>" id="<?php $this->field_id( 'excerpt_the_feed' ); ?>" <?php $this->is_conditional_checked( 'excerpt_the_feed' ); ?> value="1" <?php checked( $this->get_field_value( 'excerpt_the_feed' ) ); ?> />
-				<?php _e( 'Convert feed content into excerpts?', 'autodescription' ); ?>
-				<span title="<?php _e( "By default the excerpt will be at most 400 characters long", 'autodescription' ); ?>">[?]</span>
-			</label>
-			<br />
-			<label for="<?php $this->field_id( 'source_the_feed' ); ?>">
-				<input type="checkbox" name="<?php $this->field_name( 'source_the_feed' ); ?>" id="<?php $this->field_id( 'source_the_feed' ); ?>" <?php $this->is_conditional_checked( 'source_the_feed' ); ?> value="1" <?php checked( $this->get_field_value( 'source_the_feed' ) ); ?> />
-				<?php _e( 'Add backlinks below the feed content?', 'autodescription' ); ?>
-				<span title="<?php _e( "This link will not be followed by Search Engines", 'autodescription' ); ?>">[?]</span>
-			</label>
-		</p>
-		<?php
-
-		do_action( 'the_seo_framework_feed_metabox_after' );
-
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Metaboxes
+ *
+ * Outputs Network and Site SEO settings meta boxes
+ *
+ * @since 2.2.2
+ */
+class AutoDescription_Metaboxes extends AutoDescription_Siteoptions {
+
+	/**
+	 * Constructor, load parent constructor.
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * List of title separators.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return array Title separators.
+	 */
+	public function get_separator_list() {
+		return array(
+			'pipe'		=> '|',
+			'dash'		=> '-',
+			'ndash'		=> '&ndash;',
+			'mdash'		=> '&mdash;',
+			'bull'		=> '&bull;',
+			'middot'	=> '&middot;',
+			'lsaquo'	=> '&lsaquo;',
+			'rsaquo'	=> '&rsaquo;',
+			'frasl'		=> '&frasl;',
+			'laquo'		=> '&laquo;',
+			'raquo'		=> '&raquo;',
+			'le'		=> '&le;',
+			'ge'		=> '&ge;',
+			'lt'		=> '&lt;',
+			'gt'		=> '&gt;',
+		);
+	}
+
+	/**
+	 * Returns array of Twitter Card Types
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return array Twitter Card types.
+	 */
+	public function get_twitter_card_types() {
+		return array(
+			'summary' 				=> 'summary',
+			'summary_large_image'	=> 'summary-large-image',
+			'photo' 				=> 'photo',
+		);
+	}
+
+	/**
+	 * Setting nav tab wrappers.
+	 * Outputs Tabs and settings content.
+	 *
+	 * @param string $id The Nav Tab ID
+	 * @param array $tabs the tab content {
+	 *		$tabs = tab ID key = array(
+	 *			$tabs['name'] => tab name
+	 *			$tabs['callback'] => string|array callback function
+	 *			$tabs['dashicon'] => string Dashicon
+	 *			$tabs['args'] => mixed optional callback function args
+	 *		)
+	 *	}
+	 * @param string $version the The SEO Framework version for debugging. May be emptied.
+	 * @param bool $use_tabs Whether to output tabs, only works when $tabs only has one count.
+	 *
+	 * @since 2.3.6
+	 *
+	 * @refactored
+	 * @since 2.6.0
+	 */
+	public function nav_tab_wrapper( $id, $tabs = array(), $version = '2.3.6', $use_tabs = true ) {
+
+		//* Whether tabs are active.
+		$use_tabs = $use_tabs || count( $tabs ) > 1 ? true : false;
+
+		/**
+		 * Start navigation.
+		 *
+		 * Don't output navigation if $use_tabs is false and the amount of tabs is 1 or lower.
+		 */
+		if ( $use_tabs ) {
+			?>
+			<div class="seoframework-nav-tab-wrapper hide-if-no-js" id="<?php echo $id; ?>-tabs-wrapper">
+			<?php
+				$count = 1;
+				foreach ( $tabs as $tab => $value ) {
+
+					$dashicon = isset( $value['dashicon'] ) ? $value['dashicon'] : '';
+					$name = isset( $value['name'] ) ? $value['name'] : '';
+
+					$checked = 1 === $count ? 'checked' : '';
+					$the_id = $id . '-tab-' . $tab;
+					$the_name = $id . '-tabs';
+
+					$label_class = $checked ? ' seoframework-active-tab' : ''; // maybe
+
+					?>
+					<div class="seoframework-tab">
+						<input type="radio" class="seoframework-tabs-radio" id="<?php echo $the_id ?>" name="<?php echo $the_name ?>" <?php echo $checked ?>>
+						<label for="<?php echo $the_id; ?>" class="seoframework-nav-tab">
+							<?php echo $dashicon ? '<span class="dashicons dashicons-' . esc_attr( $dashicon ) . ' seoframework-dashicons-tabs"></span>' : ''; ?>
+							<?php echo $name ? '<span class="seoframework-nav-desktop">' . esc_attr( $name ) . '</span>' : ''; ?>
+						</label>
+					</div>
+					<?php
+
+					$count++;
+				}
+			?>
+			</div>
+			<?php
+		}
+
+		/**
+		 * Start Content.
+		 *
+		 * The content is relative to the navigation, and uses CSS to become visible.
+		 */
+		$count = 1;
+		foreach ( $tabs as $tab => $value ) {
+
+			$the_id = $id . '-tab-' . $tab . '-content';
+			$the_name = $id . '-tabs-content';
+
+			//* Current tab for JS.
+			$current = 1 === $count ? ' seoframework-active-tab-content' : '';
+
+			?>
+			<div class="seoframework-tabs-content <?php echo $the_name . $current; ?>" id="<?php echo $the_id; ?>" >
+			<?php
+
+				//* No-JS tabs.
+				if ( $use_tabs ) {
+					$dashicon = isset( $value['dashicon'] ) ? $value['dashicon'] : '';
+					$name = isset( $value['name'] ) ? $value['name'] : '';
+
+					?>
+					<div class="hide-if-js seoframework-content-no-js">
+						<div class="seoframework-tab seoframework-tab-no-js">
+							<span class="seoframework-nav-tab seoframework-active-tab">
+								<?php echo $dashicon ? '<span class="dashicons dashicons-' . esc_attr( $dashicon ) . ' seoframework-dashicons-tabs"></span>' : ''; ?>
+								<?php echo $name ? '<span>' . esc_attr( $name ) . '</span>' : ''; ?>
+							</span>
+						</div>
+					</div>
+					<?php
+				}
+
+				$callback = isset( $value['callback'] ) ? $value['callback'] : '';
+
+				if ( $callback ) {
+					$params = isset( $value['args'] ) ? $value['args'] : '';
+					$output = $this->call_function( $callback, $version, $params );
+					echo $output;
+				}
+
+				?>
+			</div>
+			<?php
+
+			$count++;
+		}
+
+	}
+
+	/**
+	 * Title meta box on the Site SEO Settings page.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param array $args The metabox arguments.
+	 *
+	 * @see $this->title_metabox()	Callback for Title Settings box.
+	 */
+	public function title_metabox( $args = array() ) {
+
+		do_action( 'the_seo_framework_title_metabox_before' );
+
+		$latest_post_id = $this->get_latest_post_id();
+
+		if ( $latest_post_id ) {
+			$post = get_post( $latest_post_id, OBJECT );
+			$title = esc_attr( $post->post_title );
+		} else {
+			$title = esc_attr__( 'Example Post Title', 'autodescription' );
+		}
+
+		$blogname = $this->get_blogname();
+		$sep = $this->get_separator( 'title', true );
+
+		$additions_left = '<span class="title-additions-js">' . $blogname . '<span class="autodescription-sep-js">' . " $sep " . '</span></span>';
+		$additions_right = '<span class="title-additions-js"><span class="autodescription-sep-js">' . " $sep " . '</span>' . $blogname . '</span>';
+
+		$example_left = '<em>' . $additions_left . $title . '</em>';
+		$example_right = '<em>' . $title . $additions_right . '</em>';
+
+		$showleft = 'left' === $this->get_option( 'title_location' ) ? true : false;
+		//* Check left first, as right is default (and thus fallback).
+		$example_nojs = $showleft ? $example_left : $example_right;
+
+		?>
+		<h4><?php printf( __( 'Automated Title Settings', 'autodescription' ) ); ?></h4>
+		<p><span class="description"><?php printf( __( "The page title is prominently shown within the browser tab as well as within the Search Engine results pages.", 'autodescription' ) ); ?></span></p>
+
+		<h4><?php _e( 'Example Automated Title Output', 'autodescription' ); ?></h4>
+		<p>
+			<span class="title-additions-example-left" style="display:<?php echo $showleft ? 'inline' : 'none'; ?>"><?php echo $this->code_wrap_noesc( $example_left ); ?></span>
+			<span class="title-additions-example-right" style="display:<?php echo $showleft ? 'none' : 'inline'; ?>"><?php echo $this->code_wrap_noesc( $example_right ); ?></span>
+		</p>
+
+		<hr>
+		<?php
+
+		/**
+		 * Parse tabs content
+		 *
+		 * @param array $default_tabs { 'id' = The identifier =>
+		 *			array(
+		 *				'name' 		=> The name
+		 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
+		 *				'dashicon'	=> Desired dashicon
+		 *			)
+		 * }
+		 *
+		 * @since 2.2.2
+		 */
+		$default_tabs = array(
+			'general' => array(
+				'name' 		=> __( 'General', 'autodescription' ),
+				'callback'	=> array( $this, 'title_metabox_general_tab' ),
+				'dashicon'	=> 'admin-generic',
+			),
+			'additions' => array(
+				'name'		=> __( 'Additions', 'autodescription' ),
+				'callback'	=> array( $this, 'title_metabox_additions_tab' ),
+				'dashicon'	=> 'plus',
+				'args'		=> array(
+					'examples' => array(
+						'left'	=> $example_left,
+						'right' => $example_right,
+					),
+				),
+			),
+			'prefixes' => array(
+				'name'		=> __( 'Prefixes', 'autodescription' ),
+				'callback'	=> array( $this, 'title_metabox_prefixes_tab' ),
+				'dashicon'	=> 'plus-alt',
+				'args'		=> array(
+					'additions' => array(
+						'left'	=> $additions_left,
+						'right' => $additions_right,
+					),
+					'showleft' => $showleft,
+				),
+			)
+		);
+
+		/**
+		 * Applies filters the_seo_framework_title_settings_tabs : array see $default_tabs
+		 * @since 2.6.0
+		 *
+		 * Used to extend Description tabs.
+		 */
+		$defaults = (array) apply_filters( 'the_seo_framework_title_settings_tabs', $default_tabs, $args );
+
+		$tabs = wp_parse_args( $args, $defaults );
+
+		$this->nav_tab_wrapper( 'title', $tabs, '2.6.0' );
+
+		do_action( 'the_seo_framework_title_metabox_after' );
+	}
+
+	/**
+	 * Title meta box general tab.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @see $this->title_metabox() : Callback for Title Settings box.
+	 */
+	public function title_metabox_general_tab() {
+
+		$title_separator = $this->get_separator_list();
+
+		$recommended = ' class="recommended" title="' . esc_attr__( 'Recommended', 'autodescription' ) . '"';
+
+		?>
+		<fieldset>
+			<legend><h4><?php _e( 'Document Title Separator', 'autodescription' ); ?></h4></legend>
+			<p id="title-separator" class="theseoframework-fields">
+			<?php foreach ( $title_separator as $name => $html ) { ?>
+				<input type="radio" name="<?php $this->field_name( 'title_seperator' ); ?>" id="<?php $this->field_id( 'title_seperator_' . $name ); ?>" value="<?php echo $name ?>" <?php checked( $this->get_field_value( 'title_seperator' ), $name ); ?> />
+				<label for="<?php $this->field_id( 'title_seperator_' . $name ); ?>" <?php echo ( $name === 'pipe' || $name === 'dash' ) ? $recommended : ''; ?>><?php echo $html ?></label>
+			<?php } ?>
+			</p>
+			<span class="description"><?php _e( 'If the title consists of two parts (original title and optional addition), then the separator will go in-between them.', 'autodescription' ); ?></span>
+		</fieldset>
+		<?php
+
+	}
+
+	/**
+	 * Title meta box general tab.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $examples : array {
+	 * 		'left'	=> Left Example
+	 * 		'right'	=> Right Example
+	 * }
+	 *
+	 * @see $this->title_metabox() : Callback for Title Settings box.
+	 */
+	public function title_metabox_additions_tab( $examples = array() ) {
+
+		$example_left = $examples['left'];
+		$example_right = $examples['right'];
+
+		$language = $this->google_language();
+
+		$home_page_has_option = __( 'The Home Page has a specific option.', 'autodescription' );
+
+		?>
+		<fieldset>
+			<legend><h4><?php _e( 'Document Title Additions Location', 'autodescription' ); ?></h4></legend>
+
+			<p>
+				<span class="description"><?php _e( 'Determines which side the added title text will go on.', 'autodescription' ); ?></span>
+			</p>
+			<p id="title-location" class="theseoframework-fields">
+				<span class="toblock">
+					<input type="radio" name="<?php $this->field_name( 'title_location' ); ?>" id="<?php $this->field_id( 'title_location_left' ); ?>" value="left" <?php checked( $this->get_field_value( 'title_location' ), 'left' ); ?> />
+					<label for="<?php $this->field_id( 'title_location_left' ); ?>">
+						<span><?php _e( 'Left:', 'autodescription' ); ?></span>
+						<?php echo $this->code_wrap_noesc( $example_left ) ?>
+					</label>
+				</span>
+				<span class="toblock">
+					<input type="radio" name="<?php $this->field_name( 'title_location' ); ?>" id="<?php $this->field_id( 'title_location_right' ); ?>" value="right" <?php checked( $this->get_field_value( 'title_location' ), 'right' ); ?> />
+					<label for="<?php $this->field_id( 'title_location_right' ); ?>">
+						<span><?php _e( 'Right:', 'autodescription' ); ?></span>
+						<?php echo $this->code_wrap_noesc( $example_right ); ?>
+					</label>
+				</span>
+			</p>
+			<span class="description"><?php echo $home_page_has_option; ?></span>
+		</fieldset>
+		<?php
+
+		/**
+		 * @todo use checkbox function
+		 * @priority low 2.6.x
+		 */
+
+		//* Only add this option if the theme is doing it right.
+		if ( $this->can_manipulate_title() ) : ?>
+			<hr>
+
+			<h4><?php _e( 'Remove Blogname from Title', 'autodescription' ); ?></h4>
+			<p id="title-additions-toggle">
+				<label for="<?php $this->field_id( 'title_rem_additions' ); ?>">
+					<input type="checkbox" name="<?php $this->field_name( 'title_rem_additions' ); ?>" id="<?php $this->field_id( 'title_rem_additions' ); ?>" <?php $this->is_conditional_checked( 'title_rem_additions' ); ?> value="1" <?php checked( $this->get_field_value( 'title_rem_additions' ) ); ?> />
+					<?php _e( 'Remove Blogname from title?', 'autodescription' ); ?>
+				</label>
+				<a href="<?php echo esc_url( 'https://support.google.com/webmasters/answer/35624?hl=' . $language . '#3' ); ?>" target="_blank" title="<?php _e( 'This might decouple your posts and pages from the rest of the website.', 'autodescription' ); ?>">[?]</a>
+			</p>
+			<span class="description"><?php _e( 'Only use this option if you are aware of its SEO effects.', 'autodescription' ); ?></span>
+			<span class="description"><?php echo $home_page_has_option; ?></span>
+		<?php endif;
+
+	}
+
+	/**
+	 * Title meta box prefixes tab.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param array $additions : array {
+	 * 		'left'	=> Left Example Addtitions
+	 * 		'right'	=> Right Example Additions
+	 * }
+	 * @param bool $showleft The example location.
+	 *
+	 * @see $this->title_metabox() : Callback for Title Settings box.
+	 */
+	public function title_metabox_prefixes_tab( $additions = array(), $showleft = false ) {
+
+		$left_additions = $additions['left'];
+		$right_additions = $additions['right'];
+
+		//* Get translated category label, if it exists. Otherwise, fallback to translation.
+		$term_labels = $this->get_tax_labels( 'category' );
+		$label = isset( $term_labels->singular_name ) ? $term_labels->singular_name : __( 'Category', 'autodescription' );
+
+		$cats = get_terms( array( 'taxonomy' => 'category', 'fields' => 'ids', 'hide_empty' => false, 'order' => 'ASC', 'number' => 1 ) );
+		if ( is_array( $cats ) && ! empty( $cats ) ) {
+			//* Category should exist.
+			$cat = reset( $cats );
+		} else {
+			//* Default fallback category.
+			$cat = 1;
+		}
+		//* If cat is found, it will return its name. Otherwise it's an empty string.
+		$cat_name = get_cat_name( $cat );
+		$cat_name = $cat_name ? $cat_name : __( 'Example Category', 'autodescription' );
+
+		$display_prefix = $this->is_option_checked( 'title_rem_prefixes' ) ? 'none' : 'inline';
+		$title = '<span class="title-prefix-example" style="display:' . $display_prefix . '">' . $label . ': </span>' . $cat_name;
+
+		$example_left = '<em>' . $left_additions . $title . '</em>';
+		$example_right = '<em>' . $title . $right_additions . '</em>';
+
+		$example_nojs = $showleft ? $example_left : $example_right;
+
+		$language = $this->google_language();
+
+		/**
+		 * @todo use checkbox function
+		 * @priority low 2.6.x
+		 */
+
+		?>
+		<h4><?php _e( 'Title prefix options', 'autodescription' ); ?></h4>
+		<p><span class="description"><?php _e( "On archives a descriptive prefix may be added to the title.", 'autodescription' ); ?></span></p>
+
+		<h4><?php _e( 'Example Automated Archive Title Output' ); ?></h4>
+		<p>
+			<span class="title-additions-example-left" style="display:<?php echo $showleft ? 'inline' : 'none'; ?>"><?php echo $this->code_wrap_noesc( $example_left ); ?></span>
+			<span class="title-additions-example-right" style="display:<?php echo $showleft ? 'none' : 'inline'; ?>"><?php echo $this->code_wrap_noesc( $example_right ); ?></span>
+		</p>
+
+		<hr>
+
+		<h4><?php _e( 'Remove Archive Title Prefixes', 'autodescription' ); ?></h4>
+		<p id="title-prefixes-toggle">
+			<label for="<?php $this->field_id( 'title_rem_prefixes' ); ?>">
+				<input type="checkbox" name="<?php $this->field_name( 'title_rem_prefixes' ); ?>" id="<?php $this->field_id( 'title_rem_prefixes' ); ?>" <?php $this->is_conditional_checked( 'title_rem_prefixes' ); ?> value="1" <?php checked( $this->get_field_value( 'title_rem_prefixes' ) ); ?> />
+				<?php _e( 'Remove Prefixes from title?', 'autodescription' ); ?>
+			</label>
+			<?php
+			$this->make_info(
+				__( "The prefix helps visitors and Search Engines determine what kind of page they're visiting", 'autodescription' ),
+				'https://support.google.com/webmasters/answer/35624?hl=' . $language . '#3',
+				true
+			);
+			?>
+		</p>
+		<?php
+
+	}
+
+	/**
+	 * Description meta box on the Site SEO Settings page.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @param array $args The metabox arguments.
+	 *
+	 * @see $this->description_metabox()	Callback for Description Settings box.
+	 */
+	public function description_metabox( $args = array() ) {
+
+		do_action( 'the_seo_framework_description_metabox_before' );
+
+		$blogname = $this->get_blogname();
+		$sep = $this->get_separator( 'description', true );
+
+		/**
+		 * Generate example.
+		 */
+		$page_title = __( 'Example Title', 'autodescription' );
+		$on = _x( 'on', 'Placement. e.g. Post Title "on" Blog Name', 'autodescription' );
+		$excerpt = __( 'This is an example description...', 'autodescription' );
+
+		$page_title = $this->escape_description( $page_title );
+		$on = $this->escape_description( $on );
+		$excerpt = $this->escape_description( $excerpt );
+
+		//* Put it together.
+		$example 	= '<span id="description-additions-js">'
+						. $page_title
+						. '<span id="on-blogname-js">' . " $on " . $blogname . '</span>'
+						. '<span id="autodescription-descsep-js">' . " $sep " . '</span>'
+					. '</span>'
+					. $excerpt
+					;
+
+		$nojs_additions = '';
+		//* Add or remove additions based on option.
+		if ( $this->add_description_additions() ) {
+			$description_blogname_additions = $this->get_option( 'description_blogname' );
+
+			$example_nojs_onblog = $description_blogname_additions ? $page_title . " $on " . $blogname : $page_title;
+			$nojs_additions = $example_nojs_onblog . " $sep ";
+		}
+
+		$example_nojs = $nojs_additions . $excerpt;
+
+		?>
+		<h4><?php printf( __( 'Automated Description Settings', 'autodescription' ) ); ?></h4>
+		<p><span class="description"><?php printf( __( "The meta description can be used to determine the text used under the title on Search Engine results pages.", 'autodescription' ) ); ?></span></p>
+
+		<h4><?php _e( 'Example Automated Description Output', 'autodescription' ); ?></h4>
+		<p class="hide-if-no-js"><?php echo $this->code_wrap_noesc( $example ); ?></p>
+		<p class="hide-if-js"><?php echo $this->code_wrap( $example_nojs ); ?></p>
+
+		<hr>
+		<?php
+
+		/**
+		 * Parse tabs content
+		 *
+		 * @param array $default_tabs { 'id' = The identifier =>
+		 *			array(
+		 *				'name' 		=> The name
+		 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
+		 *				'dashicon'	=> Desired dashicon
+		 *			)
+		 * }
+		 *
+		 * @since 2.6.0
+		 */
+		$default_tabs = array(
+			'general' => array(
+				'name' 		=> __( 'General', 'autodescription' ),
+				'callback'	=> array( $this, 'description_metabox_general_tab' ),
+				'dashicon'	=> 'admin-generic',
+			),
+			'additions' => array(
+				'name'		=> __( 'Additions', 'autodescription' ),
+				'callback'	=> array( $this, 'description_metabox_additions_tab' ),
+				'dashicon'	=> 'plus',
+			),
+		);
+
+		/**
+		 * Applies filters the_seo_framework_description_settings_tabs : array see $default_tabs
+		 * @since 2.6.0
+		 *
+		 * Used to extend Description tabs.
+		 */
+		$defaults = (array) apply_filters( 'the_seo_framework_description_settings_tabs', $default_tabs, $args );
+
+		$tabs = wp_parse_args( $args, $defaults );
+
+		$this->nav_tab_wrapper( 'description', $tabs, '2.6.0' );
+
+		do_action( 'the_seo_framework_description_metabox_after' );
+
+	}
+
+	/**
+	 * Description meta box general tab.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @see $this->description_metabox()	Callback for Description Settings box.
+	 */
+	public function description_metabox_general_tab() {
+
+		//* Let's use the same separators as for the title.
+		$description_separator = $this->get_separator_list();
+		$sep_option = $this->get_option( 'description_separator' );
+		$sep_option = $sep_option ? $sep_option : 'pipe';
+
+		$recommended = ' class="recommended" title="' . __( 'Recommended', 'autodescription' ) . '"';
+
+		?>
+		<fieldset>
+			<legend><h4><?php _e( 'Description Excerpt Separator', 'autodescription' ); ?></h4></legend>
+			<p id="description-separator" class="theseoframework-fields">
+			<?php foreach ( $description_separator as $name => $html ) { ?>
+				<input type="radio" name="<?php $this->field_name( 'description_separator' ); ?>" id="<?php $this->field_id( 'description_separator' . $name ); ?>" value="<?php echo $name ?>" <?php checked( $sep_option, $name ); ?> />
+				<label for="<?php $this->field_id( 'description_separator' . $name ); ?>" <?php echo ( 'pipe' === $name || 'dash' === $name ) ? $recommended : ''; ?>><?php echo $html ?></label>
+			<?php } ?>
+			</p>
+			<span class="description"><?php _e( 'If the Automated Description consists of two parts (title and excerpt), then the separator will go in-between them.', 'autodescription' ); ?></span>
+		</fieldset>
+		<?php
+
+	}
+
+	/**
+	 * Description meta box additions tab.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @see $this->description_metabox()	Callback for Description Settings box.
+	 */
+	public function description_metabox_additions_tab() {
+
+		$language = $this->google_language();
+		$google_explanation = esc_url( 'https://support.google.com/webmasters/answer/35624?hl=' . $language . '#1' );
+
+		/**
+		 * @todo use checkbox functions.
+		 * @priority low 2.6.x
+		 */
+		?>
+		<h4><?php printf( __( 'Additions Description Settings', 'autodescription' ) ); ?></h4>
+		<p><span class="description"><?php printf( __( "To create a more organic description, a small introduction can be added before the description.", 'autodescription' ) ); ?></span></p>
+		<p><span class="description"><?php printf( __( "The introduction consists of the title and optionally the blogname.", 'autodescription' ) ); ?></span></p>
+
+		<hr>
+
+		<h4><?php _e( 'Add descriptive Additions to Description', 'autodescription' ); ?></h4>
+		<p id="description-additions-toggle">
+			<label for="<?php $this->field_id( 'description_additions' ); ?>" class="toblock">
+				<input type="checkbox" name="<?php $this->field_name( 'description_additions' ); ?>" id="<?php $this->field_id( 'description_additions' ); ?>" <?php $this->is_conditional_checked( 'description_additions' ); ?> value="1" <?php checked( $this->get_field_value( 'description_additions' ) ); ?> />
+				<?php _e( 'Add Additions to automated description?', 'autodescription' ); ?>
+				<a href="<?php echo esc_url( $google_explanation ); ?>" target="_blank" class="description" title="<?php _e( 'This creates good meta descriptions', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+
+		<h4><?php _e( 'Add Blogname to Additions', 'autodescription' ); ?></h4>
+		<p id="description-onblogname-toggle">
+			<label for="<?php $this->field_id( 'description_blogname' ); ?>" class="toblock">
+				<input type="checkbox" name="<?php $this->field_name( 'description_blogname' ); ?>" id="<?php $this->field_id( 'description_blogname' ); ?>" <?php $this->is_conditional_checked( 'description_blogname' ); ?> value="1" <?php checked( $this->get_field_value( 'description_blogname' ) ); ?> />
+				<?php _e( 'Add Blogname to automated description additions?', 'autodescription' ); ?>
+			</label>
+		</p>
+		<?php
+
+	}
+
+	/**
+	 * Robots meta box on the Site SEO Settings page.
+	 *
+	 * @since 2.2.2
+	 */
+	public function robots_metabox( $args = array() ) {
+
+		do_action( 'the_seo_framework_robots_metabox_before' );
+
+		//* Robots types
+		$types = array(
+			'category' => __( 'Category', 'autodescription' ),
+			'tag' => __( 'Tag', 'autodescription' ),
+			'author' => __( 'Author', 'autodescription' ),
+			'date' => __( 'Date', 'autodescription' ),
+			'search' => __( 'Search Pages', 'autodescription' ),
+			'attachment' => __( 'Attachment Pages', 'autodescription' ),
+			'site' => _x( 'the entire site', '...for the entire site', 'autodescription' ),
+		);
+
+		//* Robots i18n
+		$robots = array(
+			'noindex' =>  array(
+				'value' => 'noindex',
+				'name' 	=> __( 'NoIndex', 'autodescription' ),
+				'desc' 	=> __( 'These options prevent indexing of the selected archives and pages. If you enable this, the selected archives or pages will be removed from Search Engine results pages.', 'autodescription' ),
+			),
+			'nofollow' =>  array(
+				'value' => 'nofollow',
+				'name'	=> __( 'NoFollow', 'autodescription' ),
+				'desc'	=> __( 'These options prevent links from being followed on the selected archives and pages. If you enable this, the selected archives or pages in-page links will gain no SEO value, including your own links.', 'autodescription' ),
+			),
+			'noarchive' =>  array(
+				'value' => 'noarchive',
+				'name'	=> __( 'NoArchive', 'autodescription' ),
+				'desc'	=> __( 'These options prevent caching of the selected archives and pages. If you enable this, Search Engines will not create a cached copy of the selected archives or pages.', 'autodescription' ),
+			),
+		);
+
+		/**
+		 * Parse tabs content
+		 *
+		 * @param array $default_tabs { 'id' = The identifier =>
+		 *			array(
+		 *				'name' 		=> The name
+		 *				'callback'	=> function callback
+		 *				'dashicon'	=> WordPress Dashicon
+		 *				'args'		=> function args
+		 *			)
+		 * }
+		 *
+		 * @since 2.2.2
+		 */
+		$default_tabs = array(
+				'general' => array(
+					'name' 		=> __( 'General', 'autodescription' ),
+					'callback'	=> array( $this, 'robots_metabox_general_tab' ),
+					'dashicon'	=> 'admin-generic',
+					'args'		=> '',
+				),
+				'index' => array(
+					'name' 		=> __( 'Indexing', 'autodescription' ),
+					'callback'	=> array( $this, 'robots_metabox_no_tab' ),
+					'dashicon'	=> 'filter',
+					'args'		=> array( $types, $robots['noindex'] ),
+				),
+				'follow' => array(
+					'name'		=> __( 'Following', 'autodescription' ),
+					'callback'	=> array( $this, 'robots_metabox_no_tab' ),
+					'dashicon'	=> 'editor-unlink',
+					'args'		=> array( $types, $robots['nofollow'] ),
+				),
+				'archive' => array(
+					'name'		=> __( 'Archiving', 'autodescription' ),
+					'callback'	=> array( $this, 'robots_metabox_no_tab' ),
+					'dashicon'	=> 'download',
+					'args'		=> array( $types, $robots['noarchive'] ),
+				),
+			);
+
+		/**
+		 * Applies filters 'the_seo_framework_robots_settings_tabs' : array see $default_tabs
+		 *
+		 * Used to extend Social tabs
+		 * @since 2.2.4
+		 */
+		$defaults = (array) apply_filters( 'the_seo_framework_robots_settings_tabs', $default_tabs, $args );
+
+		$tabs = wp_parse_args( $args, $defaults );
+
+		$this->nav_tab_wrapper( 'robots', $tabs, '2.2.4' );
+
+		do_action( 'the_seo_framework_robots_metabox_after' );
+
+	}
+
+	/**
+	 * Robots Metabox General Tab output
+	 *
+	 * @since 2.2.4
+	 *
+	 * @see $this->robots_metabox() Callback for Robots Settings box.
+	 */
+	protected function robots_metabox_general_tab() {
+
+		?>
+		<h4><?php _e( 'Open Directory Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php printf( __( "Sometimes, Search Engines use resources from certain Directories to find titles and descriptions for your content. You generally don't want them to. Turn these options on to prevent them from doing so.", 'autodescription' ), $this->code_wrap( 'noodp' ), $this->code_wrap( 'noydir' ) ); ?></p>
+		<p class="description"><?php _e( "The Open Directory Project and the Yahoo! Directory may contain outdated SEO values. Therefore, it's best to leave these options checked.", 'autodescription' ); ?></p>
+		<?php
+
+		$this->wrap_fields(
+		 	array(
+				$this->make_checkbox(
+					'noodp',
+					sprintf( __( 'Apply %s to the entire site?', 'autodescription' ), $this->code_wrap( 'noodp' ) ),
+					''
+				),
+				$this->make_checkbox(
+					'noydir',
+					sprintf( __( 'Apply %s to the entire site?', 'autodescription' ), $this->code_wrap( 'noydir' ) ),
+					''
+				),
+			),
+			true
+		);
+
+		?>
+		<hr>
+
+		<h4><?php _e( 'Paginated Archive Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php printf( __( "Indexing the second or later page of any archive might cause duplication errors. Search Engines look down upon them; therefore, it's recommended to disable indexing of those pages.", 'autodescription' ), $this->code_wrap( 'noodp' ), $this->code_wrap( 'noydir' ) ); ?></p>
+		<?php
+
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'paged_noindex',
+				sprintf( __( 'Apply %s to every second or later archive page?', 'autodescription' ), $this->code_wrap( 'noindex' ) ),
+				''
+			),
+		true
+		);
+
+	}
+
+	/**
+	 * Robots Metabox
+	 *		No-: Index/Follow/Archive
+	 * Tab output
+	 *
+	 * @since 2.2.4
+	 */
+	protected function robots_metabox_no_tab( $types, $robots ) {
+
+		$ro_value = $robots['value'];
+		$ro_name = $robots['name'];
+		$ro_i18n = $robots['desc'];
+
+		?>
+		<h4><?php printf( __( '%s Robots Settings', 'autodescription' ), $ro_name ); ?></h4>
+		<p><span class="description"><?php echo $ro_i18n ?></span></p>
+		<p class="theseoframework-fields">
+			<?php
+
+			$checkboxes = '';
+
+			foreach ( $types as $type => $i18n ) {
+
+				if ( 'site' === $type || 'attachment' === $type || 'search' === $type ) {
+					//* Singular.
+					/* translators: 1: Option, 2: Post Type */
+					$label = sprintf( __( 'Apply %1$s to %2$s?', 'autodescription' ), $this->code_wrap( $ro_name ), $i18n );
+				} else {
+					//* Archive.
+					/* translators: 1: Option, 2: Post Type */
+					$label = sprintf( __( 'Apply %1$s to %2$s Archives?', 'autodescription' ), $this->code_wrap( $ro_name ), $i18n );
+				}
+
+				$id = $type . '_' . $ro_value;
+
+				//* Add <hr> if it's 'site'
+				$checkboxes .= ( 'site' === $type ) ? '<hr class="theseoframework-option-spacer">' : '';
+
+				$checkboxes .= $this->make_checkbox( $id, $label, '' );
+			}
+
+			//* Echo checkboxes.
+			echo $this->wrap_fields( $checkboxes );
+			?>
+		</p>
+		<?php
+
+	}
+
+	/**
+	 * Home Page meta box on the Site SEO Settings page.
+	 *
+	 * @param array $args The navigation tabs args.
+	 *
+	 * @since 2.2.2
+	 */
+	public function homepage_metabox( $args = array() ) {
+
+		do_action( 'the_seo_framework_homepage_metabox_before' );
+
+		?>
+		<p><span class="description"><?php printf( __( 'These settings will take precedence over the settings set within the Home Page edit screen, if any.', 'autodescription' ) ); ?></span></p>
+
+		<hr>
+		<?php
+
+		/**
+		 * Parse tabs content
+		 *
+		 * @param array $default_tabs { 'id' = The identifier =>
+		 *			array(
+		 *				'name' 		=> The name
+		 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
+		 *				'dashicon'	=> Desired dashicon
+		 *			)
+		 * }
+		 *
+		 * @since 2.6.0
+		 */
+		$default_tabs = array(
+			'general' => array(
+				'name' 		=> __( 'General', 'autodescription' ),
+				'callback'	=> array( $this, 'homepage_metabox_general' ),
+				'dashicon'	=> 'admin-generic',
+			),
+			'additions' => array(
+				'name'		=> __( 'Additions', 'autodescription' ),
+				'callback'	=> array( $this, 'homepage_metabox_additions' ),
+				'dashicon'	=> 'plus',
+			),
+			'robots' => array(
+				'name'		=> __( 'Robots', 'autodescription' ),
+				'callback'	=> array( $this, 'homepage_metabox_robots' ),
+				'dashicon'	=> 'visibility',
+			),
+		);
+
+		/**
+		 * Applies filters the_seo_framework_homepage_settings_tabs : array see $default_tabs
+		 * @since 2.6.0
+		 *
+		 * Used to extend HomePage tabs.
+		 */
+		$defaults = (array) apply_filters( 'the_seo_framework_homepage_settings_tabs', $default_tabs, $args );
+
+		$tabs = wp_parse_args( $args, $defaults );
+
+		$this->nav_tab_wrapper( 'homepage', $tabs, '2.6.0' );
+
+		do_action( 'the_seo_framework_homepage_metabox_after' );
+
+	}
+
+	public function homepage_metabox_general() {
+
+		/**
+		 * @param string $language The language for help pages. See $this->google_language();
+		 */
+		$language = $this->google_language();
+
+		/**
+		 * @param bool $page_on_front False if homepage is blog, true if single page/post
+		 * @param bool $home_description_frompost True if home inpost title is filled in. False if not.
+		 */
+		$page_on_front = $this->has_page_on_front();
+		$home_description_frompost = false;
+
+		/**
+		 * Notify the user that the data is pulled from the post.
+		 */
+		$description_from_post_message = '';
+		$title_from_post_message  = '';
+
+		// Setting up often used Translations
+		$title_i18n = __( 'Title', 'autodescription' );
+		$description_i18n = __( 'Description', 'autodescription' );
+		$home_page_i18n = __( 'Home Page', 'autodescription' );
+
+		//* Get home page ID. If blog on front, it's 0.
+		$home_id = $this->get_the_front_page_ID();
+
+		$home_title = $this->escape_title( $this->get_option( 'homepage_title' ) );
+
+		//* Get blog tagline
+		$blog_description = $this->get_blogdescription();
+
+		/**
+		 * Home Page Tagline settings.
+		 * @since 2.3.8
+		 *
+		 * @param string $home_tagline The tagline option.
+		 * @param string $home_tagline_placeholder The option placeholder. Always defaults to description.
+		 * @param string|void $home_tagline_value The tagline input value.
+		 * @param string $blog_description Override blog description with option if applicable.
+		 */
+		$home_tagline = $this->get_field_value( 'homepage_title_tagline' );
+		$home_tagline_placeholder = $blog_description;
+		$home_tagline_value = $home_tagline ? $home_tagline : '';
+		$blog_description = $home_tagline_value ? $home_tagline_value : $blog_description;
+
+		/**
+		 * Create a placeholder for when there's no custom HomePage title found.
+		 * @since 2.2.4
+		 */
+		$home_title_args = $this->generate_home_title( true, '', '', true, false );
+		$home_title_placeholder = $this->process_title_additions( $home_title_args['title'], $home_title_args['blogname'], $home_title_args['seplocation'] );
+
+		/**
+		 * If the home title is fetched from the post, notify about that instead.
+		 * @since 2.2.4
+		 *
+		 * Nesting often used translations
+		 */
+		if ( empty( $home_title ) && $page_on_front && $this->get_custom_field( '_genesis_title', $home_id ) ) {
+			/* translators: 1: Option, 2: Page SEO Settings, 3: Home Page */
+			$title_from_post_message = sprintf( __( 'Note: The %1$s is fetched from the %2$s on the %3$s.', 'autodescription' ), $title_i18n, __( 'Page SEO Settings', 'autodescription' ), $home_page_i18n );
+		}
+
+		/**
+		 * Check for options to calculate title length.
+		 *
+		 * @since 2.3.4
+		 */
+		if ( $home_title ) {
+			$home_title_args = $this->generate_home_title();
+			$tit_len_pre = $this->process_title_additions( $home_title_args['title'], $home_title_args['blogname'], $home_title_args['seplocation'] );
+		} else {
+			$tit_len_pre = $home_title_placeholder;
+		}
+
+		//* Fetch the description from the home page.
+		$frompost_description = $page_on_front ? $this->get_custom_field( '_genesis_description', $home_id ) : '';
+
+		//* Fetch the HomePage Description option.
+		$home_description = $this->get_field_value( 'homepage_description' );
+
+		/**
+		 * Create a placeholder if there's no custom HomePage description found.
+		 * @since 2.2.4
+		 *
+		 * Reworked. Always create a placeholder.
+		 * @since 2.3.4
+		 */
+		if ( $frompost_description ) {
+			$description_placeholder = $frompost_description;
+		} else {
+			$description_args = array(
+				'id' => $home_id,
+				'is_home' => true,
+				'get_custom_field' => false
+			);
+
+			$description_placeholder = $this->generate_description( '', $description_args );
+		}
+
+		/**
+		 * Checks if the home is blog, the Home Page Metabox description and
+		 * the frompost description.
+		 * @since 2.3.4
+		 */
+		if ( empty( $home_description ) && $page_on_front && $frompost_description )
+			$home_description_frompost = true;
+
+		/**
+		 *
+		 * If the HomePage Description empty, it will check for the InPost
+		 * Description set on the Home Page. And it will set the InPost
+		 * Description as placeholder.
+		 *
+		 * Nesting often used translations.
+		 *
+		 * Notify that the homepage is a blog.
+		 * @since 2.2.2
+		 */
+		if ( $home_description_frompost ) {
+			/* translators: 1: Option, 2: Page SEO Settings, 3: Home Page */
+			$description_from_post_message = sprintf( __( 'Note: The %1$s is fetched from the %2$s on the %3$s.', 'autodescription' ), $description_i18n, __( 'Page SEO Settings', 'autodescription' ), $home_page_i18n );
+		}
+
+		$desc_len_pre = $home_description ? $home_description : $description_placeholder;
+
+		/**
+		 * Convert to what Google outputs.
+		 *
+		 * This will convert e.g. &raquo; to a single length character.
+		 * @since 2.3.4
+		 */
+		$tit_len = html_entity_decode( $this->escape_title( $tit_len_pre ) );
+		$desc_len = html_entity_decode( $this->escape_title( $desc_len_pre ) );
+
+		?>
+		<p>
+			<label for="<?php $this->field_id( 'homepage_title_tagline' ); ?>" class="toblock">
+				<strong><?php printf( __( 'Custom %s Title Tagline', 'autodescription' ), $home_page_i18n ); ?></strong>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'homepage_title_tagline' ); ?>" class="large-text" id="<?php $this->field_id( 'homepage_title_tagline' ); ?>" placeholder="<?php echo $home_tagline_placeholder ?>" value="<?php echo esc_attr( $home_tagline_value ); ?>" />
+		</p>
+
+		<hr>
+
+		<p>
+			<label for="<?php $this->field_id( 'homepage_title' ); ?>" class="toblock">
+				<strong><?php printf( __( 'Custom %s Title', 'autodescription' ), $home_page_i18n ); ?></strong>
+				<a href="<?php echo esc_url( 'https://support.google.com/webmasters/answer/35624?hl=' . $language . '#3' ); ?>" target="_blank" title="<?php _e( 'Recommended Length: 50 to 55 characters', 'autodescription' ) ?>">[?]</a>
+				<span class="description theseoframework-counter"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="' . $this->field_id( 'homepage_title', false ) . '_chars">'. mb_strlen( $tit_len ) .'</span>' ); ?></span>
+			</label>
+		</p>
+		<p id="autodescription-title-wrap">
+			<input type="text" name="<?php $this->field_name( 'homepage_title' ); ?>" class="large-text" id="<?php $this->field_id( 'homepage_title' ); ?>" placeholder="<?php echo $home_title_placeholder ?>" value="<?php echo esc_attr( $home_title ); ?>" />
+			<span id="autodescription-title-offset" class="hide-if-no-js"></span><span id="autodescription-title-placeholder" class="hide-if-no-js"></span>
+		</p>
+		<?php
+		if ( $title_from_post_message ) {
+			echo '<p class="description">' . $title_from_post_message . '</p>';
+		}
+		?>
+		<hr>
+
+		<p>
+			<label for="<?php $this->field_id( 'homepage_description' ); ?>" class="toblock">
+				<strong><?php printf( __( 'Custom %s Description', 'autodescription' ), $home_page_i18n ); ?></strong>
+				<a href="<?php echo esc_url( 'https://support.google.com/webmasters/answer/35624?hl=' . $language . '#1' ); ?>" target="_blank" title="<?php _e( 'Recommended Length: 145 to 155 characters', 'autodescription' ) ?>">[?]</a>
+				<span class="description theseoframework-counter"><?php printf( __( 'Characters Used: %s', 'autodescription' ), '<span id="' . $this->field_id( 'homepage_description', false ) . '_chars">'. mb_strlen( $desc_len ) .'</span>' ); ?></span>
+			</label>
+		</p>
+		<p>
+			<textarea name="<?php $this->field_name( 'homepage_description' ); ?>" class="large-text" id="<?php $this->field_id( 'homepage_description' ); ?>" rows="3" cols="70"  placeholder="<?php echo $description_placeholder ?>"><?php echo esc_textarea( $home_description ); ?></textarea>
+		</p>
+		<p class="description">
+			<?php _e( 'The meta description can be used to determine the text used under the title on Search Engine results pages.', 'autodescription' ); ?>
+		</p>
+		<?php
+		if ( $description_from_post_message ) {
+			echo '<p class="description">' . $description_from_post_message . '</p>';
+		}
+
+	}
+
+
+	/**
+	 * HomePage Metabox Additions Tab Output
+	 *
+	 * @since 2.6.0
+	 *
+	 * @see $this->homepage_metabox() Callback for HomePage Settings box.
+	 */
+	public function homepage_metabox_additions() {
+
+		$home_page_i18n = __( 'Home Page', 'autodescription' );
+
+		/**
+		 * Generate example for Title Additions Location.
+		 */
+		$title_args = $this->generate_home_title();
+
+		//* I know, brilliant. @TODO @priority high 2.6.x.
+		$title = $title_args['blogname'];
+		$blogname = $title_args['title'];
+
+		// Get title separator
+		$sep = $this->get_separator( 'title', true );
+
+		/**
+		 * Generate Examples for both left and right seplocations.
+		 */
+		$example_left = '<em><span class="custom-title-js">' . esc_attr( $title ) . '</span><span class="custom-blogname-js"><span class="autodescription-sep-js"> ' . esc_attr( $sep ) . ' </span><span class="custom-tagline-js">' . esc_attr( $blogname ) . '</span></span></span>' . '</em>';
+		$example_right = '<em>' . '<span class="custom-blogname-js"><span class="custom-tagline-js">' . esc_attr( $blogname ) . '</span><span class="autodescription-sep-js"> ' . esc_attr( $sep ) . ' </span></span><span class="custom-title-js">' . esc_attr( $title ) . '</span></em>';
+
+		?>
+		<fieldset>
+			<legend><h4><?php _e( 'Document Title Additions Location', 'autodescription' ); ?></h4></legend>
+			<p>
+				<span class="description"><?php _e( 'Determines which side the added title text will go on.', 'autodescription' ); ?></span>
+			</p>
+
+			<p id="home-title-location" class="theseoframework-fields">
+				<span class="toblock">
+					<input type="radio" name="<?php $this->field_name( 'home_title_location' ); ?>" id="<?php $this->field_id( 'home_title_location_left' ); ?>" value="left" <?php checked( $this->get_field_value( 'home_title_location' ), 'left' ); ?> />
+					<label for="<?php $this->field_id( 'home_title_location_left' ); ?>">
+						<span><?php _e( 'Left:', 'autodescription' ); ?></span>
+						<?php echo ( $example_left ) ? $this->code_wrap_noesc( $example_left ) : ''; ?>
+					</label>
+				</span>
+				<span class="toblock">
+					<input type="radio" name="<?php $this->field_name( 'home_title_location' ); ?>" id="<?php $this->field_id( 'home_title_location_right' ); ?>" value="right" <?php checked( $this->get_field_value( 'home_title_location' ), 'right' ); ?> />
+					<label for="<?php $this->field_id( 'home_title_location_right' ); ?>">
+						<span><?php _e( 'Right:', 'autodescription' ); ?></span>
+						<?php echo ( $example_right ) ? $this->code_wrap_noesc( $example_right ) : ''; ?>
+					</label>
+				</span>
+			</p>
+		</fieldset>
+
+		<hr>
+		<?php
+		/**
+		 * @TODO work on this checkbox.
+		 * @priority low 2.6.x
+		 */
+		?>
+		<h4><?php printf( __( '%s Tagline', 'autodescription' ), $home_page_i18n ); ?></h4>
+		<p id="title-tagline-toggle">
+			<label for="<?php $this->field_id( 'homepage_tagline' ); ?>" class="toblock">
+				<input type="checkbox" name="<?php $this->field_name( 'homepage_tagline' ); ?>" id="<?php $this->field_id( 'homepage_tagline' ); ?>" <?php $this->is_conditional_checked( 'homepage_tagline' ); ?> value="1" <?php checked( $this->get_field_value( 'homepage_tagline' ) ); ?> />
+				<?php printf( __( 'Add site description (tagline) to the Title on the %s?', 'autodescription' ), $home_page_i18n ); ?>
+			</label>
+		</p>
+		<?php
+	}
+
+	/**
+	 * HomePage Metabox Robots Tab Output
+	 *
+	 * @since 2.6.0
+	 *
+	 * @see $this->homepage_metabox() Callback for HomePage Settings box.
+	 */
+	public function homepage_metabox_robots() {
+
+		$home_page_i18n = __( 'Home Page', 'autodescription' );
+		$language = $this->google_language();
+
+		//* Get home page ID. If blog on front, it's 0.
+		$home_id = $this->get_the_front_page_ID();
+
+		$noindex_post = $this->get_custom_field( '_genesis_noindex', $home_id );
+		$nofollow_post = $this->get_custom_field( '_genesis_nofollow', $home_id );
+		$noarchive_post = $this->get_custom_field( '_genesis_noarchive', $home_id );
+
+		/**
+		 * Shows user that the setting is checked on the home page.
+		 * Adds starting - with space to maintain readability.
+		 *
+		 * @since 2.2.4
+		 */
+		if ( $noindex_post || $nofollow_post || $noarchive_post ) {
+			$checked_home = ' - <a href="' . esc_url( admin_url( 'post.php?post=' . $home_id . '&action=edit#theseoframework-inpost-box' ) ) . '" target="_blank" class="attention" title="' . __( 'View Home Page Settings', 'autodescription' ) . '" >' . __( 'Checked in Page', 'autodescription' ) . '</a>';
+		} else {
+			$checked_home = '';
+		}
+
+		?>
+		<h4><?php _e( 'Home Page Robots Meta Settings', 'autodescription' ); ?></h4>
+		<?php
+
+		$noindex_note = $noindex_post ? $checked_home : '';
+		$nofollow_note = $nofollow_post ? $checked_home : '';
+		$noarchive_note = $noarchive_post ? $checked_home : '';
+
+		/* translators: 1: Option, 2: Location */
+		$i_label 	= sprintf( __( 'Apply %1$s to the %2$s?', 'autodescription' ), $this->code_wrap( 'noindex' ), $home_page_i18n );
+		$i_label	.= ' ';
+		$i_label	.= $this->make_info(
+							__( 'Tell Search Engines not to show this page in their search results', 'autodescription' ),
+							'https://support.google.com/webmasters/answer/93710?hl=' . $language,
+							false
+						)
+					. $noindex_note;
+
+		/* translators: 1: Option, 2: Location */
+		$f_label 	= sprintf( __( 'Apply %1$s to the %2$s?', 'autodescription' ), $this->code_wrap( 'nofollow' ), $home_page_i18n );
+		$f_label	.= ' ';
+		$f_label	.= $this->make_info(
+							__( 'Tell Search Engines not to follow links on this page', 'autodescription' ),
+							'https://support.google.com/webmasters/answer/96569?hl=' . $language,
+							false
+						)
+					. $nofollow_note;
+
+		/* translators: 1: Option, 2: Location */
+		$a_label 	= sprintf( __( 'Apply %1$s to the %2$s?', 'autodescription' ), $this->code_wrap( 'noarchive' ), $home_page_i18n );
+		$a_label	.= ' ';
+		$a_label 	.=	$this->make_info(
+						__( 'Tell Search Engines not to save a cached copy of this page', 'autodescription' ),
+						'https://support.google.com/webmasters/answer/79812?hl=' . $language,
+						false
+					)
+					. $noarchive_note;
+
+		//* Echo checkboxes.
+		$this->wrap_fields(
+			array(
+				$this->make_checkbox(
+					'homepage_noindex',
+					$i_label,
+					''
+				),
+				$this->make_checkbox(
+					'homepage_nofollow',
+					$f_label,
+					''
+				),
+				$this->make_checkbox(
+					'homepage_noarchive',
+					$a_label,
+					''
+				),
+			),
+			true
+		);
+
+		// Add notice if any options are checked on the post.
+		if ( $noindex_post || $nofollow_post || $noarchive_post ) {
+			?><p class="description"><?php printf( __( 'Note: If any of these options are unchecked, but are checked on the Home Page, they will be outputted regardless.', 'autodescription' ) ); ?></p><?php
+		}
+		?>
+
+		<hr>
+
+		<h4><?php _e( 'Home Page Pagination Robots Settings', 'autodescription' ); ?></h4>
+
+		<p class="description"><?php _e( "If your Home Page is paginated and outputs content that's also found elsewhere on the website, enabling this option might prevent duplicate content.", 'autodescription' ); ?></p>
+
+		<?php
+		//* Echo checkbox.
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'home_paged_noindex',
+				/* translators: 1: Option, 2: Location */
+				sprintf( __( 'Apply %1$s to every second or later page on the %2$s?', 'autodescription' ), $this->code_wrap( 'noindex' ), $home_page_i18n ),
+				''
+			),
+			true
+		);
+
+	}
+
+	/**
+	 * Social meta box on the Site SEO Settings page.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses $this->social_metabox_general_tab()
+	 * @uses $this->social_metabox_facebook_tab()
+	 * @uses $this->social_metabox_twitter_tab()
+	 *
+	 * @applies filter 'social_settings_tabs'
+	 *
+	 * @param array $args the social tabs arguments
+	 */
+	public function social_metabox( $args = array() ) {
+
+		do_action( 'the_seo_framework_social_metabox_before' );
+
+		/**
+		 * Parse tabs content
+		 *
+		 * @param array $default_tabs { 'id' = The identifier =>
+		 *			array(
+		 *				'name' 		=> The name
+		 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
+		 *				'dashicon'	=> Desired dashicon
+		 *			)
+		 * }
+		 *
+		 * @since 2.2.2
+		 */
+		$default_tabs = array(
+			'general' => array(
+				'name' 		=> __( 'General', 'autodescription' ),
+				'callback'	=> array( $this, 'social_metabox_general_tab' ),
+				'dashicon'	=> 'admin-generic',
+			),
+			'facebook' => array(
+				'name'		=> 'Facebook',
+				'callback'	=> array( $this, 'social_metabox_facebook_tab' ),
+				'dashicon'	=> 'facebook-alt',
+			),
+			'twitter' => array(
+				'name'		=> 'Twitter',
+				'callback'	=> array( $this, 'social_metabox_twitter_tab' ),
+				'dashicon'	=> 'twitter',
+			),
+			'postdates' => array(
+				'name'		=> __( 'Post Dates', 'autodescription' ),
+				'callback'	=> array( $this, 'social_metabox_postdates_tab' ),
+				'dashicon'	=> 'backup',
+			),
+			'relationships' => array(
+				'name'		=> __( 'Link Relationships', 'autodescription' ),
+				'callback'	=> array( $this, 'social_metabox_relationships_tab' ),
+				'dashicon'	=> 'leftright',
+			),
+		);
+
+		/**
+		 * Applies filters the_seo_framework_social_settings_tabs : array see $default_tabs
+		 *
+		 * Used to extend Social tabs
+		 */
+		$defaults = (array) apply_filters( 'the_seo_framework_social_settings_tabs', $default_tabs, $args );
+
+		$tabs = wp_parse_args( $args, $defaults );
+
+		$this->nav_tab_wrapper( 'social', $tabs, '2.2.2' );
+
+		do_action( 'the_seo_framework_social_metabox_after' );
+
+	}
+
+	/**
+	 * Social Metabox General Tab output
+	 *
+	 * @since 2.2.2
+	 *
+	 * @see $this->social_metabox() Callback for Social Settings box.
+	 */
+	protected function social_metabox_general_tab() {
+
+		?>
+		<h4><?php _e( 'Site Shortlink Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php printf( __( 'The shortlink tag might have some use for 3rd party service discoverability, but it has little to no SEO value whatsoever.', 'autodescription' ) ); ?></p>
+		<?php
+
+		//* Echo checkboxes.
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'shortlink_tag',
+				__( 'Output shortlink tag?', 'autodescription' ),
+				''
+			),
+			true
+		);
+
+		?>
+		<hr>
+
+		<h4><?php _e( 'Social Meta Tags Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( 'Output various meta tags for social site integration, among other 3rd party services.', 'autodescription' ); ?></p>
+
+		<hr>
+		<?php
+
+		//* Echo Open Graph Tags checkboxes.
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'og_tags',
+				__( 'Output Open Graph meta tags?', 'autodescription' ),
+				__( 'Facebook, Twitter, Pinterest and many other social sites make use of these tags.', 'autodescription' )
+			),
+			true
+		);
+
+		if ( $this->has_og_plugin() )
+			echo '<p class="description">' . __( 'Note: Another Open Graph plugin has been detected.', 'autodescription' ) . '</p>';
+
+		?><hr><?php
+
+		//* Echo Facebook Tags checkbox.
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'facebook_tags',
+				__( 'Output Facebook meta tags?', 'autodescription' ),
+				sprintf( __( 'Output various tags targetted at %s.', 'autodescription' ), 'Facebook' )
+			),
+			true
+		);
+
+		?><hr><?php
+
+		//* Echo Twitter Tags checkboxes.
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'twitter_tags',
+				__( 'Output Twitter meta tags?', 'autodescription' ),
+				sprintf( __( 'Output various tags targetted at %s.', 'autodescription' ), 'Twitter' )
+			),
+			true
+		);
+
+	}
+
+	/**
+	 * Social Metabox Facebook Tab Output
+	 *
+	 * @since 2.2.2
+	 *
+	 * @see $this->social_metabox() Callback for Social Settings box.
+	 */
+	protected function social_metabox_facebook_tab() {
+
+		$fb_author = $this->get_field_value( 'facebook_author' );
+		$fb_author_placeholder = empty( $fb_publisher ) ? _x( 'http://www.facebook.com/YourPersonalProfile', 'Example Facebook Personal URL', 'autodescription' ) : '';
+
+		$fb_publisher = $this->get_field_value( 'facebook_publisher' );
+		$fb_publisher_placeholder = empty( $fb_publisher ) ? _x( 'http://www.facebook.com/YourVerifiedBusinessProfile', 'Example Verified Facebook Business URL', 'autodescription' ) : '';
+
+		$fb_appid = $this->get_field_value( 'facebook_appid' );
+		$fb_appid_placeholder = empty( $fb_appid ) ? '123456789012345' : '';
+
+		?>
+		<h4><?php _e( 'Default Facebook Integration Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( 'Facebook post sharing works mostly through Open Graph. However, you can also link your Business and Personal Facebook pages, among various other options.', 'autodescription' ); ?></p>
+		<p class="description"><?php _e( 'When these options are filled in, Facebook might link your Facebook profile to be followed and liked when your post or page is shared.', 'autodescription' ); ?></p>
+
+		<hr>
+
+		<p>
+			<label for="<?php $this->field_id( 'facebook_author' ); ?>">
+				<strong><?php _e( 'Article Author Facebook URL', 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( 'https://facebook.com/me' ); ?>" class="description" target="_blank" title="<?php _e( 'Your Facebook Profile', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'facebook_author' ); ?>" class="large-text" id="<?php $this->field_id( 'facebook_author' ); ?>" placeholder="<?php echo $fb_author_placeholder ?>" value="<?php echo esc_attr( $fb_author ); ?>" />
+		</p>
+
+		<p>
+			<label for="<?php $this->field_id( 'facebook_publisher' ); ?>">
+				<strong><?php _e( 'Article Publisher Facebook URL', 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( 'https://instantarticles.fb.com/' ); ?>" class="description" target="_blank" title="<?php _e( 'To use this, you need to be a verified business', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'facebook_publisher' ); ?>" class="large-text" id="<?php $this->field_id( 'facebook_publisher' ); ?>" placeholder="<?php echo $fb_publisher_placeholder ?>" value="<?php echo esc_attr( $fb_publisher ); ?>" />
+		</p>
+
+		<p>
+			<label for="<?php $this->field_id( 'facebook_appid' ); ?>">
+				<strong><?php _e( 'Facebook App ID', 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( 'https://developers.facebook.com/apps' ); ?>" target="_blank" class="description" title="<?php _e( 'Get Facebook App ID', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'facebook_appid' ); ?>" class="large-text" id="<?php $this->field_id( 'facebook_appid' ); ?>" placeholder="<?php echo $fb_appid_placeholder ?>" value="<?php echo esc_attr( $fb_appid ); ?>" />
+		</p>
+		<?php
+
+	}
+
+	/**
+	 * Social Metabox Twitter Tab Output
+	 *
+	 * @since 2.2.2
+	 *
+	 * @see $this->social_metabox() Callback for Social Settings box.
+	 */
+	protected function social_metabox_twitter_tab() {
+
+		$tw_site = $this->get_field_value( 'twitter_site' );
+		$tw_site_placeholder = empty( $tw_site ) ? _x( '@your-site-username', 'Twitter @username', 'autodescription' ) : '';
+
+		$tw_creator = $this->get_field_value( 'twitter_creator' );
+		$tw_creator_placeholder = empty( $tw_creator ) ? _x( '@your-personal-username', 'Twitter @username', 'autodescription' ) : '';
+
+		$twitter_card = $this->get_twitter_card_types();
+
+		?>
+		<h4><?php _e( 'Default Twitter Integration Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php printf( __( 'Twitter post sharing works mostly through Open Graph. However, you can also link your Business and Personal Twitter pages, among various other options.', 'autodescription' ) ); ?></p>
+
+		<hr>
+
+		<fieldset id="twitter-cards">
+			<legend><h4><?php _e( 'Twitter Card Type', 'autodescription' ); ?></h4></legend>
+			<p class="description"><?php printf( __( 'What kind of Twitter card would you like to use? It will default to %s if no image is found.', 'autodescription' ), $this->code_wrap( 'Summary' ) ); ?></p>
+
+			<p class="theseoframework-fields">
+			<?php
+				foreach ( $twitter_card as $type => $name ) {
+					?>
+						<span class="toblock">
+							<input type="radio" name="<?php $this->field_name( 'twitter_card' ); ?>" id="<?php $this->field_id( 'twitter_card_' . $type ); ?>" value="<?php echo $type ?>" <?php checked( $this->get_field_value( 'twitter_card' ), $type ); ?> />
+							<label for="<?php $this->field_id( 'twitter_card_' . $type ); ?>">
+								<span><?php echo $this->code_wrap( ucfirst( $name ) ); ?></span>
+								<a class="description" href="<?php echo esc_url('https://dev.twitter.com/cards/types/' . $name ); ?>" target="_blank" title="Twitter Card <?php echo ucfirst( $name ) . ' ' . __( 'Example', 'autodescription' ); ?>"><?php _e( 'Example', 'autodescription' ); ?></a>
+							</label>
+						</span>
+					<?php
+				}
+			?>
+			</p>
+		</fieldset>
+
+		<hr>
+
+		<p class="description"><?php printf( __( 'When the following options are filled in, Twitter might link your Twitter Site or Personal Profile when your post or page is shared.', 'autodescription' ) ); ?></p>
+		<p>
+			<label for="<?php $this->field_id( 'twitter_site' ); ?>" class="toblock">
+				<strong><?php _e( "Your Website's Twitter Profile", 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( 'https://twitter.com/home' ); ?>" target="_blank" class="description" title="<?php _e( 'Find your @username', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'twitter_site' ); ?>" class="large-text" id="<?php $this->field_id( 'twitter_site' ); ?>" placeholder="<?php echo $tw_site_placeholder ?>" value="<?php echo esc_attr( $tw_site ); ?>" />
+		</p>
+
+		<p>
+			<label for="<?php $this->field_id( 'twitter_creator' ); ?>" class="toblock">
+				<strong><?php _e( 'Your Personal Twitter Profile', 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( 'https://twitter.com/home' ); ?>" target="_blank" class="description" title="<?php _e( 'Find your @username', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'twitter_creator' ); ?>" class="large-text" id="<?php $this->field_id( 'twitter_creator' ); ?>" placeholder="<?php echo $tw_creator_placeholder ?>" value="<?php echo esc_attr( $tw_creator ); ?>" />
+		</p>
+		<?php
+
+	}
+
+	/**
+	 * Social Metabox PostDates Tab Output
+	 *
+	 * @since 2.2.4
+	 *
+	 * @see $this->social_metabox() Callback for Social Settings box.
+	 */
+	public function social_metabox_postdates_tab() {
+
+		$pages_i18n = __( 'Pages', 'autodescription' );
+		$posts_i18n = __( 'Posts', 'autodescription' );
+		$home_i18n = __( 'Home Page', 'autodescription' );
+
+		?>
+		<h4><?php _e( 'Post Date Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "Some Search Engines output the publishing date and modified date next to the search results. These help Search Engines find new content and could impact the SEO value.", 'autodescription' ); ?></p>
+		<p class="description"><?php _e( "It's recommended on posts, but it's not recommended on pages unless you modify or create new pages frequently.", 'autodescription' ); ?></p>
+
+		<?php
+			/* translators: 1: Option, 2: Post Type */
+			$post_publish_time_label = sprintf( __( 'Add %1$s to %2$s?', 'autodescription' ), $this->code_wrap( 'article:published_time' ), $posts_i18n );
+			$post_publish_time_checkbox = $this->make_checkbox( 'post_publish_time', $post_publish_time_label, '' );
+
+			/* translators: 1: Option, 2: Post Type */
+			$page_publish_time_label = sprintf( __( 'Add %1$s to %2$s?', 'autodescription' ), $this->code_wrap( 'article:published_time' ), $pages_i18n );
+			$page_publish_time_checkbox = $this->make_checkbox( 'page_publish_time', $page_publish_time_label, '' );
+
+			//* Echo checkboxes.
+			echo $this->wrap_fields( $post_publish_time_checkbox . $page_publish_time_checkbox );
+
+			/* translators: 1: Option, 2: Post Type */
+			$post_modify_time_label = sprintf( __( 'Add %1$s to %2$s?', 'autodescription' ), $this->code_wrap( 'article:modified_time' ), $posts_i18n );
+			$post_modify_time_checkbox = $this->make_checkbox( 'post_modify_time', $post_modify_time_label, '' );
+
+			/* translators: 1: Option, 2: Post Type */
+			$page_modify_time_label = sprintf( __( 'Add %1$s to %2$s?', 'autodescription' ), $this->code_wrap( 'article:modified_time' ), $pages_i18n );
+			$page_modify_time_checkbox = $this->make_checkbox( 'page_modify_time', $page_modify_time_label, '' );
+
+			//* Echo checkboxes.
+			echo $this->wrap_fields( $post_modify_time_checkbox . $page_modify_time_checkbox );
+		?>
+
+		<hr>
+
+		<h4><?php _e( 'Home Page', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "Because you only publish the Home Page once, Search Engines might think your website is outdated. This can be prevented by disabling the following options.", 'autodescription' ); ?></p>
+
+		<?php
+			/* translators: 1: Option, 2: Post Type */
+			$home_publish_time_label = sprintf( __( 'Add %1$s to %2$s?', 'autodescription' ), $this->code_wrap( 'article:published_time' ), $home_i18n );
+			$home_publish_time_checkbox = $this->make_checkbox( 'home_publish_time', $home_publish_time_label, '' );
+
+			/* translators: 1: Option, 2: Post Type */
+			$home_modify_time_label = sprintf( __( 'Add %1$s to %2$s?', 'autodescription' ), $this->code_wrap( 'article:modified_time' ), $home_i18n );
+			$home_modify_time_checkbox = $this->make_checkbox( 'home_modify_time', $home_modify_time_label, '' );
+
+			//* Echo checkboxes.
+			echo $this->wrap_fields( $home_publish_time_checkbox . $home_modify_time_checkbox );
+
+	}
+
+	/**
+	 * Social Metabox Relationships Tab Output
+	 *
+	 * @since 2.2.4
+	 *
+	 * @see $this->social_metabox() Callback for Social Settings box.
+	 */
+	public function social_metabox_relationships_tab() {
+
+		?>
+		<h4><?php _e( 'Link Relationship Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "Some Search Engines look for relations between the content of your pages. If you have multiple pages for a single Post or Page, or have archives indexed, this option will help Search Engines look for the right page to display in the Search Results.", 'autodescription' ); ?></p>
+		<p class="description"><?php _e( "It's recommended to turn this option on for better SEO consistency and to prevent duplicate content errors.", 'autodescription' ); ?></p>
+
+		<hr>
+		<?php
+			$prev_next_posts_label = sprintf( __( 'Add %s link tags to Posts and Pages?', 'autodescription' ), $this->code_wrap( 'rel' ) );
+			$prev_next_posts_checkbox = $this->make_checkbox( 'prev_next_posts', $prev_next_posts_label, '' );
+
+			$prev_next_archives_label = sprintf( __( 'Add %s link tags to Archives?', 'autodescription' ), $this->code_wrap( 'rel' ) );
+			$prev_next_archives_checkbox = $this->make_checkbox( 'prev_next_archives', $prev_next_archives_label, '' );
+
+			$prev_next_frontpage_label = sprintf( __( 'Add %s link tags to the Home Page?', 'autodescription' ), $this->code_wrap( 'rel' ) );
+			$prev_next_frontpage_checkbox = $this->make_checkbox( 'prev_next_frontpage', $prev_next_frontpage_label, '' );
+
+			//* Echo checkboxes.
+			echo $this->wrap_fields( $prev_next_posts_checkbox . $prev_next_archives_checkbox . $prev_next_frontpage_checkbox );
+
+	}
+
+	/**
+	 * Webmaster meta box on the Site SEO Settings page.
+	 *
+	 * @since 2.2.4
+	 */
+	public function webmaster_metabox() {
+
+		do_action( 'the_seo_framework_webmaster_metabox_before' );
+
+		$site_url = $this->the_home_url_from_cache();
+		$language = $this->google_language();
+
+		$bing_site_url = "https://www.bing.com/webmaster/configure/verify/ownership?url=" . urlencode( $site_url );
+		$google_site_url = "https://www.google.com/webmasters/verification/verification?hl=" . $language . "&siteUrl=" . $site_url;
+		$pint_site_url = "https://analytics.pinterest.com/";
+		$yandex_site_url = "https://webmaster.yandex.com/site/verification.xml";
+
+		?>
+		<h4><?php _e( 'Webmaster Integration Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "When adding your website to Google, Bing and other Webmaster Tools, you'll be asked to add a code or file to your website for verification purposes. These options will help you easily integrate those codes.", 'autodescription' ); ?></p>
+		<p class="description"><?php _e( "Verifying your website has no SEO value whatsoever. But you might gain added benefits such as search ranking insights to help you improve your website's content.", 'autodescription' ); ?></p>
+
+		<hr>
+
+		<p>
+			<label for="<?php $this->field_id( 'google_verification' ); ?>" class="toblock">
+				<strong><?php _e( "Google Webmaster Verification Code", 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( $google_site_url ); ?>" target="_blank" class="description" title="<?php _e( 'Get the Google Verification code', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'google_verification' ); ?>" class="large-text" id="<?php $this->field_id( 'google_verification' ); ?>" placeholder="ABC1d2eFg34H5iJ6klmNOp7qRstUvWXyZaBc8dEfG9" value="<?php echo esc_attr( $this->get_field_value( 'google_verification' ) ); ?>" />
+		</p>
+
+		<p>
+			<label for="<?php $this->field_id( 'bing_verification' ); ?>" class="toblock">
+				<strong><?php _e( "Bing Webmaster Verification Code", 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( $bing_site_url ); ?>" target="_blank" class="description" title="<?php _e( 'Get the Bing Verification Code', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'bing_verification' ); ?>" class="large-text" id="<?php $this->field_id( 'bing_verification' ); ?>" placeholder="123A456B78901C2D3456E7890F1A234D" value="<?php echo esc_attr( $this->get_field_value( 'bing_verification' ) ); ?>" />
+		</p>
+
+		<p>
+			<label for="<?php $this->field_id( 'yandex_verification' ); ?>" class="toblock">
+				<strong><?php _e( "Yandex Webmaster Verification Code", 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( $yandex_site_url ); ?>" target="_blank" class="description" title="<?php _e( 'Get the Yandex Verification Code', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'yandex_verification' ); ?>" class="large-text" id="<?php $this->field_id( 'yandex_verification' ); ?>" placeholder="12345abc678901d2" value="<?php echo esc_attr( $this->get_field_value( 'yandex_verification' ) ); ?>" />
+		</p>
+
+		<p>
+			<label for="<?php $this->field_id( 'pint_verification' ); ?>" class="toblock">
+				<strong><?php _e( "Pinterest Analytics Verification Code", 'autodescription' ); ?></strong>
+				<a href="<?php echo esc_url( $pint_site_url ); ?>" target="_blank" class="description" title="<?php _e( 'Get the Pinterest Verification Code', 'autodescription' ); ?>">[?]</a>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'pint_verification' ); ?>" class="large-text" id="<?php $this->field_id( 'pint_verification' ); ?>" placeholder="123456a7b8901de2fa34bcdef5a67b98" value="<?php echo esc_attr( $this->get_field_value( 'pint_verification' ) ); ?>" />
+		</p>
+		<?php
+
+		do_action( 'the_seo_framework_webmaster_metabox_after' );
+
+	}
+
+	/**
+	 * Knowlegde Graph metabox on the Site SEO Settings page.
+	 *
+	 * @since 2.2.8
+	 *
+	 * @see $this->knowledge_metabox() Callback for Social Settings box.
+	 */
+	public function knowledge_metabox( $args = array() ) {
+
+		do_action( 'the_seo_framework_knowledge_metabox_before' );
+
+		/**
+		 * Parse tabs content
+		 *
+		 * @param array $default_tabs { 'id' = The identifier =>
+		 *			array(
+		 *				'name' 		=> The name
+		 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
+		 *				'dashicon'	=> Desired dashicon
+		 *			)
+		 * }
+		 *
+		 * @since 2.2.8
+		 */
+		$default_tabs = array(
+			'general' => array(
+				'name' 		=> __( 'General', 'autodescription' ),
+				'callback'	=> array( $this, 'knowledge_metabox_general_tab' ),
+				'dashicon'	=> 'admin-generic',
+			),
+			'website' => array(
+				'name'		=> __( 'Website', 'autodescription' ),
+				'callback'	=> array( $this, 'knowledge_metabox_about_tab' ),
+				'dashicon'	=> 'admin-home',
+			),
+			'social' => array(
+				'name'		=> 'Social Sites',
+				'callback'	=> array( $this, 'knowledge_metabox_social_tab' ),
+				'dashicon'	=> 'networking',
+			),
+		);
+
+		/**
+		 * Applies filter knowledgegraph_settings_tabs : Array see $default_tabs
+		 *
+		 * Used to extend Knowledge Graph tabs
+		 */
+		$defaults = (array) apply_filters( 'the_seo_framework_knowledgegraph_settings_tabs', $default_tabs, $args );
+
+		$tabs = wp_parse_args( $args, $defaults );
+
+		$this->nav_tab_wrapper( 'knowledge', $tabs, '2.2.8' );
+
+		do_action( 'the_seo_framework_knowledge_metabox_after' );
+
+	}
+
+	/**
+	 * Knowledge Graph Metabox General Tab Output
+	 *
+	 * @since 2.2.8
+	 *
+	 * @see $this->knowledge_metabox() Callback for Knowledge Graph Settings box.
+	 */
+	public function knowledge_metabox_general_tab() {
+
+		?>
+		<h4><?php _e( 'Knowledge Graph Settings', 'autodescription' ); ?></h4>
+		<p><span class="description"><?php printf( __( "The Knowledge Graph lets Google and other Search Engines know where to find you or your organization and its relevant content.", 'autodescription' ) ); ?></span></p>
+		<p><span class="description"><?php printf( __( "Google is becoming more of an 'Answer Engine' than a 'Search Engine'. Setting up these options could have a positive impact on the SEO value of your website.", 'autodescription' ) ); ?></span></p>
+
+		<?php
+			$knowledge_output_label = __( 'Output Knowledge tags?', 'autodescription' );
+			$knowledge_output_checkbox = $this->make_checkbox( 'knowledge_output', $knowledge_output_label, '' );
+
+			//* Echo checkbox.
+			echo $this->wrap_fields( $knowledge_output_checkbox );
+
+		if ( $this->wp_version( '4.2.999', '>=' ) ) :
+		?>
+			<hr>
+
+			<h4><?php printf( _x( "Website logo", 'WordPress Customizer', 'autodescription' ) ); ?></h4>
+			<?php
+				$knowledge_logo_label = __( 'Use the Favicon from Customizer as the Organization Logo?', 'autodescription' );
+				$knowledge_logo_description = __( "This option only has an effect when this site represents an Organization. If left disabled, Search Engines will look elsewhere for a logo, if it exists and is assigned as a logo.", 'autodescription' );
+				$knowledge_logo_checkbox = $this->make_checkbox( 'knowledge_logo', $knowledge_logo_label, $knowledge_logo_description );
+
+				//* Echo checkbox.
+				echo $this->wrap_fields( $knowledge_logo_checkbox );
+		endif;
+
+	}
+
+	/**
+	 * Knowledge Graph Metabox About Tab Output
+	 *
+	 * @since 2.2.8
+	 *
+	 * @see $this->knowledge_metabox() Callback for Knowledge Graph Settings box.
+	 */
+	public function knowledge_metabox_about_tab() {
+
+		$blogname = $this->get_blogname();
+
+		?>
+		<h4><?php _e( 'About this website', 'autodescription' ); ?></h4>
+		<p><span class="description"><?php printf( __( 'Who or what is your website about?', 'autodescription' ) ); ?></span></p>
+
+		<hr>
+
+		<p>
+			<label for="<?php $this->field_id( 'knowledge_type' ); ?>"><?php _ex( 'This website represents:', '...Organization or Person.', 'autodescription' ); ?></label>
+			<select name="<?php $this->field_name( 'knowledge_type' ); ?>" id="<?php $this->field_id( 'knowledge_type' ); ?>">
+			<?php
+			$knowledge_type = (array) apply_filters(
+				'the_seo_framework_knowledge_types',
+				array(
+					'organization'	=> __( 'An Organization', 'autodescription' ),
+					'person' 		=> __( 'A Person', 'autodescription' ),
+				)
+			);
+			foreach ( $knowledge_type as $value => $name )
+				echo '<option value="' . esc_attr( $value ) . '"' . selected( $this->get_field_value( 'knowledge_type' ), esc_attr( $value ), false ) . '>' . esc_html( $name ) . '</option>' . "\n";
+			?>
+			</select>
+		</p>
+
+		<hr>
+
+		<p>
+			<label for="<?php $this->field_id( 'knowledge_name' ); ?>">
+				<strong><?php _e( "The organization or personal name", 'autodescription' ); ?></strong>
+			</label>
+		</p>
+		<p>
+			<input type="text" name="<?php $this->field_name( 'knowledge_name' ); ?>" class="large-text" id="<?php $this->field_id( 'knowledge_name' ); ?>" placeholder="<?php echo esc_attr( $blogname ) ?>" value="<?php echo esc_attr( $this->get_field_value( 'knowledge_name' ) ); ?>" />
+		</p>
+		<?php
+
+	}
+
+	/**
+	 * Knowledge Graph Metabox Social Tab Output
+	 *
+	 * @since 2.2.8
+	 *
+	 * @see $this->knowledge_metabox() Callback for Knowledge Graph Settings box.
+	 */
+	public function knowledge_metabox_social_tab() {
+
+		?>
+		<h4><?php _e( 'Social Pages connected to this website', 'autodescription' ); ?></h4>
+		<p><span class="description"><?php _e( "Don't have a page at a site or is the profile only privately accessible? Leave that field empty. Unsure? Fill it in anyway.", 'autodescription' ); ?></span></p>
+		<p><span class="description"><?php _e( "Add the link that leads directly to the social page of this website.", 'autodescription' ); ?></span></p>
+
+		<hr>
+
+		<?php
+		$connectedi18n = _x( 'RelatedProfile', 'No spaces. E.g. https://facebook.com/RelatedProfile', 'autodescription' );
+		$profile18n = _x( 'Profile', 'Social Profile', 'autodescription' );
+
+		/**
+		 * @todo maybe genericons?
+		 */
+
+		$socialsites = array(
+			'facebook' => array(
+				'option'		=> 'knowledge_facebook',
+				'dashicon'		=> 'dashicons-facebook',
+				'desc' 			=> 'Facebook ' . __( 'Page', 'autodescription' ),
+				'placeholder'	=> 'http://www.facebook.com/' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://facebook.com/me' ),
+			),
+			'twitter' => array(
+				'option'		=> 'knowledge_twitter',
+				'dashicon'		=> 'dashicons-twitter',
+				'desc' 			=> 'Twitter ' . $profile18n,
+				'placeholder'	=> 'http://www.twitter.com/' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://twitter.com/home' ), // No example link available.
+			),
+			'gplus' => array(
+				'option'		=> 'knowledge_gplus',
+				'dashicon'		=> 'dashicons-googleplus',
+				'desc' 			=>  'Google+ ' . $profile18n,
+				'placeholder'	=> 'https://plus.google.com/' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://plus.google.com/me' ),
+			),
+			'instagram' => array(
+				'option'		=> 'knowledge_instagram',
+				'dashicon'		=> 'genericon-instagram',
+				'desc' 			=> 'Instagram ' . $profile18n,
+				'placeholder'	=> 'http://instagram.com/' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://instagram.com/' ), // No example link available.
+			),
+			'youtube' => array(
+				'option'		=> 'knowledge_youtube',
+				'dashicon'		=> 'genericon-youtube',
+				'desc' 			=> 'Youtube ' . $profile18n,
+				'placeholder'	=> 'http://www.youtube.com/' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://www.youtube.com/user/%2f' ), // Yes a double slash.
+			),
+			'linkedin' => array(
+				'option'		=> 'knowledge_linkedin',
+				'dashicon'		=> 'genericon-linkedin-alt',
+				'desc' 			=> 'LinkedIn ' . $profile18n . ' ID',
+				'placeholder'	=> 'http://www.linkedin.com/profile/view?id=' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://www.linkedin.com/profile/view' ), // This generates a query arg. We should allow that.
+			),
+			'pinterest' => array(
+				'option'		=> 'knowledge_pinterest',
+				'dashicon'		=> 'genericon-pinterest-alt',
+				'desc' 			=> 'Pinterest ' . $profile18n,
+				'placeholder'	=> 'https://www.pinterest.com/' . $connectedi18n . '/',
+				'examplelink'	=> esc_url( 'https://www.pinterest.com/me/' ),
+			),
+			'soundcloud' => array(
+				'option'		=> 'knowledge_soundcloud',
+				'dashicon'		=> 'genericon-cloud', // I know, it's not the real one. D:
+				'desc' 			=> 'SoundCloud ' . $profile18n,
+				'placeholder'	=> 'https://soundcloud.com/' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://soundcloud.com/you' ),
+			),
+			'tumblr' => array(
+				'option'		=> 'knowledge_tumblr',
+				'dashicon'		=> 'genericon-tumblr',
+				'desc' 			=> 'Tumblr ' . __( 'Blog', 'autodescription' ),
+				'placeholder'	=> 'https://tumblr.com/blog/' . $connectedi18n,
+				'examplelink'	=> esc_url( 'https://www.tumblr.com/dashboard' ),  // No example link available.
+			),
+		);
+
+		foreach ( $socialsites as $key => $value ) {
+			?>
+			<p>
+				<label for="<?php $this->field_id( $value['option'] ); ?>">
+					<strong><?php echo $value['desc'] ?></strong>
+					<?php
+					if ( $value['examplelink'] ) {
+						?><a href="<?php echo esc_url( $value['examplelink'] ); ?>" target="_blank">[?]</a><?php
+					}
+					?>
+				</label>
+			</p>
+			<p>
+				<input type="text" name="<?php $this->field_name( $value['option'] ); ?>" class="large-text" id="<?php $this->field_id( $value['option'] ); ?>" placeholder="<?php echo esc_attr( $value['placeholder'] ) ?>" value="<?php echo esc_attr( $this->get_field_value( $value['option'] ) ); ?>" />
+			</p>
+			<?php
+		}
+
+	}
+
+	/**
+	 * Sitemaps meta box on the Site SEO Settings page.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
+	 */
+	public function sitemaps_metabox( $args = array() ) {
+
+		do_action( 'the_seo_framework_sitemaps_metabox_before' );
+
+		if ( '' === $this->permalink_structure() ) {
+
+			$permalink_settings_url = esc_url( admin_url( 'options-permalink.php' ) );
+			$here = '<a href="' . $permalink_settings_url  . '" target="_blank" title="' . __( 'Permalink Settings', 'autodescription' ) . '">' . _x( 'here', 'The sitemap can be found %s.', 'autodescription' ) . '</a>';
+
+			?>
+			<h4><?php _e( "You're using the plain permalink structure.", 'autodescription' ); ?></h4>
+			<p><span class="description"><?php _e( "This means we can't output the sitemap through the WordPress rewrite rules.", 'autodescription' ); ?></span></p>
+			<hr>
+			<p><span class="description"><?php printf( _x( "Change your Permalink Settings %s (Recommended: 'postname').", '%s = here', 'autodescription' ), $here ); ?></span></p>
+			<?php
+
+		} else {
+
+			/**
+			 * Parse tabs content
+			 *
+			 * @param array $default_tabs { 'id' = The identifier =>
+			 *			array(
+			 *				'name' 		=> The name
+			 *				'callback' 	=> The callback function, use array for method calling (accepts $this, but isn't used here for optimization purposes)
+			 *				'dashicon'	=> Desired dashicon
+			 *			)
+			 * }
+			 *
+			 * @since 2.2.9
+			 */
+			$default_tabs = array(
+				'general' => array(
+					'name' 		=> __( 'General', 'autodescription' ),
+					'callback'	=> array( $this, 'sitemaps_metabox_general_tab' ),
+					'dashicon'	=> 'admin-generic',
+				),
+				'robots' => array(
+					'name'		=> 'Robots.txt',
+					'callback'	=> array( $this, 'sitemaps_metabox_robots_tab' ),
+					'dashicon'	=> 'share-alt2',
+				),
+				'timestamps' => array(
+					'name'		=> __( 'Timestamps', 'autodescription' ),
+					'callback'	=> array( $this, 'sitemaps_metabox_timestamps_tab' ),
+					'dashicon'	=> 'backup',
+				),
+				'notify' => array(
+					'name'		=> _x( 'Ping', 'Ping or notify Search Engine', 'autodescription' ),
+					'callback'	=> array( $this, 'sitemaps_metabox_notify_tab' ),
+					'dashicon'	=> 'megaphone',
+				),
+			);
+
+			/**
+			 * Applies filters the_seo_framework_sitemaps_settings_tabs : array see $default_tabs
+			 *
+			 * Used to extend Knowledge Graph tabs
+			 */
+			$defaults = (array) apply_filters( 'the_seo_framework_sitemaps_settings_tabs', $default_tabs, $args );
+
+			$tabs = wp_parse_args( $args, $defaults );
+			$use_tabs = true;
+
+			$sitemap_plugin = $this->has_sitemap_plugin();
+			$sitemap_detected = $this->has_sitemap_xml();
+			$robots_detected = $this->has_robots_txt();
+
+			/**
+			 * Remove the timestamps and notify submenus
+			 * @since 2.5.2
+			 */
+			if ( $sitemap_plugin || $sitemap_detected ) {
+				unset( $tabs['timestamps'] );
+				unset( $tabs['notify'] );
+			}
+
+			/**
+			 * Remove the robots submenu
+			 * @since 2.5.2
+			 */
+			if ( $robots_detected ) {
+				unset( $tabs['robots'] );
+			}
+
+			if ( $robots_detected && ( $sitemap_plugin || $sitemap_detected ) )
+				$use_tabs = false;
+
+			$this->nav_tab_wrapper( 'sitemaps', $tabs, '2.2.8', $use_tabs );
+
+		}
+
+		do_action( 'the_seo_framework_sitemaps_metabox_after' );
+
+	}
+
+	/**
+	 * Sitemaps Metabox General Tab Output
+	 *
+	 * @since 2.2.9
+	 *
+	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
+	 */
+	public function sitemaps_metabox_general_tab() {
+
+		$site_url = $this->the_home_url_from_cache( true );
+
+		$sitemap_url = $site_url . 'sitemap.xml';
+		$has_sitemap_plugin = $this->has_sitemap_plugin();
+		$sitemap_detected = $this->has_sitemap_xml();
+
+		?>
+		<h4><?php _e( 'Sitemap Integration Settings', 'autodescription' ); ?></h4>
+		<?php
+
+		if ( $has_sitemap_plugin ) {
+			?>
+			<p class="description"><?php _e( "Another active sitemap plugin has been detected. This means that the sitemap functionality has been replaced.", 'autodescription' ); ?></p>
+			<?php
+		} else if ( $sitemap_detected ) {
+			?>
+			<p class="description"><?php _e( "A sitemap has been detected in the root folder of your website. This means that the sitemap functionality has no effect.", 'autodescription' ); ?></p>
+			<?php
+		} else {
+			?>
+			<p class="description"><?php _e( "The Sitemap is an XML file that lists pages and posts for your website along with optional metadata about each post or page. This helps Search Engines crawl your website more easily.", 'autodescription' ); ?></p>
+			<p class="description"><?php _e( "The optional metadata include the post and page modified time and a page priority indication, which is automated.", 'autodescription' ); ?></p>
+
+			<hr>
+
+			<h4><?php _e( 'Sitemap Output', 'autodescription' ); ?></h4>
+			<?php
+				$sitemaps_output_label = __( 'Output Sitemap?', 'autodescription' );
+				$sitemaps_output_checkbox = $this->make_checkbox( 'sitemaps_output', $sitemaps_output_label, '' );
+
+				//* Echo checkbox.
+				echo $this->wrap_fields( $sitemaps_output_checkbox );
+		}
+
+		if ( ! ( $has_sitemap_plugin || $sitemap_detected ) && $this->get_option( 'sitemaps_output' ) ) {
+			$here = '<a href="' . $sitemap_url  . '" target="_blank" title="' . __( 'View sitemap', 'autodescription' ) . '">' . _x( 'here', 'The sitemap can be found %s.', 'autodescription' ) . '</a>';
+
+			?><p class="description"><?php printf( _x( 'The sitemap can be found %s.', '%s = here', 'autodescription' ), $here ); ?></p><?php
+		}
+
+	}
+
+	/**
+	 * Sitemaps Metabox Robots Tab Output
+	 *
+	 * @since 2.2.9
+	 *
+	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
+	 */
+	public function sitemaps_metabox_robots_tab() {
+
+		$site_url = $this->the_home_url_from_cache( true );
+
+		$robots_url = trailingslashit( $site_url ) . 'robots.txt';
+		$here =  '<a href="' . $robots_url  . '" target="_blank" title="' . __( 'View robots.txt', 'autodescription' ) . '">' . _x( 'here', 'The sitemap can be found %s.', 'autodescription' ) . '</a>';
+
+		?>
+		<h4><?php _e( 'Robots.txt Settings', 'autodescription' ); ?></h4>
+		<?php
+		if ( $this->can_do_sitemap_robots() ) :
+			?>
+			<p class="description"><?php _e( 'The robots.txt file is the first thing Search Engines look for. If you add the sitemap location in the robots.txt file, then Search Engines will look for and index the sitemap.', 'autodescription' ); ?></p>
+			<p class="description"><?php _e( 'If you do not add the sitemap location to the robots.txt file, you will need to notify Search Engines manually through the Webmaster Console provided by the Search Engines.', 'autodescription' ); ?></p>
+
+			<hr>
+
+			<h4><?php _e( 'Add sitemap location in robots.txt', 'autodescription' ); ?></h4>
+			<?php
+			//* Echo checkbox.
+			$this->wrap_fields(
+				$this->make_checkbox(
+					'sitemaps_robots',
+					__( 'Add sitemap location in robots?', 'autodescription' ),
+					''
+				), true
+			);
+		else :
+			?>
+			<p class="description"><?php _e( 'Another robots.txt sitemap Location addition has been detected.', 'autodescription' ); ?></p>
+			<?php
+		endif;
+
+		?>
+		<p class="description"><?php printf( _x( 'The robots.txt file can be found %s.', '%s = here', 'autodescription' ), $here ); ?></p>
+		<?php
+
+	}
+
+	/**
+	 * Sitemaps Metabox Timestamps Tab Output
+	 *
+	 * @since 2.2.9
+	 *
+	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
+	 */
+	public function sitemaps_metabox_timestamps_tab() {
+
+		//* Sets timezone according to WordPress settings.
+		$this->set_timezone();
+
+		$timestamp_0 = date( 'Y-m-d' );
+
+		/**
+		 * @link https://www.w3.org/TR/NOTE-datetime
+		 * We use the second expression of the time zone offset handling.
+		 */
+		$timestamp_1 = date( 'Y-m-d\TH:iP' );
+
+		//* Reset timezone to default.
+		$this->reset_timezone();
+
+		?>
+		<h4><?php _e( 'Timestamps Settings', 'autodescription' ); ?></h4>
+		<p><span class="description"><?php printf( __( 'The modified time suggests to Search Engines where to look for content changes. It has no impact on the SEO value unless you drastically change pages or posts. It then depends on how well your content is constructed.', 'autodescription' ) ); ?></span></p>
+		<p><span class="description"><?php printf( __( "By default, the sitemap only outputs the modified date if you've enabled them within the Social Metabox. This setting overrides those settings for the Sitemap.", 'autodescription' ) ); ?></span></p>
+
+		<hr>
+
+		<h4><?php _e( 'Output Modified Date', 'autodescription' ); ?></h4>
+		<?php
+			$sitemaps_modified_label = sprintf( __( 'Add %s to the sitemap?', 'autodescription' ), $this->code_wrap( '<lastmod>' ) );
+			$sitemaps_modified_checkbox = $this->make_checkbox( 'sitemaps_modified', $sitemaps_modified_label, '' );
+
+			//* Echo checkbox.
+			echo $this->wrap_fields( $sitemaps_modified_checkbox );
+		?>
+
+		<hr>
+
+		<fieldset>
+			<legend><h4><?php _e( 'Timestamp Format Settings', 'autodescription' ); ?></h4></legend>
+			<p>
+				<span class="description"><?php _e( 'Determines how specific the modification timestamp is.', 'autodescription' ); ?></span>
+			</p>
+
+			<p id="sitemaps-timestamp-format" class="theseoframework-fields">
+				<span class="toblock">
+					<input type="radio" name="<?php $this->field_name( 'sitemap_timestamps' ); ?>" id="<?php $this->field_id( 'sitemap_timestamps_0' ); ?>" value="0" <?php checked( $this->get_field_value( 'sitemap_timestamps' ), '0' ); ?> />
+					<label for="<?php $this->field_id( 'sitemap_timestamps_0' ); ?>">
+						<span title="<?php _e( 'Complete date', 'autodescription' ); ?>"><?php echo $this->code_wrap( $timestamp_0 ) ?> [?]</span>
+					</label>
+				</span>
+				<span class="toblock">
+					<input type="radio" name="<?php $this->field_name( 'sitemap_timestamps' ); ?>" id="<?php $this->field_id( 'sitemap_timestamps_1' ); ?>" value="1" <?php checked( $this->get_field_value( 'sitemap_timestamps' ), '1' ); ?> />
+					<label for="<?php $this->field_id( 'sitemap_timestamps_1' ); ?>">
+						<span title="<?php _e( 'Complete date plus hours, minutes and timezone', 'autodescription' ); ?>"><?php echo $this->code_wrap( $timestamp_1 ); ?> [?]</span>
+					</label>
+				</span>
+			</p>
+		</fieldset>
+		<?php
+
+	}
+
+	/**
+	 * Sitemaps Metabox Notify Tab Output
+	 *
+	 * @since 2.2.9
+	 *
+	 * @see $this->sitemaps_metabox() Callback for Sitemaps Settings box.
+	 */
+	public function sitemaps_metabox_notify_tab() {
+
+		?>
+		<h4><?php _e( 'Ping Settings', 'autodescription' ); ?></h4>
+		<p><span class="description"><?php _e( "Notifying Search Engines of a sitemap change is helpful to get your content indexed as soon as possible.", 'autodescription' ); ?></span></p>
+		<p><span class="description"><?php _e( "By default this will happen at most once an hour.", 'autodescription' ); ?></span></p>
+
+		<hr>
+
+		<h4><?php _e( 'Notify Search Engines', 'autodescription' ); ?></h4>
+		<?php
+			$engines = array(
+				'ping_google'	=> 'Google',
+				'ping_bing' 	=> 'Bing',
+				'ping_yandex'	=> 'Yandex'
+			);
+
+			$ping_checkbox = '';
+
+			foreach ( $engines as $option => $engine ) {
+				$ping_label = sprintf( __( 'Notify %s about sitemap changes?', 'autodescription' ), $engine );
+				$ping_checkbox .= $this->make_checkbox( $option, $ping_label, '' );
+			}
+
+			//* Echo checkbox.
+			$this->wrap_fields( $ping_checkbox, true );
+
+	}
+
+	/**
+	 * Feed meta box on the Site SEO Settings page.
+	 *
+	 * @since 2.5.2
+	 */
+	public function feed_metabox() {
+
+		do_action( 'the_seo_framework_feed_metabox_before' );
+
+		?>
+		<h4><?php _e( 'Content Feed Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "Sometimes, your content can get stolen by robots through the WordPress feeds. This can cause duplicate content issues. To prevent this from happening, it's recommended to convert the feed's content into an excerpt.", 'autodescription' ); ?></p>
+		<p class="description"><?php _e( "Adding a backlink below the feed's content will also let the visitors know where the content came from.", 'autodescription' ); ?></p>
+
+		<hr>
+
+		<h4><?php _e( 'Change Feed Settings', 'autodescription' ); ?></h4>
+		<?php
+			$excerpt_the_feed_label = __( 'Convert feed content into excerpts?', 'autodescription' );
+			$excerpt_the_feed_label .= ' ' . $this->make_info( __( "By default the excerpt will be at most 400 characters long", 'autodescription' ), '', false );
+
+			$source_the_feed_label = __( 'Add backlinks below the feed content?', 'autodescription' );
+			$source_the_feed_label .= ' ' . $this->make_info( __( "This link will not be followed by Search Engines", 'autodescription' ), '', false );
+
+			//* Echo checkboxes.
+			$this->wrap_fields(
+				array(
+					$this->make_checkbox( 'excerpt_the_feed', $excerpt_the_feed_label, '' ),
+					$this->make_checkbox( 'source_the_feed', $source_the_feed_label, '' ),
+				), true
+			);
+
+		if ( $this->rss_uses_excerpt() ) {
+			$reading_settings_url = esc_url( admin_url( 'options-reading.php' ) );
+			$reading_settings = '<a href="' . $reading_settings_url  . '" target="_blank" title="' . __( 'Reading Settings', 'autodescription' ) . '">' . __( 'Reading Settings', 'autodescription' ) . '</a>';
+
+			?><p><span class="description"><?php
+				printf( _x( "Note: The feed is already converted into an excerpt through the %s.", '%s = Reading Settings', 'autodescription' ), $reading_settings );
+			?></span></p><?php
+		}
+
+		$feed_url = esc_url( get_feed_link() );
+		$here = '<a href="' . $feed_url  . '" target="_blank" title="' . __( 'View feed', 'autodescription' ) . '">' . _x( 'here', 'The feed can be found %s.', 'autodescription' ) . '</a>';
+
+		?><p class="description"><?php printf( _x( 'The feed can be found %s.', '%s = here', 'autodescription' ), $here ); ?></p><?php
+
+		do_action( 'the_seo_framework_feed_metabox_after' );
+
+	}
+
+	/**
+	 * Schema metabox.
+	 *
+	 * @since 2.6.0
+	 */
+	public function schema_metabox() {
+
+		do_action( 'the_seo_framework_schema_metabox_before' );
+
+		?>
+		<h4><?php _e( 'Schema.org Output Settings', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "The Schema.org markup is a standard way of annotating structured data for Search Engines. This markup is represented within hidden scripts throughout the website.", 'autodescription' ); ?></p>
+		<p class="description"><?php _e( "When your web pages include structured data markup, Search Engines can use that data to index your content better, present it more prominently in Search Results, and use it in several different applications.", 'autodescription' ); ?></p>
+
+		<hr>
+
+		<?php /* translators: https://developers.google.com/structured-data/slsb-overview */ ?>
+		<h4><?php _ex( 'Sitelinks Search Box', 'Product name', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( 'When Search users search for your brand name, the following option allows them to search through your website directly from the Search Results.', 'autodescription' ); ?></p>
+		<?php
+		$info = $this->make_info(
+			_x( 'Sitelinks Search Box', 'Product name', 'autodescription' ),
+			'https://developers.google.com/structured-data/slsb-overview',
+			false
+		);
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'ld_json_searchbox',
+				_x( 'Enable Sitelinks Search Box?', 'Product name', 'autodescription' ) . ' ' . $info,
+				''
+			),
+			true
+		);
+		?>
+
+		<hr>
+
+		<h4><?php _e( 'Site Name', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "When using breadcrumbs, the first entry is by default your website's address. Using the following option will convert it to the Site Name.", 'autodescription' ); ?></p>
+		<?php
+		$info = $this->make_info(
+			__( 'Include your Site Name in Search Results', 'autodescription' ),
+			'https://developers.google.com/structured-data/site-name',
+			false
+		);
+		$description = sprintf( __( "The Site Name is: %s", 'autodescription' ), $this->code_wrap( $this->get_blogname() ) );
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'ld_json_sitename',
+				__( 'Convert URL to Site Name?', 'autodescription' ) . ' ' . $info,
+				$description
+			),
+			true
+		);
+		?>
+
+		<hr>
+
+		<h4><?php _e( 'Breadcrumbs', 'autodescription' ); ?></h4>
+		<p class="description"><?php _e( "Breadcrumb trails indicate the page's position in the site hierarchy. Using the following option will show the hierarchy within the Search Results when available.", 'autodescription' ); ?></p>
+		<?php
+		$info = $this->make_info(
+			__( 'About Breadcrumbs', 'autodescription' ),
+			'https://developers.google.com/structured-data/breadcrumbs',
+			false
+		);
+		$description = __( "Multiple trails can be outputted. The longest trail is prioritized.", 'autodescription' );
+		$this->wrap_fields(
+			$this->make_checkbox(
+				'ld_json_breadcrumbs',
+				__( 'Enable Breadcrumbs?', 'autodescription' ) . ' ' . $info,
+				$description
+			),
+			true
+		);
+
+		do_action( 'the_seo_framework_schema_metabox_after' );
+
+	}
+
+}
Index: inc/classes/pageoptions.class.php
===================================================================
--- inc/classes/pageoptions.class.php	(revision 1413572)
+++ inc/classes/pageoptions.class.php	(working copy)
@@ -1,309 +1,314 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_PageOptions
- *
- * Hold Post/Page/Taxonomy Options for the plugin and sanitizes them.
- *
- * @since 2.1.6
- */
-class AutoDescription_PageOptions extends AutoDescription_DoingItRight {
-
-	/**
-	 * Constructor, load parent constructor
-	 *
-	 * Initalizes options
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		add_action( 'save_post', array( $this, 'inpost_seo_save' ), 1, 2 );
-		add_action( 'edit_term', array( $this, 'taxonomy_seo_save' ), 10, 2 );
-
-		add_filter( 'get_term', array( $this, 'get_term_filter' ), 10, 2 );
-		add_action( 'delete_term', array( $this, 'term_meta_delete' ), 10, 2 );
-		add_filter( 'get_terms', array( $this, 'get_terms_filter' ), 10, 2 );
-	}
-
-	/**
-	 * Save the SEO settings when we save a post or page.
-	 *
-	 * Some values get sanitized, the rest are pulled from identically named subkeys in the $_POST['autodescription'] array.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @uses $this->save_custom_fields() Perform checks and saves post meta / custom field data to a post or page.
-	 *
-	 * @param integer  $post_id  Post ID.
-	 * @param stdClass $post     Post object.
-	 *
-	 * @return mixed Returns post id if permissions incorrect, null if doing autosave, ajax or future post, false if update
-	 *               or delete failed, and true on success.
-	 */
-	public function inpost_seo_save( $post_id, $post ) {
-
-		if ( ! isset( $_POST['autodescription'] ) )
-			return;
-
-		//* Merge user submitted options with fallback defaults
-		$data = wp_parse_args( $_POST['autodescription'], array(
-			'_genesis_title'         => '',
-			'_genesis_description'   => '',
-			'_genesis_canonical_uri' => '',
-			'redirect'               => '',
-			'_genesis_noindex'       => 0,
-			'_genesis_nofollow'      => 0,
-			'_genesis_noarchive'     => 0,
-			'exclude_local_search'   => 0,
-			'saved_flag'             => 0,  // Don't touch, used to prevent data conflict.
-		) );
-
-		foreach ( (array) $data as $key => $value ) {
-			//* Sanitize the title
-			if ( '_genesis_title' === $key ) {
-				$data[$key] = trim( strip_tags( $value ) );
-			}
-
-			//* Sanitize the description
-			if ( '_genesis_description' === $key ) {
-				$data[$key] = $this->s_description( $value );
-			}
-
-			//* Sanitize the URL. Make sure it's an absolute URL
-			if ( 'redirect' === $key ) {
-				$data[$key] = $this->s_redirect_url( $value );
-			}
-		}
-
-		$this->save_custom_fields( $data, 'inpost_seo_save', 'hmpl_ad_inpost_seo_nonce', $post );
-	}
-
-	/**
-	 * Save post meta / custom field data for a post or page.
-	 *
-	 * It verifies the nonce, then checks we're not doing autosave, ajax or a future post request. It then checks the
-	 * current user's permissions, before finally* either updating the post meta, or deleting the field if the value was not
-	 * truthy.
-	 *
-	 * By passing an array of fields => values from the same metabox (and therefore same nonce) into the $data argument,
-	 * repeated checks against the nonce, request and permissions are avoided.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @param array    $data         Key/Value pairs of data to save in '_field_name' => 'value' format.
-	 * @param string   $nonce_action Nonce action for use with wp_verify_nonce().
-	 * @param string   $nonce_name   Name of the nonce to check for permissions.
-	 * @param WP_Post|integer $post  Post object or ID.
-	 *
-	 * @return mixed Return null if permissions incorrect, doing autosave, ajax or future post, false if update or delete
-	 *               failed, and true on success.
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	public function save_custom_fields( array $data, $nonce_action, $nonce_name, $post ) {
-
-		//* Verify the nonce
-		if ( ! isset( $_POST[ $nonce_name ] ) || ! wp_verify_nonce( $_POST[ $nonce_name ], $nonce_action ) )
-			return;
-
-		//* Don't try to save the data under autosave, ajax, or future post.
-		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
-			return;
-		if ( defined( 'DOING_AJAX' ) && DOING_AJAX )
-			return;
-		if ( defined( 'DOING_CRON' ) && DOING_CRON )
-			return;
-
-		//* Grab the post object
-		$post = get_post( $post );
-
-		//* Don't save if WP is creating a revision (same as DOING_AUTOSAVE?)
-		if ( 'revision' === get_post_type( $post ) )
-			return;
-
-		//* Check that the user is allowed to edit the post
-		if ( ! current_user_can( 'edit_post', $post->ID ) )
-			return;
-
-		//* Cycle through $data, insert value or delete field
-		foreach ( (array) $data as $field => $value ) {
-			//* Save $value, or delete if the $value is empty
-			if ( $value )
-				update_post_meta( $post->ID, $field, $value );
-			else
-				delete_post_meta( $post->ID, $field );
-		}
-
-	}
-
-	/**
-	 * Add term meta data into options table of the term.
-	 * Adds separated database options for terms, as the terms table doesn't allow for addition.
-	 *
-	 * Applies filters array the_seo_framework_term_meta_defaults : Array of default term SEO options
-	 * Applies filters mixed the_seo_framework_term_meta_{field} : Override filter for specifics.
-	 * Applies filters array the_seo_framework_term_meta : Override output for term or taxonomy.
-	 *
-	 * @since 2.1.8
-	 *
-	 * @param object $term     Database row object.
-	 * @param string $taxonomy Taxonomy name that $term is part of.
-	 *
-	 * @return object $term Database row object.
-	 */
-	public function get_term_filter( $term, $taxonomy ) {
-
-		//* Do nothing, if $term is not object
-		if ( ! is_object( $term ) )
-			return $term;
-
-		//* Do nothing, if called in the context of creating a term via an ajax call
-		if ( did_action( 'wp_ajax_add-tag' ) )
-			return $term;
-
-		$db = get_option( 'autodescription-term-meta' );
-		$term_meta = isset( $db[$term->term_id] ) ? $db[$term->term_id] : array();
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$args = (array) apply_filters( 'the_seo_framework_term_meta_defaults', array(
-			'doctitle'            => '',
-			'description'         => '',
-			'noindex'             => 0,
-			'nofollow'            => 0,
-			'noarchive'           => 0,
-			'saved_flag'          => 0, // Don't touch, used to prevent data conflict with Genesis.
-		) );
-
-		$term->admeta = wp_parse_args( $term_meta, $args );
-
-		//* Sanitize term meta
-		foreach ( $term->admeta as $field => $value ) {
-
-			/**
-			 * Trim and sanitize the title beforehand.
-			 * @since 2.5.0
-			 */
-			if ( 'doctitle' === $field )
-				$value = trim( strip_tags( $value ) );
-
-			/**
-			 * Trim and sanitize the description beforehand.
-			 * @since 2.5.0
-			 */
-			if ( 'description' === $field )
-				$value = $this->s_description( $value );
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 *
-			 * @param $taxonomy the Taxonomy name
-			 */
-			$term->admeta[$field] = (string) apply_filters( "the_seo_framework_term_meta_{$field}", stripslashes( wp_kses_decode_entities( $value ) ), $term, $taxonomy );
-		}
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 *
-		 * @param $taxonomy the Taxonomy name
-		 */
-		$term->admeta = (array) apply_filters( 'the_seo_framework_term_meta', $term->admeta, $term, $taxonomy );
-
-		return $term;
-	}
-
-	/**
-	 * Save taxonomy meta data.
-	 *
-	 * Fires when a user edits and saves a taxonomy.
-	 *
-	 * @since 2.1.8
-	 *
-	 * @param integer $term_id Term ID.
-	 * @param integer $tt_id   Term Taxonomy ID.
-	 */
-	public function taxonomy_seo_save( $term_id, $tt_id ) {
-
-		if ( defined( 'DOING_AJAX' ) && DOING_AJAX )
-			return;
-
-		$term_meta = (array) get_option( 'autodescription-term-meta' );
-
-		$term_meta[$term_id] = isset( $_POST['autodescription-meta'] ) ? (array) $_POST['autodescription-meta'] : array();
-
-		//* Pass through wp_kses if not super admin.
-		if ( ! current_user_can( 'unfiltered_html' ) && isset( $term_meta[$term_id]['archive_description'] ) )
-			$term_meta[$term_id]['archive_description'] = wp_kses( $term_meta[$term_id]['archive_description'] );
-
-		update_option( 'autodescription-term-meta', $term_meta );
-
-	}
-
-	/**
-	 * Add AutoDescription term-meta data to functions that return multiple terms.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @param array  $terms    Database row objects.
-	 * @param string $taxonomy Taxonomy name that $terms are part of.
-	 *
-	 * @return array $terms Database row objects.
-	 */
-	public function get_terms_filter( array $terms, $taxonomy ) {
-
-		foreach( $terms as $term )
-			$term = $this->get_term_filter( $term, $taxonomy );
-
-		return $terms;
-	}
-
-	/**
-	 * Delete term meta data.
-	 *
-	 * Fires when a user deletes a term.
-	 *
-	 * @since 2.1.8
-	 *
-	 * @param integer $term_id Term ID.
-	 * @param integer $tt_id   Taxonomy Term ID.
-	 */
-	public function term_meta_delete( $term_id, $tt_id ) {
-
-		$term_meta = (array) get_option( 'autodescription-term-meta' );
-
-		unset( $term_meta[$term_id] );
-
-		update_option( 'autodescription-term-meta', (array) $term_meta );
-
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_PageOptions
+ *
+ * Hold Post/Page/Taxonomy Options for the plugin and sanitizes them.
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_PageOptions extends AutoDescription_DoingItRight {
+
+	/**
+	 * Constructor, load parent constructor
+	 *
+	 * Initalizes options
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		add_action( 'save_post', array( $this, 'inpost_seo_save' ), 1, 2 );
+		add_action( 'edit_term', array( $this, 'taxonomy_seo_save' ), 10, 2 );
+
+		add_filter( 'get_term', array( $this, 'get_term_filter' ), 10, 2 );
+		add_action( 'delete_term', array( $this, 'term_meta_delete' ), 10, 2 );
+		add_filter( 'get_terms', array( $this, 'get_terms_filter' ), 10, 2 );
+	}
+
+	/**
+	 * Save the SEO settings when we save a post or page.
+	 *
+	 * Some values get sanitized, the rest are pulled from identically named subkeys in the $_POST['autodescription'] array.
+	 *
+	 * @since 2.0.0
+	 *
+	 * @uses $this->save_custom_fields() Perform checks and saves post meta / custom field data to a post or page.
+	 *
+	 * @param integer  $post_id  Post ID.
+	 * @param stdClass $post     Post object.
+	 *
+	 * @return mixed Returns post id if permissions incorrect, null if doing autosave, ajax or future post, false if update
+	 *               or delete failed, and true on success.
+	 */
+	public function inpost_seo_save( $post_id, $post ) {
+
+		if ( ! isset( $_POST['autodescription'] ) )
+			return;
+
+		//* Merge user submitted options with fallback defaults
+		$data = wp_parse_args( $_POST['autodescription'], array(
+			'_genesis_title'         => '',
+			'_genesis_description'   => '',
+			'_genesis_canonical_uri' => '',
+			'redirect'               => '',
+			'_genesis_noindex'       => 0,
+			'_genesis_nofollow'      => 0,
+			'_genesis_noarchive'     => 0,
+			'exclude_local_search'   => 0,
+			'saved_flag'             => 0,  // Don't touch, used to prevent data conflict.
+		) );
+
+		foreach ( (array) $data as $key => $value ) {
+			//* Sanitize the title
+			if ( '_genesis_title' === $key )
+				$data[$key] = trim( strip_tags( $value ) );
+
+			//* Sanitize the description
+			if ( '_genesis_description' === $key )
+				$data[$key] = $this->s_description( $value );
+
+			//* Sanitize the URL. Make sure it's an absolute URL
+			if ( 'redirect' === $key )
+				$data[$key] = $this->s_redirect_url( $value );
+
+		}
+
+		$this->save_custom_fields( $data, 'inpost_seo_save', 'hmpl_ad_inpost_seo_nonce', $post );
+	}
+
+	/**
+	 * Save post meta / custom field data for a post or page.
+	 *
+	 * It verifies the nonce, then checks we're not doing autosave, ajax or a future post request. It then checks the
+	 * current user's permissions, before finally* either updating the post meta, or deleting the field if the value was not
+	 * truthy.
+	 *
+	 * By passing an array of fields => values from the same metabox (and therefore same nonce) into the $data argument,
+	 * repeated checks against the nonce, request and permissions are avoided.
+	 *
+	 * @since 2.0.0
+	 *
+	 * @param array    $data         Key/Value pairs of data to save in '_field_name' => 'value' format.
+	 * @param string   $nonce_action Nonce action for use with wp_verify_nonce().
+	 * @param string   $nonce_name   Name of the nonce to check for permissions.
+	 * @param WP_Post|integer $post  Post object or ID.
+	 *
+	 * @return mixed Return null if permissions incorrect, doing autosave, ajax or future post, false if update or delete
+	 *               failed, and true on success.
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	public function save_custom_fields( array $data, $nonce_action, $nonce_name, $post ) {
+
+		//* Verify the nonce
+		if ( ! isset( $_POST[ $nonce_name ] ) || ! wp_verify_nonce( $_POST[ $nonce_name ], $nonce_action ) )
+			return;
+
+		//* Don't try to save the data under autosave, ajax, or future post.
+		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
+			return;
+		if ( defined( 'DOING_AJAX' ) && DOING_AJAX )
+			return;
+		if ( defined( 'DOING_CRON' ) && DOING_CRON )
+			return;
+
+		//* Grab the post object
+		$post = get_post( $post );
+
+		//* Don't save if WP is creating a revision (same as DOING_AUTOSAVE?)
+		if ( 'revision' === get_post_type( $post ) )
+			return;
+
+		//* Check that the user is allowed to edit the post
+		if ( ! current_user_can( 'edit_post', $post->ID ) )
+			return;
+
+		//* Cycle through $data, insert value or delete field
+		foreach ( (array) $data as $field => $value ) {
+			//* Save $value, or delete if the $value is empty
+			if ( $value )
+				update_post_meta( $post->ID, $field, $value );
+			else
+				delete_post_meta( $post->ID, $field );
+		}
+
+	}
+
+	/**
+	 * Add term meta data into options table of the term.
+	 * Adds separated database options for terms, as the terms table doesn't allow for addition.
+	 *
+	 * Applies filters array the_seo_framework_term_meta_defaults : Array of default term SEO options
+	 * Applies filters mixed the_seo_framework_term_meta_{field} : Override filter for specifics.
+	 * Applies filters array the_seo_framework_term_meta : Override output for term or taxonomy.
+	 *
+	 * @since 2.1.8
+	 *
+	 * @param object $term     Database row object.
+	 * @param string $taxonomy Taxonomy name that $term is part of.
+	 *
+	 * @todo Use WordPress 4.4.0 get_term_meta() / update_term_meta()
+	 * @priority OMG WTF BBQ 2.6.x / Genesis 2.3.0
+	 * @see @link http://www.studiopress.com/important-announcement-for-genesis-plugin-developers/
+	 * @link https://core.trac.wordpress.org/browser/tags/4.5/src/wp-includes/taxonomy.php#L1814
+	 * @todo still use arrays in get_term_meta() / update_term_meta() ?
+	 * @NOTE Keep WP 3.8 compat.
+	 *
+	 * @return object $term Database row object.
+	 */
+	public function get_term_filter( $term, $taxonomy ) {
+
+		//* Do nothing, if $term is not object
+		if ( ! is_object( $term ) )
+			return $term;
+
+		/**
+		 * No need to process this data outside of the Terms' scope.
+		 * @since 2.6.0
+		 */
+		if ( false === $this->is_admin() && false === $this->is_archive() )
+			return $term;
+
+		/**
+		 * No need to process this after the data has already been output.
+		 * @since 2.6.0
+		 */
+		if ( did_action( 'the_seo_framework_do_after_output' ) )
+			return $term;
+
+		/**
+		 * Do nothing if called in the context of creating a term via an Ajax call to prevent data conflict.
+		 * @since ???
+		 *
+		 * @since 2.6.0 delay did_action call as it's a heavy array call.
+		 */
+		if ( defined( 'DOING_AJAX' ) && DOING_AJAX && did_action( 'wp_ajax_add-tag' ) )
+			return $term;
+
+		$db = get_option( 'autodescription-term-meta' );
+		$term_meta = isset( $db[$term->term_id] ) ? $db[$term->term_id] : array();
+
+		$args = (array) apply_filters( 'the_seo_framework_term_meta_defaults', array(
+			'doctitle'            => '',
+			'description'         => '',
+			'noindex'             => 0,
+			'nofollow'            => 0,
+			'noarchive'           => 0,
+			'saved_flag'          => 0, // Don't touch, used to prevent data conflict with Genesis.
+		) );
+
+		$term->admeta = wp_parse_args( $term_meta, $args );
+
+		//* Sanitize term meta
+		foreach ( $term->admeta as $field => $value ) {
+
+			/**
+			 * Trim and sanitize the title beforehand.
+			 * @since 2.5.0
+			 */
+			if ( 'doctitle' === $field )
+				$value = trim( strip_tags( $value ) );
+
+			/**
+			 * Trim and sanitize the description beforehand.
+			 * @since 2.5.0
+			 */
+			if ( 'description' === $field )
+				$value = $this->s_description( $value );
+
+			/**
+			 * @param string $taxonomy the Taxonomy name
+			 */
+			$term->admeta[$field] = (string) apply_filters( "the_seo_framework_term_meta_{$field}", stripslashes( wp_kses_decode_entities( $value ) ), $term, $taxonomy );
+		}
+
+		/**
+		 * @param array $taxonomy The taxonomy data.
+		 */
+		$term->admeta = (array) apply_filters( 'the_seo_framework_term_meta', $term->admeta, $term, $taxonomy );
+
+		return $term;
+	}
+
+	/**
+	 * Save taxonomy meta data.
+	 *
+	 * Fires when a user edits and saves a taxonomy.
+	 *
+	 * @since 2.1.8
+	 *
+	 * @param integer $term_id Term ID.
+	 * @param integer $tt_id   Term Taxonomy ID.
+	 */
+	public function taxonomy_seo_save( $term_id, $tt_id ) {
+
+		if ( defined( 'DOING_AJAX' ) && DOING_AJAX )
+			return;
+
+		$term_meta = (array) get_option( 'autodescription-term-meta' );
+
+		$term_meta[$term_id] = isset( $_POST['autodescription-meta'] ) ? (array) $_POST['autodescription-meta'] : array();
+
+		//* Pass through wp_kses if not super admin.
+		if ( ! current_user_can( 'unfiltered_html' ) && isset( $term_meta[$term_id]['archive_description'] ) )
+			$term_meta[$term_id]['archive_description'] = wp_kses( $term_meta[$term_id]['archive_description'] );
+
+		update_option( 'autodescription-term-meta', $term_meta );
+
+	}
+
+	/**
+	 * Add AutoDescription term-meta data to functions that return multiple terms.
+	 *
+	 * @since 2.0.0
+	 *
+	 * @param array  $terms    Database row objects.
+	 * @param string $taxonomy Taxonomy name that $terms are part of.
+	 *
+	 * @return array $terms Database row objects.
+	 */
+	public function get_terms_filter( array $terms, $taxonomy ) {
+
+		foreach( $terms as $term )
+			$term = $this->get_term_filter( $term, $taxonomy );
+
+		return $terms;
+	}
+
+	/**
+	 * Delete term meta data.
+	 *
+	 * Fires when a user deletes a term.
+	 *
+	 * @since 2.1.8
+	 *
+	 * @param integer $term_id Term ID.
+	 * @param integer $tt_id   Taxonomy Term ID.
+	 */
+	public function term_meta_delete( $term_id, $tt_id ) {
+
+		$term_meta = (array) get_option( 'autodescription-term-meta' );
+
+		unset( $term_meta[$term_id] );
+
+		update_option( 'autodescription-term-meta', (array) $term_meta );
+
+	}
+
+}
Index: inc/classes/postdata.class.php
===================================================================
--- inc/classes/postdata.class.php	(revision 1413572)
+++ inc/classes/postdata.class.php	(working copy)
@@ -1,220 +1,270 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_PostData
- *
- * Pulls data from posts/pages
- * Returns strings/arrays
- *
- * @since 2.1.6
- */
-class AutoDescription_PostData extends AutoDescription_Detect {
-
-	/**
-	 * Constructor, load parent constructor
-	 */
-	public function __construct() {
-		parent::__construct();
-	}
-
-	/**
-	 * Get or parse the excerpt of the post
-	 *
-	 * @since 1.0.0
-	 *
-	 * @param string $excerpt the Excerpt
-	 * @param int $the_id The Post ID.
-	 * @param int $tt_id The Taxonomy Term ID
-	 *
-	 * @return string The Excerpt
-	 */
-	public function get_excerpt_by_id( $excerpt = '', $the_id = '', $tt_id = '' ) {
-
-		static $cache = array();
-
-		if ( isset( $cache[$excerpt][$the_id][$tt_id] ) )
-			return $cache[$excerpt][$the_id][$tt_id];
-
-		if ( empty( $excerpt ) )
-			$excerpt = $this->fetch_excerpt( $the_id, $tt_id );
-
-		//* No need to parse an empty excerpt.
-		if ( '' === $excerpt )
-			return '';
-
-		$excerpt = wp_strip_all_tags( strip_shortcodes( $excerpt ) );
-		$excerpt = str_replace( array( "\r\n", "\r", "\n" ), "\n", $excerpt );
-
-		$lines = explode( "\n", $excerpt );
-		$new_lines = array();
-
-		//* Remove line breaks
-		foreach ( $lines as $i => $line ) {
-			//* Don't add empty lines or paragraphs
-			if ( ! empty( $line ) && '&nbsp;' !== $line )
-				$new_lines[] = trim( $line ) . ' ';
-		}
-
-		$output = implode( $new_lines );
-
-		return (string) $output;
-	}
-
-	/**
-	 * Generate excerpt.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param int $the_id The Post ID.
-	 * @param int $tt_id The Taxonomy Term ID
-	 *
-	 * @return string|empty excerpt.
-	 */
-	public function fetch_excerpt( $the_id = '', $tt_id = '' ) {
-
-		if ( '' === $the_id && '' === $tt_id ) {
-			$the_id = $this->get_the_real_ID();
-
-			if ( false === $the_id )
-				return '';
-		}
-
-		/**
-		 * Use the 2nd parameter.
-		 * @since 2.2.8
-		 *
-		 * Now casts to array
-		 * @since 2.3.3
-		 */
-		if ( '' !== $the_id && $this->is_blog_page( $the_id ) ) {
-			$args = array(
-				'posts_per_page'	=> 1,
-				'offset'			=> 0,
-				'category'			=> '',
-				'category_name'		=> '',
-				'orderby'			=> 'date',
-				'order'				=> 'DESC',
-				'post_type'			=> 'post',
-				'post_status'		=> 'publish',
-			);
-
-			$post = get_posts( $args );
-		} else if ( '' !== $the_id ) {
-			$post = get_post( $the_id, ARRAY_A );
-		} else if ( '' !== $tt_id ) {
-			/**
-			 * Match the descriptions in admin as on the front end.
-			 * @since 2.3.3
-			 */
-			$args = array(
-				'posts_per_page'	=> 1,
-				'offset'			=> 0,
-				'category'			=> $tt_id,
-				'category_name'		=> '',
-				'post_type'			=> 'post',
-				'post_status'		=> 'publish',
-			);
-
-			$post = get_posts( $args );
-		} else {
-			$post = get_post( $the_id, ARRAY_A );
-		}
-
-		/**
-		 * Cast last found post object to array and put it in $post.
-		 * @since 2.3.3
-		 */
-		if ( isset( $post[0] ) && is_object( $post[0] ) ) {
-			$object = $post[0];
-			$post = (array) $object;
-		}
-
-		// Something went wrong, nothing to be found. Return empty.
-		if ( ! isset( $post ) || ! is_array( $post ) )
-			return '';
-
-		//* Stop getting something that doesn't exists. E.g. 404
-		if ( isset( $post['ID'] ) && 0 == $post['ID'] )
-			return '';
-
-		/**
-		 * Fetch custom excerpt, if not empty, from the post_excerpt field.
-		 * @since 2.5.2
-		 */
-		if ( isset( $post['post_excerpt'] ) && '' !== $post['post_excerpt'] ) {
-			$excerpt = $post['post_excerpt'];
-		} else if ( isset( $post['post_content'] ) ) {
-			$excerpt = $post['post_content'];
-		} else {
-			$excerpt = '';
-		}
-
-		return $excerpt;
-	}
-
-	/**
-	 * Fetch latest public post ID.
-	 *
-	 * @staticvar int $page_id
-	 * @global object $wpdb
-	 * @global int $blog_id
-	 *
-	 * @since 2.4.3
-	 */
-	public function get_latest_post_id() {
-		global $wpdb, $blog_id;
-
-		static $page_id = null;
-
-		if ( isset( $page_id ) )
-			return $page_id;
-
-		$latest_posts_key = 'latest_post_id_' . $blog_id;
-
-		//* @TODO consider transient.
-		$page_id = $this->object_cache_get( $latest_posts_key );
-		if ( false === $page_id ) {
-
-			// Prepare array
-			$post_type = esc_sql( array( 'post', 'page' ) );
-			$post_type_in_string = "'" . implode( "','", $post_type ) . "'";
-
-			// Prepare array
-			$post_status = esc_sql( array( 'publish', 'future', 'pending' ) );
-			$post_status_in_string = "'" . implode( "','", $post_status ) . "'";
-
-			$sql = $wpdb->prepare(
-				"SELECT ID
-				FROM $wpdb->posts
-				WHERE post_title <> %s
-				AND post_type IN ($post_type_in_string)
-				AND post_date < NOW()
-				AND post_status IN ($post_status_in_string)
-				ORDER BY post_date DESC
-				LIMIT %d",
-				'', 1 );
-
-			$page_id = (int) $wpdb->get_var( $sql );
-			$this->object_cache_set( $latest_posts_key, $page_id, 86400 );
-		}
-
-		return $page_id;
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_PostData
+ *
+ * Holds Post data.
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_PostData extends AutoDescription_Detect {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Get or parse the excerpt of the post
+	 *
+	 * @since 1.0.0
+	 *
+	 * @param string $excerpt the Excerpt
+	 * @param int $the_id The Post ID.
+	 * @param int $tt_id The Taxonomy Term ID
+	 *
+	 * @return string The Excerpt
+	 */
+	public function get_excerpt_by_id( $excerpt = '', $the_id = '', $tt_id = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$excerpt][$the_id][$tt_id] ) )
+			return $cache[$excerpt][$the_id][$tt_id];
+
+		if ( empty( $excerpt ) )
+			$excerpt = $this->fetch_excerpt( $the_id, $tt_id );
+
+		//* No need to parse an empty excerpt.
+		if ( '' === $excerpt )
+			return '';
+
+		$excerpt = wp_strip_all_tags( strip_shortcodes( $excerpt ) );
+		$excerpt = str_replace( array( "\r\n", "\r", "\n" ), "\n", $excerpt );
+
+		$lines = explode( "\n", $excerpt );
+		$new_lines = array();
+
+		//* Remove line breaks
+		foreach ( $lines as $i => $line ) {
+			//* Don't add empty lines or paragraphs
+			if ( $line && '&nbsp;' !== $line )
+				$new_lines[] = trim( $line ) . ' ';
+		}
+
+		$output = implode( $new_lines );
+
+		return (string) $output;
+	}
+
+	/**
+	 * Generate excerpt.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param int $the_id The Post ID.
+	 * @param int $tt_id The Taxonomy Term ID
+	 *
+	 * @return string|empty excerpt.
+	 */
+	public function fetch_excerpt( $the_id = '', $tt_id = '' ) {
+
+		$post = $this->fetch_post_by_id( $the_id, $tt_id );
+
+		if ( empty( $post ) )
+			return '';
+
+		/**
+		 * Fetch custom excerpt, if not empty, from the post_excerpt field.
+		 * @since 2.5.2
+		 */
+		if ( isset( $post['post_excerpt'] ) && $post['post_excerpt'] ) {
+			$excerpt = $post['post_excerpt'];
+		} else if ( isset( $post['post_content'] ) ) {
+			$excerpt = $post['post_content'];
+		} else {
+			$excerpt = '';
+		}
+
+		return $excerpt;
+	}
+
+	/**
+	 * Returns Post Array from ID.
+	 * Also returns latest post from blog or archive if applicable.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int $the_id The Post ID.
+	 * @param int $tt_id The Taxonomy Term ID
+	 *
+	 * @return empty|array The Post Array.
+	 */
+	protected function fetch_post_by_id( $the_id = '', $tt_id = '' ) {
+
+		if ( '' === $the_id && '' === $tt_id ) {
+			$the_id = $this->get_the_real_ID();
+
+			if ( false === $the_id )
+				return '';
+		}
+
+		/**
+		 * Use the 2nd parameter.
+		 * @since 2.2.8
+		 *
+		 * Now casts to array
+		 * @since 2.3.3
+		 */
+		if ( '' !== $the_id ) {
+			if ( $this->is_blog_page( $the_id ) ) {
+				$args = array(
+					'posts_per_page'	=> 1,
+					'offset'			=> 0,
+					'category'			=> '',
+					'category_name'		=> '',
+					'orderby'			=> 'date',
+					'order'				=> 'DESC',
+					'post_type'			=> 'post',
+					'post_status'		=> 'publish',
+					'cache_results'		=> false,
+				);
+
+				$post = get_posts( $args );
+			} else {
+				$post = get_post( $the_id, ARRAY_A );
+			}
+		} else if ( '' !== $tt_id ) {
+			/**
+			 * Match the descriptions in admin as on the front end.
+			 * @since 2.3.3
+			 */
+			$args = array(
+				'posts_per_page'	=> 1,
+				'offset'			=> 0,
+				'category'			=> $tt_id,
+				'category_name'		=> '',
+				'post_type'			=> 'post',
+				'post_status'		=> 'publish',
+				'cache_results'		=> false,
+			);
+
+			$post = get_posts( $args );
+		} else {
+			$post = get_post( $the_id, ARRAY_A );
+		}
+
+		/**
+		 * Cast last found post object to array and put it in $post.
+		 * @since 2.3.3
+		 */
+		if ( isset( $post[0] ) && is_object( $post[0] ) ) {
+			$object = $post[0];
+			$post = (array) $object;
+		}
+
+		// Something went wrong, nothing to be found. Return empty.
+		if ( empty( $post ) || ! is_array( $post ) )
+			return '';
+
+		//* Stop getting something that doesn't exists. E.g. 404
+		if ( isset( $post['ID'] ) && 0 === $post['ID'] )
+			return '';
+
+		return $post;
+	}
+
+	/**
+	 * Fetch latest public post ID.
+	 *
+	 * @staticvar int $page_id
+	 * @global object $wpdb
+	 * @global int $blog_id
+	 *
+	 * @since 2.4.3
+	 */
+	public function get_latest_post_id() {
+		global $wpdb, $blog_id;
+
+		static $page_id = null;
+
+		if ( isset( $page_id ) )
+			return $page_id;
+
+		$latest_posts_key = 'latest_post_id_' . $blog_id;
+
+		//* @TODO consider transient.
+		$page_id = $this->object_cache_get( $latest_posts_key );
+		if ( false === $page_id ) {
+
+			// Prepare array
+			$post_type = esc_sql( array( 'post', 'page' ) );
+			$post_type_in_string = "'" . implode( "','", $post_type ) . "'";
+
+			// Prepare array
+			$post_status = esc_sql( array( 'publish', 'future', 'pending' ) );
+			$post_status_in_string = "'" . implode( "','", $post_status ) . "'";
+
+			$sql = $wpdb->prepare(
+				"SELECT ID
+				FROM $wpdb->posts
+				WHERE post_title <> %s
+				AND post_type IN ($post_type_in_string)
+				AND post_date < NOW()
+				AND post_status IN ($post_status_in_string)
+				ORDER BY post_date DESC
+				LIMIT %d",
+				'', 1 );
+
+			$page_id = (int) $wpdb->get_var( $sql );
+			$this->object_cache_set( $latest_posts_key, $page_id, 86400 );
+		}
+
+		return $page_id;
+	}
+
+	/**
+	 * Fetches Post content.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int $id.
+	 *
+	 * @return string The post content.
+	 */
+	public function get_post_content( $id = 0 ) {
+
+		if ( empty( $id ) ) {
+			global $wp_query;
+
+			if ( isset( $wp_query->post->post_content ) )
+				return $wp_query->post->post_content;
+		} else {
+			$content = get_post_field( 'post_content', $id );
+
+			if ( is_string( $content ) )
+				return $content;
+		}
+
+		return '';
+	}
+
+}
Index: inc/classes/query.class.php
===================================================================
--- inc/classes/query.class.php	(nonexistent)
+++ inc/classes/query.class.php	(working copy)
@@ -0,0 +1,1037 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Query
+ *
+ * Caches and organizes the WP Query.
+ * Functions are in alphabetical order!
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_Query extends AutoDescription_Compat {
+
+	/**
+	 * Constructor. Load parent constructor.
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Get the real page ID, also depending on CPT.
+	 *
+	 * @param bool $use_cache Whether to use the cache or not.
+	 *
+	 * @staticvar int $id the ID.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @return int|false The ID.
+	 */
+	public function get_the_real_ID( $use_cache = true ) {
+
+		$is_admin = $this->is_admin();
+
+		//* Never use cache for this in admin. Only causes bugs.
+		$use_cache = $is_admin ? false : $use_cache;
+
+		if ( $use_cache ) {
+			static $id = null;
+
+			if ( isset( $id ) )
+				return $id;
+		}
+
+		$id = $is_admin ? '' : $this->check_the_real_ID();
+
+		if ( empty( $id ) ) {
+			//* Does not always return false.
+			$id = get_queried_object_id();
+
+			if ( empty( $id ) && false === $this->is_archive() )
+				$id = get_the_ID();
+		}
+
+		//* Turn ID into 0 if empty.
+		return $id = empty( $id ) ? 0 : $id;
+	}
+
+	/**
+	 * Get the real ID from plugins.
+	 *
+	 * Only works in front-end as there's no need to check for inconsistent
+	 * functions for the current ID in the admin.
+	 *
+	 * @since 2.5.0
+	 *
+	 * Applies filters the_seo_framework_real_id : The Real ID for plugins on front-end.
+	 *
+	 * @staticvar int $cached_id The cached ID.
+	 *
+	 * @return int|empty the ID.
+	 */
+	public function check_the_real_ID() {
+
+		static $cached_id = null;
+
+		if ( isset( $cached_id ) )
+			return $cached_id;
+
+		$id = '';
+
+		if ( $this->is_wc_shop() ) {
+			//* WooCommerce Shop
+			$id = get_option( 'woocommerce_shop_page_id' );
+		} else if ( function_exists( 'is_anspress' ) && is_anspress() ) {
+			//* Get AnsPress Question ID.
+			if ( function_exists( 'get_question_id' ) )
+				$id = get_question_id();
+		}
+
+		$cached_id = (int) apply_filters( 'the_seo_framework_real_id', $id );
+
+		return $cached_id;
+	}
+
+	/**
+	 * Detects 404.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_404() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( is_404() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_admin() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( is_admin() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects attachment page.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_singular()
+	 *
+	 * @param int|string|array|object $attachment Attachment ID, title, slug, or array of such.
+	 *
+	 * @return bool
+	 */
+	public function is_attachment( $attachment = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$attachment] ) )
+			return $cache[$attachment];
+
+		if ( $this->is_singular( $attachment ) && is_attachment( $attachment ) )
+			return $cache[$attachment] = true;
+
+		return $cache[$attachment] = false;
+	}
+
+	/**
+	 * Detects archive pages. Also in admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_archive() {
+
+		if ( $this->is_admin() )
+			return $this->is_archive_admin();
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( is_archive() && false === $this->is_singular() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Extends default WordPress is_archive and made available in admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @global object $current_screen
+	 *
+	 * @return bool Post Type is archive
+	 */
+	public function is_archive_admin() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		global $current_screen;
+
+		if ( isset( $current_screen->base ) && ( 'edit-tags' === $current_screen->base || 'term' === $current_screen->base ) )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects Term edit screen in WP Admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @global object $current_screen
+	 *
+	 * @return bool We're on Term Edit screen.
+	 */
+	public function is_term_edit() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		global $current_screen;
+
+		if ( $this->wp_version( '4.4.9999', '>=' ) ) {
+			if ( isset( $current_screen->base ) && ( 'term' === $current_screen->base ) )
+				return $cache = true;
+		} else {
+			if ( isset( $current_screen->base ) && ( 'edit-tags' === $current_screen->base ) )
+				return $cache = true;
+		}
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects Post edit screen in WP Admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @global object $current_screen
+	 *
+	 * @return bool We're on Post Edit screen.
+	 */
+	public function is_post_edit() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		global $current_screen;
+
+		if ( isset( $current_screen->base ) && ( 'post' === $current_screen->base ) )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects Post or Archive Lists in Admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @global object $current_screen
+	 *
+	 * @return bool We're on the edit screen.
+	 */
+	public function is_wp_lists_edit() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		global $current_screen;
+
+		//* @NOTE USE WITH CAUTION - WP 4.5 & < 4.5 conflict.
+		if ( isset( $current_screen->base ) && ( ( 'edit' === $current_screen->base ) || ( 'edit-tags' === $current_screen->base ) ) )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects author archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_archive()
+	 *
+	 * @param mixed $author Optional. User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames
+	 *
+	 * @return bool
+	 */
+	public function is_author( $author = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$author] ) )
+			return $cache[$author];
+
+		if ( $this->is_archive() && is_author( $author ) )
+			return $cache[$author] = true;
+
+		return $cache[$author] = false;
+	}
+
+	/**
+	 * Detect the separated blog page.
+	 *
+	 * @param int $id the Page ID.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @staticvar bool $is_blog_page
+	 *
+	 * @return bool true if is blog page. Always false if blog page is homepage.
+	 */
+	public function is_blog_page( $id = '' ) {
+
+		if ( '' === $id )
+			$id = $this->get_the_real_ID();
+
+		static $is_blog_page = array();
+
+		if ( isset( $is_blog_page[$id] ) )
+			return $is_blog_page[$id];
+
+		$pfp = (int) get_option( 'page_for_posts' );
+
+		if ( $id === $pfp ) {
+			//* Don't use $this->is_archive (will loop).
+			if ( $this->has_page_on_front() && false === $this->is_front_page() && false === is_archive() ) {
+				return $is_blog_page[$id] = true;
+			}
+		}
+
+		return $is_blog_page[$id] = false;
+	}
+
+	/**
+	 * Detects category archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_archive()
+	 *
+	 * @param mixed $category Optional. Category ID, name, slug, or array of Category IDs, names, and slugs.
+	 *
+	 * @return bool
+	 */
+	public function is_category( $category = '' ) {
+
+		if ( $this->is_admin() )
+			return $this->is_category_admin();
+
+		static $cache = null;
+
+		if ( isset( $cache[$category] ) )
+			return $cache[$category];
+
+		if ( $this->is_archive() && is_category( $category ) )
+			return $cache[$category] = true;
+
+		return $cache[$category] = false;
+	}
+
+	/**
+	 * Extends default WordPress is_category and made available in admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @global object $current_screen
+	 *
+	 * @return bool Post Type is category
+	 */
+	public function is_category_admin() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( $this->is_archive_admin() ) {
+			global $current_screen;
+
+			if ( isset( $current_screen->taxonomy ) ) {
+				if ( false !== strrpos( $current_screen->taxonomy, 'category', -8 ) || false !== strrpos( $current_screen->taxonomy, 'cat', -3 ) )
+					return $cache = true;
+			}
+		}
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects date archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_archive()
+	 *
+	 * @return bool
+	 */
+	public function is_date() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( $this->is_archive() && is_date() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects day archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_date()
+	 *
+	 * @return bool
+	 */
+	public function is_day() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( $this->is_date() && is_day() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects feed.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @param string|array $feeds Optional feed types to check.
+	 *
+	 * @return bool
+	 */
+	public function is_feed( $feeds = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$feeds] ) )
+			return $cache[$feeds];
+
+		if ( is_feed( $feeds ) )
+			return $cache[$feeds] = true;
+
+		return $cache[$feeds] = false;
+	}
+
+	/**
+	 * Detects front page.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @param int $id The page or Post ID.
+	 *
+	 * @return bool
+	 */
+	public function is_front_page( $id = 0 ) {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( is_front_page() )
+			return $cache = true;
+
+		if ( $id ) {
+			$sof = get_option( 'show_on_front' );
+
+			if ( 'page' === $sof && $id === get_option( 'page_on_front' ) )
+				return $cache = true;
+
+			if ( 'posts' === $sof && $id === get_option( 'page_for_posts' ) )
+				return $cache = true;
+		}
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects home page.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_home() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( is_home() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects month archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_date()
+	 *
+	 * @return bool
+	 */
+	public function is_month() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( $this->is_date() && is_month() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects pages.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_singular()
+	 *
+	 * @param int|string|array $page Optional. Page ID, title, slug, or array of such. Default empty.
+	 *
+	 * @return bool
+	 */
+	public function is_page( $page = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$page] ) )
+			return $cache[$page];
+
+		if ( $this->is_singular( $page ) ) {
+			if ( is_page( $page ) )
+				return $cache[$page] = true;
+
+			if ( $this->is_admin() )
+				return $cache[$page] = $this->is_page_admin( $page );
+		}
+
+		return $cache[$page] = false;
+	}
+
+	/**
+	 * Detects pages within the admin area.
+	 *
+	 * @since 2.6.0
+	 * @see $this->is_page()
+	 *
+	 * @global object $current_screen;
+	 *
+	 * @param int|string|array $page Optional. Page ID, title, slug, or array of such. Default empty.
+	 *
+	 * @return bool
+	 */
+	public function is_page_admin( $page = '' ) {
+		global $current_screen;
+
+		if ( isset( $current_screen->post_type ) && 'page' === $current_screen->post_type )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Detects preview.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_preview() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( is_preview() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects preview.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_search() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( is_search() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects posts.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_singular()
+	 *
+	 * @param int|string|array $post Optional. Post ID, title, slug, or array of such. Default empty.
+	 *
+	 * @return bool
+	 */
+	public function is_single( $post = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$post] ) )
+			return $cache[$post];
+
+		if ( $this->is_singular( $post ) ) {
+			if ( is_single( $post ) )
+				return $cache[$post] = true;
+
+			if ( $this->is_admin() )
+				return $cache[$post] = $this->is_single_admin( $post );
+		}
+
+		return $cache[$post] = false;
+	}
+
+	/**
+	 * Detects posts within the admin area.
+	 *
+	 * @since 2.6.0
+	 * @see $this->is_single()
+	 *
+	 * @global object $current_screen;
+	 *
+	 * @param int|string|array $post Optional. Page ID, title, slug, or array of such. Default empty.
+	 *
+	 * @return bool
+	 */
+	public function is_single_admin( $post = '' ) {
+		global $current_screen;
+
+		if ( isset( $current_screen->post_type ) && 'post' === $current_screen->post_type )
+			return true;
+
+		return false;
+	}
+
+	/**
+	 * Replaces and expands default WordPress is_singular.
+	 *
+	 * @uses $this->is_blog_page()
+	 * @uses $this->is_wc_shop()
+	 * @uses $this->is_single()
+	 * @uses $this->is_page()
+	 * @uses $this->is_attachment()
+	 *
+	 * @param string|array $post_types Optional. Post type or array of post types. Default empty.
+	 *
+	 * @staticvar bool $cache
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return bool Post Type is singular
+	 */
+	public function is_singular( $post_types = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$post_types] ) )
+			return $cache[$post_types];
+
+		//* WP_Query functions require loop, do alternative check.
+		if ( $this->is_admin() )
+			return $cache[$post_types] = $this->is_singular_admin();
+
+		if ( is_int( $post_types ) ) {
+			//* Cache ID. is_singlar doesn't accept integers.
+			$id = $post_types;
+			$post_types = '';
+		}
+
+		//* Default check.
+		if ( is_singular( $post_types ) )
+			return $cache[$post_types] = true;
+
+		$id = isset( $id ) ? $id : $this->get_the_real_ID();
+
+		//* Check for somewhat singulars. We need this to adjust Meta data filled in Posts.
+		if ( $this->is_blog_page( $id ) || $this->is_wc_shop() )
+			return $cache[$post_types] = true;
+
+		return $cache[$post_types] = false;
+	}
+
+	/**
+	 * Extends default WordPress is_singular and made available in admin.
+	 *
+	 * @staticvar bool $cache
+	 *
+	 * @since 2.5.2
+	 *
+	 * @global object $current_screen
+	 *
+	 * @return bool Post Type is singular
+	 */
+	public function is_singular_admin() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		global $current_screen;
+
+		if ( isset( $current_screen->base ) && ( 'edit' === $current_screen->base || 'post' === $current_screen->base ) )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detect the static front page.
+	 *
+	 * @param int $id the Page ID.
+	 *
+	 * @staticvar array $is_frontpage
+	 * @since 2.3.8
+	 *
+	 * @return bool true if is blog page. Always false if blog page is homepage.
+	 * False early when false as ID is entered.
+	 */
+	public function is_static_frontpage( $id = '' ) {
+
+		if ( '' === $id )
+			$id = $this->get_the_real_ID();
+
+		static $is_frontpage = array();
+
+		if ( isset( $is_frontpage[$id] ) )
+			return $is_frontpage[$id];
+
+		$sof = (string) get_option( 'show_on_front' );
+
+		if ( 'page' === $sof ) {
+			$pof = (int) get_option( 'page_on_front' );
+
+			if ( $id === $pof )
+				return $is_frontpage[$id] = true;
+		}
+
+		return $is_frontpage[$id] = false;
+	}
+
+	/**
+	 * Detects tag archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_archive()
+	 *
+	 * @param mixed $tag Optional. Tag ID, name, slug, or array of Tag IDs, names, and slugs.
+	 *
+	 * @return bool
+	 */
+	public function is_tag( $tag = '' ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$tag] ) )
+			return $cache[$tag];
+
+		//* Admin requires another check.
+		if ( $this->is_admin() )
+			return $cache[$tag] = $this->is_tag_admin();
+
+		if ( $this->is_archive() && is_tag( $tag ) )
+			return $cache[$tag] = true;
+
+		return $cache[$tag] = false;
+	}
+
+	/**
+	 * Extends default WordPress is_tag and made available in admin.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @global object $current_screen
+	 *
+	 * @return bool Post Type is category
+	 */
+	public function is_tag_admin() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( $this->is_archive_admin() ) {
+			global $current_screen;
+
+			if ( isset( $current_screen->taxonomy ) && false !== strrpos( $current_screen->taxonomy, 'tag', -3 ) )
+				return $cache = true;
+		}
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects taxonomy archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_archive()
+	 *
+	 * @param string|array     $taxonomy Optional. Taxonomy slug or slugs.
+	 * @param int|string|array $term     Optional. Term ID, name, slug or array of Term IDs, names, and slugs.
+	 *
+	 * @return bool
+	 */
+	public function is_tax( $taxonomy = '', $term = '' ) {
+
+		static $cache = null;
+
+		if ( isset( $cache[$taxonomy][$term] ) )
+			return $cache[$taxonomy][$term];
+
+		if ( $this->is_archive() && is_tax( $taxonomy, $term ) )
+			return $cache[$taxonomy][$term] = true;
+
+		return $cache[$taxonomy][$term] = false;
+	}
+
+	/**
+	 * Is Ulimate Member user page.
+	 * Check for function accessibility: um_user, um_is_core_page, um_get_requested_user
+	 *
+	 * @staticvar bool $cache
+	 * @uses $this->can_i_use()
+	 *
+	 * @since 2.5.2
+	 */
+	public function is_ultimate_member_user_page() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		$caniuse = (bool) $this->can_i_use( array( 'functions' => array( 'um_user', 'um_is_core_page', 'um_get_requested_user' ) ), false );
+
+		return $cache = $caniuse;
+	}
+
+	/**
+	 * Check for WooCommerce shop page.
+	 *
+	 * @staticvar bool $cache
+	 *
+	 * @since 2.5.2
+	 */
+	public function is_wc_shop() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		//* Can't check in admin.
+		if ( false === $this->is_admin() && function_exists( 'is_shop' ) && is_shop() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Check for WooCommerce product page.
+	 *
+	 * @staticvar bool $cache
+	 *
+	 * @since 2.5.2
+	 */
+	public function is_wc_product() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		//* Can't check in admin.
+		if ( false === $this->is_admin() && function_exists( 'is_product' ) && is_product() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Detects year archives.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 * @uses $this->is_date()
+	 *
+	 * @return bool
+	 */
+	public function is_year() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		if ( $this->is_date() && is_year() )
+			return $cache = true;
+
+		return $cache = false;
+	}
+
+	/**
+	 * Whether we're on the SEO settings page.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_seo_settings_page() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		return $cache = $this->is_menu_page( $this->page_id );
+	}
+
+	/**
+	 * The amount of pages.
+	 * Fetches global $page through Query Var.
+	 *
+	 * @staticvar int $page
+	 * @since 2.6.0
+	 *
+	 * @return int $page
+	 */
+	public function page() {
+
+		static $page = null;
+
+		if ( isset( $page ) )
+			return $page;
+
+		$page = get_query_var( 'page' );
+
+		return $page = $page ? (int) $page : 1;
+	}
+
+	/**
+	 * The number of the current page.
+	 * Fetches global $paged through Query Var. Determines
+	 *
+	 * @staticvar int $paged
+	 * @since 2.6.0
+	 *
+	 * @return int $paged
+	 */
+	public function paged() {
+
+		static $paged = null;
+
+		if ( isset( $paged ) )
+			return $paged;
+
+		$paged = get_query_var( 'paged' );
+
+		return $paged = $paged ? (int) $paged : 1;
+	}
+
+}
Index: inc/classes/render.class.php
===================================================================
--- inc/classes/render.class.php	(revision 1413572)
+++ inc/classes/render.class.php	(working copy)
@@ -1,1099 +1,1118 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Render
- *
- * Puts all data into HTML valid strings
- * Returns strings
- *
- * @since 2.1.6
- */
-class AutoDescription_Render extends AutoDescription_Admin_Init {
-
-	/**
-	 * Theme title doing it wrong boolean.
-	 *
-	 * @since 2.4.0
-	 *
-	 * @var bool Holds Theme is doing it wrong.
-	 */
-	protected $title_doing_it_wrong = null;
-
-	/**
-	 * Constructor, load parent constructor
-	 */
-	public function __construct() {
-		parent::__construct();
-	}
-
-	/**
-	 * Cache description in static variable
-	 * Must be called inside the loop
-	 *
-	 * @staticvar array $description_cache
-	 *
-	 * @since 2.2.2
-	 * @return string The description
-	 */
-	public function description_from_cache( $social = false ) {
-
-		static $description_cache = array();
-
-		if ( isset( $description_cache[$social] ) )
-			return $description_cache[$social];
-
-		$description_cache[$social] = $this->generate_description( '', array( 'social' => $social ) );
-
-		return $description_cache[$social];
-	}
-
-	/**
-	 * Cache current URL in static variable
-	 * Must be called inside the loop
-	 *
-	 * @param string $url the url
-	 * @param int $page_id the page id, if empty it will fetch the requested ID, else the page uri
-	 * @param bool $paged Return current page URL without pagination
-	 * @param bool $from_option Get the canonical uri option
-	 *
-	 * @staticvar array $url_cache
-	 *
-	 * @since 2.2.2
-	 * @return string The url
-	 */
-	public function the_url_from_cache( $url = '', $page_id = '', $paged = false, $from_option = true ) {
-
-		static $url_cache = array();
-
-		if ( isset( $url_cache[$url][$page_id][$paged][$from_option] ) )
-			return $url_cache[$url][$page_id][$paged][$from_option];
-
-		$url_cache[$url][$page_id][$paged][$from_option] = $this->the_url( $url, $page_id, array( 'paged' => $paged, 'get_custom_field' => $from_option ) );
-
-		return $url_cache[$url][$page_id][$paged][$from_option];
-	}
-
-	/**
-	 * Cache home URL in static variable
-	 *
-	 * @param bool $force_slash Force slash
-	 *
-	 * @staticvar array $url_cache
-	 *
-	 * @since 2.5.0
-	 * @return string The url
-	 */
-	public function the_home_url_from_cache( $force_slash = false ) {
-
-		static $url_cache = array();
-
-		if ( isset( $url_cache[$force_slash] ) )
-			return $url_cache[$force_slash];
-
-		$url_cache[$force_slash] = $this->the_url( '', '', array( 'home' => true, 'forceslash' => $force_slash ) );
-
-		return $url_cache[$force_slash];
-	}
-
-	/**
-	 * Cache current Title in static variable
-	 * Must be called inside the loop
-	 *
-	 * @param string $title The Title to return
-	 * @param string $sep The Title sepeartor
-	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
-	 * @param bool $meta Ignore theme doing it wrong.
-	 *
-	 * @staticvar array $title_cache
-	 *
-	 * @since 2.2.2
-	 * @return string The title
-	 */
-	public function title_from_cache( $title = '', $sep = '', $seplocation = '', $meta = false ) {
-
-		/**
-		 * Cache the inputs, for when the title is doing it right.
-		 * Use those values to fetch the cached title.
-		 *
-		 * @since 2.4.0
-		 */
-		static $setup_cache = null;
-		static $title_param_cache = null;
-		static $sep_param_cache = null;
-		static $seplocation_param_cache = null;
-
-		if ( ! isset( $setup_cache ) ) {
-			if ( doing_filter( 'wp_title' ) || doing_filter( 'pre_get_document_title' ) ) {
-				$title_param_cache = $title;
-				$sep_param_cache = $sep;
-				$seplocation_param_cache = $seplocation;
-
-				$setup_cache = 'I like turtles.';
-			}
-		}
-
-		/**
-		 * If the theme is doing it right, override parameters.
-		 *
-		 * @since 2.4.0
-		 */
-		if ( isset( $this->title_doing_it_wrong ) && ! $this->title_doing_it_wrong ) {
-			$title = $title_param_cache;
-			$sep = $sep_param_cache;
-			$seplocation = $seplocation_param_cache;
-			$meta = false;
-		}
-
-		static $title_cache = array();
-
-		if ( isset( $title_cache[$title][$sep][$seplocation][$meta] ) )
-			return $title_cache[$title][$sep][$seplocation][$meta];
-
-		return $title_cache[$title][$sep][$seplocation][$meta] = $this->title( $title, $sep, $seplocation, array( 'meta' => $meta ) );
-	}
-
-	/**
-	 * Cache current Image URL in static variable
-	 * Must be called inside the loop
-	 *
-	 * @staticvar string $image_cache
-	 *
-	 * @since 2.2.2
-	 * @return string The image url
-	 */
-	public function get_image_from_cache() {
-
-		static $image_cache = null;
-
-		if ( isset( $image_cache ) )
-			return $image_cache;
-
-		$post_id = $this->get_the_real_ID();
-
-		//* End this madness if there's no ID found (search/404/etc.)
-		if ( ! $post_id )
-			return '';
-
-		$image_cache = $this->get_image( $post_id );
-
-		return $image_cache;
-	}
-
-	/**
-	 * Render the description
-	 *
-	 * @uses $this->description_from_cache()
-	 * @uses $this->detect_seo_plugins()
-	 *
-	 * @since 1.3.0
-	 */
-	public function the_description() {
-
-		if ( $this->detect_seo_plugins() )
-			return;
-
-		//* @since 2.3.0
-		$description = (string) apply_filters( 'the_seo_framework_description_output', '' );
-
-		if ( empty( $description ) )
-			$description = $this->description_from_cache();
-
-		if ( ! empty( $description ) )
-			return '<meta name="description" content="' . esc_attr( $description ) . '" />' . "\r\n";
-
-		return '';
-	}
-
-	/**
-	 * Render og:description
-	 *
-	 * @uses $this->description_from_cache()
-	 * @uses $this->has_og_plugin()
-	 *
-	 * @since 1.3.0
-	 */
-	public function og_description() {
-
-		if ( $this->has_og_plugin() !== false )
-			return;
-
-		/**
-		 * Return if OG tags are disabled
-		 *
-		 * @since 2.2.2
-		 */
-		if ( ! $this->get_option( 'og_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$description = (string) apply_filters( 'the_seo_framework_ogdescription_output', '' );
-
-		if ( empty( $description ) )
-			$description = $this->description_from_cache( true );
-
-		return '<meta property="og:description" content="' . esc_attr( $description ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Render the locale
-	 *
-	 * @uses $this->has_og_plugin()
-	 *
-	 * @since 1.0.0
-	 */
-	public function og_locale() {
-
-		if ( $this->has_og_plugin() !== false )
-			return;
-
-		/**
-		 * Return if OG tags are disabled
-		 *
-		 * @since 2.2.2
-		 */
-		if ( ! $this->get_option( 'og_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$locale = (string) apply_filters( 'the_seo_framework_oglocale_output', '' );
-
-		if ( empty( $locale ) )
-			$locale = $this->fetch_locale();
-
-		return '<meta property="og:locale" content="' . esc_attr( $locale ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Process the title to WordPress
-	 *
-	 * @uses $this->title_from_cache()
-	 * @uses $this->has_og_plugin()
-	 *
-	 * @since 2.0.3
-	 */
-	public function og_title() {
-
-		if ( $this->has_og_plugin() !== false )
-			return;
-
-		/**
-		 * Return if OG tags are disabled
-		 *
-		 * @since 2.2.2
-		 */
-		if ( ! $this->get_option( 'og_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$title = (string) apply_filters( 'the_seo_framework_ogtitle_output', '' );
-
-		if ( empty( $title ) )
-			$title = $this->title_from_cache( '', '', '', true );
-
-		return '<meta property="og:title" content="' . esc_attr( $title ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Get the type
-	 *
-	 * @uses $this->has_og_plugin()
-	 *
-	 * @since 1.1.0
-	 */
-	public function og_type() {
-
-		if ( $this->has_og_plugin() !== false )
-			return;
-
-		/**
-		 * Return if OG tags are disabled
-		 *
-		 * @since 2.2.2
-		 */
-		if ( ! $this->get_option( 'og_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$type = (string) apply_filters( 'the_seo_framework_ogtype_output', '' );
-
-		if ( empty( $type ) ) {
-			if ( is_single() && '' !== $this->get_image_from_cache() ) {
-				$type = 'article';
-			} else if ( is_author() ) {
-				$type = 'profile';
-			} else if ( $this->is_blog_page() || ( is_front_page() && 'page' !== get_option( 'show_on_front' ) ) ) {
-				$type = 'blog';
-			} else {
-				$type = 'website';
-			}
-		}
-
-		return '<meta property="og:type" content="' . esc_attr( $type ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Adds og:image
-	 *
-	 * @param string $image url for image
-	 *
-	 * @since 1.3.0
-	 */
-	public function og_image() {
-
-		/**
-		 * Return if OG tags are disabled
-		 *
-		 * @since 2.2.2
-		 */
-		if ( ! $this->get_option( 'og_tags' ) )
-			return;
-
-		/**
-		 * @since 2.3.0
-		 *
-		 * @NOTE: Use of this might cause incorrect meta since other functions
-		 * depend on the image from cache.
-		 */
-		$image = (string) apply_filters( 'the_seo_framework_ogimage_output', '' );
-
-		if ( empty( $image ) )
-			$image = $this->get_image_from_cache();
-
-		if ( function_exists( 'is_product' ) && is_product() ) {
-
-			$output = '';
-
-			if ( ! empty( $image ) )
-				$output .= '<meta property="og:image" content="' . esc_attr( $image ) . '" />' . "\r\n";
-
-			$images = $this->get_image_from_woocommerce_gallery();
-
-			if ( is_array( $images ) && ! empty( $images ) ) {
-				foreach ( $images as $id ) {
-					//* Parse 1500px url.
-					$img = $this->parse_og_image( $id );
-
-					if ( ! empty( $img ) )
-						$output .= '<meta property="og:image" content="' . esc_attr( $img ) . '" />' . "\r\n";
-				}
-			} else if ( empty( $output ) ) {
-				//* Always add empty if none is found.
-				$output .= '<meta property="og:image" content="' . esc_attr( $image ) . '" />' . "\r\n";
-			}
-		} else {
-			/**
-			 * Always output
-			 *
-			 * @since 2.1.1
-			 */
-			$output = '<meta property="og:image" content="' . esc_attr( $image ) . '" />' . "\r\n";
-		}
-
-		return $output;
-	}
-
-	/**
-	 * Adds og:site_name
-	 *
-	 * @uses wp
-	 *
-	 * @param string output	the output
-	 *
-	 * @since 1.3.0
-	 */
-	public function og_sitename() {
-
-		//* if WPSEO is active
-		if ( $this->has_og_plugin() !== false )
-			return;
-
-		/**
-		 * Return if OG tags are disabled
-		 *
-		 * @since 2.2.2
-		 */
-		if ( ! $this->get_option( 'og_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$sitename = (string) apply_filters( 'the_seo_framework_ogsitename_output', '' );
-
-		if ( empty( $sitename ) )
-			$sitename = get_bloginfo('name');
-
-		return '<meta property="og:site_name" content="' . esc_attr( $sitename ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Adds og:url
-	 *
-	 * @return string og:url the url meta
-	 *
-	 * @since 1.3.0
-	 *
-	 * @uses $this->the_url_from_cache()
-	 */
-	public function og_url() {
-
-		//* if WPSEO is active
-		if ( $this->has_og_plugin() !== false )
-			return;
-
-		/**
-		 * Return if OG tags are disabled
-		 *
-		 * @since 2.2.2
-		 */
-		if ( ! $this->get_option( 'og_tags' ) )
-			return;
-
-		return '<meta property="og:url" content="' . esc_attr( $this->the_url_from_cache() ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Render twitter:card
-	 *
-	 * @uses $this->has_og_plugin()
-	 *
-	 * @since 2.2.2
-	 */
-	public function twitter_card() {
-
-		if ( ! $this->get_option( 'twitter_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$card = (string) apply_filters( 'the_seo_framework_twittercard_output', '' );
-
-		if ( empty( $card ) ) {
-			/**
-			 * Return card type if image is found
-			 * Return to summary if not
-			 */
-			$card = '' !== $this->get_image_from_cache() ? $this->get_option( 'twitter_card' ) : 'summary';
-		}
-
-		return '<meta name="twitter:card" content="' . esc_attr( $card ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Render twitter:site
-	 *
-	 * @since 2.2.2
-	 */
-	public function twitter_site() {
-
-		if ( ! $this->get_option( 'twitter_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$site = (string) apply_filters( 'the_seo_framework_twittersite_output', '' );
-
-		if ( empty( $site ) ) {
-			$site = $this->get_option( 'twitter_site' );
-
-			/**
-			 * Return empty if no twitter_site is found
-			 */
-			if ( empty( $site ) )
-				return '';
-		}
-
-		return '<meta name="twitter:site" content="' . esc_attr( $site ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Render twitter:creator or twitter:site:id
-	 *
-	 * @since 2.2.2
-	 */
-	public function twitter_creator() {
-
-		if ( ! $this->get_option( 'twitter_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$creator = (string) apply_filters( 'the_seo_framework_twittercreator_output', '' );
-
-		if ( empty( $creator ) ) {
-			$site = $this->get_option( 'twitter_site' );
-			$creator = $this->get_option( 'twitter_creator' );
-
-			/**
-			 * Return site:id instead of creator is no twitter:site is found.
-			 * Per Twitter requirements
-			 */
-			if ( empty( $site ) && ! empty( $creator ) )
-				return '<meta name="twitter:site:id" content="' . esc_attr( $creator ) . '" />' . "\r\n";
-		}
-
-		if ( empty( $creator ) )
-			return '';
-
-		return '<meta name="twitter:creator" content="' . esc_attr( $creator ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Render twitter:title
-	 *
-	 * @uses $this->title_from_cache()
-	 * @uses $this->has_og_plugin()
-	 *
-	 * @since 2.2.2
-	 */
-	public function twitter_title() {
-
-		if ( ! $this->get_option( 'twitter_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$title = (string) apply_filters( 'the_seo_framework_twittertitle_output', '' );
-
-		if ( empty( $title ) )
-			$title = $this->title_from_cache( '', '', '', true );
-
-		return '<meta name="twitter:title" content="' . esc_attr( $title ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Render twitter:description
-	 *
-	 * @uses $this->description_from_cache()
-	 *
-	 * @since 2.2.2
-	 */
-	public function twitter_description() {
-
-		if ( ! $this->get_option( 'twitter_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$description = (string) apply_filters( 'the_seo_framework_twitterdescription_output', '' );
-
-		if ( empty( $description ) )
-			$description = $this->description_from_cache( true );
-
-		return '<meta name="twitter:description" content="' . esc_attr( $description ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Render twitter:image
-	 *
-	 * @param string $image url for image
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return string|null The twitter image source meta tag
-	 */
-	public function twitter_image() {
-
-		if ( ! $this->get_option( 'twitter_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$image = (string) apply_filters( 'the_seo_framework_twitterimage_output', '' );
-
-		if ( empty( $image ) )
-			$image = $this->get_image_from_cache();
-
-		if ( ! empty( $image ) ) {
-			return '<meta name="twitter:image:src" content="' . esc_attr( $image ) . '" />' . "\r\n";
-		} else {
-			return '';
-		}
-
-	}
-
-	/**
-	 * Render article:author
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return string|null The facebook app id
-	 */
-	public function facebook_author() {
-
-		if ( ! $this->get_option( 'facebook_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$author = (string) apply_filters( 'the_seo_framework_facebookauthor_output', '' );
-
-		if ( empty( $author ) )
-			$author = $this->get_option( 'facebook_author' );
-
-		if ( ! empty( $author ) )
-			return '<meta property="article:author" content="' . esc_attr( esc_url_raw( $author ) ) . '" />' . "\r\n";
-
-		return '';
-	}
-
-	/**
-	 * Render article:author
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return string|null The facebook app id
-	 */
-	public function facebook_publisher() {
-
-		if ( ! $this->get_option( 'facebook_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$publisher = (string) apply_filters( 'the_seo_framework_facebookpublisher_output', '' );
-
-		if ( empty( $publisher ) )
-			$publisher = $this->get_option( 'facebook_publisher' );
-
-		if ( ! empty( $publisher ) )
-			return '<meta property="article:publisher" content="' . esc_attr( esc_url_raw( $publisher ) ) . '" />' . "\r\n";
-
-		return '';
-	}
-
-	/**
-	 * Render fb:app_id
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return string|null The facebook app id
-	 */
-	public function facebook_app_id() {
-
-		if ( ! $this->get_option( 'facebook_tags' ) )
-			return;
-
-		//* @since 2.3.0
-		$app_id = (string) apply_filters( 'the_seo_framework_facebookappid_output', '' );
-
-		if ( empty( $app_id ) )
-			$app_id = $this->get_option( 'facebook_appid' );
-
-		if ( ! empty( $app_id ) )
-			return '<meta property="fb:app_id" content="' . esc_attr( $app_id ) . '" />' . "\r\n";
-
-		return '';
-	}
-
-	/**
-	 * Render article:published_time
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return string|null The article:published_time
-	 */
-	public function article_published_time() {
-
-		// Don't do anything if it's not a page or post.
-		if ( ! is_singular() )
-			return;
-
-		$front_page = (bool) is_front_page();
-
-		// If it's a post, but the option is disabled, don't do anyhting.
-		if ( ! $front_page && is_single() && ! $this->get_option( 'post_publish_time' ) )
-			return;
-
-		// If it's a page, but the option is disabled, don't do anything.
-		if ( ! $front_page && is_page() && ! $this->get_option( 'page_publish_time' ) )
-			return;
-
-		// If it's  the home page, but the option is disabled, don't do anything.
-		if ( $front_page && ! $this->get_option( 'home_publish_time' ) )
-			return;
-
-		//* @since 2.3.0
-		$time = (string) apply_filters( 'the_seo_framework_publishedtime_output', '' );
-
-		if ( empty( $time ) )
-			$time = get_the_date( 'Y-m-d', '' );
-
-		if ( ! empty( $time ) )
-			return '<meta property="article:published_time" content="' . esc_attr( $time ) . '" />' . "\r\n";
-
-		return '';
-	}
-
-	/**
-	 * Render article:modified_time
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return string|null The article:modified_time
-	 */
-	public function article_modified_time() {
-
-		// Don't do anything if it's not a page or post, or if both options are disabled
-		if ( ! is_singular() )
-			return;
-
-		$is_front_page = is_front_page();
-
-		// If it's a post, but the option is disabled, don't do anyhting.
-		if ( ! $is_front_page && is_single() && ! $this->get_option( 'post_modify_time' ) )
-			return;
-
-		// If it's a page, but the option is disabled, don't do anything.
-		if ( ! $is_front_page && is_page() && ! $this->get_option( 'page_modify_time' ) )
-			return;
-
-		// If it's the home page, but the option is disabled, don't do anything.
-		if ( $is_front_page && ! $this->get_option( 'home_modify_time' ) )
-			return;
-
-		//* @since 2.3.0
-		$time = (string) apply_filters( 'the_seo_framework_modifiedtime_output', '' );
-
-		if ( empty( $time ) )
-			$time = the_modified_date( 'Y-m-d', '', '', false );
-
-		if ( ! empty( $time ) ) {
-			$output = '<meta property="article:modified_time" content="' . esc_attr( $time ) . '" />' . "\r\n";
-
-			if ( $this->get_option( 'og_tags' ) )
-				$output .= '<meta property="og:updated_time" content="' . esc_attr( $time ) . '" />'. "\r\n";
-
-			return $output;
-		}
-
-		return '';
-	}
-
-	/**
-	 * Outputs canonical url
-	 *
-	 * @since 2.0.6
-	 *
-	 * @uses $this->the_url_from_cache()
-	 *
-	 * @return string canonical url meta
-	 */
-	public function canonical() {
-
-		//* if WPSEO is active
-		if ( $this->has_og_plugin() !== false )
-			return;
-
-		/**
-		 * Applies filters the_seo_framework_output_canonical : Don't output canonical if false.
-		 * @since 2.4.2
-		 */
-		if ( ! apply_filters( 'the_seo_framework_output_canonical', true ) )
-			return;
-
-		if ( ! get_option( 'permalink_structure' ) || is_404() )
-			return;
-
-		$url = $this->the_url_from_cache();
-
-		/**
-		 * Applies filters the_seo_framework_canonical_force_scheme : Changes scheme.
-		 *
-		 * Accepted variables:
-		 * (string) 'https'		: 	Force https
-		 * (bool) true 			: 	Force https
-		 * (bool) false			: 	Force http
-		 * (string) 'http'		: 	Force http
-		 * (string) 'relative' 	:	Scheme relative
-		 * (void) null			: 	Do nothing
-		 *
-		 * @since 2.4.2
-		 */
-		$scheme_settings = apply_filters( 'the_seo_framework_canonical_force_scheme', null );
-
-		if ( isset( $scheme_settings ) ) {
-			if ( 'https' ===  $scheme_settings || 'http' === $scheme_settings || 'relative' === $scheme_settings ) {
-				$url = $this->set_url_scheme( $url, $scheme_settings );
-			} else if ( ! $scheme_settings ) {
-				$url = $this->set_url_scheme( $url, 'http' );
-			} else if ( $scheme_setting ) {
-				$url = $this->set_url_scheme( $url, 'https' );
-			}
-		}
-
-		return '<link rel="canonical" href="' . esc_attr( $url ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * LD+JSON helper output
-	 *
-	 * @uses $this->has_json_ld_plugin()
-	 * @uses $this->ld_json_search()
-	 * @uses $this->ld_json_knowledge()
-	 *
-	 * @since 1.2.0
-	 * @return string $output LD+json helpers in header on front page.
-	 */
-	public function ld_json() {
-
-		//* Check for WPSEO LD+JSON
-		if ( false !== $this->has_json_ld_plugin() || is_search() || is_404() )
-			return;
-
-		$this->setup_ld_json_transient( $this->get_the_real_ID() );
-
-		/**
-		 * Debug transient key.
-		 * @since 2.4.2
-		 */
-		if ( $this->the_seo_framework_debug ) {
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			echo  "\r\n" . 'START: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n";
-			$this->echo_debug_information( array( 'LD Json transient name' => $this->ld_json_transient ) );
-			$this->echo_debug_information( array( 'Output from transient' => (bool) get_transient( $this->ld_json_transient ) ) );
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		$output = get_transient( $this->ld_json_transient );
-		if ( false === $output ) {
-
-			$output = '';
-
-			//* Only display search helper and knowledge graph on front page.
-			if ( is_front_page() ) {
-
-				/**
-				 * Add multiple scripts
-				 *
-				 * @since 2.2.8
-				 */
-				$searchhelper = $this->ld_json_search();
-				$knowledgegraph = $this->ld_json_knowledge();
-
-				if ( ! empty( $searchhelper ) )
-					$output .= "<script type='application/ld+json'>" . $searchhelper . "</script>" . "\r\n";
-
-				if ( ! empty( $knowledgegraph ) )
-					$output .= "<script type='application/ld+json'>" . $knowledgegraph . "</script>" . "\r\n";
-			} else {
-				$breadcrumbhelper = $this->ld_json_breadcrumbs();
-
-				//* No wrapper, is done within script generator.
-				if ( ! empty( $breadcrumbhelper ) )
-					$output .= $breadcrumbhelper;
-			}
-
-			/**
-			 * Transient expiration: 1 week.
-			 * Keep the description for at most 1 week.
-			 *
-			 * 60s * 60m * 24h * 7d
-			 */
-			$expiration = 60 * 60 * 24 * 7;
-
-			set_transient( $this->ld_json_transient, $output, $expiration );
-		}
-
-		/**
-		 * Debug output.
-		 * @since 2.4.2
-		 */
-		if ( $this->the_seo_framework_debug ) {
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "<!--\r\n";
-
-			if ( $this->the_seo_framework_debug_hidden ) {
-				$this->echo_debug_information( array( 'LD Json transient output' => $output ) );
-			}
-			echo  "\r\n<br>\r\n" . 'END: ' . __CLASS__ . '::' . __FUNCTION__ .  "\r\n";
-
-			if ( $this->the_seo_framework_debug_hidden )
-				echo "\r\n-->";
-		}
-
-		return $output;
-	}
-
-	/**
-	 * Outputs Google Site Verification code
-	 *
-	 * @since 2.2.4
-	 *
-	 * @return string|null google verification code
-	 */
-	public function google_site_output() {
-
-		//* @since 2.3.0
-		$code = (string) apply_filters( 'the_seo_framework_googlesite_output', '' );
-
-		if ( empty( $code ) )
-			$code = $this->get_option( 'google_verification' );
-
-		if ( empty( $code ) )
-			return '';
-
-		return '<meta name="google-site-verification" content="' . esc_attr( $code ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Outputs Bing Site Verification code
-	 *
-	 * @since 2.2.4
-	 *
-	 * @return string|null Bing Webmaster code
-	 */
-	public function bing_site_output() {
-
-		//* @since 2.3.0
-		$code = (string) apply_filters( 'the_seo_framework_bingsite_output', '' );
-
-		if ( empty( $code ) )
-			$code = $this->get_option( 'bing_verification' );
-
-		if ( empty( $code ) )
-			return '';
-
-		return '<meta name="msvalidate.01" content="' . esc_attr( $code ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Outputs Bing Site Verification code
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return string|null Bing Webmaster code
-	 */
-	public function pint_site_output() {
-
-		//* @since 2.3.0
-		$code = (string) apply_filters( 'the_seo_framework_pintsite_output', '' );
-
-		if ( empty( $code ) )
-			$code = $this->get_option( 'pint_verification' );
-
-		if ( empty( $code ) )
-			return '';
-
-		return '<meta name="p:domain_verify" content="' . esc_attr( $code ) . '" />' . "\r\n";
-	}
-
-	/**
-	 * Output the `index`, `follow`, `noodp`, `noydir`, `noarchive` robots meta code in the document `head`.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @return null Return early if blog is not public.
-	 */
-	public function robots() {
-
-		// Don't do anything if the blog isn't set to public.
-		if ( ! get_option( 'blog_public' ) )
-			return '';
-
-		$robots = '';
-		$meta = $this->robots_meta();
-
-		//* Add meta if any exist
-		if ( ! empty( $meta ) )
-			return sprintf( '<meta name="robots" content="%s" />' . "\r\n", implode( ',', $meta ) );
-
-		 return '';
-	}
-
-	/**
-	 * Outputs favicon urls
-	 *
-	 * @since 2.2.1
-	 *
-	 * @uses $this->site_icon()
-	 *
-	 * @return string icon links.
-	 * @TODO Make this work for older wp versions. i.e. add upload area for wp 4.2.99999 and lower
-	 * @TODO Make this work in the first place
-	 */
-	public function favicon() {
-
-		if ( $this->wp_version( '4.3.0', '<' ) ) {
-			$output = '<link rel="icon" type="image/x-icon" href="' . esc_url( $this->site_icon( 16 ) ) . '" sizes="16x16" />' . "\r\n";
-			$output .= '<link rel="icon" type="image/x-icon" href="' . esc_url( $this->site_icon( 192 ) ) . '" sizes="192x192" />' . "\r\n";
-			$output .= '<link rel="apple-touch-icon-precomposed" href="' . esc_url( $this->site_icon( 180 ) ) . '" />' . "\r\n";
-			$output .= '<link rel="msapplication-TileImage" href="' . esc_url( $this->site_icon( 270 ) ) . '" />' . "\r\n";
-
-			return $output;
-		}
-
-		return '';
-	}
-
-	/**
-	 * Outputs shortlink meta tag
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses $this->get_shortlink()
-	 *
-	 * @return string|null shortlink url meta
-	 */
-	public function shortlink() {
-
-		$url = $this->get_shortlink();
-
-		if ( ! empty( $url ) )
-			return sprintf( '<link rel="shortlink" href="%s" />' . "\r\n", $url );
-
-		return '';
-	}
-
-	/**
-	 * Outputs shortlink meta tag
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses $this->get_paged_url()
-	 *
-	 * @return string|null shortlink url meta
-	 */
-	public function paged_urls() {
-
-		$next = $this->get_paged_url( 'next' );
-		$prev = $this->get_paged_url( 'prev' );
-
-		$output = '';
-
-		if ( $prev )
-			$output .= sprintf( '<link rel="prev" href="%s" />' . "\r\n", $prev );
-		if ( $next )
-			$output .= sprintf( '<link rel="next" href="%s" />' . "\r\n", $next );
-
-		return $output;
-	}
-
-	/**
-	 * Detemrmines wether to add or remove title additions.
-	 *
-	 * @since 2.5.2
-	 * @return bool True when additions are allowed.
-	 */
-	public function add_title_additions() {
-
-		$remove = $this->get_option( 'title_rem_additions' );
-
-		if ( ! $remove )
-			return true;
-
-		return false;
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Render
+ *
+ * Puts all data into HTML valid strings
+ * Returns strings
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_Render extends AutoDescription_Admin_Init {
+
+	/**
+	 * Theme title doing it wrong boolean.
+	 *
+	 * @since 2.4.0
+	 *
+	 * @var bool Holds Theme is doing it wrong.
+	 */
+	protected $title_doing_it_wrong = null;
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Cache description in static variable
+	 * Must be called inside the loop
+	 *
+	 * @staticvar array $description_cache
+	 *
+	 * @since 2.2.2
+	 * @return string The description
+	 */
+	public function description_from_cache( $social = false ) {
+
+		static $description_cache = array();
+
+		if ( isset( $description_cache[$social] ) )
+			return $description_cache[$social];
+
+		return $description_cache[$social] = $this->generate_description( '', array( 'social' => $social ) );
+	}
+
+	/**
+	 * Cache current URL in static variable
+	 * Must be called inside the loop
+	 *
+	 * @param string $url the url
+	 * @param int $page_id the page id, if empty it will fetch the requested ID, else the page uri
+	 * @param bool $paged Return current page URL without pagination
+	 * @param bool $from_option Get the canonical uri option
+	 * @param bool $paged_plural Whether to allow pagination on second later pages.
+	 *
+	 * @staticvar array $url_cache
+	 *
+	 * @since 2.2.2
+	 * @return string The url
+	 */
+	public function the_url_from_cache( $url = '', $page_id = '', $paged = false, $from_option = true, $paged_plural = true ) {
+
+		static $url_cache = array();
+
+		if ( isset( $url_cache[$url][$page_id][$paged][$from_option][$paged_plural] ) )
+			return $url_cache[$url][$page_id][$paged][$from_option][$paged_plural];
+
+		return $url_cache[$url][$page_id][$paged][$from_option][$paged_plural] = $this->the_url( $url, array( 'paged' => $paged, 'get_custom_field' => $from_option, 'id' => $page_id, 'paged_plural' => $paged_plural ) );
+	}
+
+	/**
+	 * Cache home URL in static variable
+	 *
+	 * @param bool $force_slash Force slash
+	 *
+	 * @staticvar array $url_cache
+	 *
+	 * @since 2.5.0
+	 * @return string The url
+	 */
+	public function the_home_url_from_cache( $force_slash = false ) {
+
+		static $url_cache = array();
+
+		if ( isset( $url_cache[$force_slash] ) )
+			return $url_cache[$force_slash];
+
+		return $url_cache[$force_slash] = $this->the_url( '', array( 'home' => true, 'forceslash' => $force_slash ) );
+	}
+
+	/**
+	 * Cache current Title in static variable
+	 * Must be called inside the loop
+	 *
+	 * @param string $title The Title to return
+	 * @param string $sep The Title sepeartor
+	 * @param string $seplocation The Title sepeartor location ( accepts 'left' or 'right' )
+	 * @param bool $meta Ignore theme doing it wrong.
+	 *
+	 * @staticvar array $title_cache
+	 *
+	 * @since 2.2.2
+	 * @return string The title
+	 */
+	public function title_from_cache( $title = '', $sep = '', $seplocation = '', $meta = false ) {
+
+		/**
+		 * Cache the inputs, for when the title is doing it right.
+		 * Use those values to fetch the cached title.
+		 *
+		 * @since 2.4.0
+		 */
+		static $setup_cache = null;
+		static $title_param_cache = null;
+		static $sep_param_cache = null;
+		static $seplocation_param_cache = null;
+
+		if ( ! isset( $setup_cache ) ) {
+			if ( doing_filter( 'pre_get_document_title' ) || doing_filter( 'wp_title' ) ) {
+				$title_param_cache = $title;
+				$sep_param_cache = $sep;
+				$seplocation_param_cache = $seplocation;
+
+				$setup_cache = 'I like turtles.';
+			}
+		}
+
+		/**
+		 * If the theme is doing it right, override parameters to speed things up.
+		 *
+		 * @since 2.4.0
+		 */
+		if ( isset( $this->title_doing_it_wrong ) && false === $this->title_doing_it_wrong ) {
+			$title = $title_param_cache;
+			$sep = $sep_param_cache;
+			$seplocation = $seplocation_param_cache;
+			$meta = false;
+		}
+
+		static $title_cache = array();
+
+		if ( isset( $title_cache[$title][$sep][$seplocation][$meta] ) )
+			return $title_cache[$title][$sep][$seplocation][$meta];
+
+		return $title_cache[$title][$sep][$seplocation][$meta] = $this->title( $title, $sep, $seplocation, array( 'meta' => $meta ) );
+	}
+
+	/**
+	 * Cache current Image URL in static variable
+	 * Must be called inside the loop
+	 *
+	 * @staticvar string $image_cache
+	 *
+	 * @since 2.2.2
+	 * @return string The image url
+	 */
+	public function get_image_from_cache() {
+
+		static $image_cache = null;
+
+		if ( isset( $image_cache ) )
+			return $image_cache;
+
+		$post_id = $this->get_the_real_ID();
+
+		//* End this madness if there's no ID found (search/404/etc.)
+		if ( empty( $post_id ) )
+			return '';
+
+		$image_cache = $this->get_image( $post_id );
+
+		return $image_cache;
+	}
+
+	/**
+	 * Render the description
+	 *
+	 * @uses $this->description_from_cache()
+	 * @uses $this->detect_seo_plugins()
+	 *
+	 * @since 1.3.0
+	 */
+	public function the_description() {
+
+		if ( $this->detect_seo_plugins() )
+			return;
+
+		/**
+		 * Applies filters 'the_seo_framework_description_output' : string
+		 * @since 2.3.0
+		 */
+		$description = (string) apply_filters( 'the_seo_framework_description_output', '', $this->get_the_real_ID() );
+
+		if ( empty( $description ) )
+			$description = $this->description_from_cache();
+
+		if ( $description )
+			return '<meta name="description" content="' . esc_attr( $description ) . '" />' . "\r\n";
+
+		return '';
+	}
+
+	/**
+	 * Render og:description
+	 *
+	 * @uses $this->description_from_cache()
+	 *
+	 * @since 1.3.0
+	 */
+	public function og_description() {
+
+		if ( $this->use_og_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_ogdescription_output' : string
+			 * @since 2.3.0
+			 */
+			$description = (string) apply_filters( 'the_seo_framework_ogdescription_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $description ) )
+				$description = $this->description_from_cache( true );
+
+			return '<meta property="og:description" content="' . esc_attr( $description ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render the OG locale.
+	 *
+	 * @since 1.0.0
+	 */
+	public function og_locale() {
+
+		if ( $this->use_og_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_oglocale_output' : string
+			 * @since 2.3.0
+			 */
+			$locale = (string) apply_filters( 'the_seo_framework_oglocale_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $locale ) )
+				$locale = $this->fetch_locale();
+
+			return '<meta property="og:locale" content="' . esc_attr( $locale ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Process the title to WordPress
+	 *
+	 * @uses $this->title_from_cache()
+	 *
+	 * @since 2.0.3
+	 */
+	public function og_title() {
+
+		if ( $this->use_og_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_ogtitle_output' : string
+			 * @since 2.3.0
+			 */
+			$title = (string) apply_filters( 'the_seo_framework_ogtitle_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $title ) )
+				$title = $this->title_from_cache( '', '', '', true );
+
+			return '<meta property="og:title" content="' . esc_attr( $title ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Get the OG type.
+	 *
+	 * @since 1.1.0
+	 */
+	public function og_type() {
+
+		if ( $this->use_og_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_ogtype_output' : string
+			 * @since 2.3.0
+			 */
+			$type = (string) apply_filters( 'the_seo_framework_ogtype_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $type ) ) {
+				if ( $this->is_single() && $this->get_image_from_cache() ) {
+					$type = 'article';
+				} else if ( $this->is_author() ) {
+					$type = 'profile';
+				} else if ( $this->is_blog_page() || ( $this->is_front_page() && ! $this->has_page_on_front() ) ) {
+					$type = 'blog';
+				} else {
+					$type = 'website';
+				}
+			}
+
+			return '<meta property="og:type" content="' . esc_attr( $type ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Adds og:image
+	 *
+	 * @param string $image url for image
+	 *
+	 * @since 1.3.0
+	 */
+	public function og_image() {
+
+		if ( $this->use_og_tags() ) {
+
+			$id = $this->get_the_real_ID();
+
+			/**
+			 * Applies filters 'the_seo_framework_ogimage_output' : string|bool
+			 * @since 2.3.0
+			 *
+			 * @NOTE: Use of this might cause incorrect meta since other functions
+			 * depend on the image from cache.
+			 *
+			 * @todo Place in listener cache.
+			 * @priority medium 2.8.0+
+			 */
+			$image = apply_filters( 'the_seo_framework_ogimage_output', '', $id );
+
+			/**
+			 * Now returns empty string on false.
+			 * @since 2.6.0
+			 */
+			if ( false === $image )
+				return '';
+
+			if ( empty( $image ) ) {
+				$image = $this->get_image_from_cache();
+			} else {
+				$image = (string) $image;
+			}
+
+			/**
+			 * Always output
+			 * @since 2.1.1
+			 */
+			$output = '<meta property="og:image" content="' . esc_attr( $image ) . '" />' . "\r\n";
+
+			//* Fetch Product images.
+			$woocommerce_product_images = $this->render_woocommerce_product_og_image();
+
+			return $output . $woocommerce_product_images;
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render more OG images to choose from.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string The rendered OG Image.
+	 */
+	public function render_woocommerce_product_og_image() {
+
+		$output = '';
+
+		if ( $this->is_wc_product() ) {
+
+			$images = $this->get_image_from_woocommerce_gallery();
+
+			if ( $images && is_array( $images ) ) {
+				foreach ( $images as $id ) {
+					//* Parse 1500px url.
+					$img = $this->parse_og_image( $id );
+
+					if ( $img )
+						$output .= '<meta property="og:image" content="' . esc_attr( $img ) . '" />' . "\r\n";
+				}
+			}
+		}
+
+		return $output;
+	}
+
+	/**
+	 * Adds og:site_name
+	 *
+	 * @param string output	the output
+	 *
+	 * @since 1.3.0
+	 */
+	public function og_sitename() {
+
+		if ( $this->use_og_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_ogsitename_output' : string
+			 * @since 2.3.0
+			 */
+			$sitename = (string) apply_filters( 'the_seo_framework_ogsitename_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $sitename ) )
+				$sitename = get_bloginfo( 'name' );
+
+			return '<meta property="og:site_name" content="' . esc_attr( $sitename ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Adds og:url
+	 *
+	 * @return string og:url the url meta
+	 *
+	 * @since 1.3.0
+	 *
+	 * @uses $this->the_url_from_cache()
+	 */
+	public function og_url() {
+
+		if ( $this->use_og_tags() )
+			return '<meta property="og:url" content="' . esc_attr( $this->the_url_from_cache() ) . '" />' . "\r\n";
+
+		return '';
+	}
+
+	/**
+	 * Render twitter:card
+	 *
+	 * @since 2.2.2
+	 */
+	public function twitter_card() {
+
+		if ( $this->use_twitter_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_twittercard_output' : string
+			 * @since 2.3.0
+			 */
+			$card = (string) apply_filters( 'the_seo_framework_twittercard_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $card ) ) {
+				/**
+				 * Return card type if image is found.
+				 * Return to summary if not.
+				 */
+				$card = $this->get_image_from_cache() ? $this->get_option( 'twitter_card' ) : 'summary';
+			}
+
+			return '<meta name="twitter:card" content="' . esc_attr( $card ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render twitter:site
+	 *
+	 * @since 2.2.2
+	 */
+	public function twitter_site() {
+
+		if ( $this->use_twitter_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_twittersite_output' : string
+			 * @since 2.3.0
+			 */
+			$site = (string) apply_filters( 'the_seo_framework_twittersite_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $site ) )
+				$site = $this->get_option( 'twitter_site' );
+
+			if ( $site )
+				return '<meta name="twitter:site" content="' . esc_attr( $site ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render twitter:creator or twitter:site:id
+	 *
+	 * @since 2.2.2
+	 */
+	public function twitter_creator() {
+
+		if ( $this->use_twitter_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_twittercreator_output' : string
+			 * @since 2.3.0
+			 */
+			$creator = (string) apply_filters( 'the_seo_framework_twittercreator_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $creator ) ) {
+				$site = $this->get_option( 'twitter_site' );
+				$creator = $this->get_option( 'twitter_creator' );
+
+				/**
+				 * Return site:id instead of creator is no twitter:site is found.
+				 * Per Twitter requirements
+				 */
+				if ( empty( $site ) && $creator )
+					return '<meta name="twitter:site:id" content="' . esc_attr( $creator ) . '" />' . "\r\n";
+			}
+
+			if ( $creator )
+				return '<meta name="twitter:creator" content="' . esc_attr( $creator ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render twitter:title
+	 *
+	 * @uses $this->title_from_cache()
+	 *
+	 * @since 2.2.2
+	 */
+	public function twitter_title() {
+
+		if ( $this->use_twitter_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_twittertitle_output' : string
+			 * @since 2.3.0
+			 */
+			$title = (string) apply_filters( 'the_seo_framework_twittertitle_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $title ) )
+				$title = $this->title_from_cache( '', '', '', true );
+
+			return '<meta name="twitter:title" content="' . esc_attr( $title ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render twitter:description
+	 *
+	 * @uses $this->description_from_cache()
+	 *
+	 * @since 2.2.2
+	 */
+	public function twitter_description() {
+
+		if ( $this->use_twitter_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_twitterdescription_output' : string
+			 * @since 2.3.0
+			 */
+			$description = (string) apply_filters( 'the_seo_framework_twitterdescription_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $description ) )
+				$description = $this->description_from_cache( true );
+
+			return '<meta name="twitter:description" content="' . esc_attr( $description ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render twitter:image
+	 *
+	 * @param string $image url for image
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return string|null The twitter image source meta tag
+	 */
+	public function twitter_image() {
+
+		if ( $this->use_twitter_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_twitterimage_output' : string|bool
+			 * @since 2.3.0
+			 */
+			$image = apply_filters( 'the_seo_framework_twitterimage_output', '', $this->get_the_real_ID() );
+
+			/**
+			 * Now returns empty string on false.
+			 * @since 2.6.0
+			 */
+			if ( false === $image )
+				return '';
+
+			if ( empty( $image ) ) {
+				$image = $this->get_image_from_cache();
+			} else {
+				$image = (string) $image;
+			}
+
+			if ( $image )
+				return '<meta name="twitter:image" content="' . esc_attr( $image ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render article:author
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return string|null The facebook app id
+	 */
+	public function facebook_author() {
+
+		if ( $this->use_facebook_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_facebookauthor_output' : string
+			 * @since 2.3.0
+			 */
+			$author = (string) apply_filters( 'the_seo_framework_facebookauthor_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $author ) )
+				$author = $this->get_option( 'facebook_author' );
+
+			if ( $author )
+				return '<meta property="article:author" content="' . esc_attr( esc_url_raw( $author ) ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render article:author
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return string|null The facebook app id
+	 */
+	public function facebook_publisher() {
+
+		if ( $this->use_facebook_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_facebookpublisher_output' : string
+			 * @since 2.3.0
+			 */
+			$publisher = (string) apply_filters( 'the_seo_framework_facebookpublisher_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $publisher ) )
+				$publisher = $this->get_option( 'facebook_publisher' );
+
+			if ( $publisher )
+				return '<meta property="article:publisher" content="' . esc_attr( esc_url_raw( $publisher ) ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render fb:app_id
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return string|null The facebook app id
+	 */
+	public function facebook_app_id() {
+
+		if ( $this->use_facebook_tags() ) {
+
+			/**
+			 * Applies filters 'the_seo_framework_facebookappid_output' : string
+			 * @since 2.3.0
+			 */
+			$app_id = (string) apply_filters( 'the_seo_framework_facebookappid_output', '', $this->get_the_real_ID() );
+
+			if ( empty( $app_id ) )
+				$app_id = $this->get_option( 'facebook_appid' );
+
+			if ( $app_id )
+				return '<meta property="fb:app_id" content="' . esc_attr( $app_id ) . '" />' . "\r\n";
+		}
+
+		return '';
+	}
+
+	/**
+	 * Render article:published_time
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return string|null The article:published_time
+	 */
+	public function article_published_time() {
+
+		// Don't do anything if it's not a page or post.
+		if ( false === $this->is_singular() )
+			return;
+
+		$front_page = (bool) is_front_page();
+
+		// If it's a post, but the option is disabled, don't do anyhting.
+		if ( ! $front_page && $this->is_single() && ! $this->get_option( 'post_publish_time' ) )
+			return;
+
+		// If it's a page, but the option is disabled, don't do anything.
+		if ( ! $front_page && $this->is_page() && ! $this->get_option( 'page_publish_time' ) )
+			return;
+
+		// If it's  the home page, but the option is disabled, don't do anything.
+		if ( $front_page && ! $this->get_option( 'home_publish_time' ) )
+			return;
+
+		//* @since 2.3.0
+		$time = (string) apply_filters( 'the_seo_framework_publishedtime_output', '', $this->get_the_real_ID() );
+
+		if ( empty( $time ) )
+			$time = get_the_date( 'Y-m-d', '' );
+
+		if ( $time )
+			return '<meta property="article:published_time" content="' . esc_attr( $time ) . '" />' . "\r\n";
+
+		return '';
+	}
+
+	/**
+	 * Render article:modified_time
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return string|null The article:modified_time
+	 */
+	public function article_modified_time() {
+
+		// Don't do anything if it's not a page or post, or if both options are disabled
+		if ( false === $this->is_singular() )
+			return '';
+
+		if ( $this->is_front_page() ) {
+			// If it's the frontpage, but the option is disabled, don't do anything.
+			if ( ! $this->get_option( 'home_modify_time' ) )
+				return '';
+		} else {
+			// If it's a post, but the option is disabled, don't do anyhting.
+			if ( $this->is_single() && ! $this->get_option( 'post_modify_time' ) )
+				return '';
+
+			// If it's a page, but the option is disabled, don't do anything.
+			if ( $this->is_page() && ! $this->get_option( 'page_modify_time' ) )
+				return '';
+		}
+
+		//* @since 2.3.0
+		$time = (string) apply_filters( 'the_seo_framework_modifiedtime_output', '', $this->get_the_real_ID() );
+
+		if ( empty( $time ) )
+			$time = the_modified_date( 'Y-m-d', '', '', false );
+
+		if ( $time ) {
+			$output = '<meta property="article:modified_time" content="' . esc_attr( $time ) . '" />' . "\r\n";
+
+			if ( $this->use_og_tags() )
+				$output .= '<meta property="og:updated_time" content="' . esc_attr( $time ) . '" />'. "\r\n";
+
+			return $output;
+		}
+
+		return '';
+	}
+
+	/**
+	 * Outputs canonical url
+	 *
+	 * @since 2.0.6
+	 *
+	 * @uses $this->the_url_from_cache()
+	 *
+	 * @return string canonical url meta
+	 */
+	public function canonical() {
+
+		/**
+		 * Applies filters the_seo_framework_output_canonical : Don't output canonical if false.
+		 * @since 2.4.2
+		 */
+		if ( ! apply_filters( 'the_seo_framework_output_canonical', true, $this->get_the_real_ID() ) )
+			return;
+
+		/**
+		 * @todo see if canonical URL is correct on '' permalink structure.
+		 * @priority high 2.6.1
+		 */
+		if ( '' === $this->permalink_structure() || $this->is_404() )
+			return;
+
+		return '<link rel="canonical" href="' . esc_attr( $this->the_url_from_cache() ) . '" />' . "\r\n";
+	}
+
+	/**
+	 * LD+JSON helper output
+	 *
+	 * @uses $this->render_ld_json_scripts()
+	 *
+	 * @since 1.2.0
+	 * @return string $json LD+json helpers in header on front page.
+	 */
+	public function ld_json() {
+
+		//* Check for LD+JSON compat
+		if ( $this->has_json_ld_plugin() || $this->is_search() || $this->is_404() )
+			return;
+
+		/**
+		 * Applies filters 'the_seo_framework_ldjson_scripts' : string
+		 * @since 2.6.0
+		 */
+		$json = (string) apply_filters( 'the_seo_framework_ldjson_scripts', $this->render_ld_json_scripts(), $this->get_the_real_ID() );
+
+		return $json;
+	}
+
+	/**
+	 * Outputs Google Site Verification code
+	 *
+	 * @since 2.2.4
+	 *
+	 * @return string|null google verification code
+	 */
+	public function google_site_output() {
+
+		/**
+		 * Applies filters 'the_seo_framework_googlesite_output' : string
+		 * @since 2.6.0
+		 */
+		$code = (string) apply_filters( 'the_seo_framework_googlesite_output', $this->get_option( 'google_verification' ), $this->get_the_real_ID() );
+
+		if ( empty( $code ) )
+			return '';
+
+		return '<meta name="google-site-verification" content="' . esc_attr( $code ) . '" />' . "\r\n";
+	}
+
+	/**
+	 * Outputs Bing Site Verification code
+	 *
+	 * @since 2.2.4
+	 *
+	 * @return string|null Bing Webmaster code
+	 */
+	public function bing_site_output() {
+
+		/**
+		 * Applies filters 'the_seo_framework_bingsite_output' : string
+		 * @since 2.6.0
+		 */
+		$code = (string) apply_filters( 'the_seo_framework_bingsite_output', $this->get_option( 'bing_verification' ), $this->get_the_real_ID() );
+
+		if ( empty( $code ) )
+			return '';
+
+		return '<meta name="msvalidate.01" content="' . esc_attr( $code ) . '" />' . "\r\n";
+	}
+
+	/**
+	 * Outputs Yandex Site Verification code
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return string|null Yandex Webmaster code
+	 */
+	public function yandex_site_output() {
+
+		/**
+		 * Applies filters 'the_seo_framework_yandexsite_output' : string
+		 * @since 2.6.0
+		 */
+		$code = (string) apply_filters( 'the_seo_framework_yandexsite_output', $this->get_option( 'yandex_verification' ), $this->get_the_real_ID() );
+
+		if ( empty( $code ) )
+			return '';
+
+		return '<meta name="yandex-verification" content="' . esc_attr( $code ) . '" />' . "\r\n";
+	}
+
+	/**
+	 * Outputs Bing Site Verification code
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return string|null Bing Webmaster code
+	 */
+	public function pint_site_output() {
+
+		/**
+		 * Applies filters 'the_seo_framework_pintsite_output' : string
+		 * @since 2.6.0
+		 */
+		$code = (string) apply_filters( 'the_seo_framework_pintsite_output', $this->get_option( 'pint_verification' ), $this->get_the_real_ID() );
+
+		if ( empty( $code ) )
+			return '';
+
+		return '<meta name="p:domain_verify" content="' . esc_attr( $code ) . '" />' . "\r\n";
+	}
+
+	/**
+	 * Output robots meta tags
+	 *
+	 * @since 2.0.0
+	 *
+	 * @return null Return early if blog is not public.
+	 */
+	public function robots() {
+
+		//* Don't do anything if the blog isn't set to public.
+		if ( false === $this->is_blog_public() )
+			return '';
+
+		/**
+		 * Applies filters 'the_seo_framework_robots_meta' : array
+		 * @since 2.6.0
+		 */
+		$meta = (array) apply_filters( 'the_seo_framework_robots_meta', $this->robots_meta(), $this->get_the_real_ID() );
+
+		//* Add meta if any exist
+		if ( $meta )
+			return sprintf( '<meta name="robots" content="%s" />' . "\r\n", implode( ',', $meta ) );
+
+		 return '';
+	}
+
+	/**
+	 * Outputs favicon urls
+	 *
+	 * @since 2.2.1
+	 *
+	 * @uses $this->site_icon()
+	 *
+	 * @return string icon links.
+	 * @TODO Make this work for older wp versions. i.e. add upload area for wp 4.2.99999 and lower
+	 * @TODO Make this work in the first place
+	 * @ignore
+	 * @access private
+	 */
+	public function favicon() {
+
+		if ( $this->wp_version( '4.2.999', '<=' ) ) {
+			$output = '<link rel="icon" type="image/x-icon" href="' . esc_url( $this->site_icon( 16 ) ) . '" sizes="16x16" />' . "\r\n";
+			$output .= '<link rel="icon" type="image/x-icon" href="' . esc_url( $this->site_icon( 192 ) ) . '" sizes="192x192" />' . "\r\n";
+			$output .= '<link rel="apple-touch-icon-precomposed" href="' . esc_url( $this->site_icon( 180 ) ) . '" />' . "\r\n";
+			$output .= '<link rel="msapplication-TileImage" href="' . esc_url( $this->site_icon( 270 ) ) . '" />' . "\r\n";
+
+			return $output;
+		}
+
+		return '';
+	}
+
+	/**
+	 * Outputs shortlink meta tag
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses $this->get_shortlink()
+	 *
+	 * @return string|null shortlink url meta
+	 */
+	public function shortlink() {
+
+		/**
+		 * Applies filters 'the_seo_framework_shortlink_output' : array
+		 * @since 2.6.0
+		 */
+		$url = (string) apply_filters( 'the_seo_framework_shortlink_output', $this->get_shortlink(), $this->get_the_real_ID() );
+
+		if ( $url )
+			return sprintf( '<link rel="shortlink" href="%s" />' . "\r\n", $url );
+
+		return '';
+	}
+
+	/**
+	 * Outputs paged urls meta tag
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses $this->get_paged_url()
+	 *
+	 * @return string
+	 */
+	public function paged_urls() {
+
+		$id = $this->get_the_real_ID();
+
+		/**
+		 * Applies filters 'the_seo_framework_paged_url_output' : array
+		 * @since 2.6.0
+		 */
+		$next = (string) apply_filters( 'the_seo_framework_paged_url_output_next', $this->get_paged_url( 'next' ), $id );
+
+		/**
+		 * Applies filters 'the_seo_framework_paged_url_output' : array
+		 * @since 2.6.0
+		 */
+		$prev = (string) apply_filters( 'the_seo_framework_paged_url_output_prev', $this->get_paged_url( 'prev' ), $id );
+
+		$output = '';
+
+		if ( $prev )
+			$output .= sprintf( '<link rel="prev" href="%s" />' . "\r\n", $prev );
+
+		if ( $next )
+			$output .= sprintf( '<link rel="next" href="%s" />' . "\r\n", $next );
+
+		return $output;
+	}
+
+	/**
+	 * Whether we can use Open Graph tags.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @return bool
+	 */
+	public function use_og_tags() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		return $cache = $this->is_option_checked( 'og_tags' );
+	}
+
+	/**
+	 * Whether we can use Facebook tags.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @return bool
+	 */
+	public function use_facebook_tags() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		return $cache = $this->is_option_checked( 'facebook_tags' );
+	}
+
+	/**
+	 * Whether we can use Twitter tags.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @return bool
+	 */
+	public function use_twitter_tags() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		return $cache = $this->is_option_checked( 'twitter_tags' );
+	}
+
+	/**
+	 * Whether we can use Google+ tags.
+	 *
+	 * @since 2.6.0
+	 * @staticvar bool $cache
+	 *
+	 * @return bool
+	 */
+	public function use_googleplus_tags() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		return $cache = $this->is_option_checked( 'googleplus_tags' );
+	}
+
+}
Index: inc/classes/sanitize.class.php
===================================================================
--- inc/classes/sanitize.class.php	(revision 1413572)
+++ inc/classes/sanitize.class.php	(working copy)
@@ -1,997 +1,977 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Sanitize
- *
- * Sanitizes strings/arrays within the plugin.
- *
- * @since 2.2.4
- */
-class AutoDescription_Sanitize extends AutoDescription_Adminpages {
-
-	/**
-	 * Constructor, load parent constructor
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		/**
-		 * Sanitizes Site options
-		 * @see siteoptions.class.php
-		 */
-		add_action( 'admin_init', array( $this, 'sanitizer_filters' ) );
-	}
-
-	/**
-	 * Register each of the settings with a sanitization filter type.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses autodescription_add_option_filter() Assign filter to array of settings.
-	 *
-	 * @see AutoDescription_Sanitize::add_filter() Add sanitization filters to options.
-	 */
-	public function sanitizer_filters() {
-		//* If this page doesn't store settings, no need to sanitize them
-		if ( ! $this->settings_field )
-			return;
-
-		/**
-		 * If this page doesn't parse the site options,
-		 * There's no need to filter them on each request.
-		 *
-		 * Reverse call for something we want in our POST.
-		 *
-		 * @since 2.2.9
-		 */
-		if ( ! isset( $_POST ) || empty( $_POST ) || ! isset( $_POST[THE_SEO_FRAMEWORK_SITE_OPTIONS] ) || ! is_array( $_POST[THE_SEO_FRAMEWORK_SITE_OPTIONS] ) )
-			return;
-
-		$this->autodescription_add_option_filter(
-			's_title_separator',
-			$this->settings_field,
-			array(
-				'title_seperator', // NOTE: Typo
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_description_separator',
-			$this->settings_field,
-			array(
-				'description_separator',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_description',
-			$this->settings_field,
-			array(
-				'homepage_description',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_title',
-			$this->settings_field,
-			array(
-				'homepage_title',
-				'homepage_title_tagline',
-
-				'knowledge_name',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_knowledge_type',
-			$this->settings_field,
-			array(
-				'knowledge_person',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_left_right',
-			$this->settings_field,
-			array(
-				'title_location',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_left_right_home',
-			$this->settings_field,
-			array(
-				'home_title_location',
-			)
-		);
-		$this->autodescription_add_option_filter(
-			's_one_zero',
-			$this->settings_field,
-			array(
-				'title_rem_additions',
-
-				'description_blogname',
-
-				'noodp',
-				'noydir',
-
-				'category_noindex',
-				'tag_noindex',
-				'author_noindex',
-				'date_noindex',
-				'search_noindex',
-				'attachment_noindex',
-				'site_noindex',
-
-				'category_nofollow',
-				'tag_nofollow',
-				'author_nofollow',
-				'date_nofollow',
-				'search_nofollow',
-				'attachment_nofollow',
-				'site_nofollow',
-
-				'category_noarchive',
-				'tag_noarchive',
-				'author_noarchive',
-				'date_noarchive',
-				'search_noarchive',
-				'attachment_noarchive',
-				'site_noarchive',
-
-				'paged_noindex',
-
-				'homepage_noindex',
-				'homepage_nofollow',
-				'homepage_noarchive',
-
-				'homepage_tagline',
-
-				'shortlink_tag',
-
-				'prev_next_posts',
-				'prev_next_archives',
-
-				'og_tags',
-				'facebook_tags',
-				'twitter_tags',
-
-				'post_publish_time',
-				'post_modify_time',
-
-				'page_publish_time',
-				'page_modify_time',
-
-				'home_modify_time',
-				'home_publish_time',
-
-				'noodp',
-				'noydir',
-
-				'knowledge_logo',
-
-				'sitemaps_robots',
-				'ping_google',
-				'ping_bing',
-				'ping_yahoo',
-
-				'excerpt_the_feed',
-				'source_the_feed',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_absint',
-			$this->settings_field,
-			array(
-			//	'home_author', @TODO
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_no_html',
-			$this->settings_field,
-			array(
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_no_html_space',
-			$this->settings_field,
-			array(
-				'facebook_appid',
-
-				'google_verification',
-				'bing_verification',
-				'pint_verification',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_url',
-			$this->settings_field,
-			array(
-				'facebook_publisher',
-				'facebook_author',
-
-				'knowledge_facebook',
-				'knowledge_twitter',
-				'knowledge_gplus',
-				'knowledge_instagram',
-				'knowledge_youtube',
-			//	'knowledge_myspace',
-				'knowledge_pinterest',
-				'knowledge_soundcloud',
-				'knowledge_tumblr',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_url_query',
-			$this->settings_field,
-			array(
-				'knowledge_linkedin',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_twitter_name',
-			$this->settings_field,
-			array(
-				'twitter_site',
-				'twitter_creator',
-			)
-		);
-
-		$this->autodescription_add_option_filter(
-			's_twitter_card',
-			$this->settings_field,
-			array(
-				'twitter_card',
-			)
-		);
-
-		//* Special action filter.
-		$this->autodescription_add_option_filter(
-			's_one_zero_flush_rewrite',
-			$this->settings_field,
-			array(
-				'sitemaps_output',
-			)
-		);
-
-		//* Special action filter.
-		$this->autodescription_add_option_filter(
-			's_one_zero_flush_sitemap',
-			$this->settings_field,
-			array(
-				'sitemaps_modified',
-			)
-		);
-
-	}
-
-	/**
-	 * Registers option sanitation filter
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $filter The filter to call (see AutoDescription_Siteoptions::$available_filters for options)
-	 * @param string $option The WordPress option name
-	 * @param string|array $suboption Optional. The suboption or suboptions you want to filter
-	 *
-	 * @return true
-	 */
-	public function autodescription_add_option_filter( $filter, $option, $suboption = null ) {
-		return $this->add_filter( $filter, $option, $suboption );
-	}
-
-	/**
-	 * Add sanitization filters to options.
-	 *
-	 * Associates a sanitization filter to each option (or sub options if they
-	 * exist) before adding a reference to run the option through that
-	 * sanitizer at the right time.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $filter Sanitization filter type
-	 * @param string $option Option key
-	 * @param array|string $suboption Optional. Suboption key
-	 * @return boolean Returns true when complete
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	public function add_filter( $filter, $option, $suboption = null ) {
-
-		if ( is_array( $suboption ) ) {
-			foreach ( $suboption as $so ) {
-				$this->options[$option][$so] = $filter;
-			}
-		} else if ( is_null( $suboption ) ) {
-			$this->options[$option] = $filter;
-		} else {
-			$this->options[$option][$suboption] = $filter;
-		}
-
-		add_filter( 'sanitize_option_' . $option, array( $this, 'sanitize' ), 10, 2 );
-
-		return true;
-	}
-
-	/**
-	 * Sanitize a value, via the sanitization filter type associated with an option.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param mixed $new_value New value
-	 * @param string $option Name of the option
-	 * @return mixed Filtered, or unfiltered value
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	public function sanitize( $new_value, $option ) {
-
-		if ( ! isset( $this->options[$option] ) ) {
-			//* We are not filtering this option at all
-			return $new_value;
-		} else if ( is_string( $this->options[$option] ) ) {
-			//* Single option value
-			return $this->do_filter( $this->options[$option], $new_value, get_option( $option ) );
-		} else if ( is_array( $this->options[$option] ) ) {
-			//* Array of suboption values to loop through
-			$old_value = get_option( $option );
-			foreach ( $this->options[$option] as $suboption => $filter ) {
-				$old_value[$suboption] = isset( $old_value[$suboption] ) ? $old_value[$suboption] : '';
-				$new_value[$suboption] = isset( $new_value[$suboption] ) ? $new_value[$suboption] : '';
-				$new_value[$suboption] = $this->do_filter( $filter, $new_value[$suboption], $old_value[$suboption] );
-			}
-			return $new_value;
-		}
-
-		//* Should never hit this, but:
-		return $new_value;
-	}
-
-	/**
-	 * Checks sanitization filter exists, and if so, passes the value through it.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $filter Sanitization filter type
-	 * @param string $new_value New value
-	 * @param string $old_value Previous value
-	 * @return mixed Returns filtered value, or submitted value if value is
-	 * unfiltered.
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	protected function do_filter( $filter, $new_value, $old_value ) {
-
-		$available_filters = $this->get_available_filters();
-
-		if ( ! $this->in_array( $filter, array_keys( $available_filters ) ) )
-			return $new_value;
-
-		return call_user_func( $available_filters[$filter], $new_value, $old_value );
-	}
-
-	/**
-	 * Return array of known sanitization filter types.
-	 *
-	 * Array can be filtered via 'the_seo_framework_available_sanitizer_filters'
-	 * to let themes and other plugins add their own sanitization filters.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return array Array with keys of sanitization types, and values of the
-	 * filter function name as a callback
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	protected function get_available_filters() {
-
-		$default_filters = array(
-			's_left_right' 				=> array( $this, 's_left_right' 			),
-			's_left_right_home' 		=> array( $this, 's_left_right_home' 		),
-			's_title_separator' 		=> array( $this, 's_title_separator' 		),
-			's_description_separator' 	=> array( $this, 's_description_separator' 	),
-			's_description' 			=> array( $this, 's_description' 			),
-			's_title' 					=> array( $this, 's_title' 					),
-			's_knowledge_type'			=> array( $this, 's_knowledge_type'			),
-			's_one_zero' 				=> array( $this, 's_one_zero' 				),
-			's_one_zero_flush_rewrite'	=> array( $this, 's_one_zero_flush_rewrite'	),
-			's_one_zero_flush_sitemap'	=> array( $this, 's_one_zero_flush_sitemap'	),
-			's_no_html' 				=> array( $this, 's_no_html' 				),
-			's_no_html_space' 			=> array( $this, 's_no_html_space' 			),
-			's_absint' 					=> array( $this, 's_absint' 				),
-			's_safe_html' 				=> array( $this, 's_safe_html' 				),
-			's_url' 					=> array( $this, 's_url' 					),
-			's_url_query' 				=> array( $this, 's_url_query' 				),
-			's_twitter_name' 			=> array( $this, 's_twitter_name' 			),
-			's_twitter_card' 			=> array( $this, 's_twitter_card' 			),
-		);
-
-		/**
-		 * Filter the available sanitization filter types.
-		 *
-		 * @since 2.2.2
-		 *
-		 * @param array $default_filters Array with keys of sanitization types, and values of the filter function name as a callback
-		 *
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		return (array) apply_filters( 'the_seo_framework_available_sanitizer_filters', $default_filters );
-	}
-
-	/**
-	 * Returns the title separator value string.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param mixed $new_value Should be identical to any of the $this->title_separator values
-	 * @return string Title separator option
-	 */
-	protected function s_title_separator( $new_value ) {
-
-		$title_separator = $this->title_separator;
-
-		$key = array_key_exists( $new_value, $title_separator );
-
-		if ( $key )
-			return (string) $new_value;
-
-		$previous = $this->get_field_value( 'title_seperator' ); // NOTE: Typo
-
-		//* Fallback to default if empty.
-		if ( empty( $previous ) )
-			$previous = $this->get_default_option( 'title_seperator' );
-
-		return (string) $previous;
-	}
-
-	/**
-	 * Returns the description separator value string.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param mixed $new_value Should be identical to any of the $this->description_separator values
-	 * @return string Description separator option
-	 */
-	protected function s_description_separator( $new_value ) {
-
-		//* Use the same as title_separator
-		$description_separator = $this->title_separator;
-
-		$key = array_key_exists( $new_value, $description_separator );
-
-		if ( $key )
-			return (string) $new_value;
-
-		$previous = $this->get_field_value( 'description_separator' );
-
-		//* Fallback to default if empty.
-		if ( empty( $previous ) )
-			$previous = $this->get_default_option( 'description_separator' );
-
-		return (string) $previous;
-	}
-
-	/**
-	 * Returns a one-line sanitized description
-	 *
-	 * @since 2.5.0
-	 *
-	 * @param string $new_value The Description
-	 * @return string One line sanitized description.
-	 */
-	protected function s_description( $new_value ) {
-
-		$description = str_replace( array( "\r\n", "\r", "\n" ), "\n", $new_value );
-
-		$lines = explode( "\n", $description );
-		$new_lines = array();
-
-		//* Remove line breaks
-		foreach ( $lines as $i => $line ) {
-			//* Don't add empty lines or paragraphs
-			if ( ! empty( $line ) && '&nbsp;' !== $line )
-				$new_lines[] = trim( $line ) . ' ';
-		}
-
-		$output = trim( implode( $new_lines ) );
-
-		return (string) strip_tags( $output );
-	}
-
-	/**
-	 * Returns a sanitized and trimmed title.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param string $new_value The Title
-	 *
-	 * @return string Sanitized and trimmed title.
-	 */
-	protected function s_title( $new_value ) {
-
-		$title = esc_html( $new_value );
-		$title = trim( $title );
-
-		return (string) strip_tags( $title );
-	}
-
-	/**
-	 * Returns the knowledge type value string.
-	 *
-	 * @since 2.2.8
-	 *
-	 * @param mixed $new_value Should be identical to any of the $person_organization values
-	 * @return string title Knowledge type option
-	 */
-	protected function s_knowledge_type( $new_value ) {
-
-		$person_organization = array( 'person', 'organization' );
-
-		$key = array_key_exists( $new_value, $person_organization );
-
-		if ( $key )
-			return (string) $new_value;
-
-		static $home_id = null;
-
-		if ( ! isset( $home_id ) ) {
-			// $home_id as false will flush blog front-page.
-			$home_id = 'page' == get_option( 'show_on_front' ) ? get_option( 'page_on_front' ) : false;
-			$this->delete_ld_json_transient( $home_id );
-		}
-
-		$previous = $this->get_field_value( 'knowledge_type' );
-
-		return (string) $previous;
-	}
-
-	/**
-	 * Returns left or right, for the separator location.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param mixed $new_value Should ideally be a string 'left' or 'right' passed in
-	 * @return string left or right
-	 */
-	protected function s_left_right( $new_value ) {
-
-		if ( (string) $new_value == 'left' || (string) $new_value == 'right' )
-			return (string) $new_value;
-
-		$previous = $this->get_field_value( 'title_location' );
-
-		//* Fallback if previous is also empty.
-		if ( empty( $previous ) )
-			$previous = $this->get_default_option( 'title_location' );
-
-		return (string) $previous;
-	}
-
-	/**
-	 * Returns left or right, for the home separator location.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param mixed $new_value Should ideally be a string 'left' or 'right' passed in
-	 * @return string left or right
-	 */
-	protected function s_left_right_home( $new_value ) {
-
-		if ( (string) $new_value == 'left' || (string) $new_value == 'right' )
-			return (string) $new_value;
-
-		$previous = $this->get_field_value( 'home_title_location' );
-
-		//* Fallback if previous is also empty.
-		if ( empty( $previous ) )
-			$previous = $this->get_default_option( 'home_title_location' );
-
-		return (string) $previous;
-	}
-
-	/**
-	 * Returns a 1 or 0, for all truthy / falsy values.
-	 *
-	 * Uses double casting. First, we cast to bool, then to integer.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param mixed $new_value Should ideally be a 1 or 0 integer passed in
-	 * @return integer 1 or 0.
-	 */
-	protected function s_one_zero( $new_value ) {
-		return (int) (bool) $new_value;
-	}
-
-	/**
-	 * Returns a 1 or 0, for all truthy / falsy values.
-	 *
-	 * Uses double casting. First, we cast to bool, then to integer.
-	 *
-	 * Also flushes rewrite rules.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @param mixed $new_value Should ideally be a 1 or 0 integer passed in
-	 * @return integer 1 or 0.
-	 */
-	protected function s_one_zero_flush_rewrite( $new_value ) {
-
-		/**
-		 * Don't call functions anymore. Although it was after admin_init.
-		 * It was too early for some plugins.
-		 *
-		 * @since 2.3.0
-		 */
-		if ( (int) (bool) $new_value ) {
-			$this->enqueue_rewrite_activate( true );
-		} else {
-			$this->enqueue_rewrite_deactivate( true );
-		}
-
-		$this->wpmudev_domainmap_flush_fix( true );
-
-		return (int) (bool) $new_value;
-	}
-
-	/**
-	 * Returns a 1 or 0, for all truthy / falsy values.
-	 *
-	 * Uses double casting. First, we cast to bool, then to integer.
-	 *
-	 * Also flushes the sitemap.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @param mixed $new_value Should ideally be a 1 or 0 integer passed in
-	 * @return integer 1 or 0.
-	 */
-	protected function s_one_zero_flush_sitemap( $new_value ) {
-		static $flushed = null;
-
-		if ( ! isset( $flushed ) )
-			$this->delete_sitemap_transient();
-
-		$flushed = true;
-
-		return (int) (bool) $new_value;
-	}
-
-	/**
-	 * Returns a positive integer value.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param mixed $new_value Should ideally be a positive integer.
-	 * @return integer Positive integer.
-	 */
-	protected function s_absint( $new_value ) {
-		return absint( $new_value );
-	}
-
-	/**
-	 * Removes HTML tags from string.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $new_value String, possibly with HTML in it
-	 * @return string String without HTML in it.
-	 */
-	protected function s_no_html( $new_value ) {
-		return strip_tags( $new_value );
-	}
-
-	/**
-	 * Removes HTML tags and line breaks from string.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param string $new_value String, possibly with HTML and spaces in it
-	 * @return string String without HTML and breaks in it.
-	 */
-	protected function s_no_html_space( $new_value ) {
-		return str_replace( ' ', '', strip_tags( $new_value ) );
-	}
-
-	/**
-	 * Makes URLs safe
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $new_value String, a URL, possibly unsafe
-	 *
-	 * @return string String a safe URL without Query Arguments.
-	 */
-	protected function s_url( $new_value ) {
-
-		static $home_id = null;
-
-		if ( ! isset( $home_id ) ) {
-			// $home_id as false will flush blog front-page.
-			$home_id = 'page' == get_option( 'show_on_front' ) ? get_option( 'page_on_front' ) : false;
-			$this->delete_ld_json_transient( $home_id );
-		}
-
-		/**
-		 * Remove query strings
-		 */
-		$pattern 	= 	'/'
-					.	'(\?|\&)' 	// 1: ? or &
-					. 	'([^=]+)'	// 2: text until =
-					.	'\='		// =
-					.	'([^&]+)'	// 3: until & if found
-					.	'/s'
-					;
-
-		$url = preg_replace( $pattern, '', $new_value );
-
-		return esc_url_raw( $url );
-	}
-
-	/**
-	 * Makes URLs safe
-	 *
-	 * @since 2.2.8
-	 *
-	 * @param string $new_value String, a URL, possibly unsafe
-	 *
-	 * @return string String a safe URL with Query Arguments.
-	 */
-	protected function s_url_query( $new_value ) {
-		static $home_id = null;
-
-		if ( ! isset( $home_id ) ) {
-			// $home_id as false will flush blog front-page.
-			$home_id = 'page' == get_option( 'show_on_front' ) ? get_option( 'page_on_front' ) : false;
-			$this->delete_ld_json_transient( $home_id );
-		}
-
-		return esc_url_raw( $new_value );
-	}
-
-	/**
-	 * Makes Email Addresses safe, via sanitize_email()
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $new_value String, an email address, possibly unsafe
-	 * @return string String a safe email address
-	 */
-	protected function s_email_address( $new_value ) {
-		return sanitize_email( $new_value );
-	}
-
-	/**
-	 * Removes unsafe HTML tags, via wp_kses_post().
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $new_value String with potentially unsafe HTML in it
-	 * @return string String with only safe HTML in it
-	 */
-	protected function s_safe_html( $new_value ) {
-		return wp_kses_post( $new_value );
-	}
-
-	/**
-	 * Parses Twitter name and site. Adds @ if it wasn't supplied.
-	 * Parses URL to path and adds @ if URL is given.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @param string $new_value String with potentially wrong Twitter username
-	 * @return string String with 'correct' Twitter username
-	 */
-	protected function s_twitter_name( $new_value ) {
-
-		if ( empty( $new_value ) )
-			return (string) $new_value;
-
-		$profile = trim(strip_tags( $new_value ));
-
-		if ( substr( $profile, 0, 4 ) === 'http' ) {
-			$path = str_replace( '/', '', parse_url( $profile, PHP_URL_PATH ) );
-			$profile = ! empty( $path ) ? '@' . $path : '';
-
-			return (string) $profile;
-		}
-
-		if ( substr( $profile, 0, 1 ) !== '@' ) {
-			$profile = '@' . $profile;
-		}
-
-		return (string) $profile;
-	}
-
-	/**
-	 * Parses Twitter Card radio input. Fills in default if incorrect value is supplied.
-	 * Falls back to previous value if empty. If previous value is empty if will go to default.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param string $new_value String with potentially wrong option value.
-	 * @return string Sanitized twitter card type.
-	 */
-	protected function s_twitter_card( $new_value ) {
-
-		//* Fetch Twitter card array.
-		$card = $this->twitter_card;
-
-		$key = array_key_exists( $new_value, $card );
-
-		if ( $key )
-			return (string) $new_value;
-
-		$previous = $this->get_field_value( 'twitter_card' );
-
-		if ( empty( $previous ) )
-			$previous = $this->get_default_option( 'twitter_card' );
-
-		return (string) $previous;
-	}
-
-	/**
-	 * Sanitize the Redirect URL
-	 *
-	 * @since 2.2.4
-	 *
-	 * @param string $new_value String with potentially unwanted redirect url
-	 *
-	 * @return string The Sanitized Redirect URL
-	 */
-	protected function s_redirect_url( $new_value ) {
-
-		$url = strip_tags( $new_value );
-
-		if ( ! empty( $url ) ) {
-
-			/**
-			 * New filter.
-			 * @since 2.3.0
-			 *
-			 * Removed previous filter.
-			 * @since 2.3.5
-			 */
-			$allow_external = (bool) apply_filters( 'the_seo_framework_allow_external_redirect', true );
-
-			/**
-			 * Sanitize the redirect URL to only a relative link and removes first slash
-			 *
-			 * @requires WP 4.1.0 and up to prevent adding upon itself.
-			 */
-			if ( ! $allow_external )
-				$url = ltrim( wp_make_link_relative( $url ), '/' );
-
-			//* URL pattern without path
-			$pattern 	= 	'/'
-						.	'((((http)(s)?)?)\:)?' 	// 1: maybe http: https:
-						. 	'(\/\/)?'				// 2: maybe slash slash
-						. 	'((www.)?)'				// 3: maybe www.
-						.	'(.*\.[a-zA-Z0-9]*)'	// 4: any legal domain with tld
-						.	'(?:\/)'				// 5: trailing slash
-						.	'/'
-						;
-
-			//* If link is relative, make it full again
-			if ( preg_match( $pattern, $url ) !== 1 ) {
-
-				//* The url is a relative path
-				$path = $url;
-
-				$ismapped = '0';
-
-				//* Do some extra work on domain mapping
-				if ( $this->is_domainmapping_active() ) {
-					global $wpdb,$blog_id;
-
-					$mapped_key = 'wpmudev_mapped_domain_' . $blog_id;
-
-					//* Check if the domain is mapped
-					$mapped_domain = $this->object_cache_get( $mapped_key );
-					if ( false === $mapped_domain ) {
-						$mapped_domain = $wpdb->get_var( $wpdb->prepare( "SELECT domain FROM {$wpdb->base_prefix}domain_mapping WHERE blog_id = %d", $blog_id ) );
-						$this->object_cache_set( $mapped_key, $mapped_domain, 3600 );
-					}
-
-					if ( ! empty( $mapped_domain ) ) {
-						//* Set that the domain is mapped
-						$ismapped = '1';
-
-						$scheme_key = 'wpmudev_mapped_scheme_' . $blog_id;
-
-						//* Fetch scheme
-						$mappedscheme = $this->object_cache_get( $scheme_key );
-						if ( false === $mappedscheme ) {
-							$mappedscheme = $wpdb->get_var( $wpdb->prepare( "SELECT scheme FROM {$wpdb->base_prefix}domain_mapping WHERE blog_id = %d", $blog_id ) );
-							$this->object_cache_set( $scheme_key, $mappedscheme, 3600 );
-						}
-
-						if ( $mappedscheme === '1' ) {
-							$scheme_full = 'https://';
-							$scheme = 'https';
-						} else {
-							$scheme_full = 'http://';
-							$scheme = 'http';
-						}
-
-						// Put it all together
-						$url = trailingslashit( $scheme_full . $mapped_domain ) . $path;
-					}
-				}
-
-				//* Non-mapped URL
-				if ( $ismapped !== '1' ) {
-					$url = home_url( add_query_arg( array(), $path ) );
-					$scheme = is_ssl() ? 'https' : 'http';
-				}
-
-				$scheme = ! empty( $scheme ) ? $scheme : '';
-
-				$url = esc_url_raw( $url, $scheme );
-
-			}
-		}
-
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		$noqueries = (bool) apply_filters( 'the_seo_framework_301_noqueries', true );
-
-		/**
-		 * Remove queries from the URL
-		 *
-		 * Returns plain home url if $allow_external is set to false and only a query has been supplied
-		 * But that's okay. The url was rogue anyway :)
-		 */
-		if ( $noqueries ) {
-			/**
-			 * Remove query args
-			 *
-			 * @see AutoDescription_Sanitize::s_url
-			 * @since 2.2.4
-			 */
-			$new_value = $this->s_url( $url );
-
-		} else {
-			/**
-			 * Allow query string parameters. Warning: don't trust anyone :)
-			 * XSS safe.
-			 */
-			$new_value = esc_url_raw( $url );
-		}
-
-		//* Save url
-		return $new_value;
-	}
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Sanitize
+ *
+ * Sanitizes strings/arrays within the plugin.
+ *
+ * @since 2.2.4
+ */
+class AutoDescription_Sanitize extends AutoDescription_Adminpages {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		/**
+		 * Sanitizes Site options
+		 * @see siteoptions.class.php
+		 */
+		add_action( 'admin_init', array( $this, 'sanitizer_filters' ) );
+	}
+
+	/**
+	 * Register each of the settings with a sanitization filter type.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses autodescription_add_option_filter() Assign filter to array of settings.
+	 *
+	 * @see AutoDescription_Sanitize::add_filter() Add sanitization filters to options.
+	 */
+	public function sanitizer_filters() {
+		//* If this page doesn't store settings, no need to sanitize them
+		if ( ! $this->settings_field )
+			return;
+
+		/**
+		 * If this page doesn't parse the site options,
+		 * There's no need to filter them on each request.
+		 *
+		 * Reverse call for something we want in our POST.
+		 *
+		 * @since 2.2.9
+		 */
+		if ( ! isset( $_POST ) || empty( $_POST ) || ! isset( $_POST[THE_SEO_FRAMEWORK_SITE_OPTIONS] ) || ! is_array( $_POST[THE_SEO_FRAMEWORK_SITE_OPTIONS] ) )
+			return;
+
+		//* Update hidden options.
+		$this->update_hidden_options_to_default();
+
+		$this->autodescription_add_option_filter(
+			's_title_separator',
+			$this->settings_field,
+			array(
+				'title_seperator', // NOTE: Typo
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_description_separator',
+			$this->settings_field,
+			array(
+				'description_separator',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_description',
+			$this->settings_field,
+			array(
+				'homepage_description',
+				'description_custom',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_title',
+			$this->settings_field,
+			array(
+				'homepage_title',
+				'homepage_title_tagline',
+
+				'knowledge_name',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_knowledge_type',
+			$this->settings_field,
+			array(
+				'knowledge_type',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_left_right',
+			$this->settings_field,
+			array(
+				'title_location',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_left_right_home',
+			$this->settings_field,
+			array(
+				'home_title_location',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_one_zero',
+			$this->settings_field,
+			array(
+				'title_rem_additions',
+				'title_rem_prefixes',
+
+				'description_additions',
+				'description_blogname',
+
+				'noodp',
+				'noydir',
+
+				'category_noindex',
+				'tag_noindex',
+				'author_noindex',
+				'date_noindex',
+				'search_noindex',
+				'attachment_noindex',
+				'site_noindex',
+
+				'category_nofollow',
+				'tag_nofollow',
+				'author_nofollow',
+				'date_nofollow',
+				'search_nofollow',
+				'attachment_nofollow',
+				'site_nofollow',
+
+				'category_noarchive',
+				'tag_noarchive',
+				'author_noarchive',
+				'date_noarchive',
+				'search_noarchive',
+				'attachment_noarchive',
+				'site_noarchive',
+
+				'paged_noindex',
+				'home_paged_noindex',
+
+				'homepage_noindex',
+				'homepage_nofollow',
+				'homepage_noarchive',
+
+				'homepage_tagline',
+
+				'shortlink_tag',
+
+				'prev_next_posts',
+				'prev_next_archives',
+				'prev_next_frontpage',
+
+				'og_tags',
+				'facebook_tags',
+				'twitter_tags',
+				'googleplus_tags',
+
+				'post_publish_time',
+				'post_modify_time',
+
+				'page_publish_time',
+				'page_modify_time',
+
+				'home_modify_time',
+				'home_publish_time',
+
+				'noodp',
+				'noydir',
+
+				'knowledge_logo',
+
+				'sitemaps_robots',
+				'ping_google',
+				'ping_bing',
+				'ping_yandex',
+
+				'excerpt_the_feed',
+				'source_the_feed',
+
+				'ld_json_searchbox',
+				'ld_json_sitename',
+				'ld_json_breadcrumbs',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_absint',
+			$this->settings_field,
+			array(
+			//	'home_author', @TODO
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_no_html',
+			$this->settings_field,
+			array(
+			)
+		);
+
+		/**
+		 * @todo create content="code" stripper
+		 * @priority low 2.9.0+
+		 */
+		$this->autodescription_add_option_filter(
+			's_no_html_space',
+			$this->settings_field,
+			array(
+				'facebook_appid',
+
+				'google_verification',
+				'bing_verification',
+				'yandex_verification',
+				'pint_verification',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_url',
+			$this->settings_field,
+			array(
+				'facebook_publisher',
+				'facebook_author',
+
+				'knowledge_facebook',
+				'knowledge_twitter',
+				'knowledge_gplus',
+				'knowledge_instagram',
+				'knowledge_youtube',
+			//	'knowledge_myspace',
+				'knowledge_pinterest',
+				'knowledge_soundcloud',
+				'knowledge_tumblr',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_url_query',
+			$this->settings_field,
+			array(
+				'knowledge_linkedin',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_twitter_name',
+			$this->settings_field,
+			array(
+				'twitter_site',
+				'twitter_creator',
+			)
+		);
+
+		$this->autodescription_add_option_filter(
+			's_twitter_card',
+			$this->settings_field,
+			array(
+				'twitter_card',
+			)
+		);
+
+		//* Special action filter.
+		$this->autodescription_add_option_filter(
+			's_one_zero_flush_rewrite',
+			$this->settings_field,
+			array(
+				'sitemaps_output',
+			)
+		);
+
+		//* Special action filter.
+		$this->autodescription_add_option_filter(
+			's_one_zero_flush_sitemap',
+			$this->settings_field,
+			array(
+				'sitemaps_modified',
+				'sitemap_timestamps',
+			)
+		);
+
+	}
+
+	/**
+	 * Registers option sanitation filter
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $filter The filter to call (see AutoDescription_Siteoptions::$available_filters for options)
+	 * @param string $option The WordPress option name
+	 * @param string|array $suboption Optional. The suboption or suboptions you want to filter
+	 *
+	 * @return true
+	 */
+	public function autodescription_add_option_filter( $filter, $option, $suboption = null ) {
+		return $this->add_filter( $filter, $option, $suboption );
+	}
+
+	/**
+	 * Add sanitization filters to options.
+	 *
+	 * Associates a sanitization filter to each option (or sub options if they
+	 * exist) before adding a reference to run the option through that
+	 * sanitizer at the right time.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $filter Sanitization filter type
+	 * @param string $option Option key
+	 * @param array|string $suboption Optional. Suboption key
+	 * @return boolean Returns true when complete
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	public function add_filter( $filter, $option, $suboption = null ) {
+
+		if ( is_array( $suboption ) ) {
+			foreach ( $suboption as $so ) {
+				$this->options[$option][$so] = $filter;
+			}
+		} else if ( is_null( $suboption ) ) {
+			$this->options[$option] = $filter;
+		} else {
+			$this->options[$option][$suboption] = $filter;
+		}
+
+		add_filter( 'sanitize_option_' . $option, array( $this, 'sanitize' ), 10, 2 );
+
+		return true;
+	}
+
+	/**
+	 * Sanitize a value, via the sanitization filter type associated with an option.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param mixed $new_value New value
+	 * @param string $option Name of the option
+	 * @return mixed Filtered, or unfiltered value
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	public function sanitize( $new_value, $option ) {
+
+		if ( ! isset( $this->options[$option] ) ) {
+			//* We are not filtering this option at all
+			return $new_value;
+		} else if ( is_string( $this->options[$option] ) ) {
+			//* Single option value
+			return $this->do_filter( $this->options[$option], $new_value, get_option( $option ) );
+		} else if ( is_array( $this->options[$option] ) ) {
+			//* Array of suboption values to loop through
+			$old_value = get_option( $option );
+			foreach ( $this->options[$option] as $suboption => $filter ) {
+				$old_value[$suboption] = isset( $old_value[$suboption] ) ? $old_value[$suboption] : '';
+				$new_value[$suboption] = isset( $new_value[$suboption] ) ? $new_value[$suboption] : '';
+				$new_value[$suboption] = $this->do_filter( $filter, $new_value[$suboption], $old_value[$suboption] );
+			}
+			return $new_value;
+		}
+
+		//* Should never hit this, but:
+		return $new_value;
+	}
+
+	/**
+	 * Checks sanitization filter exists, and if so, passes the value through it.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $filter Sanitization filter type
+	 * @param string $new_value New value
+	 * @param string $old_value Previous value
+	 * @return mixed Returns filtered value, or submitted value if value is
+	 * unfiltered.
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	protected function do_filter( $filter, $new_value, $old_value ) {
+
+		$available_filters = $this->get_available_filters();
+
+		if ( ! in_array( $filter, array_keys( $available_filters ) ) )
+			return $new_value;
+
+		return call_user_func( $available_filters[$filter], $new_value, $old_value );
+	}
+
+	/**
+	 * Return array of known sanitization filter types.
+	 *
+	 * Array can be filtered via 'the_seo_framework_available_sanitizer_filters'
+	 * to let themes and other plugins add their own sanitization filters.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return array Array with keys of sanitization types, and values of the
+	 * filter function name as a callback
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	protected function get_available_filters() {
+
+		$default_filters = array(
+			's_left_right' 				=> array( $this, 's_left_right' 			),
+			's_left_right_home' 		=> array( $this, 's_left_right_home' 		),
+			's_title_separator' 		=> array( $this, 's_title_separator' 		),
+			's_description_separator' 	=> array( $this, 's_description_separator' 	),
+			's_description' 			=> array( $this, 's_description' 			),
+			's_title' 					=> array( $this, 's_title' 					),
+			's_knowledge_type'			=> array( $this, 's_knowledge_type'			),
+			's_one_zero' 				=> array( $this, 's_one_zero' 				),
+			's_one_zero_flush_rewrite'	=> array( $this, 's_one_zero_flush_rewrite'	),
+			's_one_zero_flush_sitemap'	=> array( $this, 's_one_zero_flush_sitemap'	),
+			's_no_html' 				=> array( $this, 's_no_html' 				),
+			's_no_html_space' 			=> array( $this, 's_no_html_space' 			),
+			's_absint' 					=> array( $this, 's_absint' 				),
+			's_safe_html' 				=> array( $this, 's_safe_html' 				),
+			's_url' 					=> array( $this, 's_url' 					),
+			's_url_query' 				=> array( $this, 's_url_query' 				),
+			's_twitter_name' 			=> array( $this, 's_twitter_name' 			),
+			's_twitter_card' 			=> array( $this, 's_twitter_card' 			),
+		);
+
+		/**
+		 * Filter the available sanitization filter types.
+		 *
+		 * @since 2.2.2
+		 *
+		 * Applies filters the_seo_framework_available_sanitizer_filters : array
+		 * 		@param array $default_filters Array with keys of sanitization types,
+		 *		and values of the filter function name as a callback
+		 */
+		return (array) apply_filters( 'the_seo_framework_available_sanitizer_filters', $default_filters );
+	}
+
+	/**
+	 * Returns the title separator value string.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param mixed $new_value Should be identical to any of the $this->get_separator_list() values
+	 * @return string Title separator option
+	 */
+	protected function s_title_separator( $new_value ) {
+
+		$title_separator = $this->get_separator_list();
+
+		$key = array_key_exists( $new_value, $title_separator );
+
+		if ( $key )
+			return (string) $new_value;
+
+		$previous = $this->get_field_value( 'title_seperator' ); // NOTE: Typo
+
+		//* Fallback to default if empty.
+		if ( empty( $previous ) )
+			$previous = $this->get_default_option( 'title_seperator' );
+
+		return (string) $previous;
+	}
+
+	/**
+	 * Returns the description separator value string.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param mixed $new_value Should be identical to any of the $this->description_separator values
+	 * @return string Description separator option
+	 */
+	protected function s_description_separator( $new_value ) {
+
+		//* Use the same as title_separator
+		$description_separator = $this->get_separator_list();
+
+		$key = array_key_exists( $new_value, $description_separator );
+
+		if ( $key )
+			return (string) $new_value;
+
+		$previous = $this->get_field_value( 'description_separator' );
+
+		//* Fallback to default if empty.
+		if ( empty( $previous ) )
+			$previous = $this->get_default_option( 'description_separator' );
+
+		return (string) $previous;
+	}
+
+	/**
+	 * Returns a one-line sanitized description
+	 *
+	 * @since 2.5.0
+	 *
+	 * @param string $new_value The Description.
+	 *
+	 * @return string One line sanitized description.
+	 */
+	protected function s_description( $new_value ) {
+
+		$description = str_replace( array( "\r\n", "\r", "\n" ), "\n", $new_value );
+
+		$lines = explode( "\n", $description );
+		$new_lines = array();
+
+		//* Remove line breaks
+		foreach ( $lines as $i => $line ) {
+			//* Don't add empty lines or paragraphs
+			if ( $line && '&nbsp;' !== $line )
+				$new_lines[] = trim( $line ) . ' ';
+		}
+
+		$description = trim( implode( $new_lines ) );
+
+		return (string) strip_tags( $description );
+	}
+
+	/**
+	 * Returns a sanitized and trimmed title.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param string $new_value The Title
+	 *
+	 * @return string Sanitized and trimmed title.
+	 */
+	protected function s_title( $new_value ) {
+
+		$title = esc_html( $new_value );
+		$title = trim( $title );
+
+		return (string) strip_tags( $title );
+	}
+
+	/**
+	 * Returns the knowledge type value string.
+	 *
+	 * @since 2.2.8
+	 *
+	 * @param mixed $new_value Should be identical to any of the $person_organization values.
+	 *
+	 * @return string title Knowledge type option
+	 */
+	protected function s_knowledge_type( $new_value ) {
+
+		if ( 'person' === $new_value || 'organization' === $new_value )
+			return (string) $new_value;
+
+		$previous = $this->get_field_value( 'knowledge_type' );
+
+		return (string) $previous;
+	}
+
+	/**
+	 * Returns left or right, for the separator location.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param mixed $new_value Should ideally be a string 'left' or 'right' passed in.
+	 *
+	 * @return string left or right
+	 */
+	protected function s_left_right( $new_value ) {
+
+		if ( 'left' === $new_value || 'right' === $new_value )
+			return (string) $new_value;
+
+		$previous = $this->get_field_value( 'title_location' );
+
+		//* Fallback if previous is also empty.
+		if ( empty( $previous ) )
+			$previous = $this->get_default_option( 'title_location' );
+
+		return (string) $previous;
+	}
+
+	/**
+	 * Returns left or right, for the home separator location.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param mixed $new_value Should ideally be a string 'left' or 'right' passed in.
+	 *
+	 * @return string left or right
+	 */
+	protected function s_left_right_home( $new_value ) {
+
+		if ( 'left' === $new_value || 'right' === $new_value )
+			return (string) $new_value;
+
+		$previous = $this->get_field_value( 'home_title_location' );
+
+		//* Fallback if previous is also empty.
+		if ( empty( $previous ) )
+			$previous = $this->get_default_option( 'home_title_location' );
+
+		return (string) $previous;
+	}
+
+	/**
+	 * Returns a 1 or 0, for all truthy / falsy values.
+	 *
+	 * Uses double casting. First, we cast to bool, then to integer.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param mixed $new_value Should ideally be a 1 or 0 integer passed in.
+	 *
+	 * @return integer 1 or 0.
+	 */
+	protected function s_one_zero( $new_value ) {
+		return (int) (bool) $new_value;
+	}
+
+	/**
+	 * Returns a 1 or 0, for all truthy / falsy values.
+	 *
+	 * Uses double casting. First, we cast to bool, then to integer.
+	 *
+	 * Also flushes rewrite rules.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @param mixed $new_value Should ideally be a 1 or 0 integer passed in.
+	 *
+	 * @return integer 1 or 0.
+	 */
+	protected function s_one_zero_flush_rewrite( $new_value ) {
+
+		/**
+		 * Don't call functions anymore. Although it was after admin_init.
+		 * It was too early for some plugins.
+		 *
+		 * @since 2.3.0
+		 */
+		if ( (int) (bool) $new_value ) {
+			$this->enqueue_rewrite_activate( true );
+		} else {
+			$this->enqueue_rewrite_deactivate( true );
+		}
+
+		$this->wpmudev_domainmap_flush_fix( true );
+
+		return (int) (bool) $new_value;
+	}
+
+	/**
+	 * Returns a 1 or 0, for all truthy / falsy values.
+	 *
+	 * Uses double casting. First, we cast to bool, then to integer.
+	 *
+	 * Also flushes the sitemap.
+	 *
+	 * @since 2.2.9
+	 * @staticvar bool $flushed
+	 *
+	 * @param mixed $new_value Should ideally be a 1 or 0 integer passed in.
+	 *
+	 * @return integer 1 or 0.
+	 */
+	protected function s_one_zero_flush_sitemap( $new_value ) {
+
+		static $flushed = null;
+
+		if ( ! isset( $flushed ) )
+			$this->delete_sitemap_transient();
+
+		$flushed = true;
+
+		return (int) (bool) $new_value;
+	}
+
+	/**
+	 * Returns a positive integer value.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param mixed $new_value Should ideally be a positive integer.
+	 *
+	 * @return integer Positive integer.
+	 */
+	protected function s_absint( $new_value ) {
+		return absint( $new_value );
+	}
+
+	/**
+	 * Removes HTML tags from string.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $new_value String, possibly with HTML in it.
+	 *
+	 * @return string String without HTML in it.
+	 */
+	protected function s_no_html( $new_value ) {
+		return strip_tags( $new_value );
+	}
+
+	/**
+	 * Removes HTML tags and line breaks from string.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param string $new_value String, possibly with HTML and spaces in it.
+	 *
+	 * @return string String without HTML and breaks in it.
+	 */
+	protected function s_no_html_space( $new_value ) {
+		return str_replace( ' ', '', strip_tags( $new_value ) );
+	}
+
+	/**
+	 * Makes URLs safe
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $new_value String, a URL, possibly unsafe
+	 *
+	 * @return string String a safe URL without Query Arguments.
+	 */
+	protected function s_url( $new_value ) {
+
+		$this->delete_front_ld_json_transient();
+
+		/**
+		 * If queries have been tokenized, take the value before the query args.
+		 * Otherwise it's empty, so take the current value.
+		 */
+		$no_query_url = strtok( $new_value, '?' );
+		$url = $no_query_url ? $no_query_url : $new_value;
+
+		return esc_url_raw( $url );
+	}
+
+	/**
+	 * Makes URLs safe and removes query args.
+	 *
+	 * @since 2.2.8
+	 *
+	 * @param string $new_value String, a URL, possibly unsafe
+	 *
+	 * @return string String a safe URL with Query Arguments.
+	 */
+	protected function s_url_query( $new_value ) {
+
+		$this->delete_front_ld_json_transient();
+
+		return esc_url_raw( $new_value );
+	}
+
+	/**
+	 * Makes Email Addresses safe, via sanitize_email()
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $new_value String, an email address, possibly unsafe.
+	 *
+	 * @return string String a safe email address
+	 */
+	protected function s_email_address( $new_value ) {
+		return sanitize_email( $new_value );
+	}
+
+	/**
+	 * Removes unsafe HTML tags, via wp_kses_post().
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $new_value String with potentially unsafe HTML in it.
+	 *
+	 * @return string String with only safe HTML in it
+	 */
+	protected function s_safe_html( $new_value ) {
+		return wp_kses_post( $new_value );
+	}
+
+	/**
+	 * Parses Twitter name and site. Adds @ if it wasn't supplied.
+	 * Parses URL to path and adds @ if URL is given.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @param string $new_value String with potentially wrong Twitter username.
+	 *
+	 * @return string String with 'correct' Twitter username
+	 */
+	protected function s_twitter_name( $new_value ) {
+
+		if ( empty( $new_value ) )
+			return (string) $new_value;
+
+		$profile = trim( strip_tags( $new_value ) );
+
+		if ( 'http' === substr( $profile, 0, 4 ) ) {
+			$path = str_replace( '/', '', parse_url( $profile, PHP_URL_PATH ) );
+			$profile = $path ? '@' . $path : '';
+
+			return (string) $profile;
+		}
+
+		if ( '@' !== substr( $profile, 0, 1 ) ) {
+			$profile = '@' . $profile;
+		}
+
+		return (string) $profile;
+	}
+
+	/**
+	 * Parses Twitter Card radio input. Fills in default if incorrect value is supplied.
+	 * Falls back to previous value if empty. If previous value is empty if will go to default.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param string $new_value String with potentially wrong option value.
+	 *
+	 * @return string Sanitized twitter card type.
+	 */
+	protected function s_twitter_card( $new_value ) {
+
+		//* Fetch Twitter card array.
+		$card = $this->get_twitter_card_types();
+
+		$key = array_key_exists( $new_value, $card );
+
+		if ( $key )
+			return (string) $new_value;
+
+		$previous = $this->get_field_value( 'twitter_card' );
+
+		if ( empty( $previous ) )
+			$previous = $this->get_default_option( 'twitter_card' );
+
+		return (string) $previous;
+	}
+
+	/**
+	 * Sanitize the Redirect URL
+	 *
+	 * @since 2.2.4
+	 *
+	 * @param string $new_value String with potentially unwanted redirect URL.
+	 *
+	 * @return string The Sanitized Redirect URL
+	 */
+	protected function s_redirect_url( $new_value ) {
+
+		$url = strip_tags( $new_value );
+
+		if ( $url ) {
+
+			$allow_external = $this->allow_external_redirect();
+
+			/**
+			 * Sanitize the redirect URL to only a relative link and removes first slash
+			 *
+			 * @requires WP 4.1.0 and up to prevent adding upon itself.
+			 */
+			if ( ! $allow_external )
+				$url = ltrim( wp_make_link_relative( $url ), '/' );
+
+			//* Find a path.
+			if ( _wp_can_use_pcre_u() ) {
+				//* URL pattern excluding path.
+				$pattern 	= 	'/'
+							.	'((((http)(s)?)?)\:)?' 	// 1: maybe http: https:
+							. 	'(\/\/)?'				// 2: maybe slash slash
+							. 	'((www.)?)'				// 3: maybe www.
+							.	'(.*\.[a-zA-Z0-9]*)'	// 4: any legal domain with tld
+							.	'(?:\/)?'				// 5: trailing slash
+							.	'/'
+							;
+
+				$is_path = ! preg_match( $pattern, $url );
+			} else {
+				$parsed_url = parse_url( $url );
+
+				if ( ! isset( $parsed_url['host'] ) && isset( $parsed_url['path'] ) ) {
+					$is_path = true;
+				} else {
+					$is_path = false;
+				}
+			}
+
+			//* If link is relative, make it full again
+			if ( $is_path ) {
+
+				//* The url is a relative path
+				$path = $url;
+
+				//* Try WPMUdev Domain Mapping.
+				$wpmu_url = $this->the_url_wpmudev_domainmap( $path, true );
+				if ( $wpmu_url && is_array( $wpmu_url ) ) {
+					$url = $wpmu_url[0];
+					$scheme = $wpmu_url[1];
+				}
+
+				//* Try Donncha Domain Mapping.
+				if ( ! isset( $scheme ) ) {
+					$dm_url = $this->the_url_donncha_domainmap( $path, true );
+					if ( $dm_url && is_array( $dm_url ) ) {
+						$url = $dm_url[0];
+						$scheme = $dm_url[1];
+					}
+				}
+
+				//* Everything else.
+				if ( ! isset( $scheme ) ) {
+					$url = $this->the_home_url_from_cache( true ) . ltrim( $path, ' /' );
+					$scheme = is_ssl() ? 'https' : 'http';
+				}
+
+				//* When nothing is found, fall back on WP defaults (is_ssl).
+				$scheme = isset( $scheme ) ? $scheme : '';
+
+				$url = $this->set_url_scheme( $url, $scheme );
+			}
+		}
+
+		/**
+		 * Applies filters the_seo_framework_301_noqueries : bool remove query args from 301
+		 * @since 2.5.0
+		 */
+		$noqueries = (bool) apply_filters( 'the_seo_framework_301_noqueries', true );
+
+		/**
+		 * Remove queries from the URL
+		 *
+		 * Returns plain Home URL if $allow_external is set to false and only a query has been supplied
+		 * But that's okay. The URL was rogue anyway :)
+		 */
+		if ( $noqueries ) {
+			/**
+			 * Remove query args
+			 *
+			 * @see AutoDescription_Sanitize::s_url
+			 * @since 2.2.4
+			 */
+			$new_value = $this->s_url( $url );
+		} else {
+			/**
+			 * Allow query string parameters. XSS safe.
+			 */
+			$new_value = esc_url_raw( $url );
+		}
+
+		//* Save url
+		return $new_value;
+	}
+
+}
Index: inc/classes/search.class.php
===================================================================
--- inc/classes/search.class.php	(revision 1413572)
+++ inc/classes/search.class.php	(working copy)
@@ -1,117 +1,119 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Search
- *
- * Excludes pages from search based on options
- *
- * @since 2.1.6
- */
-class AutoDescription_Search extends AutoDescription_Generate {
-
-	/**
-	 * Constructor, load parent constructor
-	 *
-	 * Initalizes options
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		//* @TODO Add to network settings.
-		add_action( 'pre_get_posts', array( $this, 'search_filter' ), 999, 1 );
-	}
-
-	/**
-	 * Fetches posts with exclude_local_search option on
-	 *
-	 * @param array $post_ids			The post id's which are excluded
-	 * @param array $args				Posts search arguments
-	 * @param array $protected_posts	Posts array with excluded key
-	 *
-	 * @global int $blog_id
-	 *
-	 * @since 2.1.7
-	 */
-	public function exclude_search_ids() {
-		global $blog_id;
-
-		$cache_key = 'exclude_search_ids_' . $blog_id;
-
-		$post_ids = $this->object_cache_get( $cache_key );
-		if ( false === $post_ids ) {
-			$post_ids = array();
-
-			$args = array(
-				'post_type' => 'any',
-				'meta_key' => 'exclude_local_search',
-				'meta_value' => 1,
-				'posts_per_page' => 99999, // get them all! Fast enough! :D
-				'meta_compare' => '=',
-			/*	'post_status' => array('publish','private'),*/
-			);
-
-			$protected_posts = get_posts( $args );
-			if ( $protected_posts ) {
-				$post_ids = wp_list_pluck( $protected_posts, 'ID' );
-			}
-
-			$this->object_cache_set( $cache_key, $post_ids, 86400 );
-		}
-
-		// return an array of exclude post IDs
-		return $post_ids;
-	}
-
-	/**
-	 * Fetches posts with exclude_local_search option on
-	 *
-	 * @param array $query				The search query
-	 * @param array $protected_posts	Posts array with excluded key
-	 *
-	 * @uses $this->exclude_search_ids()
-	 *
-	 * @since 2.1.7
-	 *
-	 * @todo run this only when one post triggers this option?
-	 */
-	public function search_filter( $query ) {
-
-		// Don't exclude pages in wp-admin
-		if ( ! is_admin() ) {
-			if ( $query->is_search ) {
-
-				$protected_posts = $this->exclude_search_ids();
-				if ( ! empty( $protected_posts ) ) {
-					$get = $query->get( 'post__not_in' );
-
-					//* Merge user defined query.
-					if ( ! empty( $get ) )
-						$protected_posts = array_merge( $protected_posts, $get );
-
-					$query->set( 'post__not_in', $protected_posts );
-				}
-
-				// Parse all ID's, even beyond the first page.
-				$query->set( 'no_found_rows', false );
-			}
-		}
-
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Search
+ *
+ * Excludes pages from search based on options
+ *
+ * @since 2.1.6
+ */
+class AutoDescription_Search extends AutoDescription_Generate_Ldjson {
+
+	/**
+	 * Constructor, load parent constructor
+	 *
+	 * Initalizes options
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		add_action( 'pre_get_posts', array( $this, 'search_filter' ), 999, 1 );
+	}
+
+	/**
+	 * Fetches posts with exclude_local_search option on
+	 *
+	 * @param array $query				The search query
+	 *
+	 * @uses $this->exclude_search_ids()
+	 *
+	 * @since 2.1.7
+	 *
+	 * @todo run this only when one post triggers this option?
+	 * @todo priority low 2.7.0+
+	 */
+	public function search_filter( $query ) {
+
+		// Don't exclude pages in wp-admin
+		if ( $query->is_search && false === $this->is_admin() ) {
+
+			/**
+			 * @param array $protected_posts : Posts array with excluded key
+			 */
+			$protected_posts = $this->exclude_search_ids();
+			if ( $protected_posts ) {
+				$get = $query->get( 'post__not_in' );
+
+				//* Merge user defined query.
+				if ( $get )
+					$protected_posts = array_merge( $protected_posts, $get );
+
+				$query->set( 'post__not_in', $protected_posts );
+			}
+
+			// Parse all ID's, even beyond the first page.
+			$query->set( 'no_found_rows', false );
+
+		}
+
+	}
+
+	/**
+	 * Fetches posts with exclude_local_search option on
+	 *
+	 * @param array $post_ids			The post id's which are excluded
+	 * @param array $args				Posts search arguments
+	 * @param array $protected_posts	Posts array with excluded key
+	 *
+	 * @global int $blog_id
+	 *
+	 * @since 2.1.7
+	 *
+	 * @return array Excluded Post IDs
+	 */
+	public function exclude_search_ids() {
+		global $blog_id;
+
+		$cache_key = 'exclude_search_ids_' . $blog_id;
+
+		$post_ids = $this->object_cache_get( $cache_key );
+		if ( false === $post_ids ) {
+			$post_ids = array();
+
+			$args = array(
+				'post_type' => 'any',
+				'meta_key' => 'exclude_local_search',
+				'meta_value' => 1,
+				'posts_per_page' => 99999, // get them all! Fast enough! :D
+				'meta_compare' => '=',
+			/*	'post_status' => array('publish','private'),*/
+			);
+
+			$protected_posts = get_posts( $args );
+			if ( $protected_posts )
+				$post_ids = wp_list_pluck( $protected_posts, 'ID' );
+
+			$this->object_cache_set( $cache_key, $post_ids, 86400 );
+		}
+
+		// return an array of exclude post IDs
+		return $post_ids;
+	}
+
+}
Index: inc/classes/sitemaps.class.php
===================================================================
--- inc/classes/sitemaps.class.php	(revision 1413572)
+++ inc/classes/sitemaps.class.php	(working copy)
@@ -1,920 +1,1084 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Search
- *
- * Generates sitemap and outputs it.
- *
- * @since 2.2.9
- */
-class AutoDescription_Sitemaps extends AutoDescription_Metaboxes {
-
-	/**
-	 * Maximum number of posts that show up in the sitemap.xml page.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @var int Max Posts in Sitemap
-	 */
-	protected $max_posts;
-
-	/**
-	 * Checks for pretty permalinks.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @var bool true if pretty
-	 */
-	protected $pretty_permalinks;
-
-	/**
-	 * Checks if sitemap is being output.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @var bool true if sitemap is being output.
-	 */
-	protected $doing_sitemap = false;
-
-	/**
-	 * Constructor, load parent constructor and set up caches.
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		$this->max_posts = (int) apply_filters( 'the_seo_framework_sitemap_post_limit', 700 );
-
-		// I'm not going to initialize my own rewrite engine. Causes too many problems.
-		$this->pretty_permalinks = ( '' !== get_option( 'permalink_structure' ) ) ? true : false;
-
-		/**
-		 * Add query strings to rewrite
-		 */
-		add_action( 'init', array( $this, 'rewrite_rule_sitemap' ), 1 );
-		add_filter( 'query_vars', array( $this, 'enqueue_sitemap_query_vars' ), 1 );
-
-		/**
-		 * Adding a higher priority will cause a trailing slash to be added.
-		 * We need to be in front of the queue to prevent this from happening.
-		 */
-		add_action( 'template_redirect', array( $this, 'maybe_output_sitemap' ), 1 );
-
-		//* Edit the robots.txt file
-		add_filter( 'robots_txt', array( $this, 'robots_txt' ), 10, 2 );
-
-		//* Enqueue rewrite flush
-		add_action( 'shutdown', array( $this, 'maybe_flush_rewrite' ), 999 );
-	}
-
-	/**
-	 * Adds rewrite rule to WordPress
-	 * This rule defines the sitemap.xml output
-	 *
-	 * @param bool $override add the rule anyway, regardless of setting.
-	 *
-	 * @since 2.2.9
-	 */
-	public function rewrite_rule_sitemap( $run = false ) {
-
-		if ( (bool) $this->get_option( 'sitemaps_output' ) || $run ) {
-
-			/**
-			 * Don't do anything if a sitemap plugin is active.
-			 * On sitemap plugin activation, the sitemap plugin should flush the
-			 * rewrite rules. If it doesn't, then this plugin's sitemap will be called.
-			 *
-			 * @todo expand detection list.
-			 */
-			if ( $this->has_sitemap_plugin() )
-				return;
-
-			//* Adding rewrite rules only has effect when permalink structures are active.
-			if ( $this->pretty_permalinks )
-				add_rewrite_rule( 'sitemap\.xml$', 'index.php?the_seo_framework_sitemap=xml', 'top' );
-
-			$this->wpmudev_domainmap_flush_fix( false );
-
-		}
-	}
-
-	/**
-	 * Register the_seo_framework_sitemap to wp_query
-	 *
-	 * @param array vars The WP_Query vars
-	 *
-	 * @since 2.2.9
-	 */
-	public function enqueue_sitemap_query_vars( $vars ) {
-
-		if ( (bool) $this->get_option( 'sitemaps_output' ) )
-			$vars[] = 'the_seo_framework_sitemap';
-
-		return $vars;
-	}
-
-	/**
-	 * Maybe Output sitemap.xml 'file' and header.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @return void|mixed SiteMAp XML file.
-	 */
-	public function maybe_output_sitemap() {
-
-		if ( (bool) $this->get_option( 'sitemaps_output' ) && $this->pretty_permalinks ) {
-			global $current_blog;
-
-			/**
-			 * Don't do anything on a deleted or spam blog.
-			 * There's nothing to find anyway. Multisite Only.
-			 *
-			 * @since 2.2.9
-			 */
-			if ( isset( $current_blog ) && ( 1 == $current_blog->spam || 1 == $current_blog->deleted ) )
-				return;
-
-			global $wp_query;
-
-			if ( isset( $wp_query->query_vars['the_seo_framework_sitemap'] ) && 'xml' === $wp_query->query_vars['the_seo_framework_sitemap'] ) {
-				// Don't let WordPress think this is 404.
-				$wp_query->is_404 = false;
-
-				$this->doing_sitemap = true;
-
-				return $this->output_sitemap();
-			}
-		}
-
-	}
-
-	/**
-	 * Output sitemap.xml 'file' and header.
-	 *
-	 * @since 2.2.9
-	 */
-	protected function output_sitemap() {
-
-		//* Fetch sitemap content.
-		$xml_content = $this->get_sitemap_content();
-
-		$setheader = true;
-
-		//* Don't crash the system when debugging
-		if ( $this->the_seo_framework_debug && headers_sent() )
-			$setheader = false;
-
-		if ( false !== $setheader )
-			header( 'Content-type: text/xml; charset=utf-8' );
-
-		echo $xml_content . "\r\n";
-
-		// We're done now.
-		die();
-	}
-
-	/**
-	 * Output sitemap.xml content from transient.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @return string Sitemap XML contents.
-	 */
-	protected function get_sitemap_content() {
-
-		$timer_start = microtime( true );
-
-		/**
-		 * Re-use the variable, eliminating database requests
-		 * @since 2.4.0
-		 */
-		$sitemap_content = get_transient( $this->sitemap_transient );
-
-		if ( false == $sitemap_content ) {
-			$cached_content = "\r\n<!-- " . __( 'Sitemap is generated for this view', 'autodescription' ) . " -->";
-		} else {
-			$cached_content = "\r\n<!-- " . __( 'Sitemap is served from cache', 'autodescription' ) . " -->";
-		}
-
-		$content  = '<?xml version="1.0" encoding="UTF-8"?>' . "\r\n";
-		$content .= '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\r\n";
-		$content .= $this->setup_sitemap_transient( $sitemap_content );
-		$content .= '</urlset>';
-
-		$content .= $cached_content;
-
-		/**
-		 * Output debug info.
-		 *
-		 * @since 2.3.7
-		 */
-		if ( defined( 'THE_SEO_FRAMEWORK_DEBUG' ) && THE_SEO_FRAMEWORK_DEBUG && function_exists( 'memory_get_usage' ) ) {
-			$content .= "\r\n<!-- Site current usage: " . ( memory_get_usage() / 1024 / 1024 ) . " MB -->";
-			$content .= "\r\n<!-- System current usage: " . ( memory_get_usage( true ) / 1024 / 1024 ) . " MB -->";
-			$content .= "\r\n<!-- Sitemap generation time: " . ( number_format( microtime( true ) - $timer_start, 6 ) ) . " seconds -->";
-		}
-
-		return $content;
-	}
-
-	/**
-	 * Create sitemap.xml content transient.
-	 *
-	 * @param string|bool $content required The sitemap transient content.
-	 *
-	 * @since 2.2.9
-	 */
-	public function setup_sitemap_transient( $sitemap_content ) {
-
-		if ( false === $sitemap_content ) {
-			//* Transient doesn't exist yet.
-			$sitemap_content = $this->generate_sitemap();
-
-			/**
-			 * Transient expiration: 1 week.
-			 * Keep the sitemap for at most 1 week.
-			 *
-			 * 60s * 60m * 24h * 7d
-			 */
-			$expiration = 60 * 60 * 24 * 7;
-
-			set_transient( $this->sitemap_transient, $sitemap_content, $expiration );
-		}
-
-		return $sitemap_content;
-	}
-
-	/**
-	 * Generate sitemap.xml content.
-	 *
-	 * @param bool $secure Only process when param is given.
-	 *
-	 * @since 2.2.9
-	 */
-	protected function generate_sitemap() {
-
-		$content = '';
-
-		/**
-		 * Applies filters the_seo_framework_sitemap_exclude_ids : array of id's
-		 *
-		 * @since 2.5.2
-		 */
-		$excluded = (array) apply_filters( 'the_seo_framework_sitemap_exclude_ids', array() );
-
-		if ( empty( $excluded ) ) {
-			$excluded = '';
-		} else {
-			$excluded = array_flip( $excluded );
-		}
-
-		/**
-		 * Maximum pages and posts to fetch.
-		 * A total of 2100, consisting of 3 times $max_posts
-		 *
-		 * Applies filters the_seo_framework_sitemap_pages_count : int max pages
-		 * Applies filters the_seo_framework_sitemap_posts_count : int max posts
-		 * Applies filters the_seo_framework_sitemap_custom_posts_count : int max posts
-		 */
-		$totalpages = (int) apply_filters( 'the_seo_framework_sitemap_pages_count', $this->max_posts );
-		$totalposts = (int) apply_filters( 'the_seo_framework_sitemap_posts_count', $this->max_posts );
-		$total_cpt_posts = (int) apply_filters( 'the_seo_framework_sitemap_custom_posts_count', $this->max_posts );
-		$total_cpt_posts_bool = $total_cpt_posts ? true : false;
-
-		$latest_pages = array();
-		$latest_posts = array();
-		$latest_cpt_posts = array();
-		$cpt = array();
-
-		if ( $totalpages ) {
-			//* Ascend by the date for normal pages. Older pages get to the top of the list.
-			$args = array(
-				'numberposts' => $totalpages,
-				'posts_per_page' => $totalpages,
-				'post_type' => 'page',
-				'orderby' => 'date',
-				'order' => 'ASC',
-				'post_status' => 'publish'
-			);
-			$latest_pages = get_posts( $args );
-		}
-
-		if ( $totalposts ) {
-			//* Descend by the date for posts. The latest posts get to the top of the list after pages.
-			$args = array(
-				'numberposts' => $totalposts,
-				'posts_per_page' => $totalposts,
-				'post_type' => 'post',
-				'orderby' => 'date',
-				'order' => 'DESC',
-				'post_status' => 'publish'
-			);
-
-			$latest_posts = get_posts( $args );
-		}
-
-		if ( $total_cpt_posts_bool ) {
-			$post_page = (array) get_post_types( array( 'public' => true ) );
-
-			/**
-			 * Applies filters Array the_seo_framework_sitemap_exclude_cpt : Excludes these CPT
-			 * @since 2.5.0
-			 */
-			$excluded_cpt = (array) apply_filters( 'the_seo_framework_sitemap_exclude_cpt', array() );
-
-			foreach ( $post_page as $post_type ) {
-				if ( $post_type != 'post' && $post_type != 'page' && $post_type != 'attachment' ) {
-					if ( empty( $excluded_cpt ) || ! in_array( $post_type, $excluded_cpt ) ) {
-						if ( $this->post_type_supports_custom_seo( $post_type ) ) {
-							$cpt[] = $post_type;
-						}
-					}
-				}
-			}
-		}
-
-		if ( $total_cpt_posts_bool && ! empty( $cpt ) ) {
-			//* Descend by the date for CPTs. The latest posts get to the top of the list after pages.
-			$args = array(
-				'numberposts' => $total_cpt_posts,
-				'posts_per_page' => $total_cpt_posts,
-				'post_type' => $cpt,
-				'orderby' => 'date',
-				'order' => 'DESC',
-				'post_status' => 'publish'
-			);
-
-			$latest_cpt_posts = get_posts( $args );
-		}
-
-		/**
-		 * Fetch the page/post modified options.
-		 * We can't get specific on the home page, unfortunately.
-		 */
-		$page_lastmod = $this->get_option( 'sitemaps_modified' ) || $this->get_option( 'page_modify_time' ) ? true : false;
-		$post_lastmod = $this->get_option( 'sitemaps_modified' ) || $this->get_option( 'post_modify_time' ) ? true : false;
-		$home_lastmod = $this->get_option( 'sitemaps_modified' ) || $this->get_option( 'home_modify_time' ) ? true : false;
-
-		/**
-		 * Generation time output
-		 *
-		 * Applies filter the_seo_framework_sitemap_timestamp : bool
-		 */
-		$timestamp = (bool) apply_filters( 'the_seo_framework_sitemap_timestamp', true );
-
-		if ( $timestamp )
-			$content .= '<!-- ' . __( 'Sitemap is generated on', 'autodescription' ) . ' ' . current_time( "Y-m-d H:i:s" ) . ' -->' . "\r\n";
-
-		$latest_pages_amount = (int) count( $latest_pages );
-
-		if ( $latest_pages_amount > 0 ) {
-
-			$page_on_front = (int) get_option( 'page_on_front' );
-			$page_for_posts_option = (int) get_option( 'page_for_posts' );
-			$page_show_on_front = ( 'page' == get_option( 'show_on_front' ) ) ? true : false;
-
-			/**
-			 * This can be heavy.
-			 */
-			foreach ( $latest_pages as $page ) {
-				if ( isset( $page->ID ) ) {
-					$page_id = $page->ID;
-
-					if ( '' === $excluded || ! isset( $excluded[$post_id] ) ) {
-						//* Is this the front page?
-						$page_is_front = ( $page_id === $page_on_front ) ? true : false;
-
-						//* Fetch the noindex option, per page.
-						$noindex = (bool) $this->get_custom_field( '_genesis_noindex', $page_id );
-
-						//* Continue if indexed.
-						if ( ! $noindex ) {
-							//* Don't add the posts page.
-							if ( ! $page_show_on_front || ! ( $page_show_on_front && $page_id == $page_for_posts_option ) ) {
-
-								$content .= "	<url>\r\n";
-								// No need to use static vars.
-								$content .= '		<loc>' . $this->the_url( '', $page_id, array( 'get_custom_field' => false, 'external' => true, 'post' => $page ) ) . "</loc>\r\n";
-
-								// Keep it consistent. Only parse if page_lastmod is true.
-								if ( $page_lastmod && ( ! $page_is_front || ( $home_lastmod && $page_is_front ) ) ) {
-									$page_modified_gmt = $page->post_modified_gmt;
-
-									if ( $page_modified_gmt !== '0000-00-00 00:00:00' )
-										$content .= '		<lastmod>' . mysql2date( 'Y-m-d', $page_modified_gmt, false ) . "</lastmod>\r\n";
-								}
-
-								// Give higher priority to the home page.
-								$priority_page = $page_is_front ? 1 : 0.9;
-
-								$content .= '		<priority>' . number_format( $priority_page, 1 ) . "</priority>\r\n";
-								$content .= "	</url>\r\n";
-
-							}
-						}
-					}
-				}
-			}
-		}
-
-		$latest_posts_amount = (int) count( $latest_posts );
-
-		if ( $latest_posts_amount > 0 ) {
-
-			/**
-			 * Setting up priorities, with pages always being important.
-			 *
-			 * From there, older posts get a gradually lower priority. Down to 0.
-			 * Differentiate with 1 / max posts (0 to $this->max_posts). With a 1 dot decimal.
-			 */
-			$priority = 0.9;
-
-			/**
-			 * Infinity is abstract. But what is it when it's both positive and negative?
-			 * Undefined. Bugfix.
-			 *
-			 * @since 2.3.2
-			 * @thanks Schlock | https://wordpress.org/support/topic/sitemap-xml-parsing-error
-			 */
-			$prioritydiff = 0;
-
-			if ( $latest_posts_amount > (int) 1 )
-				$prioritydiff = 0.9 / $latest_posts_amount;
-
-			// Keep it consistent. Only remove 0.1 when we only have a few posts.
-			if ( $latest_posts_amount <= (int) 9 && $latest_posts_amount > (int) 1 )
-				$prioritydiff = 0.1;
-
-			/**
-			 * This can be heavy.
-			 */
-			foreach ( $latest_posts as $post ) {
-				if ( isset( $post->ID ) ) {
-					$post_id = $post->ID;
-
-					if ( '' === $excluded || ! isset( $excluded[$post_id] ) ) {
-
-						//* Fetch the noindex option, per page.
-						$noindex = (bool) $this->get_custom_field( '_genesis_noindex', $post_id );
-
-						//* Continue if indexed
-						if ( ! $noindex ) {
-
-							$content .= "	<url>\r\n";
-							// No need to use static vars
-							$content .= '		<loc>' . $this->the_url( '', $post_id, array( 'get_custom_field' => false, 'external' => true, 'post' => $post ) ) . "</loc>\r\n";
-
-							// Keep it consistent. Only parse if page_lastmod is true.
-							if ( $post_lastmod ) {
-								$post_modified_gmt = $post->post_modified_gmt;
-
-								if ( $post_modified_gmt !== '0000-00-00 00:00:00' )
-									$content .= '		<lastmod>' . mysql2date( 'Y-m-d', $post_modified_gmt, false ) . "</lastmod>\r\n";
-							}
-
-							$content .= '		<priority>' . number_format( $priority, 1 ) . "</priority>\r\n";
-							$content .= "	</url>\r\n";
-
-							// Lower the priority for the next pass.
-							$priority = $priority - $prioritydiff;
-
-							// Cast away negative numbers.
-							$priority = $priority <= (int) 0 ? (int) 0 : (float) $priority;
-						}
-					}
-				}
-			}
-		}
-
-		$latest_cpt_posts_amount = (int) count( $latest_cpt_posts );
-
-		if ( $latest_cpt_posts_amount > 0 ) {
-
-			/**
-			 * Setting up priorities, with pages always being important.
-			 *
-			 * From there, older posts get a gradually lower priority. Down to 0.
-			 * Differentiate with 1 / max posts (0 to $this->max_posts). With a 1 dot decimal.
-			 */
-			$priority_cpt = 0.9;
-
-			$prioritydiff_cpt = 0;
-
-			if ( $latest_cpt_posts_amount > (int) 1 )
-				$prioritydiff_cpt = 0.9 / $latest_cpt_posts_amount;
-
-			// Keep it consistent. Only remove 0.1 when we only have a few posts.
-			if ( $latest_cpt_posts_amount <= (int) 9 && $latest_cpt_posts_amount > (int) 1 )
-				$prioritydiff_cpt = 0.1;
-
-			/**
-			 * This can be heavy.
-			 */
-			foreach ( $latest_cpt_posts as $ctp_post ) {
-				if ( isset( $ctp_post->ID ) ) {
-					$post_id = $ctp_post->ID;
-
-					if ( '' === $excluded || ! isset( $excluded[$post_id] ) ) {
-
-						//* Fetch the noindex option, per page.
-						$noindex = (bool) $this->get_custom_field( '_genesis_noindex', $post_id );
-
-						//* Continue if indexed
-						if ( ! $noindex ) {
-
-							$content .= "	<url>\r\n";
-							//* No need to use static vars
-							$content .= '		<loc>' . $this->the_url( '', $post_id, array( 'get_custom_field' => false, 'external' => true, 'post' => $ctp_post ) ) . "</loc>\r\n";
-
-							//* Keep it consistent. Only parse if page_lastmod is true.
-							if ( $post_lastmod ) {
-								$post_modified_gmt = $ctp_post->post_modified_gmt;
-
-								//* Some CPT don't set modified time.
-								if ( $post_modified_gmt !== '0000-00-00 00:00:00' )
-									$content .= '		<lastmod>' . mysql2date( 'Y-m-d', $post_modified_gmt, false ) . "</lastmod>\r\n";
-							}
-
-							$content .= '		<priority>' . number_format( $priority_cpt, 1 ) . "</priority>\r\n";
-							$content .= "	</url>\r\n";
-
-							// Lower the priority for the next pass.
-							$priority_cpt = $priority_cpt - $prioritydiff_cpt;
-
-							// Cast away negative numbers.
-							$priority_cpt = $priority_cpt <= (int) 0 ? (int) 0 : (float) $priority_cpt;
-						}
-					}
-				}
-			}
-		}
-
-		/**
-		 * Applies filters the_seo_framework_sitemap_additional_urls : {
-		 * 		@param string url The absolute url to the page. : {
-		 * 			@param string lastmod UNIXTIME Last modified date, e.g. "2016-01-26 13:04:55"
-		 * 			@param float|int|string priority URL Priority
-		 *		}
-		 * }
-		 *
-		 * @since 2.5.2
-		 */
-		$custom_urls = (array) apply_filters( 'the_seo_framework_sitemap_additional_urls', array() );
-
-		if ( ! empty( $custom_urls ) ) {
-			foreach ( $custom_urls as $url => $args ) {
-
-				if ( ! is_array( $args ) ) {
-					$url = $args;
-				}
-
-				$content .= "	<url>\r\n";
-				//* No need to use static vars
-				$content .= '		<loc>' . esc_url_raw( $url ) . "</loc>\r\n";
-
-				if ( isset( $args['lastmod'] ) && ! empty( $args['lastmod'] ) ) {
-					$content .= '		<lastmod>' . mysql2date( 'Y-m-d', $args['lastmod'], false ) . "</lastmod>\r\n";
-				}
-
-				if ( isset( $args['priority'] ) && ! empty( $args['priority'] ) ) {
-					$priority = $args['priority'];
-				} else {
-					$priority = 0.9;
-				}
-
-				$content .= '		<priority>' . number_format( $priority, 1 ) . "</priority>\r\n";
-				$content .= "	</url>\r\n";
-			}
-		}
-
-		/**
-		 * Applies filters the_seo_framework_sitemap_extend
-		 *
-		 * @since 2.5.2
-		 */
-		$extend = (string) apply_filters( 'the_seo_framework_sitemap_extend', '' );
-
-		if ( '' !== $extend )
-			$content .= "	" . $extend . "\r\n";
-
-		return $content;
-	}
-
-	/**
-	 * Ping search engines on post publish.
-	 *
-	 * @since 2.2.9
-	 */
-	public function ping_searchengines() {
-
-		/**
-		 * Don't ping if the blog isn't public.
-		 *
-		 * @since 2.3.1
-		 */
-		if ( ! $this->get_option( 'site_noindex' ) && get_option( 'blog_public' ) ) {
-			global $blog_id;
-
-			$blog_id = (string) $blog_id;
-
-			$transient = 'tsf_throttle_ping_' . $blog_id;
-
-			if ( false === get_transient( $transient ) ) {
-				//* Transient doesn't exist yet.
-
-				if ( $this->get_option( 'ping_google' ) )
-					$this->ping_google();
-
-				if ( $this->get_option( 'ping_bing' ) )
-					$this->ping_bing();
-
-				if ( $this->get_option( 'ping_yahoo' ) )
-					$this->ping_yahoo();
-
-				// Sorry I couldn't help myself.
-				$throttle = 'Bert and Ernie are weird.';
-
-				/**
-				 * Limit the pinging to a maximum of 1 per hour.
-				 * Transient expiration. 1 hour.
-				 *
-				 * 60s * 60m
-				 *
-				 * Applies filters the_seo_framework_sitemap_throttle_seconds
-				 * @since 2.5.1
-				 */
-				$expiration = (int) apply_filters( 'the_seo_framework_sitemap_throttle_s', 60 * 60 );
-
-				set_transient( $transient, $throttle, $expiration );
-			}
-		}
-
-	}
-
-	/**
-	 * Ping Google
-	 *
-	 * @since 2.2.9
-	 */
-	public function ping_google() {
-		$pingurl = 'http://www.google.com/webmasters/sitemaps/ping?sitemap=' . urlencode( $this->the_home_url_from_cache( true ) . 'sitemap.xml' );
-
-		wp_remote_get( $pingurl );
-	}
-
-	/**
-	 * Ping Bing
-	 *
-	 * @since 2.2.9
-	 */
-	public function ping_bing() {
-		$pingurl = 'http://www.bing.com/webmaster/ping.aspx?siteMap=' . urlencode( $this->the_home_url_from_cache( true ) . 'sitemap.xml' );
-
-		wp_remote_get( $pingurl );
-	}
-
-	/**
-	 * Ping Yahoo
-	 *
-	 * @since 2.2.9
-	 */
-	public function ping_yahoo() {
-		$pingurl = 'http://search.yahooapis.com/SiteExplorerService/V1/ping?sitemap=' . urlencode( $this->the_home_url_from_cache( true ) . 'sitemap.xml' );
-
-		wp_remote_get( $pingurl );
-	}
-
-	/**
-	 * Edits the robots.txt output
-	 *
-	 * Requires not to have a robots.txt file in the root directory
-	 *
-	 * @uses robots_txt filter located at WP core
-	 *
-	 * @since 2.2.9
-	 *
-	 * @global int $blog_id;
-	 *
-	 * @todo maybe combine with noindex/noarchive/(nofollow) -> only when object caching?
-	 */
-	public function robots_txt( $robots_txt = '', $public = '' ) {
-		global $blog_id;
-
-		/**
-		 * Don't do anything if the blog isn't public
-		 */
-		if ( '0' == $public )
-			return $robots_txt;
-
-		$revision = '1';
-
-		$cache_key = 'robots_txt_output_' . $revision . $blog_id;
-
-		$output = $this->object_cache_get( $cache_key );
-		if ( false === $output ) {
-			$output = '';
-
-			/**
-			 * Apply filters the_seo_framework_robots_txt_pre & the_seo_framework_robots_txt_pro
-			 * 		: Add custom cacheable lines.
-			 *		: Don't forget to add line breaks ( "\r\n" | PHP_EOL )
-			 *
-			 * @since 2.5.0
-			 */
-			$pre = (string) apply_filters( 'the_seo_framework_robots_txt_pre', '' );
-			$pro = (string) apply_filters( 'the_seo_framework_robots_txt_pro', '' );
-
-			$home_url = $this->the_home_url_from_cache();
-			$parse_url = parse_url( $home_url );
-			$path = ! empty( $site_url['path'] ) ? $site_url['path'] : '';
-
-			$output .= $pre;
-			//* Output defaults
-			$output .= "User-agent: *\r\n";
-			$output .= "Disallow: $path/wp-admin/\r\n";
-			$output .= "Allow: $path/wp-admin/admin-ajax.php\r\n";
-
-			/**
-			 * Prevents query indexing
-			 * @since 2.2.9
-			 *
-			 * Applies filters the_seo_framework_robots_disallow_queries : Wether to allow queries for robots.
-			 * @since 2.5.0
-			 */
-			if ( (bool) apply_filters( 'the_seo_framework_robots_disallow_queries', false ) )
-				$output .= "Disallow: $path/*?*\r\n";
-
-			$output .= $pro;
-
-			if ( $this->get_option( 'sitemaps_output') && (bool) $this->get_option( 'sitemaps_robots' ) ) {
-				//* Add whitespace before sitemap.
-				$output .= "\r\n";
-
-				//* Add sitemap full url
-				$output .= 'Sitemap: ' . trailingslashit( $home_url ) . "sitemap.xml\r\n";
-			}
-
-			$this->object_cache_set( $cache_key, $output, 86400 );
-		}
-
-		/**
-		 * Completely override robots with output.
-		 * @since 2.5.0
-		 */
-		$robots_txt = $output;
-
-		return $robots_txt;
-	}
-
-	/**
-	 * Add and Flush rewrite rules on plugin activation.
-	 *
-	 * @since 2.2.9
-	 * Do not return anything. Just be here. Thanks.
-	 */
-	public static function flush_rewrite_rules_activation() {
-		global $wp_rewrite;
-
-		// This function is called statically.
-		$the_seo_framework = the_seo_framework();
-
-		$the_seo_framework->rewrite_rule_sitemap( true );
-
-		$wp_rewrite->init();
-		$wp_rewrite->flush_rules( true );
-	}
-
-	/**
-	 * Flush rewrite rules on plugin deactivation.
-	 *
-	 * @since 2.2.9
-	 * Do not return anything. Just be here. Thanks.
-	 */
-	public static function flush_rewrite_rules_deactivation() {
-		global $wp_rewrite;
-
-		$wp_rewrite->init();
-
-		// Works as intended.
-		unset( $wp_rewrite->extra_rules_top['sitemap\.xml$'] );
-
-		$wp_rewrite->flush_rules( true );
-	}
-
-	/**
-	 * Enqueue rewrite flush for activation.
-	 *
-	 * @staticvar bool $flush Only true
-	 *
-	 * @since 2.3.0
-	 */
-	public function enqueue_rewrite_activate( $enqueue = false ) {
-
-		static $flush = null;
-
-		if ( isset( $flush ) )
-			return (bool) $flush;
-
-		if ( $enqueue )
-			return $flush = true;
-
-		return false;
-	}
-
-	/**
-	 * Enqueue rewrite flush for deactivation.
-	 *
-	 * @staticvar bool $flush Only true
-	 *
-	 * @since 2.3.0
-	 */
-	public function enqueue_rewrite_deactivate( $enqueue = false ) {
-
-		static $flush = null;
-
-		if ( isset( $flush ) )
-			return (bool) $flush;
-
-		if ( $enqueue )
-			return $flush = true;
-
-		return false;
-	}
-
-	/**
-	 * Flush rewrite rules based on static variables.
-	 *
-	 * @since 2.3.0
-	 */
-	public function maybe_flush_rewrite() {
-
-		if ( $this->enqueue_rewrite_activate() )
-			$this->flush_rewrite_rules_activation();
-
-		if ( $this->enqueue_rewrite_deactivate() )
-			$this->flush_rewrite_rules_deactivation();
-
-	}
-
-	/**
-	 * Add the WPMUdev Domain Mapping rules again. And flush them on init.
-	 * Domain Mapping bugfix.
-	 *
-	 * @param bool $options_saved : If we're in admin and the sanitiation function runs.
-	 *
-	 * Runs a flush and updates the site option to "true".
-	 * When the site option is set to true, it not flush again on init.
-	 *
-	 * If $options_saved is true, it will not check for the init action hook and continue,
-	 * So it will flush the next time on init.
-	 *
-	 * @since 2.3.0
-	 */
-	public function wpmudev_domainmap_flush_fix( $options_saved = false ) {
-
-		if ( $this->pretty_permalinks && $this->is_domainmapping_active() ) {
-			if ( current_action() == 'init' || $options_saved ) {
-				if ( class_exists( 'Domainmap_Module_Cdsso' ) && defined( 'Domainmap_Module_Cdsso::SSO_ENDPOINT' ) ) {
-					add_rewrite_endpoint( Domainmap_Module_Cdsso::SSO_ENDPOINT, EP_ALL );
-
-					//* Force extra flush on init.
-					if ( class_exists( 'domain_map' ) ) {
-						$key = 'the_seo_framework_wpmdev_dm' . get_current_blog_id() . '_extra_flush';
-
-						if ( $options_saved ) {
-							if ( get_site_option( $key ) ) {
-								//* Prevent flushing multiple times.
-								update_site_option( $key, false );
-							}
-						} else {
-							if ( ! get_site_option( $key ) ) {
-								//* Prevent flushing multiple times.
-								update_site_option( $key, true );
-
-								//* Now flush
-								flush_rewrite_rules();
-							}
-						}
-					}
-				}
-			}
-		}
-
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Search
+ *
+ * Generates sitemap and outputs it.
+ *
+ * @since 2.2.9
+ */
+class AutoDescription_Sitemaps extends AutoDescription_Metaboxes {
+
+	/**
+	 * Maximum number of posts that show up in the sitemap.xml page.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @var int Max Posts in Sitemap
+	 */
+	protected $max_posts;
+
+	/**
+	 * Checks for pretty permalinks.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @var bool true if pretty
+	 */
+	protected $pretty_permalinks;
+
+	/**
+	 * Checks if sitemap is being output.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @var bool true if sitemap is being output.
+	 */
+	protected $doing_sitemap = false;
+
+	/**
+	 * Constructor, load parent constructor and set up caches.
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		// I'm not going to initialize my own rewrite engine. Causes too many problems.
+		$this->pretty_permalinks = ( '' !== get_option( 'permalink_structure' ) ) ? true : false;
+
+		/**
+		 * Add query strings to rewrite
+		 */
+		add_action( 'init', array( $this, 'rewrite_rule_sitemap' ), 1 );
+		add_filter( 'query_vars', array( $this, 'enqueue_sitemap_query_vars' ), 1 );
+
+		/**
+		 * Adding a higher priority will cause a trailing slash to be added.
+		 * We need to be in front of the queue to prevent this from happening.
+		 */
+		add_action( 'template_redirect', array( $this, 'maybe_output_sitemap' ), 1 );
+
+		//* Edit the robots.txt file
+		add_filter( 'robots_txt', array( $this, 'robots_txt' ), 10, 2 );
+
+		//* Enqueue rewrite flush
+		add_action( 'shutdown', array( $this, 'maybe_flush_rewrite' ), 999 );
+	}
+
+	/**
+	 * Whether we can output sitemap or not based on options.
+	 *
+	 * @staticvar bool $cache
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function can_run_sitemap() {
+
+		static $cache = null;
+
+		if ( isset( $cache ) )
+			return $cache;
+
+		/**
+		 * Don't do anything on a deleted or spam blog.
+		 * There's nothing to find anyway. Multisite Only.
+		 */
+		return $cache = $this->pretty_permalinks && $this->is_option_checked( 'sitemaps_output' ) && false === $this->current_blog_is_spam_or_deleted() ? true : false;
+	}
+
+	/**
+	 * Adds rewrite rule to WordPress
+	 * This rule defines the sitemap.xml output
+	 *
+	 * @param bool $override add the rule anyway, regardless of setting.
+	 *
+	 * @since 2.2.9
+	 */
+	public function rewrite_rule_sitemap( $run = false ) {
+
+		//* Adding rewrite rules only has effect when permalink structures are active.
+		if ( $this->can_run_sitemap() || $run ) {
+
+			/**
+			 * Don't do anything if a sitemap plugin is active.
+			 * On sitemap plugin activation, the sitemap plugin should flush the
+			 * rewrite rules. If it doesn't, then this plugin's sitemap will be called.
+			 */
+			if ( $this->has_sitemap_plugin() )
+				return;
+
+			add_rewrite_rule( 'sitemap\.xml$', 'index.php?the_seo_framework_sitemap=xml', 'top' );
+
+			$this->wpmudev_domainmap_flush_fix( false );
+		}
+
+	}
+
+	/**
+	 * Register the_seo_framework_sitemap to wp_query
+	 *
+	 * @param array vars The WP_Query vars
+	 *
+	 * @since 2.2.9
+	 */
+	public function enqueue_sitemap_query_vars( $vars ) {
+
+		if ( $this->can_run_sitemap() )
+			$vars[] = 'the_seo_framework_sitemap';
+
+		return $vars;
+	}
+
+	/**
+	 * Maybe Output sitemap.xml 'file' and header.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @return void|header+string SiteMap XML file.
+	 */
+	public function maybe_output_sitemap() {
+
+		if ( $this->can_run_sitemap() ) {
+			global $wp_query;
+
+			if ( isset( $wp_query->query_vars['the_seo_framework_sitemap'] ) && 'xml' === $wp_query->query_vars['the_seo_framework_sitemap'] ) {
+				// Don't let WordPress think this is 404.
+				$wp_query->is_404 = false;
+
+				$this->doing_sitemap = true;
+
+				/**
+				 * Applies filters 'the_seo_framework_sitemap_post_limit' : int
+				 * @since 2.2.9
+				 */
+				$this->max_posts = (int) apply_filters( 'the_seo_framework_sitemap_post_limit', 700 );
+
+				/**
+				 * Set at least 2000 variables free.
+				 * Freeing 0.15MB on a clean WordPress installation.
+				 * @since 2.6.0
+				 */
+				$this->clean_up_globals();
+
+				$this->output_sitemap();
+			}
+		}
+
+	}
+
+	/**
+	 * Destroy unused $GLOBALS.
+	 *
+	 * @param bool $get_freed_memory Whether to return the freed memory in bytes.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return int $freed_memory
+	 */
+	protected function clean_up_globals( $get_freed_memory = false ) {
+
+		static $freed_memory = null;
+
+		if ( $get_freed_memory )
+			return $freed_memory;
+
+		if ( $this->the_seo_framework_debug ) $memory = memory_get_usage();
+
+		$remove = array(
+			'wp_filter' => array(
+				'wp_head',
+				'admin_head',
+				'the_content',
+				'the_content_feed',
+				'the_excerpt_rss',
+				'wp_footer',
+				'admin_footer',
+			),
+			'wp_registered_widgets',
+			'wp_registered_sidebars',
+			'wp_registered_widget_updates',
+			'wp_registered_widget_controls',
+			'_wp_deprecated_widgets_callbacks',
+			'posts',
+			'shortcode_tags',
+		);
+
+		foreach ( $remove as $key => $value ) {
+			if ( is_array( $value ) ) {
+				foreach ( $value as $v )
+					unset( $GLOBALS[$key][$v] );
+			} else {
+				unset( $GLOBALS[$value] );
+			}
+		}
+
+		if ( $this->the_seo_framework_debug ) $freed_memory = $memory - memory_get_usage();
+
+	}
+
+	/**
+	 * Output sitemap.xml 'file' and header.
+	 *
+	 * @since 2.2.9
+	 */
+	protected function output_sitemap() {
+
+		if ( ! headers_sent() )
+			header( 'Content-type: text/xml; charset=utf-8' );
+
+		//* Remove output, if any.
+		if ( ob_get_level() > 0 ) {
+			if ( ob_get_contents() )
+				ob_clean();
+		}
+
+		//* Fetch sitemap content.
+		$xml_content = $this->get_sitemap_content();
+
+		//* Echo and add trailing line.
+		echo $xml_content . "\r\n";
+
+		// We're done now.
+		die();
+	}
+
+	/**
+	 * Output sitemap.xml content from transient.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @return string Sitemap XML contents.
+	 */
+	protected function get_sitemap_content() {
+
+		if ( $this->the_seo_framework_debug ) $timer_start = microtime( true );
+
+		/**
+		 * Re-use the variable, eliminating database requests
+		 * @since 2.4.0
+		 */
+		$sitemap_content = $this->get_transient( $this->sitemap_transient );
+
+		if ( false === $sitemap_content ) {
+			$cached_content = "\r\n<!-- " . __( 'Sitemap is generated for this view', 'autodescription' ) . " -->";
+		} else {
+			$cached_content = "\r\n<!-- " . __( 'Sitemap is served from cache', 'autodescription' ) . " -->";
+		}
+
+		$content  = '<?xml version="1.0" encoding="UTF-8"?>' . "\r\n";
+		$content .= '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\r\n";
+		$content .= $this->setup_sitemap( $sitemap_content );
+		$content .= '</urlset>';
+
+		$content .= $cached_content;
+
+		/**
+		 * Output debug info.
+		 * @since 2.3.7
+		 */
+		if ( $this->the_seo_framework_debug ) {
+			$content .= "\r\n<!-- Site estimated peak usage: " . ( memory_get_peak_usage() / 1024 / 1024 ) . " MB -->";
+			$content .= "\r\n<!-- System estimated peak usage: " . ( memory_get_peak_usage( true ) / 1024 / 1024 ) . " MB -->";
+			$content .= "\r\n<!-- Freed memory prior to generation: " . $this->clean_up_globals( true ) / 1024 . " kB -->";
+			$content .= "\r\n<!-- Sitemap generation time: " . ( number_format( microtime( true ) - $timer_start, 6 ) ) . " seconds -->";
+		}
+
+		return $content;
+	}
+
+	/**
+	 * Create sitemap.xml content transient.
+	 *
+	 * @param string|bool $content required The sitemap transient content.
+	 *
+	 * @since 2.6.0
+	 */
+	public function setup_sitemap( $sitemap_content ) {
+
+		if ( false === $sitemap_content ) {
+			//* Transient doesn't exist yet.
+			$sitemap_content = $this->generate_sitemap();
+
+			/**
+			 * Transient expiration: 1 week.
+			 * Keep the sitemap for at most 1 week.
+			 *
+			 * 60s * 60m * 24h * 7d
+			 */
+			$expiration = 60 * 60 * 24 * 7;
+
+			$this->set_transient( $this->sitemap_transient, $sitemap_content, $expiration );
+		}
+
+		return $sitemap_content;
+	}
+
+	/**
+	 * Generate sitemap.xml content.
+	 *
+	 * @param bool $secure Only process when param is given.
+	 *
+	 * @since 2.2.9
+	 */
+	protected function generate_sitemap() {
+
+		$content = '';
+
+		/**
+		 * Applies filters the_seo_framework_sitemap_exclude_ids : array of id's
+		 *
+		 * @since 2.5.2
+		 */
+		$excluded = (array) apply_filters( 'the_seo_framework_sitemap_exclude_ids', array() );
+
+		if ( empty( $excluded ) ) {
+			$excluded = '';
+		} else {
+			$excluded = array_flip( $excluded );
+		}
+
+		/**
+		 * Maximum pages and posts to fetch.
+		 * A total of 2100, consisting of 3 times $max_posts
+		 *
+		 * Applies filters the_seo_framework_sitemap_pages_count : int max pages
+		 * Applies filters the_seo_framework_sitemap_posts_count : int max posts
+		 * Applies filters the_seo_framework_sitemap_custom_posts_count : int max posts
+		 */
+		$totalpages = (int) apply_filters( 'the_seo_framework_sitemap_pages_count', $this->max_posts );
+		$totalposts = (int) apply_filters( 'the_seo_framework_sitemap_posts_count', $this->max_posts );
+		$total_cpt_posts = (int) apply_filters( 'the_seo_framework_sitemap_custom_posts_count', $this->max_posts );
+
+		$latest_pages = array();
+		$latest_posts = array();
+		$latest_cpt_posts = array();
+		$cpt = array();
+
+		//* Sets timezone according to WordPress settings.
+		$this->set_timezone();
+		$timestamp_format = $this->get_option( 'sitemap_timestamps' );
+		$timestamp_format = '1' === $timestamp_format ? 'Y-m-d\TH:iP' : 'Y-m-d';
+
+		/**
+		 * Fetch the page/post modified options.
+		 * We can't get specific on the home page, unfortunately.
+		 */
+		$sitemaps_modified = $this->is_option_checked( 'sitemaps_modified' );
+		if ( $sitemaps_modified ) {
+			$page_lastmod = true;
+			$post_lastmod = true;
+			$home_lastmod = true;
+		} else {
+			$page_lastmod = $this->is_option_checked( 'page_modify_time' );
+			$post_lastmod = $this->is_option_checked( 'post_modify_time' );
+			$home_lastmod = $page_lastmod ? $page_lastmod : $this->is_option_checked( 'home_modify_time' );
+		}
+
+		/**
+		 * Generation time output
+		 *
+		 * Applies filter the_seo_framework_sitemap_timestamp : bool
+		 */
+		$timestamp = (bool) apply_filters( 'the_seo_framework_sitemap_timestamp', true );
+
+		if ( $timestamp )
+			$content .= '<!-- ' . __( 'Sitemap is generated on', 'autodescription' ) . ' ' . current_time( "Y-m-d H:i:s" ) . ' -->' . "\r\n";
+
+		if ( $totalpages ) {
+			//* Ascend by the date for normal pages. Older pages get to the top of the list.
+			$args = array(
+				'numberposts' 		=> $totalpages,
+				'posts_per_page' 	=> $totalpages,
+				'post_type' 		=> 'page',
+				'orderby' 			=> 'date',
+				'order' 			=> 'ASC',
+				'post_status' 		=> 'publish',
+				'cache_results' 	=> false,
+			);
+			$latest_pages = get_posts( $args );
+		}
+		$latest_pages_amount = (int) count( $latest_pages );
+
+		if ( $latest_pages_amount > 0 ) {
+
+			$id_on_front = $this->has_page_on_front() ? (int) get_option( 'page_on_front' ) : (int) get_option( 'page_for_posts' );
+
+			/**
+			 * This can be heavy.
+			 */
+			foreach ( $latest_pages as $page ) {
+				if ( isset( $page->ID ) ) {
+					$page_id = $page->ID;
+
+					if ( '' === $excluded || ! isset( $excluded[$post_id] ) ) {
+						//* Is this the front page?
+						$page_is_front = ( $page_id === $id_on_front ) ? true : false;
+
+						//* Fetch the noindex option, per page.
+						$noindex = (bool) $this->get_custom_field( '_genesis_noindex', $page_id );
+
+						//* Continue if indexed.
+						if ( false === $noindex ) {
+							$content .= "	<url>\r\n";
+							if ( $page_is_front ) {
+								$content .= '		<loc>' . $this->the_url( '', array( 'get_custom_field' => false, 'external' => true, 'home' => true ) ) . "</loc>\r\n";
+							} else {
+								$content .= '		<loc>' . $this->the_url( '', array( 'get_custom_field' => false, 'external' => true, 'post' => $page, 'id' => $page_id ) ) . "</loc>\r\n";
+							}
+
+							// Keep it consistent. Only parse if page_lastmod is true.
+							if ( $page_lastmod || ( $page_is_front && $home_lastmod ) ) {
+								$page_modified_gmt = $page->post_modified_gmt;
+
+								if ( $page_modified_gmt !== '0000-00-00 00:00:00' )
+									$content .= '		<lastmod>' . mysql2date( $timestamp_format, $page_modified_gmt, false ) . "</lastmod>\r\n";
+							}
+
+							// Give higher priority to the home page.
+							$priority_page = $page_is_front ? 1 : 0.9;
+
+							$content .= '		<priority>' . number_format( $priority_page, 1 ) . "</priority>\r\n";
+							$content .= "	</url>\r\n";
+						}
+					}
+				}
+			}
+
+			//* Free memory.
+			unset( $latest_pages );
+		}
+
+		if ( $totalposts ) {
+			//* Descend by the date for posts. The latest posts get to the top of the list after pages.
+			$args = array(
+				'numberposts' 		=> $totalposts,
+				'posts_per_page' 	=> $totalposts,
+				'post_type' 		=> 'post',
+				'orderby' 			=> 'date',
+				'order' 			=> 'DESC',
+				'post_status' 		=> 'publish',
+				'cache_results' 	=> false,
+			);
+			$latest_posts = get_posts( $args );
+		}
+		$latest_posts_amount = (int) count( $latest_posts );
+
+		if ( $latest_posts_amount > 0 ) {
+
+			/**
+			 * Setting up priorities, with pages always being important.
+			 *
+			 * From there, older posts get a gradually lower priority. Down to 0.
+			 * Differentiate with 1 / max posts (0 to $this->max_posts). With a 1 dot decimal.
+			 */
+			$priority = 0.9;
+
+			/**
+			 * Infinity is abstract. But what is it when it's both positive and negative?
+			 * Undefined. Bugfix.
+			 *
+			 * @since 2.3.2
+			 * @thanks Schlock | https://wordpress.org/support/topic/sitemap-xml-parsing-error
+			 */
+			$prioritydiff = 0;
+
+			if ( $latest_posts_amount > (int) 1 )
+				$prioritydiff = 0.9 / $latest_posts_amount;
+
+			// Keep it consistent. Only remove 0.1 when we only have a few posts.
+			if ( $latest_posts_amount <= (int) 9 && $latest_posts_amount > (int) 1 )
+				$prioritydiff = 0.1;
+
+			/**
+			 * This can be heavy.
+			 */
+			foreach ( $latest_posts as $post ) {
+				if ( isset( $post->ID ) ) {
+					$post_id = $post->ID;
+
+					if ( '' === $excluded || ! isset( $excluded[$post_id] ) ) {
+
+						//* Fetch the noindex option, per page.
+						$noindex = (bool) $this->get_custom_field( '_genesis_noindex', $post_id );
+
+						//* Continue if indexed
+						if ( ! $noindex ) {
+
+							$content .= "	<url>\r\n";
+							// No need to use static vars
+							$content .= '		<loc>' . $this->the_url( '', array( 'get_custom_field' => false, 'external' => true, 'post' => $post, 'id' => $post_id ) ) . "</loc>\r\n";
+
+							// Keep it consistent. Only parse if page_lastmod is true.
+							if ( $post_lastmod ) {
+								$post_modified_gmt = $post->post_modified_gmt;
+
+								if ( $post_modified_gmt !== '0000-00-00 00:00:00' )
+									$content .= '		<lastmod>' . mysql2date( $timestamp_format, $post_modified_gmt, false ) . "</lastmod>\r\n";
+							}
+
+							$content .= '		<priority>' . number_format( $priority, 1 ) . "</priority>\r\n";
+							$content .= "	</url>\r\n";
+
+							// Lower the priority for the next pass.
+							$priority = $priority - $prioritydiff;
+
+							// Cast away negative numbers.
+							$priority = $priority <= (int) 0 ? (int) 0 : (float) $priority;
+						}
+					}
+				}
+			}
+
+			//* Free memory.
+			unset( $latest_posts );
+		}
+
+		if ( $total_cpt_posts ) {
+			$post_page = (array) get_post_types( array( 'public' => true ) );
+
+			/**
+			 * Applies filters Array the_seo_framework_sitemap_exclude_cpt : Excludes these CPT
+			 * @since 2.5.0
+			 */
+			$excluded_cpt = (array) apply_filters( 'the_seo_framework_sitemap_exclude_cpt', array() );
+
+			$not_cpt = array( 'post', 'page', 'attachment' );
+
+			foreach ( $post_page as $post_type ) {
+				if ( false === in_array( $post_type, $not_cpt ) ) {
+					if ( empty( $excluded_cpt ) || false === in_array( $post_type, $excluded_cpt ) ) {
+						if ( $this->post_type_supports_custom_seo( $post_type ) ) {
+							$cpt[] = $post_type;
+						}
+					}
+				}
+			}
+
+			if ( $cpt ) {
+				//* Descend by the date for CPTs. The latest posts get to the top of the list after pages.
+				$args = array(
+					'numberposts' 		=> $total_cpt_posts,
+					'posts_per_page' 	=> $total_cpt_posts,
+					'post_type' 		=> $cpt,
+					'orderby' 			=> 'date',
+					'order' 			=> 'DESC',
+					'post_status' 		=> 'publish',
+					'cache_results' 	=> false,
+				);
+				$latest_cpt_posts = get_posts( $args );
+			}
+		}
+		$latest_cpt_posts_amount = (int) count( $latest_cpt_posts );
+
+		if ( $latest_cpt_posts_amount > 0 ) {
+
+			/**
+			 * Setting up priorities, with pages always being important.
+			 *
+			 * From there, older posts get a gradually lower priority. Down to 0.
+			 * Differentiate with 1 / max posts (0 to $this->max_posts). With a 1 dot decimal.
+			 */
+			$priority_cpt = 0.9;
+
+			$prioritydiff_cpt = 0;
+
+			if ( $latest_cpt_posts_amount > (int) 1 )
+				$prioritydiff_cpt = 0.9 / $latest_cpt_posts_amount;
+
+			// Keep it consistent. Only remove 0.1 when we only have a few posts.
+			if ( $latest_cpt_posts_amount <= (int) 9 && $latest_cpt_posts_amount > (int) 1 )
+				$prioritydiff_cpt = 0.1;
+
+			/**
+			 * This can be heavy.
+			 */
+			foreach ( $latest_cpt_posts as $ctp_post ) {
+				if ( isset( $ctp_post->ID ) ) {
+					$post_id = $ctp_post->ID;
+
+					if ( '' === $excluded || ! isset( $excluded[$post_id] ) ) {
+
+						//* Fetch the noindex option, per page.
+						$noindex = (bool) $this->get_custom_field( '_genesis_noindex', $post_id );
+
+						//* Continue if indexed
+						if ( ! $noindex ) {
+
+							$content .= "	<url>\r\n";
+							//* No need to use static vars
+							$content .= '		<loc>' . $this->the_url( '', array( 'get_custom_field' => false, 'external' => true, 'post' => $ctp_post, 'id' => $post_id ) ) . "</loc>\r\n";
+
+							//* Keep it consistent. Only parse if page_lastmod is true.
+							if ( $post_lastmod ) {
+								$post_modified_gmt = $ctp_post->post_modified_gmt;
+
+								//* Some CPT don't set modified time.
+								if ( $post_modified_gmt !== '0000-00-00 00:00:00' )
+									$content .= '		<lastmod>' . mysql2date( $timestamp_format, $post_modified_gmt, false ) . "</lastmod>\r\n";
+							}
+
+							$content .= '		<priority>' . number_format( $priority_cpt, 1 ) . "</priority>\r\n";
+							$content .= "	</url>\r\n";
+
+							// Lower the priority for the next pass.
+							$priority_cpt = $priority_cpt - $prioritydiff_cpt;
+
+							// Cast away negative numbers.
+							$priority_cpt = $priority_cpt <= (int) 0 ? (int) 0 : (float) $priority_cpt;
+						}
+					}
+				}
+			}
+
+			//* Free memory.
+			unset( $latest_cpt_posts );
+		}
+
+		/**
+		 * Applies filters the_seo_framework_sitemap_additional_urls : {
+		 * 		@param string url The absolute url to the page. : {
+		 * 			@param string lastmod UNIXTIME Last modified date, e.g. "2016-01-26 13:04:55"
+		 * 			@param float|int|string priority URL Priority
+		 *		}
+		 * }
+		 *
+		 * @since 2.5.2
+		 */
+		$custom_urls = (array) apply_filters( 'the_seo_framework_sitemap_additional_urls', array() );
+
+		if ( $custom_urls ) {
+			foreach ( $custom_urls as $url => $args ) {
+
+				if ( ! is_array( $args ) ) {
+					//* If there are no args, it's assigned as URL (per example)
+					$url = $args;
+				}
+
+				$content .= "	<url>\r\n";
+				//* No need to use static vars
+				$content .= '		<loc>' . esc_url_raw( $url ) . "</loc>\r\n";
+
+				if ( isset( $args['lastmod'] ) && $args['lastmod'] ) {
+					$content .= '		<lastmod>' . mysql2date( $timestamp_format, $args['lastmod'], false ) . "</lastmod>\r\n";
+				}
+
+				if ( isset( $args['priority'] ) && $args['priority'] ) {
+					$priority = $args['priority'];
+				} else {
+					$priority = 0.9;
+				}
+
+				$content .= '		<priority>' . number_format( $priority, 1 ) . "</priority>\r\n";
+				$content .= "	</url>\r\n";
+			}
+		}
+
+		/**
+		 * Applies filters the_seo_framework_sitemap_extend : string
+		 * @since 2.5.2
+		 */
+		$extend = (string) apply_filters( 'the_seo_framework_sitemap_extend', '' );
+
+		if ( '' !== $extend )
+			$content .= "\t" . $extend . "\r\n";
+
+		//* Reset timezone to default.
+		$this->reset_timezone();
+
+		return $content;
+	}
+
+	/**
+	 * Ping search engines on post publish.
+	 *
+	 * @since 2.2.9
+	 */
+	public function ping_searchengines() {
+
+		/**
+		 * Don't ping if the blog isn't public.
+		 *
+		 * @since 2.3.1
+		 */
+		if ( false === $this->is_option_checked( 'site_noindex' ) && $this->is_blog_public() ) {
+			global $blog_id;
+
+			$blog_id = (string) $blog_id;
+
+			$transient = 'tsf_throttle_ping_' . $blog_id;
+
+			//* NOTE: Use legacy get_transient to prevent ping spam.
+			if ( false === get_transient( $transient ) ) {
+				//* Transient doesn't exist yet.
+
+				if ( $this->is_option_checked( 'ping_google' ) )
+					$this->ping_google();
+
+				if ( $this->is_option_checked( 'ping_bing' ) )
+					$this->ping_bing();
+
+				if ( $this->is_option_checked( 'ping_yandex' ) )
+					$this->ping_yandex();
+
+				// Sorry I couldn't help myself.
+				$throttle = 'Bert and Ernie are weird.';
+
+				/**
+				 * Limit the pinging to a maximum of 1 per hour.
+				 * Transient expiration. 1 hour.
+				 *
+				 * 60s * 60m
+				 *
+				 * Applies filters the_seo_framework_sitemap_throttle_s
+				 * @since 2.5.1
+				 */
+				$expiration = (int) apply_filters( 'the_seo_framework_sitemap_throttle_s', 60 * 60 );
+
+				//* @NOTE: Using legacy set_transient to prevent ping spam.
+				set_transient( $transient, $throttle, $expiration );
+			}
+		}
+
+	}
+
+	/**
+	 * Ping Google
+	 *
+	 * @since 2.2.9
+	 */
+	public function ping_google() {
+
+		$pingurl = 'http://www.google.com/webmasters/sitemaps/ping?sitemap=' . urlencode( $this->the_home_url_from_cache( true ) . 'sitemap.xml' );
+		wp_remote_get( $pingurl, array( 'timeout' => 3 ) );
+
+	}
+
+	/**
+	 * Ping Bing
+	 *
+	 * @since 2.2.9
+	 */
+	public function ping_bing() {
+
+		$pingurl = 'http://www.bing.com/webmaster/ping.aspx?siteMap=' . urlencode( $this->the_home_url_from_cache( true ) . 'sitemap.xml' );
+		wp_remote_get( $pingurl, array( 'timeout' => 3 ) );
+
+	}
+
+	/**
+	 * Ping Yandex
+	 *
+	 * @since 2.6.0
+	 */
+	public function ping_yandex() {
+
+		$pingurl = 'http://blogs.yandex.ru/pings/?status=success&url=' . urlencode( $this->the_home_url_from_cache( true ) . 'sitemap.xml' );
+		wp_remote_get( $pingurl, array( 'timeout' => 3 ) );
+
+	}
+
+	/**
+	 * Edits the robots.txt output
+	 *
+	 * Requires not to have a robots.txt file in the root directory
+	 *
+	 * @uses robots_txt filter located at WP core
+	 *
+	 * @since 2.2.9
+	 *
+	 * @global int $blog_id;
+	 *
+	 * @todo maybe combine with noindex/noarchive/(nofollow) -> only when object caching?
+	 */
+	public function robots_txt( $robots_txt = '', $public = '' ) {
+		global $blog_id;
+
+		/**
+		 * Don't do anything if the blog isn't public
+		 */
+		if ( '0' === $public )
+			return $robots_txt;
+
+		$revision = '1';
+
+		$cache_key = 'robots_txt_output_' . $revision . $blog_id;
+
+		$output = $this->object_cache_get( $cache_key );
+		if ( false === $output ) {
+			$output = '';
+
+			/**
+			 * Apply filters the_seo_framework_robots_txt_pre & the_seo_framework_robots_txt_pro
+			 * 		: Add custom cacheable lines.
+			 *		: Don't forget to add line breaks ( "\r\n" | PHP_EOL )
+			 *
+			 * @since 2.5.0
+			 */
+			$pre = (string) apply_filters( 'the_seo_framework_robots_txt_pre', '' );
+			$pro = (string) apply_filters( 'the_seo_framework_robots_txt_pro', '' );
+
+			$site_url = parse_url( site_url() );
+			$path = ( ! empty( $site_url['path'] ) ) ? $site_url['path'] : '';
+
+			$output .= $pre;
+			//* Output defaults
+			$output .= "User-agent: *\r\n";
+			$output .= "Disallow: $path/wp-admin/\r\n";
+			$output .= "Allow: $path/wp-admin/admin-ajax.php\r\n";
+
+			/**
+			 * Prevents query indexing
+			 * @since 2.2.9
+			 *
+			 * Applies filters the_seo_framework_robots_disallow_queries : Whether to allow queries for robots.
+			 * @since 2.5.0
+			 */
+			if ( apply_filters( 'the_seo_framework_robots_disallow_queries', false ) ) {
+				$home_url = parse_url( rtrim( $this->the_home_url_from_cache(), ' /' ) );
+				$home_path = ( ! empty( $home_url['path'] ) ) ? $home_url['path'] : '';
+				$output .= "Disallow: $home_path/*?*\r\n";
+			}
+
+			$output .= $pro;
+
+			if ( $this->get_option( 'sitemaps_robots' ) && $this->can_do_sitemap_robots() ) {
+				//* Add whitespace before sitemap.
+				$output .= "\r\n";
+
+				//* Add sitemap full url
+				$output .= 'Sitemap: ' . $this->the_home_url_from_cache( true ) . "sitemap.xml\r\n";
+			}
+
+			$this->object_cache_set( $cache_key, $output, 86400 );
+		}
+
+		/**
+		 * Completely override robots with output.
+		 * @since 2.5.0
+		 */
+		$robots_txt = $output;
+
+		return $robots_txt;
+	}
+
+	/**
+	 * Add and Flush rewrite rules on plugin activation.
+	 *
+	 * @since 2.2.9
+	 * @access private
+	 *
+	 * Do not return anything. Just be here. Thanks.
+	 */
+	public static function flush_rewrite_rules_activation() {
+		global $wp_rewrite;
+
+		//* This function is called statically.
+		$the_seo_framework = the_seo_framework();
+		$the_seo_framework->rewrite_rule_sitemap( true );
+
+		$wp_rewrite->init();
+		$wp_rewrite->flush_rules( true );
+	}
+
+	/**
+	 * Flush rewrite rules on plugin deactivation.
+	 *
+	 * @since 2.2.9
+	 * @access private
+	 *
+	 * Do not return anything. Just be here. Thanks.
+	 */
+	public static function flush_rewrite_rules_deactivation() {
+		global $wp_rewrite;
+
+		$wp_rewrite->init();
+
+		unset( $wp_rewrite->extra_rules_top['sitemap\.xml$'] );
+
+		$wp_rewrite->flush_rules( true );
+	}
+
+	/**
+	 * Enqueue rewrite flush for activation.
+	 *
+	 * @since 2.3.0
+	 * @access private
+	 * @staticvar bool $flush Only true
+	 *
+	 * @param bool $enqueue Whether to enqueue the flush or return its state.
+	 *
+	 * @return bool Whether to flush.
+	 */
+	public function enqueue_rewrite_activate( $enqueue = false ) {
+
+		static $flush = null;
+
+		if ( isset( $flush ) )
+			return $flush;
+
+		if ( $enqueue )
+			return $flush = true;
+
+		return false;
+	}
+
+	/**
+	 * Enqueue rewrite flush for deactivation.
+	 *
+	 * @since 2.3.0
+	 * @access private
+	 * @staticvar bool $flush Only true
+	 *
+	 * @param bool $enqueue Whether to enqueue the flush or return its state.
+	 *
+	 * @return bool Whether to flush.
+	 */
+	public function enqueue_rewrite_deactivate( $enqueue = false ) {
+
+		static $flush = null;
+
+		if ( isset( $flush ) )
+			return $flush;
+
+		if ( $enqueue )
+			return $flush = true;
+
+		return false;
+	}
+
+	/**
+	 * Enqueue rewrite flush for deactivation.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 * @staticvar bool $flush Only true
+	 *
+	 * @param bool $enqueue Whether to enqueue the flush or return its state.
+	 *
+	 * @return bool Whether to flush.
+	 */
+	public function enqueue_rewrite_flush_other( $enqueue = false ) {
+
+		static $flush = null;
+
+		if ( isset( $flush ) )
+			return $flush;
+
+		if ( $enqueue )
+			return $flush = true;
+
+		$this->wpmudev_domainmap_flush_fix( false, false );
+
+		return false;
+	}
+
+	/**
+	 * Flush rewrite rules based on static variables.
+	 *
+	 * @since 2.3.0
+	 * @access private
+	 */
+	public function maybe_flush_rewrite() {
+
+		if ( $this->enqueue_rewrite_activate() )
+			$this->flush_rewrite_rules_activation();
+
+		if ( $this->enqueue_rewrite_deactivate() )
+			$this->flush_rewrite_rules_deactivation();
+
+		if ( $this->enqueue_rewrite_flush_other() )
+			$this->flush_rewrite_rules();
+
+	}
+
+	/**
+	 * Initialize and flush rewrite rules.
+	 *
+	 * @param bool $reset Whether to reset the rules.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 */
+	public function flush_rewrite_rules( $reset = false ) {
+		global $wp_rewrite;
+
+		if ( $reset )
+			$wp_rewrite->init();
+
+		$wp_rewrite->flush_rules( true );
+	}
+
+	/**
+	 * Add the WPMUdev Domain Mapping rules again. And flush them on init.
+	 * Domain Mapping bugfix.
+	 *
+	 * @param bool $options_saved : If we're in admin and the sanitiation function runs.
+	 * @param bool $flush_now : Whether to flush directly on call if not yet flushed.
+	 *
+	 * Runs a flush and updates the site option to "true".
+	 * When the site option is set to true, it not flush again on init.
+	 *
+	 * If $options_saved is true, it will not check for the init action hook and continue,
+	 * So it will flush the next time on init.
+	 *
+	 * @since 2.3.0
+	 */
+	public function wpmudev_domainmap_flush_fix( $options_saved = false, $flush_now = true ) {
+
+		if ( $this->pretty_permalinks && $this->is_domainmapping_active() ) {
+
+			static $run = null;
+
+			if ( isset( $run ) && $run )
+				return;
+
+			$action = current_action();
+
+			if ( $options_saved || 'init' === $action || 'admin_init' === $action ) {
+				$run = true;
+
+				if ( class_exists( 'Domainmap_Module_Cdsso' ) && defined( 'Domainmap_Module_Cdsso::SSO_ENDPOINT' ) ) {
+					add_rewrite_endpoint( Domainmap_Module_Cdsso::SSO_ENDPOINT, EP_ALL );
+
+					//* Force extra flush on init.
+					$key = 'tsf_wpmudev_dm' . get_current_blog_id() . '_extraf_' . $this->o_plugin_updated;
+
+					if ( $options_saved ) {
+						//* Reset the flush on option change.
+						if ( get_site_option( $key ) )
+							update_site_option( $key, false );
+					} else {
+						if ( false === get_site_option( $key ) ) {
+							//* Prevent flushing multiple times.
+							update_site_option( $key, true );
+
+							//* Now flush
+							if ( $flush_now )
+								$this->flush_rewrite_rules();
+							else
+								$this->enqueue_rewrite_flush_other( true );
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+}
Index: inc/classes/siteoptions.class.php
===================================================================
--- inc/classes/siteoptions.class.php	(revision 1413572)
+++ inc/classes/siteoptions.class.php	(working copy)
@@ -1,874 +1,1086 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Siteoptions
- *
- * Holds Site Options for the plugin.
- *
- * @since 2.2.2
- */
-class AutoDescription_Siteoptions extends AutoDescription_Sanitize {
-
-	/**
-	 * Filterable Site Settings array.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var array Holds Site SEO options.
-	 */
-	protected $default_site_options = array();
-
-	/**
-	 * Filterable Site Settings array.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var array Holds Site SEO options.
-	 */
-	protected $warned_site_options = array();
-
-	/**
-	 * Site Settings field.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var string Settings field.
-	 */
-	protected $settings_field;
-
-	/**
-	 * Hold the Page ID for this class
-	 *
-	 * @since 2.2.2
-	 *
-	 * @var string The page ID
-	 */
-	protected $page_id;
-
-	/**
-	 * Constructor, load parent constructor and set up cachable variables.
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		//* Register defaults early.
-		add_action( 'after_setup_theme', array( $this, 'initialize_defaults' ), 0 );
-
-		$this->settings_field = THE_SEO_FRAMEWORK_SITE_OPTIONS;
-
-		//* Set up site settings and save/reset them
-		add_action( 'admin_init', array( $this, 'register_settings' ) );
-
-		// The page_id
-		$this->page_id = 'autodescription-settings';
-
-		/**
-		 * Add plugin links to the plugin activation page.
-		 * @since 2.2.8
-		 */
-		add_filter( 'plugin_action_links_' . THE_SEO_FRAMEWORK_PLUGIN_BASENAME, array( $this, 'plugin_action_links' ), 10, 2 );
-	}
-
-	/**
-	 * Initializes default settings very early at the after_setup_theme hook
-	 * Therefore supports is_rtl().
-	 *
-	 * @since 2.5.0
-	 */
-	public function initialize_defaults() {
-		/**
-		 * Switch when RTL is active;
-		 * @since 2.5.0
-		 */
-		if ( is_rtl() ) {
-			$titleloc = 'left';
-			$h_titleloc = 'right';
-		} else {
-			$titleloc = 'right';
-			$h_titleloc = 'left';
-		}
-
-		/**
-		 * Default site settings. Separated from Author, page or network settings.
-		 *
-		 * These settings can be overwritten per page or post depending on type and setting.
-		 *
-		 * @since 2.2.2
-		 *
-		 * No longer directly applies filters
-		 * @since 2.2.7
-		 */
-		$this->default_site_options = array(
-			'title_seperator'		=> 'pipe',	// Title separator (note: TYPO)
-			'title_location'		=> $titleloc,	// Title separation location
-			'title_rem_additions'	=> 0,		// Remove title additions
-
-			'description_separator'	=> 'pipe',	// Description separator
-			'description_blogname'	=> 1, 		// "on Blogname" within Description
-
-			'noodp'					=> 1, 	// Site noopd robots settings
-			'noydir'				=> 1, 	// Site noydir robots settings
-
-			'category_noindex'		=> 0,	// Category Archive robots noindex
-			'tag_noindex'			=> 0,	// Tag Archive robots noindex
-			'author_noindex'		=> 0,	// Author Archive robots noindex
-			'date_noindex'			=> 1,	// Date Archive robots noindex
-			'search_noindex'		=> 1,	// Search Page robots noindex
-			'attachment_noindex'	=> 1,	// Attachment Pages robots noindex
-			'site_noindex'			=> 0,	// Site Page robots noindex
-
-			'category_nofollow'		=> 0,	// Category Archive robots nofollow
-			'tag_nofollow'			=> 0,	// Tag Archive robots nofollow
-			'author_nofollow'		=> 0,	// Author Archive robots nofollow
-			'date_nofollow'			=> 0,	// Date Archive robots nofollow
-			'search_nofollow'		=> 0,	// Search Page robots nofollow
-			'attachment_nofollow'	=> 0,	// Attachment Pages robots noindex
-			'site_nofollow'			=> 0,	// Site Page robots nofollow
-
-			'category_noarchive'	=> 0,	// Category Archive robots noarchive
-			'tag_noarchive'			=> 0,	// Tag Archive robots noarchive
-			'author_noarchive'		=> 0,	// Author Archive robots noarchive
-			'date_noarchive'		=> 0,	// Date Archive robots noarchive
-			'search_noarchive'		=> 0,	// Search Page robots noarchive
-			'attachment_noarchive'	=> 0,	// Attachment Page robots noarchive
-			'site_noarchive'		=> 0,	// Site Page robots noarchive
-
-			'paged_noindex'			=> 1,	// Every second or later page noindex
-
-			'homepage_noindex'		=> 0,	// Home Page robots noindex
-			'homepage_nofollow'		=> 0,	// Home Page robots noarchive
-			'homepage_noarchive'	=> 0,	// Home Page robots nofollow
-
-			'homepage_title'		=> '',	// Home Page Title string
-			'homepage_tagline'		=> 1,	// Home Page add blog Tagline
-			'homepage_description'	=> '',	// Home Page Description string
-			'homepage_title_tagline' => '',	// Home Page Tagline string
-			'home_title_location'	=> $h_titleloc,	// Title separation location
-
-			'shortlink_tag'			=> 0,	// Adds shortlink tag
-
-			'prev_next_posts'		=> 0,	// Adds next/prev tags
-			'prev_next_archives'	=> 1,	// Adds next/prev tags
-
-			'facebook_publisher'	=> '',	// Facebook Business Url
-			'facebook_author'		=> '',	// Facebook User URl
-			'facebook_appid'		=> '',	// Facebook App ID
-
-			'post_publish_time'		=> 1,	// Article Published Time
-			'post_modify_time'		=> 1,	// Article Modified Time
-
-			'page_publish_time'		=> 0,	// Article Published Time
-			'page_modify_time'		=> 0,	// Article Modified Time
-
-			'home_publish_time'		=> 0,	// Article Modified Time
-			'home_modify_time'		=> 0,	// Article Modified Time
-
-			'twitter_card' 			=> 'summary_large_image',	// Twitter Card layout. If no twitter:image image is found, it'll change to 'summary'
-			'twitter_site' 			=> '', 	// Twitter business @username
-			'twitter_creator' 		=> '', 	// Twitter user @username
-
-			'og_tags' 				=> 1,	// Output of Open Graph meta tags
-			'facebook_tags'			=> 1, 	// Output the Facebook meta tags
-			'twitter_tags'			=> 1, 	// Output the Twitter meta tags
-
-			'google_verification'	=> '', 	// Google Verification Code
-			'bing_verification'		=> '', 	// Bing Verification Code
-			'pint_verification'		=> '', 	// Pinterest Verification Code
-
-			// https://developers.google.com/structured-data/customize/contact-points - This is extremely extended and valuable. Expect a premium version.
-			'knowledge_output'		=> 1,				// Default for outputing the Knowledge SEO.
-			'knowledge_type'		=> 'organization',	// Organization or Person
-
-			// https://developers.google.com/structured-data/customize/logos
-			'knowledge_logo'		=> 1,	// Fetch logo from WP Favicon
-			'knowledge_name'		=> '',	// Person or Organization name
-
-			// 'Sameas'
-			'knowledge_facebook'	=> '',	// Facebook Account
-			'knowledge_twitter'		=> '',	// Twitter Account
-			'knowledge_gplus'		=> '',	// Google Plus Account
-			'knowledge_instagram'	=> '',	// Instagram Account
-			'knowledge_youtube'		=> '',	// Youtube Account
-			'knowledge_linkedin'	=> '',	// Linkedin Account
-		//	'knowledge_myspace'		=> '',	// MySpace Account // meh.
-			'knowledge_pinterest'	=> '',	// Pinterest Account
-			'knowledge_soundcloud'	=> '',	// SoundCloud Account
-			'knowledge_tumblr'		=> '',	// Tumblr Account
-
-			// Sitemaps
-			'sitemaps_output'		=> 1,	// Output of sitemaps
-			'sitemaps_modified'		=> 1,	// Add sitemaps modified time
-			'sitemaps_robots'		=> 1,	// Add sitemaps location to robots.txt
-			'ping_google'			=> 1,	// Ping Google
-			'ping_bing'				=> 1,	// Ping Bing
-			'ping_yahoo'			=> 1,	// Ping Yahoo
-
-			// Feed
-			'excerpt_the_feed'		=> 1,	// Generate feed Excerpts
-			'source_the_feed'		=> 1,	// Add backlink at the end of the feed
-		);
-
-		/**
-		 * Warned site settings. Only accepts checkbox options.
-		 * When listed as 1, it's a feature which can destroy your site's SEO value when checked.
-		 *
-		 * Unchecking a box is simply "I'm not active." - Removing features generally do not negatively impact SEO value.
-		 * Since it's all about the content.
-		 *
-		 * Only used within the SEO Settings page.
-		 */
-		$this->warned_site_options = array(
-			'title_rem_additions'	=> 1, 	// Title remove additions.
-
-			'noodp'					=> 0, 	// Site noopd robots settings
-			'noydir'				=> 0, 	// Site noydir robots settings
-
-			'description_blogname'	=> 0, 	// "on Blogname" within Description
-
-			'category_noindex'		=> 0,	// Category Archive robots noindex
-			'tag_noindex'			=> 0,	// Tag Archive robots noindex
-			'author_noindex'		=> 0,	// Author Archive robots noindex
-			'date_noindex'			=> 0,	// Date Archive robots noindex
-			'search_noindex'		=> 0,	// Search Page robots noindex
-			'attachment_noindex'	=> 0,	// Attachment Pages robots noindex
-			'site_noindex'			=> 1,	// Site Page robots noindex
-
-			'category_nofollow'		=> 0,	// Category Archive robots nofollow
-			'tag_nofollow'			=> 0,	// Tag Archive robots nofollow
-			'author_nofollow'		=> 0,	// Author Archive robots nofollow
-			'date_nofollow'			=> 0,	// Date Archive robots nofollow
-			'search_nofollow'		=> 0,	// Search Page robots nofollow
-			'attachment_nofollow'	=> 0,	// Attachment Pages robots noindex
-			'site_nofollow'			=> 1,	// Site Page robots nofollow
-
-			'category_noarchive'	=> 0,	// Category Archive robots noarchive
-			'tag_noarchive'			=> 0,	// Tag Archive robots noarchive
-			'author_noarchive'		=> 0,	// Author Archive robots noarchive
-			'date_noarchive'		=> 0,	// Date Archive robots noarchive
-			'search_noarchive'		=> 0,	// Search Page robots noarchive
-			'attachment_noarchive'	=> 0,	// Attachment Page robots noarchive
-			'site_noarchive'		=> 0,	// Site Page robots noarchive
-
-			'paged_noindex'			=> 0,	// Every second or later page noindex
-
-			'homepage_noindex'		=> 1,	// Home Page robots noindex
-			'homepage_nofollow'		=> 1,	// Home Page robots noarchive
-			'homepage_noarchive'	=> 0,	// Home Page robots nofollow
-
-			'homepage_tagline'		=> 0,	// Home Page add blog Tagline
-
-			'shortlink_tag'			=> 0,	// Adds shortlink tag
-
-			'prev_next_posts'		=> 0,	// Adds next/prev tags
-			'prev_next_archives'	=> 0,	// Adds next/prev tags
-
-			'post_publish_time'		=> 0,	// Article Published Time
-			'post_modify_time'		=> 0,	// Article Modified Time
-
-			'page_publish_time'		=> 0,	// Article Published Time
-			'page_modify_time'		=> 0,	// Article Modified Time
-
-			'home_publish_time'		=> 0,	// Article Modified Time
-			'home_modify_time'		=> 0,	// Article Modified Time
-
-			'og_tags' 				=> 0,	// Output of Open Graph meta tags
-			'facebook_tags'			=> 0, 	// Output the Facebook meta tags
-			'twitter_tags'			=> 0, 	// Output the Twitter meta tags
-
-			'knowledge_output'		=> 0,	// Default for outputing the Knowledge SEO.
-			'knowledge_logo'		=> 0,	// Fetch logo from WP Favicon
-
-			// Sitemaps
-			'sitemaps_output'		=> 0,	// Output of sitemaps
-			'sitemaps_modified'		=> 0,	// Add sitemaps modified time
-			'sitemaps_robots'		=> 0,	// Add sitemaps location to robots.txt
-			'ping_google'			=> 0,	// Ping Google
-			'ping_bing'				=> 0,	// Ping Bing
-			'ping_yahoo'			=> 0,	// Ping Yahoo
-
-			// Feed
-			'excerpt_the_feed'		=> 0,	// Generate feed Excerpts
-			'source_the_feed'		=> 0,	// Add backlink at the end of the feed
-		);
-	}
-
-	/**
-	 * Return SEO options from the SEO options database.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses $this->the_seo_framework_get_option() Return option from the options table and cache result.
-	 * @uses THE_SEO_FRAMEWORK_SITE_OPTIONS
-	 *
-	 * @param string  $key       Option name.
-	 * @param boolean $use_cache Optional. Whether to use the cache value or not. Defaults to true.
-	 *
-	 * @return mixed The value of this $key in the database.
-	 */
-	public function get_option( $key, $use_cache = true ) {
-		return $this->the_seo_framework_get_option( $key, THE_SEO_FRAMEWORK_SITE_OPTIONS, $use_cache );
-	}
-
-	/**
-	 * Return SEO options from the SEO options database.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @uses $this->the_seo_framework_get_option() Return option from the options table and cache result.
-	 * @uses THE_SEO_FRAMEWORK_NETWORK_OPTIONS
-	 *
-	 * @param string  $key       Option name.
-	 * @param boolean $use_cache Optional. Whether to use the cache value or not. Defaults to true.
-	 *
-	 * @return mixed The value of this $key in the database.
-	 */
-	public function get_site_option( $key, $use_cache = true ) {
-		return $this->the_seo_framework_get_option( $key, THE_SEO_FRAMEWORK_NETWORK_OPTIONS, $use_cache );
-	}
-
-	/**
-	 * Return Default SEO options from the SEO options array.
-	 *
-	 * @since 2.2.5
-	 *
-	 * @uses $this->get_default_settings() Return option from the options table and cache result.
-	 * @uses THE_SEO_FRAMEWORK_SITE_OPTIONS
-	 *
-	 * @param string  $key       Option name.
-	 * @param boolean $use_cache Optional. Whether to use the cache value or not. Defaults to true.
-	 *
-	 * @return mixed The value of this $key in the database.
-	 */
-	public function get_default_option( $key, $use_cache = true ) {
-		return $this->get_default_settings( $key, THE_SEO_FRAMEWORK_SITE_OPTIONS, $use_cache );
-	}
-
-	/**
-	 * Return the compiled default options array.
-	 *
-	 * @since 2.2.7
-	 *
-	 * Applies filters the_seo_framework_default_site_options The default site options array.
-	 *
-	 * @param array $args The new default options through filter.
-	 * @return array The SEO Framework Options
-	 */
-	protected function default_site_options( $args = array() ) {
-		/**
-		 * New filter.
-		 * @since 2.3.0
-		 *
-		 * Removed previous filter.
-		 * @since 2.3.5
-		 */
-		return $this->default_site_options = wp_parse_args(
-			$args,
-			apply_filters(
-				'the_seo_framework_default_site_options',
-				wp_parse_args(
-					$args,
-					$this->default_site_options
-				)
-			)
-		);
-	}
-
-	/**
-	 * Return the Warned site options. Options which should be 'avoided' return true.
-	 *
-	 * @since 2.3.4
-	 *
-	 * Applies filters the_seo_framework_warned_site_options The warned site options array.
-	 *
-	 * @param array $args The new warned options through filter.
-	 * @return array The SEO Framework Warned Options
-	 */
-	protected function warned_site_options( $args = array() ) {
-		return $this->warned_site_options = wp_parse_args(
-			$args,
-			apply_filters(
-				'the_seo_framework_warned_site_options',
-				wp_parse_args(
-					$args,
-					$this->warned_site_options
-				)
-			)
-		);
-	}
-
-	/**
-	 * Register the database settings for storage.
-	 *
-	 * @since 2.2.2
-	 *
-	 * @return void
-	 *
-	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
-	 */
-	public function register_settings() {
-		//* If this page doesn't store settings, no need to register them
-		if ( ! $this->settings_field )
-			return;
-
-		register_setting( $this->settings_field, $this->settings_field );
-		add_option( $this->settings_field, $this->default_site_options() );
-
-		//* If this page isn't the SEO Settings page, there's no need to check for a reset.
-		if ( ! $this->is_menu_page( $this->page_id ) )
-			return;
-
-		if ( $this->get_option( 'reset', $this->settings_field ) ) {
-			if ( update_option( $this->settings_field, $this->default_site_options() ) )
-				$this->admin_redirect( $this->page_id, array( 'reset' => 'true' ) );
-			else
-				$this->admin_redirect( $this->page_id, array( 'error' => 'true' ) );
-			exit;
-		}
-
-	}
-
-	/**
-	 * Get the default of any of the The SEO Framework settings.
-	 *
-	 * @since 2.2.4
-	 *
-	 * @uses $this->settings_field
-	 * @uses $this->default_site_options()
-	 *
-	 * @param string $key required The option name
-	 * @param string $setting optional The settings field
-	 * @param bool $use_cache optional Use the options cache or not. For debugging purposes.
-	 *
-	 * @staticvar array $defaults_cache
-	 *
-	 * @return 	int|bool|string default option
-	 *			int '-1' if option doesn't exist.
-	 */
-	public function get_default_settings( $key, $setting = '', $use_cache = true ) {
-
-		if ( ! isset( $key ) || empty( $key ) )
-			return false;
-
-		//* Fetch default settings if it's not set.
-		if ( empty( $setting ) )
-			$setting = $this->settings_field;
-
-		//* If we need to bypass the cache
-		if ( ! $use_cache ) {
-			$defaults = $this->default_site_options();
-
-			if ( ! is_array( $defaults ) || ! array_key_exists( $key, $defaults ) )
-				return -1;
-
-			return is_array( $defaults[$key] ) ? stripslashes_deep( $defaults[$key] ) : stripslashes( wp_kses_decode_entities( $defaults[$key] ) );
-		}
-
-		static $defaults_cache = array();
-
-		//* Check options cache
-		if ( isset( $defaults_cache[$key] ) )
-			//* Option has been cached
-			return $defaults_cache[$key];
-
-		$defaults_cache = $this->default_site_options();
-
-		if ( ! is_array( $defaults_cache ) || ! array_key_exists( $key, (array) $defaults_cache ) )
-			$defaults_cache[$key] = -1;
-
-		return $defaults_cache[$key];
-	}
-
-	/**
-	 * Get the warned setting of any of the The SEO Framework settings.
-	 *
-	 * @since 2.3.4
-	 *
-	 * @uses $this->settings_field
-	 * @uses $this->warned_site_options()
-	 *
-	 * @param string $key required The option name
-	 * @param string $setting optional The settings field
-	 * @param bool $use_cache optional Use the options cache or not. For debugging purposes.
-	 *
-	 * @staticvar array $warned_cache
-	 *
-	 * @return 	int|bool|string default option
-	 *			int '-1' if option doesn't exist.
-	 */
-	public function get_warned_settings( $key, $setting = '', $use_cache = true ) {
-
-		if ( ! isset( $key ) || empty( $key ) )
-			return false;
-
-		//* Fetch default settings if it's not set.
-		if ( empty( $setting ) )
-			$setting = $this->settings_field;
-
-		//* If we need to bypass the cache
-		if ( ! $use_cache ) {
-			$warned = $this->warned_site_options();
-
-			if ( ! is_array( $warned ) || ! array_key_exists( $key, $warned ) )
-				return -1;
-
-			return is_array( $warned[$key] ) ? stripslashes_deep( $warned[$key] ) : stripslashes( wp_kses_decode_entities( $warned[$key] ) );
-		}
-
-		static $warned_cache = array();
-
-		//* Check options cache
-		if ( isset( $warned_cache[$key] ) )
-			//* Option has been cached
-			return $warned_cache[$key];
-
-		$warned_cache = $this->warned_site_options();
-
-		if ( ! is_array( $warned_cache ) || ! array_key_exists( $key, (array) $warned_cache ) )
-			$warned_cache[$key] = -1;
-
-		return $warned_cache[$key];
-	}
-
-	/**
-	 * Adds link from plugins page to SEO Settings page.
-	 *
-	 * @param array $links The current links.
-	 *
-	 * @since 2.2.8
-	 */
-	public function plugin_action_links( $links ) {
-
-		$framework_links = array(
-			'settings' => '<a href="' . esc_url( admin_url( 'admin.php?page=' . $this->page_id ) ) . '">' . __( 'SEO Settings', 'autodescription' ) . '</a>',
-			'home' => '<a href="'. esc_url( 'https://theseoframework.com' ) . '" target="_blank">' . _x( 'Plugin Home', 'As in: The Plugin Home Page', 'autodescription' ) . '</a>'
-		);
-
-		return array_merge( $framework_links, $links );
-	}
-
-	/**
-	 * Returns Facebook locales array
-	 *
-	 * @see https://www.facebook.com/translations/FacebookLocales.xml
-	 *
-	 * @since 2.5.2
-	 * @return array Valid Facebook locales
-	 */
-	public function fb_locales() {
-		return array(
-			'af_ZA', // Afrikaans
-			'ak_GH', // Akan
-			'am_ET', // Amharic
-			'ar_AR', // Arabic
-			'as_IN', // Assamese
-			'ay_BO', // Aymara
-			'az_AZ', // Azerbaijani
-			'be_BY', // Belarusian
-			'bg_BG', // Bulgarian
-			'bn_IN', // Bengali
-			'br_FR', // Breton
-			'bs_BA', // Bosnian
-			'ca_ES', // Catalan
-			'cb_IQ', // Sorani Kurdish
-			'ck_US', // Cherokee
-			'co_FR', // Corsican
-			'cs_CZ', // Czech
-			'cx_PH', // Cebuano
-			'cy_GB', // Welsh
-			'da_DK', // Danish
-			'de_DE', // German
-			'el_GR', // Greek
-			'en_GB', // English (UK)
-			'en_IN', // English (India)
-			'en_PI', // English (Pirate)
-			'en_UD', // English (Upside Down)
-			'en_US', // English (US)
-			'eo_EO', // Esperanto
-			'es_CL', // Spanish (Chile)
-			'es_CO', // Spanish (Colombia)
-			'es_ES', // Spanish (Spain)
-			'es_LA', // Spanish
-			'es_MX', // Spanish (Mexico)
-			'es_VE', // Spanish (Venezuela)
-			'et_EE', // Estonian
-			'eu_ES', // Basque
-			'fa_IR', // Persian
-			'fb_LT', // Leet Speak
-			'ff_NG', // Fulah
-			'fi_FI', // Finnish
-			'fo_FO', // Faroese
-			'fr_CA', // French (Canada)
-			'fr_FR', // French (France)
-			'fy_NL', // Frisian
-			'ga_IE', // Irish
-			'gl_ES', // Galician
-			'gn_PY', // Guarani
-			'gu_IN', // Gujarati
-			'gx_GR', // Classical Greek
-			'ha_NG', // Hausa
-			'he_IL', // Hebrew
-			'hi_IN', // Hindi
-			'hr_HR', // Croatian
-			'hu_HU', // Hungarian
-			'hy_AM', // Armenian
-			'id_ID', // Indonesian
-			'ig_NG', // Igbo
-			'is_IS', // Icelandic
-			'it_IT', // Italian
-			'ja_JP', // Japanese
-			'ja_KS', // Japanese (Kansai)
-			'jv_ID', // Javanese
-			'ka_GE', // Georgian
-			'kk_KZ', // Kazakh
-			'km_KH', // Khmer
-			'kn_IN', // Kannada
-			'ko_KR', // Korean
-			'ku_TR', // Kurdish (Kurmanji)
-			'ky_KG', // Kyrgyz
-			'la_VA', // Latin
-			'lg_UG', // Ganda
-			'li_NL', // Limburgish
-			'ln_CD', // Lingala
-			'lo_LA', // Lao
-			'lt_LT', // Lithuanian
-			'lv_LV', // Latvian
-			'mg_MG', // Malagasy
-			'mi_NZ', // Māori
-			'mk_MK', // Macedonian
-			'ml_IN', // Malayalam
-			'mn_MN', // Mongolian
-			'mr_IN', // Marathi
-			'ms_MY', // Malay
-			'mt_MT', // Maltese
-			'my_MM', // Burmese
-			'nb_NO', // Norwegian (bokmal)
-			'nd_ZW', // Ndebele
-			'ne_NP', // Nepali
-			'nl_BE', // Dutch (België)
-			'nl_NL', // Dutch
-			'nn_NO', // Norwegian (nynorsk)
-			'ny_MW', // Chewa
-			'or_IN', // Oriya
-			'pa_IN', // Punjabi
-			'pl_PL', // Polish
-			'ps_AF', // Pashto
-			'pt_BR', // Portuguese (Brazil)
-			'pt_PT', // Portuguese (Portugal)
-			'qu_PE', // Quechua
-			'rm_CH', // Romansh
-			'ro_RO', // Romanian
-			'ru_RU', // Russian
-			'rw_RW', // Kinyarwanda
-			'sa_IN', // Sanskrit
-			'sc_IT', // Sardinian
-			'se_NO', // Northern Sámi
-			'si_LK', // Sinhala
-			'sk_SK', // Slovak
-			'sl_SI', // Slovenian
-			'sn_ZW', // Shona
-			'so_SO', // Somali
-			'sq_AL', // Albanian
-			'sr_RS', // Serbian
-			'sv_SE', // Swedish
-			'sy_SY', // Swahili
-			'sw_KE', // Syriac
-			'sz_PL', // Silesian
-			'ta_IN', // Tamil
-			'te_IN', // Telugu
-			'tg_TJ', // Tajik
-			'th_TH', // Thai
-			'tk_TM', // Turkmen
-			'tl_PH', // Filipino
-			'tl_ST', // Klingon
-			'tr_TR', // Turkish
-			'tt_RU', // Tatar
-			'tz_MA', // Tamazight
-			'uk_UA', // Ukrainian
-			'ur_PK', // Urdu
-			'uz_UZ', // Uzbek
-			'vi_VN', // Vietnamese
-			'wo_SN', // Wolof
-			'xh_ZA', // Xhosa
-			'yi_DE', // Yiddish
-			'yo_NG', // Yoruba
-			'zh_CN', // Simplified Chinese (China)
-			'zh_HK', // Traditional Chinese (Hong Kong)
-			'zh_TW', // Traditional Chinese (Taiwan)
-			'zu_ZA', // Zulu
-			'zz_TR', // Zazaki
-		);
-	}
-
-	/**
-	 * Returns Facebook locales array keys.
-	 * This is apart from the fb_locales array since there are "duplicated" keys.
-	 * Use this to compare the numeric key position.
-	 *
-	 * @see https://www.facebook.com/translations/FacebookLocales.xml
-	 *
-	 * @since 2.5.2
-	 * @return array Valid Facebook locales
-	 */
-	public function language_keys() {
-		return array(
-			'af', // Afrikaans
-			'ak', // Akan
-			'am', // Amharic
-			'ar', // Arabic
-			'as', // Assamese
-			'ay', // Aymara
-			'az', // Azerbaijani
-			'be', // Belarusian
-			'bg', // Bulgarian
-			'bn', // Bengali
-			'br', // Breton
-			'bs', // Bosnian
-			'ca', // Catalan
-			'cb', // Sorani Kurdish
-			'ck', // Cherokee
-			'co', // Corsican
-			'cs', // Czech
-			'cx', // Cebuano
-			'cy', // Welsh
-			'da', // Danish
-			'de', // German
-			'el', // Greek
-			'en', // English (UK)
-			'en', // English (India)
-			'en', // English (Pirate)
-			'en', // English (Upside Down)
-			'en', // English (US)
-			'eo', // Esperanto
-			'es', // Spanish (Chile)
-			'es', // Spanish (Colombia)
-			'es', // Spanish (Spain)
-			'es', // Spanish
-			'es', // Spanish (Mexico)
-			'es', // Spanish (Venezuela)
-			'et', // Estonian
-			'eu', // Basque
-			'fa', // Persian
-			'fb', // Leet Speak
-			'ff', // Fulah
-			'fi', // Finnish
-			'fo', // Faroese
-			'fr', // French (Canada)
-			'fr', // French (France)
-			'fy', // Frisian
-			'ga', // Irish
-			'gl', // Galician
-			'gn', // Guarani
-			'gu', // Gujarati
-			'gx', // Classical Greek
-			'ha', // Hausa
-			'he', // Hebrew
-			'hi', // Hindi
-			'hr', // Croatian
-			'hu', // Hungarian
-			'hy', // Armenian
-			'id', // Indonesian
-			'ig', // Igbo
-			'is', // Icelandic
-			'it', // Italian
-			'ja', // Japanese
-			'ja', // Japanese (Kansai)
-			'jv', // Javanese
-			'ka', // Georgian
-			'kk', // Kazakh
-			'km', // Khmer
-			'kn', // Kannada
-			'ko', // Korean
-			'ku', // Kurdish (Kurmanji)
-			'ky', // Kyrgyz
-			'la', // Latin
-			'lg', // Ganda
-			'li', // Limburgish
-			'ln', // Lingala
-			'lo', // Lao
-			'lt', // Lithuanian
-			'lv', // Latvian
-			'mg', // Malagasy
-			'mi', // Māori
-			'mk', // Macedonian
-			'ml', // Malayalam
-			'mn', // Mongolian
-			'mr', // Marathi
-			'ms', // Malay
-			'mt', // Maltese
-			'my', // Burmese
-			'nb', // Norwegian (bokmal)
-			'nd', // Ndebele
-			'ne', // Nepali
-			'nl', // Dutch (België)
-			'nl', // Dutch
-			'nn', // Norwegian (nynorsk)
-			'ny', // Chewa
-			'or', // Oriya
-			'pa', // Punjabi
-			'pl', // Polish
-			'ps', // Pashto
-			'pt', // Portuguese (Brazil)
-			'pt', // Portuguese (Portugal)
-			'qu', // Quechua
-			'rm', // Romansh
-			'ro', // Romanian
-			'ru', // Russian
-			'rw', // Kinyarwanda
-			'sa', // Sanskrit
-			'sc', // Sardinian
-			'se', // Northern Sámi
-			'si', // Sinhala
-			'sk', // Slovak
-			'sl', // Slovenian
-			'sn', // Shona
-			'so', // Somali
-			'sq', // Albanian
-			'sr', // Serbian
-			'sv', // Swedish
-			'sy', // Swahili
-			'sw', // Syriac
-			'sz', // Silesian
-			'ta', // Tamil
-			'te', // Telugu
-			'tg', // Tajik
-			'th', // Thai
-			'tk', // Turkmen
-			'tl', // Filipino
-			'tl', // Klingon
-			'tr', // Turkish
-			'tt', // Tatar
-			'tz', // Tamazight
-			'uk', // Ukrainian
-			'ur', // Urdu
-			'uz', // Uzbek
-			'vi', // Vietnamese
-			'wo', // Wolof
-			'xh', // Xhosa
-			'yi', // Yiddish
-			'yo', // Yoruba
-			'zh', // Simplified Chinese (China)
-			'zh', // Traditional Chinese (Hong Kong)
-			'zh', // Traditional Chinese (Taiwan)
-			'zu', // Zulu
-			'zz', // Zazaki
-		);
-
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Siteoptions
+ *
+ * Holds Site Options for the plugin.
+ *
+ * @since 2.2.2
+ */
+class AutoDescription_Siteoptions extends AutoDescription_Sanitize {
+
+	/**
+	 * Site Settings field.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @var string Settings field.
+	 */
+	protected $settings_field;
+
+	/**
+	 * Hold the Page ID for this plugin.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @var string The page ID
+	 */
+	protected $page_id;
+
+	/**
+	 * Holds the update option.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @var string The Updated option name.
+	 */
+	protected $o_plugin_updated;
+
+	/**
+	 * Constructor, load parent constructor and set up cachable variables.
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		$this->settings_field = THE_SEO_FRAMEWORK_SITE_OPTIONS;
+		$this->o_plugin_updated = 'updated_' . str_replace( '.', '', THE_SEO_FRAMEWORK_VERSION );
+		$this->page_id = 'autodescription-settings';
+
+		//* Set up site settings and save/reset them
+		add_action( 'admin_init', array( $this, 'register_settings' ), 5 );
+
+		//* Update site options at plugin update.
+		add_action( 'admin_init', array( $this, 'site_updated_plugin_option' ) );
+
+	}
+
+	/**
+	 * Holds default site options.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return array Default site options.
+	 */
+	public function get_default_site_options() {
+
+		/**
+		 * Switch when RTL is active;
+		 * @since 2.5.0
+		 */
+		if ( is_rtl() ) {
+			$titleloc = 'left';
+			$h_titleloc = 'right';
+		} else {
+			$titleloc = 'right';
+			$h_titleloc = 'left';
+		}
+
+		/**
+		 * Default site settings. Separated from Author, page or network settings.
+		 *
+		 * These settings can be overwritten per page or post depending on type and setting.
+		 *
+		 * @since 2.2.2
+		 *
+		 * No longer directly applies filters
+		 * @since 2.2.7
+		 */
+		return array(
+			// Title.
+			'title_seperator'		=> 'pipe',		// Title separator (note: TYPO), dropdown
+			'title_location'		=> $titleloc,	// Title separation location
+			'title_rem_additions'	=> 0,			// Remove title additions
+			'title_rem_prefixes'	=> 0, 			// Remove title prefixes
+
+			// Description.
+			'description_separator'	=> 'pipe',	// Description separator, dropdown
+			'description_additions'	=> 1,		// "Title on Blogname" within Description
+			'description_blogname'	=> 1, 		// "on Blogname" within Description
+			'description_custom'	=> '',		// Custom prefix
+
+			// Robots directory.
+			'noodp'					=> 1, 	// Site noopd robots settings
+			'noydir'				=> 1, 	// Site noydir robots settings
+
+			// Robots index.
+			'category_noindex'		=> 0,	// Category Archive robots noindex
+			'tag_noindex'			=> 0,	// Tag Archive robots noindex
+			'author_noindex'		=> 0,	// Author Archive robots noindex
+			'date_noindex'			=> 1,	// Date Archive robots noindex
+			'search_noindex'		=> 1,	// Search Page robots noindex
+			'attachment_noindex'	=> 1,	// Attachment Pages robots noindex
+			'site_noindex'			=> 0,	// Site Page robots noindex
+
+			// Robots follow.
+			'category_nofollow'		=> 0,	// Category Archive robots nofollow
+			'tag_nofollow'			=> 0,	// Tag Archive robots nofollow
+			'author_nofollow'		=> 0,	// Author Archive robots nofollow
+			'date_nofollow'			=> 0,	// Date Archive robots nofollow
+			'search_nofollow'		=> 0,	// Search Page robots nofollow
+			'attachment_nofollow'	=> 0,	// Attachment Pages robots noindex
+			'site_nofollow'			=> 0,	// Site Page robots nofollow
+
+			// Robots archive.
+			'category_noarchive'	=> 0,	// Category Archive robots noarchive
+			'tag_noarchive'			=> 0,	// Tag Archive robots noarchive
+			'author_noarchive'		=> 0,	// Author Archive robots noarchive
+			'date_noarchive'		=> 0,	// Date Archive robots noarchive
+			'search_noarchive'		=> 0,	// Search Page robots noarchive
+			'attachment_noarchive'	=> 0,	// Attachment Page robots noarchive
+			'site_noarchive'		=> 0,	// Site Page robots noarchive
+
+			// Robots pagination index.
+			'paged_noindex'			=> 1,	// Every second or later page noindex
+			'home_paged_noindex'	=> 0,	// Every second or later homepage noindex
+
+			// Robots home.
+			'homepage_noindex'		=> 0,	// Home Page robots noindex
+			'homepage_nofollow'		=> 0,	// Home Page robots noarchive
+			'homepage_noarchive'	=> 0,	// Home Page robots nofollow
+
+			// Home meta.
+			'homepage_title'		=> '',	// Home Page Title string
+			'homepage_tagline'		=> 1,	// Home Page add blog Tagline
+			'homepage_description'	=> '',	// Home Page Description string
+			'homepage_title_tagline' => '',	// Home Page Tagline string
+			'home_title_location'	=> $h_titleloc,	// Title separation location
+
+			// Relationships
+			'shortlink_tag'			=> 0,	// Adds shortlink tag
+			'prev_next_posts'		=> 0,	// Adds next/prev tags
+			'prev_next_archives'	=> 1,	// Adds next/prev tags
+			'prev_next_frontpage'	=> 1,	// Adds next/prev tags
+
+			// Facebook.
+			'facebook_publisher'	=> '',	// Facebook Business Url
+			'facebook_author'		=> '',	// Facebook User URl
+			'facebook_appid'		=> '',	// Facebook App ID
+
+			// Dates.
+			'post_publish_time'		=> 1,	// Article Published Time
+			'post_modify_time'		=> 1,	// Article Modified Time
+
+			'page_publish_time'		=> 0,	// Article Published Time
+			'page_modify_time'		=> 0,	// Article Modified Time
+
+			'home_publish_time'		=> 0,	// Article Modified Time
+			'home_modify_time'		=> 0,	// Article Modified Time
+
+			// Twitter.
+			'twitter_card' 			=> 'summary_large_image',	// Twitter Card layout. If no twitter:image image is found, it'll change to 'summary', dropdown
+			'twitter_site' 			=> '', 	// Twitter business @username
+			'twitter_creator' 		=> '', 	// Twitter user @username
+
+			// Social on/off.
+			'og_tags' 				=> 1,	// Output of Open Graph meta tags
+			'facebook_tags'			=> 1, 	// Output the Facebook meta tags
+			'twitter_tags'			=> 1, 	// Output the Twitter meta tags
+			'googleplus_tags'		=> 1, 	// Output the Google+ meta tags
+
+			// Webmasters.
+			'google_verification'	=> '', 	// Google Verification Code
+			'bing_verification'		=> '', 	// Bing Verification Code
+			'yandex_verification'	=> '', 	// Yandex Verification Code
+			'pint_verification'		=> '', 	// Pinterest Verification Code
+
+			// Knowledge general. https://developers.google.com/structured-data/customize/contact-points - This is extremely extended and valuable. Expect a premium version.
+			'knowledge_output'		=> 1,				// Default for outputing the Knowledge SEO.
+			'knowledge_type'		=> 'organization',	// Organization or Person, dropdown
+
+			// Knowledge business. https://developers.google.com/structured-data/customize/logos
+			'knowledge_logo'		=> 1,	// Fetch logo from WP Favicon
+			'knowledge_name'		=> '',	// Person or Organization name
+
+			// 'Sameas'
+			'knowledge_facebook'	=> '',	// Facebook Account
+			'knowledge_twitter'		=> '',	// Twitter Account
+			'knowledge_gplus'		=> '',	// Google Plus Account
+			'knowledge_instagram'	=> '',	// Instagram Account
+			'knowledge_youtube'		=> '',	// Youtube Account
+			'knowledge_linkedin'	=> '',	// Linkedin Account
+		//	'knowledge_myspace'		=> '',	// MySpace Account // meh.
+			'knowledge_pinterest'	=> '',	// Pinterest Account
+			'knowledge_soundcloud'	=> '',	// SoundCloud Account
+			'knowledge_tumblr'		=> '',	// Tumblr Account
+
+			// Sitemaps.
+			'sitemaps_output'		=> 1,	// Output of sitemaps
+			'sitemaps_modified'		=> 1,	// Add sitemaps modified time
+			'sitemap_timestamps'	=> '1',	// Sitemaps modified time format, dropdown
+			'sitemaps_robots'		=> 1,	// Add sitemaps location to robots.txt
+			'ping_google'			=> 1,	// Ping Google
+			'ping_bing'				=> 1,	// Ping Bing
+			'ping_yandex'			=> 1,	// Ping Yandex
+
+			// Feed.
+			'excerpt_the_feed'		=> 1,	// Generate feed Excerpts
+			'source_the_feed'		=> 1,	// Add backlink at the end of the feed
+
+			// Schema
+			'ld_json_searchbox'		=> 1,	// LD+Json Sitelinks Searchbox
+			'ld_json_sitename'		=> 1,	// LD+Json Sitename
+			'ld_json_breadcrumbs'	=> 1,	// LD+Json Breadcrumbs
+
+			// Misc.
+			'counter_type' => 3, // JS counter type.
+
+			// Cache.
+			$this->o_plugin_updated => 1,	// Plugin update cache.
+		);
+	}
+
+	/**
+	 * Holds warned site options array.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return array $options.
+	 */
+	public function get_warned_site_options() {
+		/**
+		 * Warned site settings. Only accepts checkbox options.
+		 * When listed as 1, it's a feature which can destroy your website's SEO value when checked.
+		 *
+		 * Unchecking a box is simply "I'm not active." - Removing features generally do not negatively impact SEO value.
+		 * Since it's all about the content.
+		 *
+		 * Only used within the SEO Settings page.
+		 */
+		return array(
+			'title_rem_additions'	=> 1, 	// Title remove additions.
+			'title_rem_prefixes'	=> 0, 	// Title remove prefixes.
+
+			'noodp'					=> 0, 	// Site noopd robots settings
+			'noydir'				=> 0, 	// Site noydir robots settings
+
+			'description_additions'	=> 0,	// "Title on Blogname" within Description
+			'description_blogname'	=> 0, 	// "on Blogname" within Description
+
+			'category_noindex'		=> 0,	// Category Archive robots noindex
+			'tag_noindex'			=> 0,	// Tag Archive robots noindex
+			'author_noindex'		=> 0,	// Author Archive robots noindex
+			'date_noindex'			=> 0,	// Date Archive robots noindex
+			'search_noindex'		=> 0,	// Search Page robots noindex
+			'attachment_noindex'	=> 0,	// Attachment Pages robots noindex
+			'site_noindex'			=> 1,	// Site Page robots noindex
+
+			'category_nofollow'		=> 0,	// Category Archive robots nofollow
+			'tag_nofollow'			=> 0,	// Tag Archive robots nofollow
+			'author_nofollow'		=> 0,	// Author Archive robots nofollow
+			'date_nofollow'			=> 0,	// Date Archive robots nofollow
+			'search_nofollow'		=> 0,	// Search Page robots nofollow
+			'attachment_nofollow'	=> 0,	// Attachment Pages robots noindex
+			'site_nofollow'			=> 1,	// Site Page robots nofollow
+
+			'category_noarchive'	=> 0,	// Category Archive robots noarchive
+			'tag_noarchive'			=> 0,	// Tag Archive robots noarchive
+			'author_noarchive'		=> 0,	// Author Archive robots noarchive
+			'date_noarchive'		=> 0,	// Date Archive robots noarchive
+			'search_noarchive'		=> 0,	// Search Page robots noarchive
+			'attachment_noarchive'	=> 0,	// Attachment Page robots noarchive
+			'site_noarchive'		=> 0,	// Site Page robots noarchive
+
+			'paged_noindex'			=> 0,	// Every second or later page noindex
+			'home_paged_noindex'	=> 0,	// Every second or later homepage noindex
+
+			'homepage_noindex'		=> 1,	// Home Page robots noindex
+			'homepage_nofollow'		=> 1,	// Home Page robots noarchive
+			'homepage_noarchive'	=> 0,	// Home Page robots nofollow
+
+			'homepage_tagline'		=> 0,	// Home Page add blog Tagline
+
+			'shortlink_tag'			=> 0,	// Adds shortlink tag
+
+			'prev_next_posts'		=> 0,	// Adds next/prev tags
+			'prev_next_archives'	=> 0,	// Adds next/prev tags
+			'prev_next_frontpage'	=> 0,	// Adds next/prev tags
+
+			'post_publish_time'		=> 0,	// Article Published Time
+			'post_modify_time'		=> 0,	// Article Modified Time
+
+			'page_publish_time'		=> 0,	// Article Published Time
+			'page_modify_time'		=> 0,	// Article Modified Time
+
+			'home_publish_time'		=> 0,	// Article Modified Time
+			'home_modify_time'		=> 0,	// Article Modified Time
+
+			'og_tags' 				=> 0,	// Output of Open Graph meta tags
+			'facebook_tags'			=> 0, 	// Output the Facebook meta tags
+			'twitter_tags'			=> 0, 	// Output the Twitter meta tags
+			'googleplus_tags'		=> 0, 	// Output the Google+ meta tags
+
+			'knowledge_output'		=> 0,	// Default for outputing the Knowledge SEO.
+			'knowledge_logo'		=> 0,	// Fetch logo from WP Favicon
+
+			'sitemaps_output'		=> 0,	// Output of sitemaps
+			'sitemaps_modified'		=> 0,	// Add sitemaps modified time
+			'sitemaps_robots'		=> 0,	// Add sitemaps location to robots.txt
+			'ping_google'			=> 0,	// Ping Google
+			'ping_bing'				=> 0,	// Ping Bing
+			'ping_yandex'			=> 0,	// Ping Yandex
+
+			'excerpt_the_feed'		=> 0,	// Generate feed Excerpts
+			'source_the_feed'		=> 0,	// Add backlink at the end of the feed
+
+			'ld_json_searchbox'		=> 0,	// LD+Json Sitelinks Searchbox
+			'ld_json_sitename'		=> 0,	// LD+Json Sitename
+			'ld_json_breadcrumbs'	=> 0,	// LD+Json Breadcrumbs
+		);
+
+	}
+
+	/**
+	 * Updates special hidden values to default on settings save.
+	 *
+	 * @since 2.6.0
+	 */
+	protected function update_hidden_options_to_default() {
+
+		//* Disables the New SEO Settings Updated notification.
+		$plugin_updated = $this->o_plugin_updated;
+		$_POST[THE_SEO_FRAMEWORK_SITE_OPTIONS][$plugin_updated] = 1;
+
+	}
+
+	/**
+	 * Updates option from default options at plugin update.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @return void early if already has been updated.
+	 */
+	public function site_updated_plugin_option() {
+
+		$plugin_updated = $this->o_plugin_updated;
+
+		/**
+		 * Prevent this function from running more than once after update.
+		 * Also prevent running if no settings field is found.
+		 */
+		if ( $this->get_option( $plugin_updated ) || empty( $this->settings_field ) )
+			return;
+
+		//* If current user isn't allowed to update options, don't do anything.
+		if ( ! current_user_can( $this->settings_capability() ) )
+			return;
+
+		/**
+		 * Applies filters 'the_seo_framework_update_options_at_update' : bool
+		 * @since 2.6.0
+		 */
+		if ( ! apply_filters( 'the_seo_framework_update_options_at_update', true ) )
+			return;
+
+		$updated = false;
+		$options = $this->get_all_options();
+		$default_options = $this->default_site_options();
+
+		//* Merge the options. Add to if it's non-existent.
+		foreach ( $default_options as $key => $value ) {
+			if ( ! isset( $options[$key] ) ) {
+				if ( isset( $default_options[$key] ) && ! empty( $default_options[$key] ) ) {
+					$options[$key] = $default_options[$key];
+					$updated = true;
+				}
+			}
+		}
+
+		//* Stop this madness from happening again until next update.
+		$options[$plugin_updated] = 1;
+
+		//* Updated the options. Check for updated flag and see if settings pages are loaded.
+		if ( update_option( $this->settings_field, $options ) && $updated && $this->load_options ) {
+			$this->pre_output_site_updated_plugin_notice();
+		}
+
+		//* Flush rewrite rules at shutdown.
+		$this->enqueue_rewrite_flush_other( true );
+	}
+
+	/**
+	 * Determine whether to output update notice directly or on refresh.
+	 * Run before headers are sent.
+	 *
+	 * @since 2.6.0
+	 */
+	protected function pre_output_site_updated_plugin_notice() {
+
+		if ( $this->is_seo_settings_page() ) {
+			//* Redirect to current page if on options page to correct option values. Once.
+			if ( ! isset( $_REQUEST['seo-updated'] ) || 'true' !== $_REQUEST['seo-updated'] )
+				$this->admin_redirect( $this->page_id, array( 'seo-updated' => 'true' ) );
+
+			//* Notice has already been sent.
+			return;
+		}
+
+		//* Make sure this plugin's scripts are being loaded.
+		$this->init_admin_scripts();
+
+		//* Output notice.
+		add_action( 'admin_notices', array( $this, 'site_updated_plugin_notice' ) );
+
+	}
+
+	/**
+	 * Echo plugin updated notification.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @access private
+	 */
+	public function site_updated_plugin_notice() {
+
+		$notice = $this->page_defaults['plugin_update_text'];
+
+		$settings_url = $this->seo_settings_page_url();
+		$link = sprintf( '<a href="%s" title="%s" target="_self">%s</a>', $settings_url, __( 'SEO Settings', 'autodescription' ), __( 'here', 'autodescription' ) );
+
+		$go_to_page = sprintf( _x( 'View the new options %s.', '%s = here', 'autodescription' ), $link );
+
+		$notice = $notice . ' ' . $go_to_page;
+
+		echo $this->generate_dismissible_notice( $notice, 'updated' );
+
+	}
+
+	/**
+	 * Return SEO options from the SEO options database.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses $this->the_seo_framework_get_option() Return option from the options table and cache result.
+	 * @uses THE_SEO_FRAMEWORK_SITE_OPTIONS
+	 *
+	 * @param string  $key       Option name.
+	 * @param boolean $use_cache Optional. Whether to use the cache value or not. Defaults to true.
+	 *
+	 * @return mixed The value of this $key in the database.
+	 */
+	public function get_option( $key, $use_cache = true ) {
+		return $this->the_seo_framework_get_option( $key, THE_SEO_FRAMEWORK_SITE_OPTIONS, $use_cache );
+	}
+
+	/**
+	 * Return current option array.
+	 *
+	 * Applies filters 'the_seo_framework_get_options' : boolean
+	 *
+	 * @since 2.6.0
+	 * @staticvar array $cache The option cache.
+	 *
+	 * @return array Options.
+	 */
+	public function get_all_options( $setting = null ) {
+
+		static $cache = array();
+
+		if ( isset( $cache[$setting] ) )
+			return $cache[$setting];
+
+		if ( is_null( $setting ) )
+			$setting = THE_SEO_FRAMEWORK_SITE_OPTIONS;
+
+		return $cache[$setting] = apply_filters( 'the_seo_framework_get_options', get_option( $setting ), $setting );
+	}
+
+	/**
+	 * Return option from the options table and cache result.
+	 *
+	 * Applies `the_seo_framework_get_options` filters.
+	 * This filter retrieves the (previous) values from Genesis if exists.
+	 *
+	 * Values pulled from the database are cached on each request, so a second request for the same value won't cause a
+	 * second DB interaction.
+	 * @staticvar array $settings_cache
+	 * @staticvar array $options_cache
+	 *
+	 * @since 2.0.0
+	 *
+	 * @param string  $key        Option name.
+	 * @param string  $setting    Optional. Settings field name. Eventually defaults to null if not passed as an argument.
+	 * @param boolean $use_cache  Optional. Whether to use the cache value or not. Default is true.
+	 *
+	 * @return mixed The value of this $key in the database.
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	public function the_seo_framework_get_option( $key, $setting = null, $use_cache = true ) {
+
+		//* If we need to bypass the cache
+		if ( ! $use_cache ) {
+			$options = get_option( $setting );
+
+			if ( ! is_array( $options ) || ! array_key_exists( $key, $options ) )
+				return '';
+
+			return is_array( $options[$key] ) ? stripslashes_deep( $options[$key] ) : stripslashes( wp_kses_decode_entities( $options[$key] ) );
+		}
+
+		//* Setup caches
+		static $options_cache = array();
+
+		//* Check options cache
+		if ( isset( $options_cache[$setting][$key] ) )
+			//* Option has been cached
+			return $options_cache[$setting][$key];
+
+		$options = $this->get_all_options( $setting );
+
+		//* Check for non-existent option
+		if ( ! is_array( $options ) || ! array_key_exists( $key, (array) $options ) ) {
+			//* Cache non-existent option
+			$options_cache[$setting][$key] = '';
+		} else {
+			//* Option has not been previously been cached, so cache now
+			$options_cache[$setting][$key] = is_array( $options[$key] ) ? stripslashes_deep( $options[$key] ) : stripslashes( wp_kses_decode_entities( $options[$key] ) );
+		}
+
+		return $options_cache[$setting][$key];
+	}
+
+	/**
+	 * Return SEO options from the SEO options database.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @uses $this->the_seo_framework_get_option() Return option from the options table and cache result.
+	 * @uses THE_SEO_FRAMEWORK_NETWORK_OPTIONS
+	 *
+	 * @param string  $key       Option name.
+	 * @param boolean $use_cache Optional. Whether to use the cache value or not. Defaults to true.
+	 *
+	 * @return mixed The value of this $key in the database.
+	 */
+	public function get_site_option( $key, $use_cache = true ) {
+		return $this->the_seo_framework_get_option( $key, THE_SEO_FRAMEWORK_NETWORK_OPTIONS, $use_cache );
+	}
+
+	/**
+	 * Return Default SEO options from the SEO options array.
+	 *
+	 * @since 2.2.5
+	 *
+	 * @uses $this->get_default_settings() Return option from the options table and cache result.
+	 * @uses THE_SEO_FRAMEWORK_SITE_OPTIONS
+	 *
+	 * @param string  $key       Option name.
+	 * @param boolean $use_cache Optional. Whether to use the cache value or not. Defaults to true.
+	 *
+	 * @return mixed The value of this $key in the database.
+	 */
+	public function get_default_option( $key, $use_cache = true ) {
+		return $this->get_default_settings( $key, THE_SEO_FRAMEWORK_SITE_OPTIONS, $use_cache );
+	}
+
+	/**
+	 * Return the parsed default options array.
+	 *
+	 * @since 2.2.7
+	 *
+	 * Applies filters the_seo_framework_default_site_options : The default site options array.
+	 *
+	 * @param array $args Additional default options to filter.
+	 *
+	 * @return array The SEO Framework Options
+	 */
+	protected function default_site_options( $args = array() ) {
+		return wp_parse_args(
+			$args,
+			apply_filters(
+				'the_seo_framework_default_site_options',
+				wp_parse_args(
+					$args,
+					$this->get_default_site_options()
+				)
+			)
+		);
+	}
+
+	/**
+	 * Return the Warned site options. Options which should be 'avoided' return true.
+	 *
+	 * @since 2.3.4
+	 *
+	 * Applies filters the_seo_framework_warned_site_options The warned site options array.
+	 *
+	 * @param array $args Additional warned options to filter.
+	 *
+	 * @return array The SEO Framework Warned Options
+	 */
+	protected function warned_site_options( $args = array() ) {
+		return wp_parse_args(
+			$args,
+			apply_filters(
+				'the_seo_framework_warned_site_options',
+				wp_parse_args(
+					$args,
+					$this->get_warned_site_options()
+				)
+			)
+		);
+	}
+
+	/**
+	 * Register the database settings for storage.
+	 *
+	 * @since 2.2.2
+	 *
+	 * @return void
+	 *
+	 * @thanks StudioPress (http://www.studiopress.com/) for some code.
+	 */
+	public function register_settings() {
+
+		//* If this page doesn't store settings, no need to register them
+		if ( empty( $this->settings_field ) )
+			return;
+
+		register_setting( $this->settings_field, $this->settings_field );
+		add_option( $this->settings_field, $this->default_site_options() );
+
+		//* If this page isn't the SEO Settings page, there's no need to check for a reset.
+		if ( false === $this->is_seo_settings_page() )
+			return;
+
+		if ( $this->get_option( 'reset', $this->settings_field ) ) {
+			if ( update_option( $this->settings_field, $this->default_site_options() ) )
+				$this->admin_redirect( $this->page_id, array( 'reset' => 'true' ) );
+			else
+				$this->admin_redirect( $this->page_id, array( 'error' => 'true' ) );
+			exit;
+		}
+
+	}
+
+	/**
+	 * Get the default of any of the The SEO Framework settings.
+	 *
+	 * @since 2.2.4
+	 *
+	 * @uses $this->settings_field
+	 * @uses $this->default_site_options()
+	 *
+	 * @param string $key required The option name
+	 * @param string $setting optional The settings field
+	 * @param bool $use_cache optional Use the options cache or not. For debugging purposes.
+	 *
+	 * @staticvar array $defaults_cache
+	 *
+	 * @return 	int|bool|string default option
+	 *			int '-1' if option doesn't exist.
+	 */
+	public function get_default_settings( $key, $setting = '', $use_cache = true ) {
+
+		if ( ! isset( $key ) || empty( $key ) )
+			return false;
+
+		//* Fetch default settings if it's not set.
+		if ( empty( $setting ) )
+			$setting = $this->settings_field;
+
+		//* If we need to bypass the cache
+		if ( ! $use_cache ) {
+			$defaults = $this->default_site_options();
+
+			if ( ! is_array( $defaults ) || ! array_key_exists( $key, $defaults ) )
+				return -1;
+
+			return is_array( $defaults[$key] ) ? stripslashes_deep( $defaults[$key] ) : stripslashes( wp_kses_decode_entities( $defaults[$key] ) );
+		}
+
+		static $defaults_cache = array();
+
+		//* Check options cache
+		if ( isset( $defaults_cache[$key] ) )
+			//* Option has been cached
+			return $defaults_cache[$key];
+
+		$defaults_cache = $this->default_site_options();
+
+		if ( ! is_array( $defaults_cache ) || ! array_key_exists( $key, (array) $defaults_cache ) )
+			$defaults_cache[$key] = -1;
+
+		return $defaults_cache[$key];
+	}
+
+	/**
+	 * Get the warned setting of any of the The SEO Framework settings.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @uses $this->settings_field
+	 * @uses $this->warned_site_options()
+	 *
+	 * @param string $key required The option name
+	 * @param string $setting optional The settings field
+	 * @param bool $use_cache optional Use the options cache or not. For debugging purposes.
+	 *
+	 * @staticvar array $warned_cache
+	 *
+	 * @return 	int 0|1 Whether the option is flagged as dangerous for SEO.
+	 *			int '-1' if option doesn't exist.
+	 */
+	public function get_warned_settings( $key, $setting = '', $use_cache = true ) {
+
+		if ( empty( $key ) )
+			return false;
+
+		//* Fetch default settings if it's not set.
+		if ( empty( $setting ) )
+			$setting = $this->settings_field;
+
+		//* If we need to bypass the cache
+		if ( ! $use_cache ) {
+			$warned = $this->warned_site_options();
+
+			if ( ! is_array( $warned ) || ! array_key_exists( $key, $warned ) )
+				return -1;
+
+			return $this->s_one_zero( $warned[$key] );
+		}
+
+		static $warned_cache = array();
+
+		//* Check options cache
+		if ( isset( $warned_cache[$key] ) )
+			//* Option has been cached
+			return $warned_cache[$key];
+
+		$warned_options = $this->warned_site_options();
+
+		if ( ! is_array( $warned_options ) || ! array_key_exists( $key, (array) $warned_options ) )
+			$warned_cache[$key] = -1;
+
+		$warned_cache[$key] = $this->s_one_zero( $warned_options[$key] );
+
+		return $warned_cache[$key];
+	}
+
+	/**
+	 * Returns Facebook locales array
+	 *
+	 * @see https://www.facebook.com/translations/FacebookLocales.xml
+	 *
+	 * @since 2.5.2
+	 * @return array Valid Facebook locales
+	 */
+	public function fb_locales() {
+		return array(
+			'af_ZA', // Afrikaans
+			'ak_GH', // Akan
+			'am_ET', // Amharic
+			'ar_AR', // Arabic
+			'as_IN', // Assamese
+			'ay_BO', // Aymara
+			'az_AZ', // Azerbaijani
+			'be_BY', // Belarusian
+			'bg_BG', // Bulgarian
+			'bn_IN', // Bengali
+			'br_FR', // Breton
+			'bs_BA', // Bosnian
+			'ca_ES', // Catalan
+			'cb_IQ', // Sorani Kurdish
+			'ck_US', // Cherokee
+			'co_FR', // Corsican
+			'cs_CZ', // Czech
+			'cx_PH', // Cebuano
+			'cy_GB', // Welsh
+			'da_DK', // Danish
+			'de_DE', // German
+			'el_GR', // Greek
+			'en_GB', // English (UK)
+			'en_IN', // English (India)
+			'en_PI', // English (Pirate)
+			'en_UD', // English (Upside Down)
+			'en_US', // English (US)
+			'eo_EO', // Esperanto
+			'es_CL', // Spanish (Chile)
+			'es_CO', // Spanish (Colombia)
+			'es_ES', // Spanish (Spain)
+			'es_LA', // Spanish
+			'es_MX', // Spanish (Mexico)
+			'es_VE', // Spanish (Venezuela)
+			'et_EE', // Estonian
+			'eu_ES', // Basque
+			'fa_IR', // Persian
+			'fb_LT', // Leet Speak
+			'ff_NG', // Fulah
+			'fi_FI', // Finnish
+			'fo_FO', // Faroese
+			'fr_CA', // French (Canada)
+			'fr_FR', // French (France)
+			'fy_NL', // Frisian
+			'ga_IE', // Irish
+			'gl_ES', // Galician
+			'gn_PY', // Guarani
+			'gu_IN', // Gujarati
+			'gx_GR', // Classical Greek
+			'ha_NG', // Hausa
+			'he_IL', // Hebrew
+			'hi_IN', // Hindi
+			'hr_HR', // Croatian
+			'hu_HU', // Hungarian
+			'hy_AM', // Armenian
+			'id_ID', // Indonesian
+			'ig_NG', // Igbo
+			'is_IS', // Icelandic
+			'it_IT', // Italian
+			'ja_JP', // Japanese
+			'ja_KS', // Japanese (Kansai)
+			'jv_ID', // Javanese
+			'ka_GE', // Georgian
+			'kk_KZ', // Kazakh
+			'km_KH', // Khmer
+			'kn_IN', // Kannada
+			'ko_KR', // Korean
+			'ku_TR', // Kurdish (Kurmanji)
+			'ky_KG', // Kyrgyz
+			'la_VA', // Latin
+			'lg_UG', // Ganda
+			'li_NL', // Limburgish
+			'ln_CD', // Lingala
+			'lo_LA', // Lao
+			'lt_LT', // Lithuanian
+			'lv_LV', // Latvian
+			'mg_MG', // Malagasy
+			'mi_NZ', // Māori
+			'mk_MK', // Macedonian
+			'ml_IN', // Malayalam
+			'mn_MN', // Mongolian
+			'mr_IN', // Marathi
+			'ms_MY', // Malay
+			'mt_MT', // Maltese
+			'my_MM', // Burmese
+			'nb_NO', // Norwegian (bokmal)
+			'nd_ZW', // Ndebele
+			'ne_NP', // Nepali
+			'nl_BE', // Dutch (België)
+			'nl_NL', // Dutch
+			'nn_NO', // Norwegian (nynorsk)
+			'ny_MW', // Chewa
+			'or_IN', // Oriya
+			'pa_IN', // Punjabi
+			'pl_PL', // Polish
+			'ps_AF', // Pashto
+			'pt_BR', // Portuguese (Brazil)
+			'pt_PT', // Portuguese (Portugal)
+			'qu_PE', // Quechua
+			'rm_CH', // Romansh
+			'ro_RO', // Romanian
+			'ru_RU', // Russian
+			'rw_RW', // Kinyarwanda
+			'sa_IN', // Sanskrit
+			'sc_IT', // Sardinian
+			'se_NO', // Northern Sámi
+			'si_LK', // Sinhala
+			'sk_SK', // Slovak
+			'sl_SI', // Slovenian
+			'sn_ZW', // Shona
+			'so_SO', // Somali
+			'sq_AL', // Albanian
+			'sr_RS', // Serbian
+			'sv_SE', // Swedish
+			'sy_SY', // Swahili
+			'sw_KE', // Syriac
+			'sz_PL', // Silesian
+			'ta_IN', // Tamil
+			'te_IN', // Telugu
+			'tg_TJ', // Tajik
+			'th_TH', // Thai
+			'tk_TM', // Turkmen
+			'tl_PH', // Filipino
+			'tl_ST', // Klingon
+			'tr_TR', // Turkish
+			'tt_RU', // Tatar
+			'tz_MA', // Tamazight
+			'uk_UA', // Ukrainian
+			'ur_PK', // Urdu
+			'uz_UZ', // Uzbek
+			'vi_VN', // Vietnamese
+			'wo_SN', // Wolof
+			'xh_ZA', // Xhosa
+			'yi_DE', // Yiddish
+			'yo_NG', // Yoruba
+			'zh_CN', // Simplified Chinese (China)
+			'zh_HK', // Traditional Chinese (Hong Kong)
+			'zh_TW', // Traditional Chinese (Taiwan)
+			'zu_ZA', // Zulu
+			'zz_TR', // Zazaki
+		);
+	}
+
+	/**
+	 * Returns Facebook locales array keys.
+	 * This is apart from the fb_locales array since there are "duplicated" keys.
+	 * Use this to compare the numeric key position.
+	 *
+	 * @see https://www.facebook.com/translations/FacebookLocales.xml
+	 *
+	 * @since 2.5.2
+	 * @return array Valid Facebook locales
+	 */
+	public function language_keys() {
+		return array(
+			'af', // Afrikaans
+			'ak', // Akan
+			'am', // Amharic
+			'ar', // Arabic
+			'as', // Assamese
+			'ay', // Aymara
+			'az', // Azerbaijani
+			'be', // Belarusian
+			'bg', // Bulgarian
+			'bn', // Bengali
+			'br', // Breton
+			'bs', // Bosnian
+			'ca', // Catalan
+			'cb', // Sorani Kurdish
+			'ck', // Cherokee
+			'co', // Corsican
+			'cs', // Czech
+			'cx', // Cebuano
+			'cy', // Welsh
+			'da', // Danish
+			'de', // German
+			'el', // Greek
+			'en', // English (UK)
+			'en', // English (India)
+			'en', // English (Pirate)
+			'en', // English (Upside Down)
+			'en', // English (US)
+			'eo', // Esperanto
+			'es', // Spanish (Chile)
+			'es', // Spanish (Colombia)
+			'es', // Spanish (Spain)
+			'es', // Spanish
+			'es', // Spanish (Mexico)
+			'es', // Spanish (Venezuela)
+			'et', // Estonian
+			'eu', // Basque
+			'fa', // Persian
+			'fb', // Leet Speak
+			'ff', // Fulah
+			'fi', // Finnish
+			'fo', // Faroese
+			'fr', // French (Canada)
+			'fr', // French (France)
+			'fy', // Frisian
+			'ga', // Irish
+			'gl', // Galician
+			'gn', // Guarani
+			'gu', // Gujarati
+			'gx', // Classical Greek
+			'ha', // Hausa
+			'he', // Hebrew
+			'hi', // Hindi
+			'hr', // Croatian
+			'hu', // Hungarian
+			'hy', // Armenian
+			'id', // Indonesian
+			'ig', // Igbo
+			'is', // Icelandic
+			'it', // Italian
+			'ja', // Japanese
+			'ja', // Japanese (Kansai)
+			'jv', // Javanese
+			'ka', // Georgian
+			'kk', // Kazakh
+			'km', // Khmer
+			'kn', // Kannada
+			'ko', // Korean
+			'ku', // Kurdish (Kurmanji)
+			'ky', // Kyrgyz
+			'la', // Latin
+			'lg', // Ganda
+			'li', // Limburgish
+			'ln', // Lingala
+			'lo', // Lao
+			'lt', // Lithuanian
+			'lv', // Latvian
+			'mg', // Malagasy
+			'mi', // Māori
+			'mk', // Macedonian
+			'ml', // Malayalam
+			'mn', // Mongolian
+			'mr', // Marathi
+			'ms', // Malay
+			'mt', // Maltese
+			'my', // Burmese
+			'nb', // Norwegian (bokmal)
+			'nd', // Ndebele
+			'ne', // Nepali
+			'nl', // Dutch (België)
+			'nl', // Dutch
+			'nn', // Norwegian (nynorsk)
+			'ny', // Chewa
+			'or', // Oriya
+			'pa', // Punjabi
+			'pl', // Polish
+			'ps', // Pashto
+			'pt', // Portuguese (Brazil)
+			'pt', // Portuguese (Portugal)
+			'qu', // Quechua
+			'rm', // Romansh
+			'ro', // Romanian
+			'ru', // Russian
+			'rw', // Kinyarwanda
+			'sa', // Sanskrit
+			'sc', // Sardinian
+			'se', // Northern Sámi
+			'si', // Sinhala
+			'sk', // Slovak
+			'sl', // Slovenian
+			'sn', // Shona
+			'so', // Somali
+			'sq', // Albanian
+			'sr', // Serbian
+			'sv', // Swedish
+			'sy', // Swahili
+			'sw', // Syriac
+			'sz', // Silesian
+			'ta', // Tamil
+			'te', // Telugu
+			'tg', // Tajik
+			'th', // Thai
+			'tk', // Turkmen
+			'tl', // Filipino
+			'tl', // Klingon
+			'tr', // Turkish
+			'tt', // Tatar
+			'tz', // Tamazight
+			'uk', // Ukrainian
+			'ur', // Urdu
+			'uz', // Uzbek
+			'vi', // Vietnamese
+			'wo', // Wolof
+			'xh', // Xhosa
+			'yi', // Yiddish
+			'yo', // Yoruba
+			'zh', // Simplified Chinese (China)
+			'zh', // Traditional Chinese (Hong Kong)
+			'zh', // Traditional Chinese (Taiwan)
+			'zu', // Zulu
+			'zz', // Zazaki
+		);
+
+	}
+
+}
Index: inc/classes/termdata.class.php
===================================================================
--- inc/classes/termdata.class.php	(nonexistent)
+++ inc/classes/termdata.class.php	(working copy)
@@ -0,0 +1,255 @@
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_TermData
+ *
+ * Holds Term and Taxonomy data.
+ *
+ * @since 2.6.0
+ */
+class AutoDescription_TermData extends AutoDescription_PostData {
+
+	/**
+	 * Constructor, load parent constructor
+	 */
+	public function __construct() {
+		parent::__construct();
+	}
+
+	/**
+	 * Fetch set Term data.
+	 *
+	 * @param object|null $term The TT object, if it isn't set, one is fetched.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @return array $data The SEO Framework TT data.
+	 */
+	public function get_term_data( $term = null ) {
+
+		if ( is_null( $term ) ) {
+			if ( $this->is_author() ) {
+				//* Special handling.
+				return null;
+			}
+
+			$term = $this->fetch_the_term();
+		}
+
+		if ( $term ) {
+			$data = array();
+
+			$data['title'] = isset( $term->admeta['doctitle'] ) ? $term->admeta['doctitle'] : '';
+			$data['description'] = isset( $term->admeta['description'] ) ? $term->admeta['description'] : '';
+			$data['noindex'] = isset( $term->admeta['noindex'] ) ? $term->admeta['noindex'] : '';
+			$data['nofollow'] = isset( $term->admeta['nofollow'] ) ? $term->admeta['nofollow'] : '';
+			$data['noarchive'] = isset( $term->admeta['noarchive'] ) ? $term->admeta['noarchive'] : '';
+			$flag = isset( $term->admeta['saved_flag'] ) ? (bool) $term->admeta['saved_flag'] : false;
+
+			//* Genesis data fetch. This will override our options with Genesis options on save.
+			if ( false === $flag && isset( $term->meta ) ) {
+				$data['title'] = empty( $data['title'] ) && isset( $term->meta['doctitle'] ) 				? $term->meta['doctitle'] : $data['noindex'];
+				$data['description'] = empty( $data['description'] ) && isset( $term->meta['description'] )	? $term->meta['description'] : $data['description'];
+				$data['noindex'] = empty( $data['noindex'] ) && isset( $term->meta['noindex'] ) 			? $term->meta['noindex'] : $data['noindex'];
+				$data['nofollow'] = empty( $data['nofollow'] ) && isset( $term->meta['nofollow'] )			? $term->meta['nofollow'] : $data['nofollow'];
+				$data['noarchive'] = empty( $data['noarchive'] ) && isset( $term->meta['noarchive'] )		? $term->meta['noarchive'] : $data['noarchive'];
+			}
+
+			return $data;
+		}
+
+		//* Return null if no term can be set.
+		return null;
+	}
+
+	/**
+	 * Try to fetch a term if none can be found.
+	 *
+	 * @since 2.6.0
+	 * @access private
+	 *
+	 * @param int $id The possible taxonomy Term ID.
+	 *
+	 * @return null|object The Term object.
+	 */
+	public function fetch_the_term( $id = '' ) {
+
+		static $term = array();
+
+		if ( isset( $term[$id] ) )
+			return $term[$id];
+
+		//* Return null if no term can be set.
+		if ( false === $this->is_archive() )
+			return false;
+
+		if ( $this->is_admin() ) {
+			if ( 'term.php' === $this->page_hook ) {
+				global $current_screen;
+
+				if ( isset( $current_screen->taxonomy ) ) {
+					$term_id = $id ? $id : $this->get_admin_term_id();
+					$term[$id] = get_term_by( 'id', $term_id, $current_screen->taxonomy );
+				}
+			}
+		} else {
+			if ( $this->is_category() || $this->is_tag() ) {
+				$term[$id] = get_queried_object();
+			} else if ( $this->is_tax() ) {
+				$term[$id] = get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) );
+			}
+		}
+
+		if ( isset( $term[$id] ) )
+			return $term[$id];
+
+		return $term[$id] = false;
+	}
+
+	/**
+	 * Fetch Tax labels
+	 *
+	 * @param string $tax_type the Taxonomy type.
+	 *
+	 * @since 2.3.1
+	 *
+	 * @staticvar object $labels
+	 *
+	 * @return object|null with all the labels as member variables
+	 */
+	public function get_tax_labels( $tax_type ) {
+
+		static $labels = null;
+
+		if ( isset( $labels ) )
+			return $labels;
+
+		$tax_object = get_taxonomy( $tax_type );
+
+		if ( is_object( $tax_object ) )
+			return $labels = (object) $tax_object->labels;
+
+		//* Nothing found.
+		return null;
+	}
+
+	/**
+	 * Get the current screen term labels.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @staticvar string $term_name : Caution: This function only runs once per screen and doesn't check the term type more than once.
+	 *
+	 * @param object $term The Taxonomy Term object.
+	 * @param bool $singular Whether to fetch a singular or plural name.
+	 * @param bool $fallback Whether to fallback on a generic name.
+	 * @param bool $use_cache Whether to read from cache.
+	 *
+	 * @return string the Term name.
+	 */
+	protected function get_the_term_name( $term, $singular = true, $fallback = true, $use_cache = true ) {
+
+		if ( false === $use_cache ) {
+			//* No cache. Short circuit.
+
+			if ( $term && is_object( $term ) ) {
+				$tax_type = $term->taxonomy;
+				$term_labels = $this->get_tax_labels( $tax_type );
+
+				if ( $singular ) {
+					if ( isset( $term_labels->singular_name ) )
+						return $term_labels->singular_name;
+				} else {
+					if ( isset( $term_labels->name ) )
+						return $term_labels->name;
+				}
+			}
+
+			if ( $fallback ) {
+				//* Fallback to Page as it is generic.
+				if ( $singular )
+					return __( 'Page', 'autodescription' );
+
+				return __( 'Pages', 'autodescription' );
+			}
+		}
+
+		static $term_name = array();
+
+		if ( isset( $term_name[$singular] ) )
+			return $term_name[$singular];
+
+		if ( $term && is_object( $term ) ) {
+			$tax_type = $term->taxonomy;
+
+			static $term_labels = null;
+
+			/**
+			 * Dynamically fetch the term name.
+			 *
+			 * @since 2.3.1
+			 */
+			if ( is_null( $term_labels ) )
+				$term_labels = $this->get_tax_labels( $tax_type );
+
+			if ( $singular ) {
+				if ( isset( $term_labels->singular_name ) )
+					return $term_name[$singular] = $term_labels->singular_name;
+			} else {
+				if ( isset( $term_labels->name ) )
+					return $term_name[$singular] = $term_labels->name;
+			}
+		}
+
+		if ( $fallback ) {
+			//* Fallback to Page as it is generic.
+			if ( $singular )
+				return $term_name[$singular] = __( 'Page', 'autodescription' );
+
+			return $term_name[$singular] = __( 'Pages', 'autodescription' );
+		}
+
+		return $term_name[$singular] = '';
+	}
+
+	/**
+	 * Fetch the Admin Term ID. For WordPress 4.5 up and below.
+	 *
+	 * @since 2.6.0
+	 * @staticvar int $term_id The Term ID.
+	 *
+	 * @return int Term ID.
+	 */
+	public function get_admin_term_id() {
+
+		static $term_id = null;
+
+		if ( isset( $term_id ) )
+			return $term_id;
+
+		if ( isset( $_REQUEST['tag_ID'] ) && $_REQUEST['tag_ID'] ) {
+			$term_id = $_REQUEST['tag_ID'];
+		} else if ( isset( $_REQUEST['term_id'] ) && $_REQUEST['term_id'] ) {
+			$term_id = $_REQUEST['term_id'];
+		}
+
+		return $term_id = $term_id ? abs( (int) $term_id ) : 0;
+	}
+
+}
Index: inc/classes/transients.class.php
===================================================================
--- inc/classes/transients.class.php	(revision 1413572)
+++ inc/classes/transients.class.php	(working copy)
@@ -1,519 +1,626 @@
-<?php
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-/**
- * Class AutoDescription_Transients
- *
- * Generates, stores and deletes common transients.
- *
- * @since 2.3.3
- */
-class AutoDescription_Transients extends AutoDescription_Sitemaps {
-
-	/**
-	 * The sitemap transient name.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @var string The Sitemap Transient Name.
-	 */
-	protected $sitemap_transient;
-
-	/**
-	 * The Automatic Description transient name.
-	 *
-	 * @since 2.3.3
-	 *
-	 * @var string The Automatic Description Transient Name.
-	 */
-	protected $auto_description_transient;
-
-	/**
-	 * The LD+Json script transient name.
-	 *
-	 * @since 2.3.3
-	 *
-	 * @var string The LD+Json Script Transient Name.
-	 */
-	protected $ld_json_transient;
-
-	/**
-	 * The Theme is doing the Title right transient name
-	 *
-	 * @since 2.5.2
-	 *
-	 * @var string The Theme Doing It Right Transient Name.
-	 */
-	protected $theme_doing_it_right_transient;
-
-	/**
-	 * Constructor, load parent constructor and set up caches.
-	 */
-	public function __construct() {
-		parent::__construct();
-
-		// Setup Transient names
-		add_action( 'plugins_loaded', array( $this, 'setup_transient_names' ), 10 );
-
-		//* Delete Sitemap and Description transients on post publish/delete.
-		add_action( 'publish_post', array( $this, 'delete_transients_post' ) );
-		add_action( 'delete_post', array( $this, 'delete_transients_post' ) );
-		add_action( 'save_post', array( $this, 'delete_transients_post' ) );
-
-		add_action( 'edit_term', array( $this, 'delete_auto_description_transients_term' ), 10, 3 );
-		add_action( 'delete_term', array( $this, 'delete_auto_description_transients_term' ), 10, 4 );
-
-		//* Delete Sitemap transient on permalink structure change.
-		add_action( 'load-options-permalink.php', array( $this, 'delete_sitemap_transient_permalink_updated' ), 20 );
-
-		add_action( 'update_option_blogdescription', array( $this, 'delete_auto_description_blog_transient' ), 10, 1 );
-
-		//* Delete doing it wrong transient after theme switch.
-		add_action( 'after_switch_theme', array( $this, 'delete_theme_dir_transient' ), 10 );
-
-
-	}
-
-	/**
-	 * Setup vars for transients.
-	 *
-	 * @since 2.3.3
-	 */
-	public function setup_transient_names() {
-		global $blog_id;
-
-		/**
-		 * When the caching mechanism changes. Change this value.
-		 *
-		 * Use hex. e.g. 0, 1, 2, 9, a, b
-		 */
-		$revision = '2';
-
-		$this->sitemap_transient = 'the_seo_framework_sitemap_' . (string) $revision . '_' . (string) $blog_id;
-		$this->theme_doing_it_right_transient = 'the_seo_framework_tdir_' . (string) $revision . '_' . (string) $blog_id;
-	}
-
-	/**
-	 * Setup vars for transients which require $page_id.
-	 *
-	 * @param int|string|bool $page_id the Taxonomy or Post ID. If false it will generate for the blog page.
-	 * @param string $taxonomy The taxonomy name.
-	 *
-	 * @since 2.3.3
-	 */
-	public function setup_auto_description_transient( $page_id, $taxonomy = '' ) {
-
-		$cache_key = $this->generate_cache_key( $page_id, $taxonomy );
-
-		/**
-		 * When the caching mechanism changes. Change this value.
-		 *
-		 * Use hex. e.g. 0, 1, 2, 9, a, b
-		 *
-		 * @since 2.3.4
-		 */
-		$revision = '4';
-
-		/**
-		 * Two different cache keys for two different settings.
-		 *
-		 * @since 2.3.4
-		 */
-		if ( $this->get_option( 'description_blogname' ) ) {
-			$this->auto_description_transient = 'the_seo_f' . $revision . '_exc_' . $cache_key;
-		} else {
-			$this->auto_description_transient = 'the_seo_f' . $revision . '_exc_s_' . $cache_key;
-		}
-
-	}
-
-	/**
-	 * Setup vars for transients which require $page_id.
-	 *
-	 * @param int|string|bool $page_id the Taxonomy or Post ID. If false it will generate for the blog page.
-	 * @param string $taxonomy The taxonomy name.
-	 *
-	 * @since 2.3.3
-	 */
-	public function setup_ld_json_transient( $page_id, $taxonomy = '' ) {
-
-		$cache_key = $this->generate_cache_key( $page_id, $taxonomy );
-
-		/**
-		 * When the caching mechanism changes. Change this value.
-		 *
-		 * Use hex. e.g. 0, 1, 2, 9, a, b
-		 */
-		$revision = '3';
-
-		$this->ld_json_transient = 'the_seo_f' . $revision . '_ldjs_' . $cache_key;
-	}
-
-	/**
-	 * Generate transient key based on query vars.
-	 *
-	 * @param int|string|bool $page_id the Taxonomy or Post ID.
-	 * @param string $taxonomy The Taxonomy name.
-	 *
-	 * @staticvar array $cached_id
-	 *
-	 * @global $blog_id;
-	 *
-	 * @since 2.3.3
-	 *
-	 * @return string The generated page id key.
-	 */
-	public function generate_cache_key( $page_id, $taxonomy = '' ) {
-
-		static $cached_id = array();
-
-		if ( isset( $cached_id[$page_id][$taxonomy] ) )
-			return $cached_id[$page_id][$taxonomy];
-
-		global $blog_id;
-
-		$the_id = '';
-
-		/**
-		 * Generate home page cache key for the Home Page metabox.
-		 * @since 2.4.3.1
-		 */
-		if ( $this->is_menu_page( $this->pagehook ) ) {
-			//* We're on the SEO Settings page now.
-
-			if ( 'posts' == get_option( 'show_on_front' ) ) {
-				/**
-				 * Detected home page.
-				 * @since 2.3.4
-				 */
-				$the_id = 'hpage_' . (string) get_option( 'page_on_front' );
-			} else {
-				/**
-				 * Detected home page.
-				 * @since 2.3.4
-				 */
-				$the_id = 'hpage_' . (string) get_option( 'page_on_front' );
-			}
-
-		} else {
-			//* All other pages, admin and front-end.
-
-			if ( ! is_search() ) {
-				if ( ( false === $page_id || is_front_page() ) && ( 'posts' == get_option( 'show_on_front' ) ) ) {
-					if ( is_404() ) {
-						$the_id = '_404_';
-					} else {
-						/**
-						 * Generate for home is blog page.
-						 * New transient name because of the conflicting bugfix on blog.
-						 * @since 2.3.4
-						 */
-						$the_id = 'hblog_' . (string) get_option( 'page_on_front' );
-					}
-				} else if ( ( false === $page_id || is_front_page() || $page_id == get_option( 'page_on_front' ) ) && ( empty( $taxonomy ) && 'page' == get_option( 'show_on_front' ) ) ) {
-					if ( is_404() ) {
-						$the_id = '_404_';
-					} else {
-						/**
-						 * Detected home page.
-						 * @since 2.3.4
-						 */
-						$the_id = 'hpage_' . (string) get_option( 'page_on_front' );
-					}
-				} else if ( ! is_front_page() && empty( $taxonomy ) && ( ( $page_id == get_option( 'page_for_posts' ) && get_option( 'page_for_posts' ) != 0 ) || ( $page_id === false && did_action( 'admin_init' ) ) ) ) {
-					/**
-					 * Generate key for blog page that's not the home page.
-					 * Bugfix
-					 * @since 2.3.4
-					 */
-					$the_id = 'blog_' . $page_id;
-				} else if ( ! $this->is_singular() && empty( $taxonomy ) && ! did_action( 'admin_init' ) ) {
-					//* Unsigned CPT, AnsPress question, etc.
-					global $wp_query;
-
-					/**
-					 * Generate for everything else.
-					 * Doesn't work on admin_init action.
-					 */
-
-					$query = isset( $wp_query->query ) ? (array) $wp_query->query : null;
-
-					/**
-					 * Automatically generate transient based on query.
-					 *
-					 * Adjusted to comply with the 45 char limit.
-					 * @since 2.3.4
-					 */
-					if ( isset( $query ) ) {
-						$the_id = '';
-
-						// Trim key to 2 chars.
-						foreach ( $query as $key => $value ) {
-							/**
-							 * If array, combine keys.
-							 *
-							 * @NOTE Fixes unconfirmed bug.
-							 * @since 2.5.2
-							 */
-							if ( is_array( $value ) ) {
-
-								$the_id .= substr( $key, 0, 2 ) . '_';
-
-								//* mb_substr will generate a notice if array to string conversion still takes place. All is good :).
-								foreach ( $value as $v )
-									$the_id .= mb_substr( $v, 0, 2 ) . '_';
-
-							} else {
-								$the_id .= substr( $key, 0, 2 ) . '_' . mb_substr( $value, 0, 2 ) . '_';
-							}
-						}
-
-						//* add Page ID.
-						$the_id .= (string) $this->get_the_real_ID();
-					}
-				} else if ( ! $this->is_singular() && ! empty( $taxonomy ) ) {
-					//* Taxonomy
-
-					$the_id = '';
-
-					//* Save taxonomy name and split into words with 3 length.
-					$taxonomy_name = explode( '_', $taxonomy );
-					foreach ( $taxonomy_name as $name )
-						$the_id .= substr( $name, 0, 3 ) . '_';
-
-					$p_id = $page_id ? $page_id : $this->get_the_real_ID();
-
-					//* Put it all together.
-					$the_id = rtrim( $the_id, '_' ) . '_' . (string) $p_id;
-				} else if ( ! empty( $page_id ) ) {
-					$the_id = $page_id;
-				}
-			} else {
-				//* Search query.
-				$query = '';
-
-				if ( function_exists( 'get_search_query' ) ) {
-					$search_query = get_search_query();
-
-					if ( ! empty( $search_query ) )
-						$query = str_replace( ' ', '', $search_query );
-
-					//* Limit to 10 chars.
-					if ( mb_strlen( $query ) > 10 )
-						$query = mb_substr( $query, 0, 10 );
-				}
-
-				$the_id = $page_id . '_s_' . $query;
-			}
-		}
-
-		/**
-		 * Static Front page isn't set. Causes all kinds of problems :(
-		 * Noob. :D
-		 */
-		if ( empty( $the_id ) ) {
-			$the_id = 'home_noob';
-		}
-
-		/**
-		 * This should be at most 25 chars. Unless the $blog_id is higher than 99,999,999.
-		 * Then some cache keys will conflict on every 10th blog ID from eachother which post something on the same day..
-		 * On the day archive. With the same description setting (short).
-		 */
-		return $cached_id[$page_id][$taxonomy] = (string) $the_id . '_' . (string) $blog_id;
-	}
-
-	/**
-	 * Delete transient on post save.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @return bool|null True when sitemap is flushed. False on revision. Null
-	 * when sitemaps are deactivated.
-	 */
-	public function delete_transients_post( $post_id ) {
-
-		$this->delete_auto_description_transient( $post_id );
-		$this->delete_ld_json_transient( $post_id );
-
-		if ( (bool) $this->get_option( 'sitemaps_output' ) !== false ) {
-
-			//* Don't flush sitemap on revision.
-			if ( wp_is_post_revision( $post_id ) )
-				return false;
-
-			$this->delete_sitemap_transient();
-
-			return true;
-		}
-	}
-
-	/**
-	 * Delete transient on term save/deletion.
-	 *
-	 * @param int $term_id The Term ID
-	 * @param int $tt_id The Term Taxonomy ID.
-	 * @param string $taxonomy The Taxonomy type.
-	 * @param mixed $deleted_term Copy of the already-deleted term. Unused.
-	 *
-	 * @since 2.3.3
-	 */
-	public function delete_auto_description_transients_term( $term_id, $tt_id, $taxonomy, $deleted_term = '' ) {
-
-		$term_id = $term_id ? $term_id : $tt_id;
-
-		$this->delete_auto_description_transient( $term_id, $taxonomy );
-	}
-
-	/**
-	 * Checks wether the permalink structure is updated.
-	 *
-	 * @since 2.3.0
-	 *
-	 * @return bool Wether if sitemap transient is deleted.
-	 */
-	public function delete_sitemap_transient_permalink_updated() {
-
-		if ( isset( $_POST['permalink_structure'] ) || isset( $_POST['category_base'] ) )
-			return $this->delete_sitemap_transient();
-
-		return false;
-	}
-
-	/**
-	 * Delete transient for sitemap on requests.
-	 * Also ping search engines.
-	 *
-	 * @since 2.2.9
-	 *
-	 * @return bool true
-	 */
-	public function delete_sitemap_transient() {
-
-		delete_transient( $this->sitemap_transient );
-
-		$this->ping_searchengines();
-
-		return true;
-	}
-
-	/**
-	 * Delete transient for the automatic description for blog on save request.
-	 * Returns old option, since that's passed for sanitation within WP Core.
-	 *
-	 * @param string $old_option The previous blog description option.
-	 *
-	 * @since 2.3.3
-	 *
-	 * @return string Previous option.
-	 */
-	public function delete_auto_description_blog_transient( $old_option ) {
-
-		$this->setup_auto_description_transient( false );
-
-		delete_transient( $this->auto_description_transient );
-
-		return $old_option;
-	}
-
-	/**
-	 * Delete transient for the automatic description on requests.
-	 *
-	 * @param mixed $page_id The page ID or identifier.
-	 * @param string $taxonomy The tt name.
-	 *
-	 * @since 2.3.3
-	 *
-	 * @return bool true
-	 */
-	public function delete_auto_description_transient( $page_id, $taxonomy = '' ) {
-
-		$this->setup_auto_description_transient( $page_id, $taxonomy );
-
-		delete_transient( $this->auto_description_transient );
-
-		return true;
-	}
-
-	/**
-	 * Delete transient for the LD+Json scripts on requests.
-	 *
-	 * @param mixed $page_id The page ID or identifier.
-	 * @param string $taxonomy The tt name.
-	 *
-	 * @since 2.4.2
-	 *
-	 * @return bool true
-	 */
-	public function delete_ld_json_transient( $page_id, $taxonomy = '' ) {
-
-		$flushed = null;
-
-		if ( ! isset( $flushed ) ) {
-			$this->setup_ld_json_transient( $page_id, $taxonomy );
-
-			delete_transient( $this->ld_json_transient );
-
-			$flushed = 'Oh behave!';
-
-			return true;
-		}
-
-		return false;
-	}
-
-	/**
-	 * Delete transient for the Theme doing it Right bool on special requests.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @return bool true
-	 */
-	public function delete_theme_dir_transient() {
-
-		delete_transient( $this->theme_doing_it_right_transient );
-
-		return true;
-	}
-
-	/**
-	 * Sets transient for Theme doing it Right
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param bool $doing_it_right
-	 */
-	public function set_theme_dir_transient( $dir = '' ) {
-
-		if ( is_bool( $dir ) && false === get_transient( $this->theme_doing_it_right_transient ) ) {
-
-			//* Convert $dir to string 1 or 0 as transients can be false on failure.
-			$dir = $dir ? '1' : '0';
-
-			/**
-			 * Expiration time, 3 days.
-			 * 60s * 60m * 24d * 3d
-			 */
-			$expiration = 60 * 60 * 24 * 3;
-
-			set_transient( $this->theme_doing_it_right_transient, $dir, $expiration );
-		}
-
-	}
-
-}
+<?php
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * Class AutoDescription_Transients
+ *
+ * Generates, stores and deletes common transients.
+ *
+ * @since 2.3.3
+ */
+class AutoDescription_Transients extends AutoDescription_Sitemaps {
+
+	/**
+	 * The sitemap transient name.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @var string The Sitemap Transient Name.
+	 */
+	protected $sitemap_transient;
+
+	/**
+	 * The Automatic Description transient name.
+	 *
+	 * @since 2.3.3
+	 *
+	 * @var string The Automatic Description Transient Name.
+	 */
+	protected $auto_description_transient;
+
+	/**
+	 * The LD+Json script transient name.
+	 *
+	 * @since 2.3.3
+	 *
+	 * @var string The LD+Json Script Transient Name.
+	 */
+	protected $ld_json_transient;
+
+	/**
+	 * The Theme is doing the Title right transient name
+	 *
+	 * @since 2.5.2
+	 *
+	 * @var string The Theme Doing It Right Transient Name.
+	 */
+	protected $theme_doing_it_right_transient;
+
+	/**
+	 * Constructor, load parent constructor and set up caches.
+	 */
+	public function __construct() {
+		parent::__construct();
+
+		// Setup Transient names
+		add_action( 'plugins_loaded', array( $this, 'setup_transient_names' ), 10 );
+
+		/**
+		 * Delete Sitemap and Description transients on post publish/delete.
+		 * @see WP Core wp_transition_post_status()
+		 */
+		add_action( 'publish_post', array( $this, 'delete_transients_post' ) );
+		add_action( 'publish_page', array( $this, 'delete_transients_post' ) );
+		add_action( 'deleted_post', array( $this, 'delete_transients_post' ) );
+		add_action( 'deleted_page', array( $this, 'delete_transients_post' ) );
+		add_action( 'post_updated', array( $this, 'delete_transients_post' ) );
+		add_action( 'page_updated', array( $this, 'delete_transients_post' ) );
+
+		add_action( 'edit_term', array( $this, 'delete_auto_description_transients_term' ), 10, 3 );
+		add_action( 'delete_term', array( $this, 'delete_auto_description_transients_term' ), 10, 4 );
+
+		//* Delete Sitemap transient on permalink structure change.
+		add_action( 'load-options-permalink.php', array( $this, 'delete_sitemap_transient_permalink_updated' ), 20 );
+
+		add_action( 'update_option_blogdescription', array( $this, 'delete_auto_description_blog_transient' ), 10, 1 );
+
+		//* Delete doing it wrong transient after theme switch.
+		add_action( 'after_switch_theme', array( $this, 'delete_theme_dir_transient' ), 10 );
+
+	}
+
+	/**
+	 * Get the value of the transient.
+	 *
+	 * If the transient does not exists, does not have a value or has expired,
+	 * or transients have been disabled through a constant, then the transient
+	 * will be false.
+	 * @see $this->the_seo_framework_use_transients
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $transient Transient name. Expected to not be SQL-escaped.
+	 *
+	 * @return mixed|bool Value of the transient. False on failure or non existing transient.
+	 */
+	public function get_transient( $transient ) {
+
+		if ( $this->the_seo_framework_use_transients )
+			return get_transient( $transient );
+
+		return false;
+	}
+
+	/**
+	 * Set the value of the transient..
+	 *
+	 * Prevents setting of transients when they're disabled.
+	 * @see $this->the_seo_framework_use_transients
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param string $transient Transient name. Expected to not be SQL-escaped.
+	 * @param string $value Transient value. Expected to not be SQL-escaped.
+	 * @param int $expiration Optional Transient expiration date, optional. Expected to not be SQL-escaped.
+	 */
+	public function set_transient( $transient, $value, $expiration = '' ) {
+
+		if ( $this->the_seo_framework_use_transients )
+			set_transient( $transient, $value, $expiration );
+
+	}
+
+	/**
+	 * Setup vars for transients.
+	 *
+	 * @since 2.3.3
+	 */
+	public function setup_transient_names() {
+		global $blog_id;
+
+		/**
+		 * When the caching mechanism changes. Change this value.
+		 * Use hex. e.g. 0, 1, 2, 9, a, b
+		 */
+		$revision = '0';
+
+		$this->sitemap_transient = 'tsf_sitemap_' . (string) $revision . '_' . (string) $blog_id;
+		$this->theme_doing_it_right_transient = 'tsf_tdir_' . (string) $revision . '_' . (string) $blog_id;
+	}
+
+	/**
+	 * Setup vars for transients which require $page_id.
+	 *
+	 * @param int|string|bool $page_id the Taxonomy or Post ID. If false it will generate for the blog page.
+	 * @param string $taxonomy The taxonomy name.
+	 *
+	 * @since 2.3.3
+	 */
+	public function setup_auto_description_transient( $page_id, $taxonomy = '' ) {
+
+		$cache_key = $this->generate_cache_key( $page_id, $taxonomy );
+
+		/**
+		 * When the caching mechanism changes. Change this value.
+		 * Use hex. e.g. 0, 1, 2, 9, a, b
+		 *
+		 * @since 2.3.4
+		 */
+		$revision = '0';
+
+		$additions = $this->add_description_additions( $page_id, $taxonomy );
+
+		if ( $additions ) {
+			$option = $this->get_option( 'description_blogname' ) ? '1' : '0';
+			$this->auto_description_transient = 'tsf_desc_' . $option . '_' . $revision . '_' . $cache_key;
+		} else {
+			$this->auto_description_transient = 'tsf_desc_noa_' . $revision . '_' . $cache_key;
+		}
+
+	}
+
+	/**
+	 * Setup vars for transients which require $page_id.
+	 *
+	 * @param int|string|bool $page_id the Taxonomy or Post ID. If false it will generate for the blog page.
+	 * @param string $taxonomy The taxonomy name.
+	 *
+	 * @since 2.3.3
+	 */
+	public function setup_ld_json_transient( $page_id, $taxonomy = '' ) {
+
+		$cache_key = $this->generate_cache_key( $page_id, $taxonomy );
+
+		/**
+		 * When the caching mechanism changes. Change this value.
+		 *
+		 * Use hex. e.g. 0, 1, 2, 9, a, b
+		 */
+		$revision = '6';
+
+		/**
+		 * Change key based on options.
+		 */
+		$options = $this->enable_ld_json_breadcrumbs() ? '1' : '0';
+		$options .= $this->enable_ld_json_sitename() ? '1' : '0';
+		$options .= $this->enable_ld_json_searchbox() ? '1' : '0';
+
+		$this->ld_json_transient = 'the_seo_f' . $revision . '_' . $options . '_ldjs_' . $cache_key;
+	}
+
+	/**
+	 * Generate transient key based on query vars.
+	 *
+	 * @param int|string|bool $page_id the Taxonomy or Post ID.
+	 * @param string $taxonomy The Taxonomy name.
+	 *
+	 * @staticvar array $cached_id : contains cache strings.
+	 *
+	 * @global int $blog_id;
+	 *
+	 * @since 2.3.3
+	 *
+	 * @refactored
+	 * @since 2.6.0
+	 *
+	 * @return string The generated page id key.
+	 */
+	public function generate_cache_key( $page_id, $taxonomy = '' ) {
+
+		$page_id = $page_id ? $page_id : $this->get_the_real_ID();
+
+		static $cached_id = array();
+
+		if ( isset( $cached_id[$page_id][$taxonomy] ) )
+			return $cached_id[$page_id][$taxonomy];
+
+		global $blog_id;
+
+		$locale = '_' . strtolower( get_locale() );
+
+		//* Placeholder ID.
+		$the_id = '';
+
+		if ( $this->is_404() ) {
+			//* 404.
+			$the_id = '_404_';
+		} else if ( ( $this->is_front_page( $page_id ) ) || ( $this->is_admin() && $this->is_menu_page( $this->pagehook ) ) ) {
+			//* Fetch Home key.
+			$the_id = $this->generate_front_page_cache_key();
+		} else if ( $this->is_blog_page( $page_id ) ) {
+			//* Blog page.
+			$the_id = 'blog_' . $page_id;
+		} else if ( $this->is_singular() ) {
+			if ( $this->is_page( $page_id ) ) {
+				//* Page.
+				$the_id = 'page_' . $page_id;
+			} else if ( $this->is_single( $page_id ) ) {
+				//* Post.
+				$the_id = 'post_' . $page_id;
+			} else if ( $this->is_attachment( $page_id ) ) {
+				//* Attachment.
+				$the_id = 'attach_' . $page_id;
+			} else {
+				//* Other.
+				$the_id = 'singular_' . $page_id;
+			}
+		} else if ( $this->is_search() ) {
+			//* Search query.
+			$query = '';
+
+			if ( function_exists( 'get_search_query' ) ) {
+				$search_query = get_search_query();
+
+				if ( $search_query )
+					$query = str_replace( ' ', '', $search_query );
+
+				//* Limit to 10 chars.
+				if ( mb_strlen( $query ) > 10 )
+					$query = mb_substr( $query, 0, 10 );
+
+				$query = esc_sql( $query );
+			}
+
+			$the_id = $page_id . '_s_' . $query;
+		} else if ( $this->is_archive() ) {
+			if ( $this->is_category() || $this->is_tag() || $this->is_tax() ) {
+				//* Term.
+
+				if ( empty( $taxonomy ) )
+					$taxonomy = get_query_var( 'taxonomy' );
+
+				$the_id = $this->generate_taxonomial_cache_key( $page_id, $taxonomy );
+
+				if ( $this->is_tax() )
+					$the_id = 'archives_' . $the_id;
+
+			} else if ( $this->is_author() ) {
+				//* Author page.
+				$the_id = 'author_' . $page_id;
+			} else if ( $this->is_date() ) {
+				//* Dates.
+				$post = get_post();
+
+				if ( $post && isset( $post->post_date ) ) {
+					$date = $post->post_date;
+
+					if ( $this->is_year() ) {
+						//* Year.
+						$the_id .= 'year_' . mysql2date( 'y', $date, false );
+					} else if ( $this->is_month() ) {
+						//* Month.
+						$the_id .= 'month_' . mysql2date( 'm_y', $date, false );
+					} else if ( $this->is_day() ) {
+						//* Day. The correct notation.
+						$the_id .= 'day_' . mysql2date( 'd_m_y', $date, false );
+					}
+				} else {
+					//* Get seconds since UNIX Epoch. This is a failsafe.
+
+					/**
+					 * @staticvar string $unix : Used to maintain a static timestamp for this query.
+					 */
+					static $unix = null;
+
+					if ( ! isset( $unix ) )
+						$unix = date( 'U' );
+
+					//* Temporarily disable transients to prevent database spam.
+					$this->the_seo_framework_use_transients = false;
+					$this->use_object_cache = false;
+
+					$the_id = 'unix_' . $unix;
+				}
+			} else {
+				//* Other taxonomial archives.
+
+				if ( empty( $taxonomy ) ) {
+					$post_type = get_query_var( 'post_type' );
+
+					if ( is_array( $post_type ) )
+						reset( $post_type );
+
+					if ( $post_type )
+						$post_type_obj = get_post_type_object( $post_type );
+
+					if ( isset( $post_type_obj->labels->name ) )
+						$taxonomy = $post_type_obj->labels->name;
+				}
+
+				//* Still empty? Try this.
+				if ( empty( $taxonomy ) )
+					$taxonomy = get_query_var( 'taxonomy' );
+
+				$the_id = $this->generate_taxonomial_cache_key( $page_id, $taxonomy );
+				$the_id = 'archives_' . $the_id;
+			}
+		}
+
+		/**
+		 * Blog page isn't set or something else is happening. Causes all kinds of problems :(
+		 * Noob. :D
+		 */
+		if ( empty( $the_id ) )
+			$the_id = 'noob_' . $page_id . '_' . $taxonomy;
+
+		/**
+		 * This should be at most 25 chars. Unless the $blog_id is higher than 99,999,999.
+		 * Then some cache keys will conflict on every 10th blog ID from eachother which post something on the same day..
+		 * On the day archive. With the same description setting (short).
+		 */
+		return $cached_id[$page_id][$taxonomy] = $the_id . '_' . $blog_id . $locale;
+	}
+
+	/**
+	 * Returns the front page partial transient key.
+	 *
+	 * @param string $type
+	 *
+	 * @return string the front page transient key.
+	 */
+	public function generate_front_page_cache_key( $type = '' ) {
+
+		if ( empty( $type ) ) {
+			if ( $this->has_page_on_front() )
+				$type = 'page';
+			else
+				$type = 'blog';
+		} else {
+			$type = esc_sql( $type );
+		}
+
+		return $the_id = 'h' . $type . '_' . $this->get_the_front_page_ID();
+	}
+
+	/**
+	 * Generates Cache key for taxonomial archives.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @param int $page_id The taxonomy or page ID.
+	 * @param string $taxonomy The taxonomy name.
+	 *
+	 * @return string The Taxonomial Archive cache key.
+	 */
+	protected function generate_taxonomial_cache_key( $page_id = '', $taxonomy = '' ) {
+
+		$the_id = '';
+
+		$taxonomy_name = explode( '_', $taxonomy );
+		if ( is_array( $taxonomy_name ) ) {
+			foreach ( $taxonomy_name as $name )
+				$the_id .= mb_substr( $name, 0, 3 ) . '_';
+		}
+
+		//* Put it all together.
+		return rtrim( $the_id, '_' ) . '_' . $page_id;
+	}
+
+	/**
+	 * Delete transient on post save.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @param int $post_id The Post ID that has been updated.
+	 *
+	 * @return bool|null True when sitemap is flushed. False on revision. Null
+	 * when sitemaps are deactivated.
+	 */
+	public function delete_transients_post( $post_id ) {
+
+		$this->delete_auto_description_transient( $post_id );
+		$this->delete_ld_json_transient( $post_id );
+
+		if ( $this->is_option_checked( 'sitemaps_output' ) ) {
+
+			//* Don't flush sitemap on revision.
+			if ( wp_is_post_revision( $post_id ) )
+				return false;
+
+			$this->delete_sitemap_transient();
+
+			return true;
+		}
+	}
+
+	/**
+	 * Delete transient on term save/deletion.
+	 *
+	 * @param int $term_id The Term ID
+	 * @param int $tt_id The Term Taxonomy ID.
+	 * @param string $taxonomy The Taxonomy type.
+	 * @param mixed $deleted_term Copy of the already-deleted term. Unused.
+	 *
+	 * @since 2.3.3
+	 */
+	public function delete_auto_description_transients_term( $term_id, $tt_id, $taxonomy, $deleted_term = '' ) {
+
+		$term_id = $term_id ? $term_id : $tt_id;
+
+		$this->delete_auto_description_transient( $term_id, $taxonomy );
+	}
+
+	/**
+	 * Checks whether the permalink structure is updated.
+	 *
+	 * @since 2.3.0
+	 *
+	 * @return bool Whether if sitemap transient is deleted.
+	 */
+	public function delete_sitemap_transient_permalink_updated() {
+
+		if ( isset( $_POST['permalink_structure'] ) || isset( $_POST['category_base'] ) )
+			return $this->delete_sitemap_transient();
+
+		return false;
+	}
+
+	/**
+	 * Delete transient for sitemap on requests.
+	 * Also ping search engines.
+	 *
+	 * @since 2.2.9
+	 *
+	 * @return bool true
+	 */
+	public function delete_sitemap_transient() {
+
+		delete_transient( $this->sitemap_transient );
+
+		$this->ping_searchengines();
+
+		return true;
+	}
+
+	/**
+	 * Delete transient for the automatic description for blog on save request.
+	 * Returns old option, since that's passed for sanitation within WP Core.
+	 *
+	 * @param string $old_option The previous blog description option.
+	 *
+	 * @since 2.3.3
+	 *
+	 * @return string Previous option.
+	 */
+	public function delete_auto_description_blog_transient( $old_option ) {
+
+		$this->setup_auto_description_transient( (int) get_option( 'page_for_posts' ) );
+
+		delete_transient( $this->auto_description_transient );
+
+		return $old_option;
+	}
+
+	/**
+	 * Delete transient for the automatic description on requests.
+	 *
+	 * @param mixed $page_id The page ID or identifier.
+	 * @param string $taxonomy The tt name.
+	 *
+	 * @since 2.3.3
+	 *
+	 * @return bool true
+	 */
+	public function delete_auto_description_transient( $page_id, $taxonomy = '' ) {
+
+		$this->setup_auto_description_transient( $page_id, $taxonomy );
+
+		delete_transient( $this->auto_description_transient );
+
+		return true;
+	}
+
+	/**
+	 * Delete transient for the LD+Json scripts on requests.
+	 *
+	 * @param mixed $page_id The page ID or identifier.
+	 * @param string $taxonomy The tt name.
+	 *
+	 * @since 2.4.2
+	 *
+	 * @return bool true
+	 */
+	public function delete_ld_json_transient( $page_id, $taxonomy = '' ) {
+
+		static $flushed = null;
+
+		if ( ! isset( $flushed ) ) {
+			$this->setup_ld_json_transient( $page_id, $taxonomy );
+
+			delete_transient( $this->ld_json_transient );
+
+			$flushed = 'Oh behave!';
+
+			return true;
+		}
+
+		return false;
+	}
+
+	/**
+	 * Delete transient for the Theme doing it Right bool on special requests.
+	 *
+	 * @since 2.5.2
+	 *
+	 * @return bool true
+	 */
+	public function delete_theme_dir_transient() {
+
+		delete_transient( $this->theme_doing_it_right_transient );
+
+		return true;
+	}
+
+	/**
+	 * Sets transient for Theme doing it Right
+	 *
+	 * @since 2.5.2
+	 *
+	 * @param bool $doing_it_right
+	 */
+	public function set_theme_dir_transient( $dir = '' ) {
+
+		if ( is_bool( $dir ) && false === get_transient( $this->theme_doing_it_right_transient ) ) {
+
+			//* Convert $dir to string 1 or 0 as transients can be false on failure.
+			$dir = $dir ? '1' : '0';
+
+			/**
+			 * Expiration time, 3 days.
+			 * 60s * 60m * 24d * 3d
+			 */
+			$expiration = 60 * 60 * 24 * 3;
+
+			set_transient( $this->theme_doing_it_right_transient, $dir, $expiration );
+		}
+
+	}
+
+	/**
+	 * Flushes the home page LD+Json transient.
+	 *
+	 * @staticvar bool $flushed
+	 * @since 2.6.0
+	 *
+	 * @return bool Whether it's flushed on current call.
+	 */
+	public function delete_front_ld_json_transient() {
+
+		static $flushed = null;
+
+		if ( isset( $flushed ) )
+			return false;
+
+		$front_id = $this->get_the_front_page_ID();
+
+		$this->delete_ld_json_transient( $front_id );
+
+		return $flushed = true;
+	}
+
+}
Index: inc/deprecated/deprecated.class.php
===================================================================
--- inc/deprecated/deprecated.class.php	(revision 1413572)
+++ inc/deprecated/deprecated.class.php	(working copy)
@@ -24,6 +24,9 @@
  */
 class The_SEO_Framework_Deprecated extends AutoDescription_Feed {
 
+	/**
+	 * Constructor. Load parent constructor.
+	 */
 	public function __construct() {
 		parent::__construct();
 	}
@@ -37,9 +40,9 @@
 	 * @since 2.3.4
 	 */
 	public function autodescription_get_option( $key, $setting = null, $use_cache = true ) {
-		_deprecated_function( 'AutoDescription_Adminpages::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.4' ), 'AutoDescription_Adminpages::the_seo_framework_get_option' );
+		$this->_deprecated_function( 'AutoDescription_Adminpages::' . __FUNCTION__, '2.3.4', 'AutoDescription_Adminpages::the_seo_framework_get_option()' );
 
-		return the_seo_framework_get_option( $key, $setting, $use_cache );
+		return $this->the_seo_framework_get_option( $key, $setting, $use_cache );
 	}
 
 	/**
@@ -53,7 +56,7 @@
 	 * @param $hook the current page
 	 */
 	public function enqueue_javascript( $hook ) {
-		_deprecated_function( 'AutoDescription_Admin_Init::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.3' ), 'AutoDescription_Admin_Init::enqueue_admin_scripts' );
+		$this->_deprecated_function( 'AutoDescription_Admin_Init::' . __FUNCTION__, '2.3.3', 'AutoDescription_Admin_Init::enqueue_admin_scripts()' );
 
 		return $this->enqueue_admin_scripts( $hook );
 	}
@@ -69,7 +72,7 @@
 	 * @param $hook the current page
 	 */
 	public function enqueue_css( $hook ) {
-		_deprecated_function( 'AutoDescription_Admin_Init::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.3' ), 'AutoDescription_Admin_Init::enqueue_admin_scripts' );
+		$this->_deprecated_function( 'AutoDescription_Admin_Init::' . __FUNCTION__, '2.3.3', 'AutoDescription_Admin_Init::enqueue_admin_scripts()' );
 
 		return $this->enqueue_admin_scripts( $hook );
 	}
@@ -83,7 +86,7 @@
 	 * @since 2.3.3
 	 */
 	public function fetch_sitemap_transient_name() {
-		_deprecated_function( 'AutoDescription_Transients::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.3' ), 'Completely removed. Use AutoDescription_Transients::$sitemap_transient' );
+		$this->_deprecated_function( 'AutoDescription_Transients::' . __FUNCTION__, '2.3.3', 'AutoDescription_Transients::$sitemap_transient' );
 
 		return $this->sitemap_transient;
 	}
@@ -97,7 +100,7 @@
 	 * @since 2.3.3
 	 */
 	public function delete_sitemap_transient_post( $post_id ) {
-		_deprecated_function( 'AutoDescription_Transients::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.3' ), 'AutoDescription_Transients::delete_sitemap_transient_post' );
+		$this->_deprecated_function( 'AutoDescription_Transients::' . __FUNCTION__, '2.3.3', 'AutoDescription_Transients::delete_sitemap_transient_post()' );
 
 		return $this->delete_transients_post( $post_id );
 	}
@@ -111,8 +114,7 @@
 	 * @since 2.3.0
 	 */
 	public function autodescription_version( $version = '' ) {
-		//* Wow, a deprecation that deprecates using itself. :D
-		_deprecated_function( 'The_SEO_Framework_Load::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.0' ), 'The_SEO_Framework_Load::the_seo_framework_version' );
+		$this->_deprecated_function( 'The_SEO_Framework_Load::' . __FUNCTION__, '2.3.0', 'The_SEO_Framework_Load::the_seo_framework_version()' );
 
 		return $this->the_seo_framework_version( $version );
 	}
@@ -126,7 +128,7 @@
 	 * @since 2.3.5
 	 */
 	public function scripts() {
-		_deprecated_function( 'AutoDescription_Adminpages::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.5' ), 'AutoDescription_Adminpages::metabox_scripts' );
+		$this->_deprecated_function( 'AutoDescription_Adminpages::' . __FUNCTION__, '2.3.5', 'AutoDescription_Adminpages::metabox_scripts()' );
 
 		return $this->metabox_scripts();
 	}
@@ -140,7 +142,7 @@
 	 * Oops.
 	 */
 	public function setup_transient_names_init() {
-		_deprecated_function( 'AutoDescription_Transients::' . __FUNCTION__, $this->the_seo_framework_version( '2.3.3' ), 'AutoDescription_Transients::setup_transient_names' );
+		$this->_deprecated_function( 'AutoDescription_Transients::' . __FUNCTION__, '2.3.3', 'AutoDescription_Transients::setup_transient_names()' );
 
 		$this->setup_transient_names();
 		return false;
@@ -158,12 +160,6 @@
 	 *
 	 * @param array $args the custom supported screens.
 	 *
-	 * Added WooCommerce edit-product screens.
-	 * @since 2.3.1
-	 *
-	 * Unused.
-	 * @since 2.3.5
-	 *
 	 * @deprecated
 	 * @since 2.5.2
 	 *
@@ -170,9 +166,8 @@
 	 * @return array $screens
 	 */
 	protected function supported_screens( $args = array() ) {
+		$this->_deprecated_function( 'AutoDescription_Admin_Init::' . __FUNCTION__, '2.5.2' );
 
-		_deprecated_function( 'AutoDescription_Admin_Init::' . __FUNCTION__, $this->the_seo_framework_version( '2.5.2' ) );
-
 		/**
 		 * Instead of supporting page ID's, we support the Page base now.
 		 *
@@ -199,10 +194,190 @@
 	 * @since 2.5.2.1
 	 */
 	public function title_doing_it_wrong() {
+		$this->_deprecated_function( 'AutoDescription_Detect::' . __FUNCTION__, '2.5.2.1', 'AutoDescription_Detect::tell_title_doing_it_wrong()' );
 
-		_deprecated_function( 'AutoDescription_Detect::' . __FUNCTION__, $this->the_seo_framework_version( '2.5.2.1' ) );
+		return;
+	}
 
+	/**
+	 * Checks a theme's support for a given feature
+	 *
+	 * @since 2.2.5
+	 *
+	 * @global array $_wp_theme_features
+	 *
+	 * @param string $feature the feature being checked
+	 * @return bool
+	 *
+	 * Taken from WP Core, but it now returns true on title-tag support.
+	 *
+	 * @deprecated
+	 * @since 2.6.0
+	 */
+	public function current_theme_supports( $feature ) {
+		$this->_deprecated_function( 'AutoDescription_Detect::' . __FUNCTION__, '2.6.0', 'current_theme_supports()' );
+
+		return current_theme_supports();
+	}
+
+	/**
+	 * Echo debug values.
+	 *
+	 * @param mixed $values What to be output.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @deprecated
+	 * @since 2.6.0
+	 */
+	public function echo_debug_information( $values ) {
+		$this->_deprecated_function( 'AutoDescription_Debug::' . __FUNCTION__, '2.6.0', 'AutoDescription_Debug::get_debug_information()' );
+
+		echo $this->get_debug_information( $values );
+
+	}
+
+	/**
+	 * Get the archive Title.
+	 *
+	 * WordPress core function @since 4.1.0
+	 *
+	 * @since 2.3.6
+	 *
+	 * @deprecated
+	 * @since 2.6.0
+	 */
+	public function get_the_archive_title() {
+		$this->_deprecated_function( 'AutoDescription_Generate_Description::' . __FUNCTION__, '2.6.0', 'AutoDescription_Generate_Title::get_the_real_archive_title()' );
+
+		return $this->get_the_real_archive_title();
+	}
+
+	/**
+	 * Adds the SEO Bar.
+	 *
+	 * @param string $column the current column    : If it's a taxonomy, this is empty
+	 * @param int $post_id the post id             : If it's a taxonomy, this is the column name
+	 * @param string $tax_id this is empty         : If it's a taxonomy, this is the taxonomy id
+	 *
+	 * @param string $status the status in html
+	 *
+	 * @staticvar string $type_cache
+	 * @staticvar string $column_cache
+	 *
+	 * @since 2.1.9
+	 *
+	 * @deprecated
+	 * @since 2.6.0
+	 */
+	public function seo_column( $column, $post_id, $tax_id = '' ) {
+		$this->_deprecated_function( 'AutoDescription_DoingItRight::' . __FUNCTION__, '2.6.0', 'AutoDescription_DoingItRight::seo_bar()' );
+
+		return $this->seo_bar( $column, $post_id, $tax_id );
+	}
+
+	/**
+	 * Ping Yahoo
+	 *
+	 * @since 2.2.9
+	 * @deprecated
+	 * @since 2.6.0
+	 */
+	public function ping_yahoo() {
+		$this->_deprecated_function( 'AutoDescription_Sitemaps::' . __FUNCTION__, '2.6.0', 'AutoDescription_Sitemaps::ping_bing()' );
+
+		$this->ping_bing();
+	}
+
+	/**
+	 * Create sitemap.xml content transient.
+	 *
+	 * @param string|bool $content required The sitemap transient content.
+	 *
+	 * @since 2.2.9
+	 * @deprecated
+	 * @since 2.6.0
+	 */
+	public function setup_sitemap_transient( $sitemap_content ) {
+		$this->_deprecated_function( 'AutoDescription_Sitemaps::' . __FUNCTION__, '2.6.0', 'AutoDescription_Sitemaps::setup_sitemap()' );
+
+		return $this->setup_sitemap( $sitemap_content );
+	}
+
+	/**
+	 * Detect WordPress language.
+	 * Considers en_UK, en_US, etc.
+	 *
+	 * @param string $str Required, the locale.
+	 * @param bool $use_cache Set to false to bypass the cache.
+	 *
+	 * @staticvar array $locale
+	 * @staticvar string $get_locale
+	 *
+	 * @since 2.3.8
+	 * @deprecated
+	 * @since 2.6.0
+	 *
+	 * @return bool
+	 */
+	public function is_locale( $str, $use_cache = true ) {
+		$this->_deprecated_function( 'AutoDescription_Detect::' . __FUNCTION__, '2.6.0', 'AutoDescription_Detect::check_wp_locale()' );
+
+		return $this->check_wp_locale( $str, $use_cache );
+	}
+
+	/**
+	 * Build the title based on input, without tagline.
+	 * Note: Not escaped.
+	 *
+	 * @param string $title The Title to return
+	 * @param array $args : accepted args : {
+	 * 		@param int term_id The Taxonomy Term ID
+	 * 		@param bool placeholder Generate placeholder, ignoring options.
+	 * 		@param bool page_on_front Page on front condition for example generation
+	 * }
+	 *
+	 * @since 2.4.0
+	 * @deprecated
+	 * @since 2.6.0
+	 *
+	 * @return string Title without tagline.
+	 */
+	public function get_placeholder_title( $title = '', $args = array() ) {
+		$this->_deprecated_function( 'AutoDescription_Generate_Title::' . __FUNCTION__, '2.6.0', 'AutoDescription_Generate_Title::title()` with the argument $args[\'notagline\']' );
+
+		$args['notagline'] = true;
+		return $this->title( $title, '', '', $args );
+	}
+
+	/**
+	 * Initializes default settings very early at the after_setup_theme hook.
+	 * Admin only.
+	 *
+	 * @since 2.5.0
+	 * @deprecated
+	 * @since 2.6.0
+	 *
+	 * @return void
+	 */
+	public function initialize_defaults_admin() {
+		$this->_deprecated_function( 'AutoDescription_Siteoptions::' . __FUNCTION__, '2.6.0' );
 		return;
 	}
 
+	/**
+	 * Initializes default settings very early at the after_setup_theme hook
+	 * Therefore supports is_rtl().
+	 *
+	 * @since 2.5.0
+	 * @deprecated
+	 * @since 2.6.0
+	 *
+	 * @return void
+	 */
+	public function initialize_defaults() {
+		$this->_deprecated_function( 'AutoDescription_Siteoptions::' . __FUNCTION__, '2.6.0' );
+		return;
+	}
+
 }
Index: inc/deprecated/deprecated.php
===================================================================
--- inc/deprecated/deprecated.php	(revision 1413572)
+++ inc/deprecated/deprecated.php	(working copy)
@@ -33,7 +33,7 @@
  * @see the_seo_framework_load();
  */
 function hmpl_ad_load() {
-	_deprecated_function( __FUNCTION__, $this->the_seo_framework_version( '2.3.7' ), 'the_seo_framework_load()' );
+	_deprecated_function( __FUNCTION__, '2.3.7 of The SEO Framework', 'the_seo_framework_load()' );
 
 	return the_seo_framework_load();
 }
Index: inc/functions/benchmark.php
===================================================================
--- inc/functions/benchmark.php	(nonexistent)
+++ inc/functions/benchmark.php	(working copy)
@@ -0,0 +1,369 @@
+<?php
+
+add_action( 'wp_head', 'the_seo_framework_php_benchmark', -1 );
+//* Benchmark PHP.
+function the_seo_framework_php_benchmark() {
+
+	//* Boolean.
+	$b = true;
+	$ba = false;
+
+	//* String.
+	$s = '';
+
+	//* Compare
+	$c1 = 'thing1';
+	$c4 = 'thing4';
+	$c40 = 'thing40';
+
+	//* Array 5
+	$a5 = array( 'thing1', 'thing2', 'thing3', 'thing4', 'thing5' );
+
+	//* Array 50
+	$a50 = array( 'thing1','thing2','thing3','thing4','thing5','thing6','thing7','thing8','thing9','thing10','thing11','thing12','thing13','thing14','thing15','thing16','thing17','thing18','thing19','thing20','thing21','thing22','thing23','thing24','thing25','thing26','thing27','thing28','thing29','thing30','thing31','thing32','thing33','thing34','thing35','thing36','thing37','thing38','thing39','thing40','thing41','thing42','thing43','thing44','thing45','thing46','thing47','thing48','thing49','thing50' );
+
+	//* Iterations
+	$it = 10000000;
+
+	//* Start the engines.
+	$i = 0;
+	$t = microtime(true);
+	while ( $i < 10 ) {
+		if ( $b ) {
+			$a = $b;
+		}
+		if ( empty( $b ) ) {
+			$a = $b;
+		}
+		if ( ! $b ) {
+			$a = $b;
+		}
+		if ( isset( $b ) ) {
+			$a = $b;
+		}
+		if ( the_seo_framework_is_empty_string( $b ) ) {
+			$a = $b;
+		}
+		if ( in_array( $c1, $a5 ) ) {
+			$a = $b;
+		}
+		if ( the_seo_framework_in_array( $c1, $a5 ) ) {
+			$a = $b;
+		}
+		$i++;
+	}
+	$starttime = microtime(true) - $t;
+
+	//* Loose
+	$i = 0;
+	$t = microtime(true);
+	while ( $i < $it ) {
+		if ( $b ) {
+			// valuated
+		}
+		++$i;
+	}
+	$loosetime = microtime(true) - $t;
+
+	//* Strict
+	$i = 0;
+	$t = microtime(true);
+	while ( $i < $it ) {
+		if ( true === $b ) {
+			// valuated
+		}
+		++$i;
+	}
+	$stricttime = microtime(true) - $t;
+
+	//* Strict Neg
+	$i = 0;
+	$t = microtime(true);
+	while ( $i < $it ) {
+		if ( true !== $b ) {
+			// valuated
+		}
+		++$i;
+	}
+	$strictnegtime = microtime(true) - $t;
+
+	//* Empty
+	$i = 0;
+	$t = microtime(true);
+	while ( $i < $it ) {
+		if ( empty( $b ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$emptytime = microtime(true) - $t;
+
+	//* Neg Empty
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( ! empty( $b ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$negemptytime = microtime(true) - $t;
+
+	//* False Empty
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( false === empty( $b ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$strictemptytime = microtime(true) - $t;
+
+	//* Isset
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( isset( $b ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$issettime = microtime(true) - $t;
+
+	//* Isset Strict
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( true === isset( $b ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$issetstricttime = microtime(true) - $t;
+
+	//* Loose Empty string
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( $s ) {
+			// valuated
+		}
+		++$i;
+	}
+	$looseemptystring = microtime(true) - $t;
+
+	//* Loose Neg Empty string
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( ! $s ) {
+			// valuated
+		}
+		++$i;
+	}
+	$loosenegemptystring = microtime(true) - $t;
+
+	//* Empty string
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( empty( $s ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$emptystring = microtime(true) - $t;
+
+	//* Empty string strict
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( '' === $s ) {
+			// valuated
+		}
+		++$i;
+	}
+	$emptystrictstring = microtime(true) - $t;
+
+	//* Empty string strict
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( the_seo_framework_is_empty_string( $s ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$emptystrictfunctionstring = microtime(true) - $t;
+
+	//* In array begin 5
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( in_array( $c1, $a5 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarraybegin5 = microtime(true) - $t;
+
+	//* In array begin 5 function
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( the_seo_framework_in_array( $c1, $a5 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarraybegin5function = microtime(true) - $t;
+
+
+	//* In array end 5
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( in_array( $c4, $a5 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarrayend5 = microtime(true) - $t;
+
+	//* In array end 5 function
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( the_seo_framework_in_array( $c4, $a5 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarrayend5function = microtime(true) - $t;
+
+	//* In array begin 50
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( in_array( $c1, $a50 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarraybegin50 = microtime(true) - $t;
+
+	//* In array begin 50 function
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( the_seo_framework_in_array( $c1, $a50 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarraybegin50function = microtime(true) - $t;
+
+
+	//* In array end 50
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( in_array( $c40, $a50 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarrayend50 = microtime(true) - $t;
+
+	//* In array end 50 function
+	$i = 0;
+	$t = microtime(true);
+	while( $i < $it ) {
+		if ( the_seo_framework_in_array( $c40, $a5 ) ) {
+			// valuated
+		}
+		++$i;
+	}
+	$inarrayend50function = microtime(true) - $t;
+
+	//* Strict false
+	$i = 0;
+	$t = microtime(true);
+	while ( $i < $it ) {
+		if ( false === $ba ) {
+			// valuated
+		}
+		++$i;
+	}
+	$strictfalsetime = microtime(true) - $t;
+
+	//* Loose flip false
+	$i = 0;
+	$t = microtime(true);
+	while ( $i < $it ) {
+		if ( ! $ba ) {
+			// valuated
+		}
+		++$i;
+	}
+	$falsefliptime = microtime(true) - $t;
+
+	//* PHP 7 FCGI results @ 10,000,000 iterations.
+	echo 'Loose time: ' . $loosetime . " seconds\r\n"; 					// 0.1115360260009765625 seconds
+	echo 'Strict time: ' . $stricttime . " seconds\r\n";				// 0.1202042102813720703125 seconds
+	echo 'Strict Neg time: ' . $strictnegtime . " seconds\r\n";			// 0.1270349025726318359375 seconds
+	echo 'Empty time: ' . $emptytime . " seconds\r\n";					// 0.1297409534454345703125 seconds
+	echo 'Neg Empty time: ' . $negemptytime . " seconds\r\n";			// 0.20085906982421875 seconds <- Triple check
+	echo 'Strict Neg Empty time: ' . $strictemptytime . " seconds\r\n"; // 0.18640804290771484375 seconds <- Double check
+	echo 'Isset time: ' . $issettime . " seconds\r\n"; 					// 0.115377902984619140625 seconds
+	echo 'Strict Isset time: ' . $issetstricttime . " seconds\r\n"; 	// 0.17035007476806640625 seconds <- Double check
+
+	echo 'Strict False time: ' . $strictfalsetime . " seconds\r\n"; 	// 0.1211879253387451171875  seconds
+	echo 'Loose Flip time: ' . $falsefliptime . " seconds\r\n";			// 0.1306369304656982421875 seconds
+
+	echo "\r\n";
+
+	echo 'Loose Empty String time: ' . $looseemptystring . " seconds\r\n";						// 0.1340930461883544921875 seconds
+	echo 'Loose Neg Empty String time: ' . $loosenegemptystring . " seconds\r\n";				// 0.15882110595703125 seconds
+	echo 'Empty String time: ' . $emptystring . " seconds\r\n"; 								// 0.135138034820556640625 seconds
+	echo 'Strict Empty String time: ' . $emptystrictstring . " seconds\r\n"; 					// 0.1573431491851806640625 seconds
+	echo 'Strict Empty Function String time: ' . $emptystrictfunctionstring . " seconds\r\n"; 	// 0.385016918182373046875 seconds <- Triple check.
+
+	echo "\r\n";
+
+	echo 'In array begin 5: ' . $inarraybegin5 . " seconds\r\n"; 						// 0.3640620708465576171875 seconds
+	echo 'In array begin function 5: ' . $inarraybegin5function . " seconds\r\n"; 		// 2.0675928592681884765625 seconds <- VERY bad (1. function call, 2. array sorting. 3. Triple check)
+	echo 'In array end 5: ' . $inarrayend5 . " seconds\r\n"; 							// 0.5424749851226806640625 seconds
+	echo 'In array end function 5: ' . $inarrayend5function . " seconds\r\n"; 			// 2.0651528835296630859375 seconds <- VERY bad
+
+	echo "\r\n";
+
+	echo 'In array begin 50: ' . $inarraybegin50 . " seconds\r\n"; 						// 0.3695099353790283203125 seconds
+	echo 'In array begin function 50: ' . $inarraybegin50function . " seconds\r\n"; 	// 8.4975330829620361328125 seconds <- VERY bad.
+	echo 'In array end 50: ' . $inarrayend50 . " seconds\r\n"; 							// 2.392652988433837890625 seconds
+	echo 'In array end function 50: ' . $inarrayend50function . " seconds\r\n"; 		// 2.004433155059814453125 seconds <- miniscule benefit.
+
+}
+
+function the_seo_framework_is_empty_string( $string ) {
+	if ( '' === $string ) return true;
+	return false;
+}
+
+function the_seo_framework_in_array( $needle, $array ) {
+
+	$array = array_flip( $array );
+
+	if ( is_string( $needle ) ) {
+		if ( isset( $array[$needle] ) )
+			return true;
+	} else if ( is_array( $needle ) ) {
+		foreach ( $needle as $str ) {
+			if ( isset( $array[$str] ) )
+				return true;
+		}
+	}
+
+	return false;
+}
Index: inc/functions/compat.php
===================================================================
--- inc/functions/compat.php	(revision 1413572)
+++ inc/functions/compat.php	(working copy)
@@ -1,359 +1,359 @@
-<?php
-/**
- * Returns whether PCRE/u (PCRE_UTF8 modifier) is available for use.
- *
- * @ignore
- * @since WordPress 4.2.2
- * @access private
- *
- * @staticvar string $utf8_pcre
- *
- * @param bool $set - Used for testing only
- *             null   : default - get PCRE/u capability
- *             false  : Used for testing - return false for future calls to this function
- *             'reset': Used for testing - restore default behavior of this function
- *
- * WordPress core function.
- * Implemented in this plugin for compatibility with older WordPress versions.
- * @since 2.3.5
- */
-if ( ! function_exists( '_wp_can_use_pcre_u' ) ) :
-	function _wp_can_use_pcre_u( $set = null ) {
-		static $utf8_pcre = 'reset';
-
-		if ( null !== $set ) {
-			$utf8_pcre = $set;
-		}
-
-		if ( 'reset' === $utf8_pcre ) {
-			$utf8_pcre = @preg_match( '/^./u', 'a' );
-		}
-
-		return $utf8_pcre;
-	}
-endif;
-
-/**
- * Extended charset support
- *
- * @uses strlen
- * @return mb_strlen
- *
- * @since 1.3.0
- *
- * Rewritten
- * @since 2.3.5
- */
-if ( ! function_exists( 'mb_strlen' ) ) :
-	function mb_strlen( $str, $encoding = null ) {
-		return _mb_strlen( $str, $encoding );
-	}
-endif;
-
-/*
-* Only understands UTF-8 and 8bit.  All other character sets will be treated as 8bit.
-* For $encoding === UTF-8, the $str input is expected to be a valid UTF-8 byte sequence.
-* The behavior of this function for invalid inputs is undefined.
-*/
-if ( ! function_exists( '_mb_strlen' ) ) :
-	function _mb_strlen( $str, $encoding = null ) {
-		if ( null === $encoding ) {
-			$encoding = get_option( 'blog_charset' );
-		}
-
-		// The solution below works only for UTF-8,
-		// so in case of a different charset just use built-in strlen()
-		if ( ! in_array( $encoding, array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) ) ) {
-			return strlen( $str );
-		}
-
-		if ( _wp_can_use_pcre_u() ) {
-			// Use the regex unicode support to separate the UTF-8 characters into an array
-			preg_match_all( '/./us', $str, $match );
-			return count( $match[0] );
-		}
-
-		$regex = '/(?:
-			  [\x00-\x7F]                  # single-byte sequences   0xxxxxxx
-			| [\xC2-\xDF][\x80-\xBF]       # double-byte sequences   110xxxxx 10xxxxxx
-			| \xE0[\xA0-\xBF][\x80-\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2
-			| [\xE1-\xEC][\x80-\xBF]{2}
-			| \xED[\x80-\x9F][\x80-\xBF]
-			| [\xEE-\xEF][\x80-\xBF]{2}
-			| \xF0[\x90-\xBF][\x80-\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3
-			| [\xF1-\xF3][\x80-\xBF]{3}
-			| \xF4[\x80-\x8F][\x80-\xBF]{2}
-		)/x';
-
-		$count = 1; // Start at 1 instead of 0 since the first thing we do is decrement
-		do {
-			// We had some string left over from the last round, but we counted it in that last round.
-			$count--;
-
-			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
-			$pieces = preg_split( $regex, $str, 1000 );
-
-			// Increment
-			$count += count( $pieces );
-		} while ( $str = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
-
-		// Fencepost: preg_split() always returns one extra item in the array
-		return --$count;
-	}
-endif;
-
-/**
- * Extended charset support
- *
- * @uses substr
- * @return mb_substr
- *
- * @since 1.3.0
- *
- * Rewritten
- * @since 2.3.5
- */
-if ( ! function_exists( 'mb_substr' ) ) :
-	function mb_substr( $str, $start, $length = null, $encoding = null ) {
-		return _mb_substr( $str, $start, $length, $encoding );
-	}
-endif;
-
-/*
- * Only understands UTF-8 and 8bit.  All other character sets will be treated as 8bit.
- * For $encoding === UTF-8, the $str input is expected to be a valid UTF-8 byte sequence.
- * The behavior of this function for invalid inputs is undefined.
- */
-if ( ! function_exists( '_mb_substr' ) ) :
-	function _mb_substr( $str, $start, $length = null, $encoding = null ) {
-		if ( null === $encoding ) {
-			$encoding = get_option( 'blog_charset' );
-		}
-
-		// The solution below works only for UTF-8,
-		// so in case of a different charset just use built-in substr()
-		if ( ! in_array( $encoding, array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) ) ) {
-			return is_null( $length ) ? substr( $str, $start ) : substr( $str, $start, $length );
-		}
-
-		if ( _wp_can_use_pcre_u() ) {
-			// Use the regex unicode support to separate the UTF-8 characters into an array
-			preg_match_all( '/./us', $str, $match );
-			$chars = is_null( $length ) ? array_slice( $match[0], $start ) : array_slice( $match[0], $start, $length );
-			return implode( '', $chars );
-		}
-
-		$regex = '/(
-			  [\x00-\x7F]                  # single-byte sequences   0xxxxxxx
-			| [\xC2-\xDF][\x80-\xBF]       # double-byte sequences   110xxxxx 10xxxxxx
-			| \xE0[\xA0-\xBF][\x80-\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2
-			| [\xE1-\xEC][\x80-\xBF]{2}
-			| \xED[\x80-\x9F][\x80-\xBF]
-			| [\xEE-\xEF][\x80-\xBF]{2}
-			| \xF0[\x90-\xBF][\x80-\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3
-			| [\xF1-\xF3][\x80-\xBF]{3}
-			| \xF4[\x80-\x8F][\x80-\xBF]{2}
-		)/x';
-
-		$chars = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
-		do {
-			// We had some string left over from the last round, but we counted it in that last round.
-			array_pop( $chars );
-
-			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
-			$pieces = preg_split( $regex, $str, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
-
-			$chars = array_merge( $chars, $pieces );
-		} while ( count( $pieces ) > 1 && $str = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
-
-		return join( '', array_slice( $chars, $start, $length ) );
-	}
-endif;
-
-/**
- * Extended charset support
- *
- * @see _mb_strpos()
- *
- * @param string		$haystack	The string to search in.
- * @param mixed 		$needle		If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
- * @param int			$offset		Optional, search will start this number of characters counted from the beginning of the string. The offset cannot be negative.
- * @param string|null	$encoding	Optional. Character encoding to use. Default null.
- *
- * @license GLPv2 or later
- * @return int Position of first occurence found of $haystack of `$needle`.
- */
-if ( ! function_exists( 'mb_strpos' ) ) :
-	function mb_strpos( $haystack, $needle, $offset = 0, $encoding = null ) {
-		return _mb_strpos( $haystack, $needle, $offset, $encoding );
-	}
-endif;
-
-/**
- * Compat function to mimic mb_strpos().
- *
- * Only understands UTF-8 and 8bit.  All other character sets will be treated as 8bit.
- * For $encoding === UTF-8, the $str input is expected to be a valid UTF-8 byte sequence.
- * The behavior of this function for invalid inputs is PHP compliant.
- *
- * @since 4.5.0
- * @license GLPv2 or later
- *
- * @param string		$haystack	The string to search in.
- * @param mixed 		$needle		If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
- * @param int			$offset		Optional, search will start this number of characters counted from the beginning of the string. The offset cannot be negative.
- * @param string|null	$encoding	Optional. Character encoding to use. Default null.
- *
- * @license GLPv2 or later
- * @return int Position of first occurence found of $haystack of `$needle`.
- */
-if ( ! function_exists( '_mb_strpos' ) ) :
-	function _mb_strpos( $haystack, $needle, $offset = 0, $encoding = null ) {
-
-		if ( null === $encoding ) {
-			$encoding = get_option( 'blog_charset' );
-		}
-
-		// The solution below works only for UTF-8,
-		// So in case of a different charset just use built-in strpos()
-		if ( ! in_array( $encoding, array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) ) ) {
-			return $offset === 0 ? strpos( $haystack, $needle ) : strpos( $haystack, $needle, $offset );
-		}
-
-		$haystack_len = mb_strlen( $haystack );
-
-		if ( $offset < (int) 0 || $offset > $haystack_len ) {
-			trigger_error( 'mb_strpos(): Offset not contained in string', E_USER_WARNING );
-			return false;
-		}
-
-		if ( ! is_string( $needle ) ) {
-			$needle = (int) $needle;
-
-			if ( ! is_int( $needle ) ) {
-				trigger_error( 'mb_strpos(): Array to string conversion', E_USER_WARNING );
-				return false;
-			}
-		}
-
-		if ( empty( $needle ) ) {
-			trigger_error( 'mb_strpos(): Empty needle', E_USER_WARNING );
-			return false;
-		}
-
-		// Slice off the offset
-		$haystack_sub = mb_substr( $haystack, $offset );
-
-		if ( _wp_can_use_pcre_u() ) {
-			// Use the regex unicode support to separate the UTF-8 characters into an array
-			preg_match_all( "/./us", $haystack, $match_h );
-			preg_match_all( "/$needle/us", $haystack_sub, $match_n );
-
-			$inter = array_intersect( $match_h[0], $match_n[0] );
-
-			if ( ! isset( $inter ) )
-				return false;
-
-			//* Prevent bugs, (re)assign var.
-			$pos = null;
-
-			// Find first occurence greater than or equal to offset
-			foreach ( $inter as $key => $value ) {
-				if ( $key >= $offset ) {
-					$pos = $key;
-					break;
-				}
-			}
-
-			//* No key has been found.
-			if ( ! isset( $pos ) )
-				return false;
-
-			return (int) $pos;
-		}
-
-		$regex = '/(
-			  [\x00-\x7F]                  # single-byte sequences   0xxxxxxx
-			| [\xC2-\xDF][\x80-\xBF]       # double-byte sequences   110xxxxx 10xxxxxx
-			| \xE0[\xA0-\xBF][\x80-\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2
-			| [\xE1-\xEC][\x80-\xBF]{2}
-			| \xED[\x80-\x9F][\x80-\xBF]
-			| [\xEE-\xEF][\x80-\xBF]{2}
-			| \xF0[\x90-\xBF][\x80-\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3
-			| [\xF1-\xF3][\x80-\xBF]{3}
-			| \xF4[\x80-\x8F][\x80-\xBF]{2}
-		)/x';
-
-		/**
-		 * Place haystack into array
-		 */
-		$match_h = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
-		do {
-			// We had some string left over from the last round, but we counted it in that last round.
-			array_pop( $match_h );
-
-			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
-			$pieces = preg_split( $regex, $haystack, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
-
-			$match_h = array_merge( $match_h, $pieces );
-		} while ( count( $pieces ) > 1 && $haystack = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
-
-		/**
-		 * Place haystack offset into array
-		 */
-		$match_hs = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
-		do {
-			// We had some string left over from the last round, but we counted it in that last round.
-			array_pop( $match_hs );
-
-			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
-			$pieces = preg_split( $regex, $haystack_sub, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
-
-			$match_hs = array_merge( $match_hs, $pieces );
-		} while ( count( $pieces ) > 1 && $haystack_sub = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
-
-		/**
-		 * Put needle into array
-		 */
-		$match_n = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
-		do {
-			// We had some string left over from the last round, but we counted it in that last round.
-			array_pop( $match_n );
-
-			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
-			$pieces = preg_split( $regex, $needle, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
-
-			$match_n = array_merge( $match_n, $pieces );
-		} while ( count( $pieces ) > 1 && $needle = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
-
-		/**
-		 * Compute match of haystack offset with needle
-		 * If passed, return the array key number within the full haystack.
-		 */
-		if ( false !== in_array( $match_n[0], $match_hs ) ) {
-			$inter = array_intersect( $match_h, $match_n );
-
-			if ( ! isset( $inter ) )
-				return false;
-
-			//* Prevent bugs, (re)assign var.
-			$pos = null;
-
-			// Find first occurence greater than or equal to offset
-			foreach ( $inter as $key => $value ) {
-				if ( $key >= $offset ) {
-					$pos = $key;
-					break;
-				}
-			}
-
-			//* No key has been found.
-			if ( ! isset( $pos ) )
-				return false;
-
-			return (int) $pos;
-		} else {
-			return false;
-		}
-	}
-endif;
+<?php
+/**
+ * Returns whether PCRE/u (PCRE_UTF8 modifier) is available for use.
+ *
+ * @ignore
+ * @since WordPress 4.2.2
+ * @access private
+ *
+ * @staticvar string $utf8_pcre
+ *
+ * @param bool $set - Used for testing only
+ *             null   : default - get PCRE/u capability
+ *             false  : Used for testing - return false for future calls to this function
+ *             'reset': Used for testing - restore default behavior of this function
+ *
+ * WordPress core function.
+ * Implemented in this plugin for compatibility with older WordPress versions.
+ * @since 2.3.5
+ */
+if ( ! function_exists( '_wp_can_use_pcre_u' ) ) :
+	function _wp_can_use_pcre_u( $set = null ) {
+		static $utf8_pcre = 'reset';
+
+		if ( null !== $set ) {
+			$utf8_pcre = $set;
+		}
+
+		if ( 'reset' === $utf8_pcre ) {
+			$utf8_pcre = @preg_match( '/^./u', 'a' );
+		}
+
+		return $utf8_pcre;
+	}
+endif;
+
+/**
+ * Extended charset support
+ *
+ * @uses strlen
+ * @return mb_strlen
+ *
+ * @since 1.3.0
+ *
+ * Rewritten
+ * @since 2.3.5
+ */
+if ( ! function_exists( 'mb_strlen' ) ) :
+	function mb_strlen( $str, $encoding = null ) {
+		return _mb_strlen( $str, $encoding );
+	}
+endif;
+
+/*
+* Only understands UTF-8 and 8bit.  All other character sets will be treated as 8bit.
+* For $encoding === UTF-8, the $str input is expected to be a valid UTF-8 byte sequence.
+* The behavior of this function for invalid inputs is undefined.
+*/
+if ( ! function_exists( '_mb_strlen' ) ) :
+	function _mb_strlen( $str, $encoding = null ) {
+		if ( null === $encoding ) {
+			$encoding = get_option( 'blog_charset' );
+		}
+
+		// The solution below works only for UTF-8,
+		// so in case of a different charset just use built-in strlen()
+		if ( ! in_array( $encoding, array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) ) ) {
+			return strlen( $str );
+		}
+
+		if ( _wp_can_use_pcre_u() ) {
+			// Use the regex unicode support to separate the UTF-8 characters into an array
+			preg_match_all( '/./us', $str, $match );
+			return count( $match[0] );
+		}
+
+		$regex = '/(?:
+			  [\x00-\x7F]                  # single-byte sequences   0xxxxxxx
+			| [\xC2-\xDF][\x80-\xBF]       # double-byte sequences   110xxxxx 10xxxxxx
+			| \xE0[\xA0-\xBF][\x80-\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2
+			| [\xE1-\xEC][\x80-\xBF]{2}
+			| \xED[\x80-\x9F][\x80-\xBF]
+			| [\xEE-\xEF][\x80-\xBF]{2}
+			| \xF0[\x90-\xBF][\x80-\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3
+			| [\xF1-\xF3][\x80-\xBF]{3}
+			| \xF4[\x80-\x8F][\x80-\xBF]{2}
+		)/x';
+
+		$count = 1; // Start at 1 instead of 0 since the first thing we do is decrement
+		do {
+			// We had some string left over from the last round, but we counted it in that last round.
+			$count--;
+
+			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
+			$pieces = preg_split( $regex, $str, 1000 );
+
+			// Increment
+			$count += count( $pieces );
+		} while ( $str = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
+
+		// Fencepost: preg_split() always returns one extra item in the array
+		return --$count;
+	}
+endif;
+
+/**
+ * Extended charset support
+ *
+ * @uses substr
+ * @return mb_substr
+ *
+ * @since 1.3.0
+ *
+ * Rewritten
+ * @since 2.3.5
+ */
+if ( ! function_exists( 'mb_substr' ) ) :
+	function mb_substr( $str, $start, $length = null, $encoding = null ) {
+		return _mb_substr( $str, $start, $length, $encoding );
+	}
+endif;
+
+/*
+ * Only understands UTF-8 and 8bit.  All other character sets will be treated as 8bit.
+ * For $encoding === UTF-8, the $str input is expected to be a valid UTF-8 byte sequence.
+ * The behavior of this function for invalid inputs is undefined.
+ */
+if ( ! function_exists( '_mb_substr' ) ) :
+	function _mb_substr( $str, $start, $length = null, $encoding = null ) {
+		if ( null === $encoding ) {
+			$encoding = get_option( 'blog_charset' );
+		}
+
+		// The solution below works only for UTF-8,
+		// so in case of a different charset just use built-in substr()
+		if ( ! in_array( $encoding, array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) ) ) {
+			return is_null( $length ) ? substr( $str, $start ) : substr( $str, $start, $length );
+		}
+
+		if ( _wp_can_use_pcre_u() ) {
+			// Use the regex unicode support to separate the UTF-8 characters into an array
+			preg_match_all( '/./us', $str, $match );
+			$chars = is_null( $length ) ? array_slice( $match[0], $start ) : array_slice( $match[0], $start, $length );
+			return implode( '', $chars );
+		}
+
+		$regex = '/(
+			  [\x00-\x7F]                  # single-byte sequences   0xxxxxxx
+			| [\xC2-\xDF][\x80-\xBF]       # double-byte sequences   110xxxxx 10xxxxxx
+			| \xE0[\xA0-\xBF][\x80-\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2
+			| [\xE1-\xEC][\x80-\xBF]{2}
+			| \xED[\x80-\x9F][\x80-\xBF]
+			| [\xEE-\xEF][\x80-\xBF]{2}
+			| \xF0[\x90-\xBF][\x80-\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3
+			| [\xF1-\xF3][\x80-\xBF]{3}
+			| \xF4[\x80-\x8F][\x80-\xBF]{2}
+		)/x';
+
+		$chars = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
+		do {
+			// We had some string left over from the last round, but we counted it in that last round.
+			array_pop( $chars );
+
+			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
+			$pieces = preg_split( $regex, $str, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
+
+			$chars = array_merge( $chars, $pieces );
+		} while ( count( $pieces ) > 1 && $str = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
+
+		return join( '', array_slice( $chars, $start, $length ) );
+	}
+endif;
+
+/**
+ * Extended charset support
+ *
+ * @see _mb_strpos()
+ *
+ * @param string		$haystack	The string to search in.
+ * @param mixed 		$needle		If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
+ * @param int			$offset		Optional, search will start this number of characters counted from the beginning of the string. The offset cannot be negative.
+ * @param string|null	$encoding	Optional. Character encoding to use. Default null.
+ *
+ * @license GLPv2 or later
+ * @return int Position of first occurence found of $haystack of `$needle`.
+ */
+if ( ! function_exists( 'mb_strpos' ) ) :
+	function mb_strpos( $haystack, $needle, $offset = 0, $encoding = null ) {
+		return _mb_strpos( $haystack, $needle, $offset, $encoding );
+	}
+endif;
+
+/**
+ * Compat function to mimic mb_strpos().
+ *
+ * Only understands UTF-8 and 8bit.  All other character sets will be treated as 8bit.
+ * For $encoding === UTF-8, the $str input is expected to be a valid UTF-8 byte sequence.
+ * The behavior of this function for invalid inputs is PHP compliant.
+ *
+ * @since 4.5.0
+ * @license GLPv2 or later
+ *
+ * @param string		$haystack	The string to search in.
+ * @param mixed 		$needle		If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
+ * @param int			$offset		Optional, search will start this number of characters counted from the beginning of the string. The offset cannot be negative.
+ * @param string|null	$encoding	Optional. Character encoding to use. Default null.
+ *
+ * @license GLPv2 or later
+ * @return int Position of first occurence found of $haystack of `$needle`.
+ */
+if ( ! function_exists( '_mb_strpos' ) ) :
+	function _mb_strpos( $haystack, $needle, $offset = 0, $encoding = null ) {
+
+		if ( null === $encoding ) {
+			$encoding = get_option( 'blog_charset' );
+		}
+
+		// The solution below works only for UTF-8,
+		// So in case of a different charset just use built-in strpos()
+		if ( ! in_array( $encoding, array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) ) ) {
+			return $offset === 0 ? strpos( $haystack, $needle ) : strpos( $haystack, $needle, $offset );
+		}
+
+		$haystack_len = mb_strlen( $haystack );
+
+		if ( $offset < (int) 0 || $offset > $haystack_len ) {
+			trigger_error( 'mb_strpos(): Offset not contained in string', E_USER_WARNING );
+			return false;
+		}
+
+		if ( ! is_string( $needle ) ) {
+			$needle = (int) $needle;
+
+			if ( ! is_int( $needle ) ) {
+				trigger_error( 'mb_strpos(): Array to string conversion', E_USER_WARNING );
+				return false;
+			}
+		}
+
+		if ( empty( $needle ) ) {
+			trigger_error( 'mb_strpos(): Empty needle', E_USER_WARNING );
+			return false;
+		}
+
+		// Slice off the offset
+		$haystack_sub = mb_substr( $haystack, $offset );
+
+		if ( _wp_can_use_pcre_u() ) {
+			// Use the regex unicode support to separate the UTF-8 characters into an array
+			preg_match_all( "/./us", $haystack, $match_h );
+			preg_match_all( "/$needle/us", $haystack_sub, $match_n );
+
+			$inter = array_intersect( $match_h[0], $match_n[0] );
+
+			if ( ! isset( $inter ) )
+				return false;
+
+			//* Prevent bugs, (re)assign var.
+			$pos = null;
+
+			// Find first occurence greater than or equal to offset
+			foreach ( $inter as $key => $value ) {
+				if ( $key >= $offset ) {
+					$pos = $key;
+					break;
+				}
+			}
+
+			//* No key has been found.
+			if ( ! isset( $pos ) )
+				return false;
+
+			return (int) $pos;
+		}
+
+		$regex = '/(
+			  [\x00-\x7F]                  # single-byte sequences   0xxxxxxx
+			| [\xC2-\xDF][\x80-\xBF]       # double-byte sequences   110xxxxx 10xxxxxx
+			| \xE0[\xA0-\xBF][\x80-\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2
+			| [\xE1-\xEC][\x80-\xBF]{2}
+			| \xED[\x80-\x9F][\x80-\xBF]
+			| [\xEE-\xEF][\x80-\xBF]{2}
+			| \xF0[\x90-\xBF][\x80-\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3
+			| [\xF1-\xF3][\x80-\xBF]{3}
+			| \xF4[\x80-\x8F][\x80-\xBF]{2}
+		)/x';
+
+		/**
+		 * Place haystack into array
+		 */
+		$match_h = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
+		do {
+			// We had some string left over from the last round, but we counted it in that last round.
+			array_pop( $match_h );
+
+			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
+			$pieces = preg_split( $regex, $haystack, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
+
+			$match_h = array_merge( $match_h, $pieces );
+		} while ( count( $pieces ) > 1 && $haystack = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
+
+		/**
+		 * Place haystack offset into array
+		 */
+		$match_hs = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
+		do {
+			// We had some string left over from the last round, but we counted it in that last round.
+			array_pop( $match_hs );
+
+			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
+			$pieces = preg_split( $regex, $haystack_sub, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
+
+			$match_hs = array_merge( $match_hs, $pieces );
+		} while ( count( $pieces ) > 1 && $haystack_sub = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
+
+		/**
+		 * Put needle into array
+		 */
+		$match_n = array( '' ); // Start with 1 element instead of 0 since the first thing we do is pop
+		do {
+			// We had some string left over from the last round, but we counted it in that last round.
+			array_pop( $match_n );
+
+			// Split by UTF-8 character, limit to 1000 characters (last array element will contain the rest of the string)
+			$pieces = preg_split( $regex, $needle, 1000, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );
+
+			$match_n = array_merge( $match_n, $pieces );
+		} while ( count( $pieces ) > 1 && $needle = array_pop( $pieces ) ); // If there's anything left over, repeat the loop.
+
+		/**
+		 * Compute match of haystack offset with needle
+		 * If passed, return the array key number within the full haystack.
+		 */
+		if ( false !== in_array( $match_n[0], $match_hs ) ) {
+			$inter = array_intersect( $match_h, $match_n );
+
+			if ( ! isset( $inter ) )
+				return false;
+
+			//* Prevent bugs, (re)assign var.
+			$pos = null;
+
+			// Find first occurence greater than or equal to offset
+			foreach ( $inter as $key => $value ) {
+				if ( $key >= $offset ) {
+					$pos = $key;
+					break;
+				}
+			}
+
+			//* No key has been found.
+			if ( ! isset( $pos ) )
+				return false;
+
+			return (int) $pos;
+		} else {
+			return false;
+		}
+	}
+endif;
Index: inc/functions/optionsapi.php
===================================================================
--- inc/functions/optionsapi.php	(revision 1413572)
+++ inc/functions/optionsapi.php	(working copy)
@@ -73,21 +73,16 @@
 
 	if ( $current_version ) {
 		$version_len = strlen( $version );
+		$current_version_len = strlen( $current_version );
 
-		//* Only allow 3 or 5 length.
-		if ( $version_len != 3 && $version_len != 5 )
-			return false;
+		//* Only allow 3 length.
+		if ( 3 !== $version_len )
+			$version = substr( $version, 0, 3 );
 
-		//* If 5 length, chop.
-		if ( $version_len == 5 ) {
-			$version = (string) substr( $version, 0, -2 );
-		} else {
-			$version = (string) $version;
-		}
+		if ( 3 !== $current_version_len )
+			$current_version = substr( $current_version, 0, 3 );
 
-		$current_version = (string) substr( $current_version, 0, -2 );
-
-		if ( version_compare( $current_version, $version, '=' ) )
+		if ( $current_version_len === $verion )
 			return true;
 	}
 
@@ -129,9 +124,10 @@
  *
  * @since 2.2.9
  *
- * @return string The pagehook.
+ * @return string|null The pagehook.
  */
 function tsf_options_pagehook() {
+
 	$theseoframework = the_seo_framework();
 
 	if ( isset( $theseoframework ) )
@@ -151,6 +147,7 @@
  * @return mixed The option value.
  */
 function tsf_get_option( $key, $use_cache = true ) {
+
 	$theseoframework = the_seo_framework();
 
 	if ( isset( $theseoframework ) )
@@ -165,8 +162,11 @@
  * @param string|null $title the previous title
  *
  * @since 2.4.2
+ *
+ * @return string|null The current page title.
  */
 function the_seo_framework_title_from_cache( $title = null ) {
+
 	$theseoframework = the_seo_framework();
 
 	if ( isset( $theseoframework ) )
@@ -181,8 +181,11 @@
  * @param bool $social Fetch social description.
  *
  * @since 2.4.2
+ *
+ * @return string|null The current page description.
  */
 function the_seo_framework_description_from_cache( $social = false ) {
+
 	$theseoframework = the_seo_framework();
 
 	if ( isset( $theseoframework ) )
@@ -195,8 +198,11 @@
  * Fetch url from cache. Only works within Loop.
  *
  * @since 2.4.2
+ *
+ * @return string|null The current page URL.
  */
 function the_seo_framework_the_url_from_cache() {
+
 	$theseoframework = the_seo_framework();
 
 	if ( isset( $theseoframework ) )
@@ -204,3 +210,20 @@
 
 	return null;
 }
+
+/**
+ * Whether we're on the SEO settings page.
+ *
+ * @since 2.6.0
+ *
+ * @return bool
+ */
+function the_seo_framework_is_settings_page() {
+
+	$theseoframework = the_seo_framework();
+
+	if ( isset( $theseoframework ) )
+		return $theseoframework->is_seo_settings_page();
+
+	return false;
+}
Index: index.php
===================================================================
--- index.php	(nonexistent)
+++ index.php	(working copy)
@@ -0,0 +1,2 @@
+<?php
+//* Our greatest weakness lies in giving up. The most certain way to succeed is always to try just one more time. - Thomas A. Edison
Index: lib/css/autodescription-rtl.css
===================================================================
--- lib/css/autodescription-rtl.css	(revision 1413572)
+++ lib/css/autodescription-rtl.css	(working copy)
@@ -1,483 +1,589 @@
- /**
-  * WooCommerce fix
-  */
-table.wp-list-table .column-name {
-	width: 15%;
-}
-
- table.wp-list-table .column-is_in_stock,
- table.wp-list-table .column-sku,
- table.wp-list-table .column-price {
-	 width: 8%;
-}
-
-#ad_seo {
-	width: 20%;
-}
-
-.ad-seo a {
-	text-decoration: none;
-	font-size: 13px;
-}
-
-#autodescription-title-wrap {
-	position: relative;
-	display: block;
-	padding: 0;
-	height: auto;
-	width: auto;
-}
-
-#autodescription-title-offset {
-	visibility: hidden;
-	height: 0;
-	display: inline-block;
-	position: absolute;
-	right: 0;
-	color: transparent;
-	white-space: pre;
-}
-
-#autodescription-title-placeholder {
-	position: absolute;
-	color: #777;
-	-webkit-user-select: none;
-	-moz-user-select: none;
-	-ms-user-select: none;
-	user-select: none;
-	box-sizing: content-box;
-	top: 0;
-	left: 0;
-	overflow: hidden;
-	white-space: nowrap;
-	text-overflow: ellipsis;
-}
-
-span.ad-count-bad {
-	color: #dd3811;
-	font-weight: 600;
-}
-
-span.ad-count-okay {
-	color: #ffa700;
-	font-weight: 600;
-}
-
-span.ad-count-good {
-	color: #0cc34b;
-	font-weight: 600;
-}
-
-/* WooCommerce fix */
-th:last-of-type#ad_seo {
-	width: 160px;
-}
-
-span.ad-seo {
-	display: block;
-	background-color: #f1f1f1;
-	width: 95%;
-	max-width: 260px;
-	border-radius: 30px;
-	padding: 3px;
-}
-
-span.ad-seo.square {
-	border-radius: 0px;
-}
-
-span.ad-seo.ad-100 {
-	width: 100%;
-}
-
-span.ad-bar-wrap {
-	display: table;
-	width: 100%;
-	border-radius: 30px;
-	margin: 0 auto;
-	border-collapse: separate;
-	border-spacing: 0;
-	vertical-align: middle;
-	position: relative;
-}
-
-span.ad-seo.square span.ad-bar-wrap {
-	border-radius: 0px;
-}
-
-span.ad-sec-wrap {
-	display: table-cell;
-	border-collapse: collapse;
-}
-
-.ad-bar-wrap a {
-	display: table;
-	width: 100%;
-	color: #fff;
-	text-align: center;
-	cursor: help;
-	height: 100%;
-	vertical-align: top;
-	line-height: 1.625em;
-	box-shadow: 2px 6px 3px -2px rgba(255,255,255,0.2) inset, -2px -6px 3px -2px rgba(41,41,41,0.2) inset, 0px 0px 1px rgba(41,41,41,0.6);
-}
-
-.ad-bar-wrap span.ad-sec-wrap:last-of-type,
-.ad-bar-wrap span.ad-sec-wrap:last-of-type a {
-	border-top-left-radius: 30px;
-	border-bottom-left-radius: 30px;
-}
-
-.ad-bar-wrap span.ad-sec-wrap:first-of-type,
-.ad-bar-wrap span.ad-sec-wrap:first-of-type a {
-	border-top-right-radius: 30px;
-	border-bottom-right-radius: 30px;
-}
-
-.ad-seo.square .ad-bar-wrap span.ad-sec-wrap,
-.ad-seo.square .ad-bar-wrap span.ad-sec-wrap a {
-	border-radius: 0px;
-}
-
-.ad-100 {
-	width: 100%;
-}
-
-.ad-60 {
-	width: 60%;
-}
-
-.ad-50 {
-	width: 50%;
-}
-
-.ad-40 {
-	width: 40%;
-}
-
-.ad-33 {
-	width: 33.333%;
-}
-
-.ad-25 {
-	width: 25%;
-}
-
-.ad-20 {
-	width: 20%;
-}
-
-.ad-16 {
-	width: 16.666%;
-}
-
-.ad-12-5 {
-	width: 12.5%;
-}
-
-.ad-11 {
-	width: 11.333%;
-}
-
-.ad-10 {
-	width: 10%;
-}
-
-.ad-seo-bad {
-	background-color: #dd3811;
-}
-
-.ad-seo-okay {
-	background-color: #ffa700;
-}
-
-.ad-seo-good {
-	background-color: #0cc34b;
-}
-
-.ad-seo-unknown {
-	background-color: #007bd2;
-}
-
-span.ad-seo .explanation-desc {
-	position: absolute;
-	width: auto;
-	min-width: 90%;
-	max-width: inherit;
-	font-weight: 600;
-	background: #007bd2;
-	padding: 12px 16px;
-	color: #fdfdfd;
-	border-radius: 3px;
-	z-index: 9999999;
-	box-shadow: 0px 0px 2px rgb(171, 171, 171), 2px 6px 3px -2px rgba(255,255,255,0.2) inset, -2px -6px 3px -2px rgba(41,41,41,0.05) inset;
-	border: 1px solid #ccc;
-	left: 0;
-	text-align: right;
-}
-
-span.ad-seo .explanation-desc span {
-	text-decoration: underline;
-}
-
-span.ad-seo .explanation-desc div {
-	width: 0;
-	height: 0;
-	border-left: 10px solid transparent;
-	border-right: 10px solid transparent;
-	border-top: 10px solid #007bd2;
-	position: absolute;
-	bottom: -8px;
-	z-index: 9999999;
-	left: 0;
-}
-
-/* Mobile support */
-/* Needs more refining.... e.g. iPhone 6 = good, iPhone 6+ = offscreen */
-.ad_seo.column-ad_seo {
-	overflow: initial !important;
-	min-width: 160px;
-}
-
-/* Taxonomies overflow fix */
-/* @todo Needs to be changed within Javascript to show information below bar on first 2 entries */
-#col-container, #col-right {
-	overflow: initial;
-}
-
-/* Site Settings */
-
-.autodescription-metaboxes {
-	box-sizing: border-box;
-	max-width: 690px;
-	padding-bottom: 20px;
-}
-
-.autodescription-metaboxes .top-wrap {
-	width: 100%;
-	display: inline-block;
-	vertical-align: top;
-}
-
-.autodescription-metaboxes .top-wrap > h1,
-.autodescription-metaboxes .top-wrap > h2 {
-	float: left;
-}
-
-.autodescription-metaboxes .metabox-holder {
-	clear: both;
-}
-
-.postbox-container {
-	width: 100%;
-}
-
-.autodescription-metaboxes .top-buttons {
-	float: left;
-}
-
-.autodescription-metaboxes .bottom-buttons {
-	text-align: left;
-}
-
-.autodescription-metaboxes .top-buttons input,
-.autodescription-metaboxes .bottom-buttons input {
-	margin-left: 10px;
-}
-
-.autodescription-metaboxes #message {
-	clear: both;
-}
-
-.autodescription-metaboxes #title-separator,
-.autodescription-metaboxes #description-separator {
-	display: table;
-	width: 100%;
-	border-collapse: collapse;
-	border-spacing: 0;
-}
-
-.autodescription-metaboxes #title-separator input,
-.autodescription-metaboxes #description-separator input {
-	display: none;
-	float: left;
-	width: 0;
-	min-width: 0;
-	opacity: 0;
-}
-
-.autodescription-metaboxes #title-separator label,
-.autodescription-metaboxes #description-separator label {
-	display: inline-block;
-	width: auto;
-	min-width: 28px;
-	min-height: 28px;
-	margin: 3px;
-	-moz-margin-end: 1.5px;
-	-moz-margin-start: 1.5px;
-	padding: 0 4px;
-	border: 1px solid #ccc;
-	line-height: 28px;
-	text-align: center;
-	cursor: pointer;
-	box-shadow: -1px -1px 1px #aaa inset;
-	font-size: 16px;
-}
-
-.autodescription-metaboxes #title-separator label.recommended,
-.autodescription-metaboxes #description-separator label.recommended {
-	border: 1px solid #0cc34b;
-	box-shadow: -1px -1px 1px #0cc34b inset;
-}
-
-.autodescription-metaboxes #title-separator input:hover + label,
-.autodescription-metaboxes #title-separator label:hover,
-.autodescription-metaboxes #description-separator input:hover + label,
-.autodescription-metaboxes #description-separator label:hover {
-	box-shadow: 1px 1px 1px #aaa inset;
-	background-color: #fff;
-}
-
-.autodescription-metaboxes #title-separator input:checked + label,
-.autodescription-metaboxes #description-separator input:checked + label {
-	box-shadow: 1px 1px 1px #333 inset;
-	background-color: #fff;
-}
-
-.autodescription-metaboxes #title-location,
-.autodescription-metaboxes #home-title-location {
-	display: block;
-}
-
-.autodescription-metaboxes #title-location span,
-.autodescription-metaboxes #home-title-location span {
-	display: block;
-	margin-bottom: 4px;
-}
-
-.autodescription-metaboxes #title-location label span,
-.autodescription-metaboxes #home-title-location label span,
-.autodescription-metaboxes #twitter-cards label span {
-	display: inline-block;
-	min-width: 60px;
-	vertical-align: baseline;
-}
-
-.autodescription-metaboxes #twitter-cards label span {
-	min-width: 150px;
-}
-
-.autodescription-metaboxes #home-title-location label span.custom-title-js,
-.autodescription-metaboxes #home-title-location label span.custom-blogname-js,
-.autodescription-metaboxes #home-title-location label span.custom-tagline-js,
-.autodescription-metaboxes #title-location label .autodescription-sep-js,
-.autodescription-metaboxes #home-title-location label .autodescription-sep-js {
-	display: inline;
-	min-width: 0;
-	white-space: pre;
-}
-
-.autodescription-metaboxes #social-tabs-js,
-.autodescription-metaboxes #robots-tabs-js,
-.autodescription-metaboxes #knowledge-tabs-js,
-.autodescription-metaboxes #sitemaps-tabs-js,
-.autodescription-metaboxes .inside .nav-tab-wrapper {
-	position:relative;
-	clear:both;
-	margin:0 auto;
-	width:100%;
-	padding:8px 14px 0px;
-	margin:-4px -14px -4px;
-}
-
-.autodescription-metaboxes #social-tabs-js .nav-tab-active,
-.autodescription-metaboxes #robots-tabs-js .nav-tab-active,
-.autodescription-metaboxes #knowledge-tabs-js .nav-tab-active,
-.autodescription-metaboxes #sitemaps-tabs-js .nav-tab-active {
-	background-color: inherit; /* Compatible with EM Dashboard */
-	border-bottom-color: #fff;
-}
-
-.autodescription-metaboxes .dashicons-tabs,
-.autodescription-metaboxes .dashicons-before:before {
-	font-size: initial;
-	display: inline;
-	vertical-align: text-bottom;
-}
-
-.autodescription-metaboxes .social-tabs-radio,
-.autodescription-metaboxes .robots-tabs-radio,
-.autodescription-metaboxes .knowledge-tabs-radio,
-.autodescription-metaboxes .sitemaps-tabs-radio {
-	display:none;
-	width:0;
-	height:0;
-	position:absolute;
-}
-
-.autodescription-metaboxes .social-tab-content.checked-tab,
-.autodescription-metaboxes .robots-tab-content.checked-tab,
-.autodescription-metaboxes .knowledge-tab-content.checked-tab
-.autodescription-metaboxes .sitemaps-tab-content.checked-tab {
-	display: block;
-}
-
-.autodescription-metaboxes .seoframework-default-selected {
-	border-color: #1c9d38;
-}
-
-.autodescription-metaboxes .seoframework-default-selected:checked:before {
-	color: #1c9d38;
-}
-
-.autodescription-metaboxes .seoframework-warning-selected {
-	border-color: #dd3811;
-}
-
-.autodescription-metaboxes .seoframework-warning-selected:checked:before {
-	color: #dd3811;
-}
-
-@media screen and (max-width: 782px) {
-	.autodescription-metaboxes p.fields,
-	.theseoframework-inpost-box p.fields {
-		line-height: 2.8
-	}
-
-	.autodescription-metaboxes #title-location label span,
-	.autodescription-metaboxes #home-title-location label span {
-		min-width: 40px;
-	}
-}
-
-@media screen and (max-width: 642px) {
-	.autodescription-metaboxes span.seoframework-nav-desktop {
-		display: none;
-	}
-}
-
-@media screen and (max-width: 600px) {
-	.autodescription-metaboxes h3.nav-tab-wrapper {
-		border-bottom: 1px solid #ccc;
-	}
-
-	.autodescription-metaboxes h3 .nav-tab {
-		margin-right: 7px;
-		margin-bottom: -1px;
-	}
-}
-
-/* Firefix */
-@-moz-document url-prefix() {
-	.autodescription-metaboxes .seoframework-default-selected {
-		box-shadow: 0 0 2px 0 #1c9d38;
-	}
-
-	.autodescription-metaboxes .seoframework-warning-selected {
-		box-shadow: 0 0 2px 0 #dd3811;
-	}
-
-	.autodescription-metaboxes legend h4 {
-		margin: 2px 0;
-	}
-}
+/**
+ * Dismissible Notices.
+ */
+.seo-notice {
+	position: relative;
+}
+
+a.autodescription-dismiss {
+	position: absolute;
+	top: 0;
+	left: 1px;
+	border: none;
+	margin: 0;
+	padding: 9px;
+	background: 0 0;
+	color: #b4b9be;
+	cursor: pointer;
+	text-decoration: none;
+}
+
+a.autodescription-dismiss:before {
+	background: 0 0;
+	content: "\f153";
+	display: block;
+	font: 400 16px/20px dashicons;
+	speak: none;
+	height: 20px;
+	text-align: center;
+	width: 20px;
+	-webkit-font-smoothing: antialiased;
+	-moz-osx-font-smoothing: grayscale;
+}
+
+a.autodescription-dismiss:hover {
+	color: #c00;
+}
+
+/**
+ * WooCommerce fix
+ */
+table.wp-list-table .column-name {
+	width: 15%;
+}
+
+table.wp-list-table .column-is_in_stock,
+table.wp-list-table .column-sku,
+table.wp-list-table .column-price {
+	 width: 8%;
+}
+
+.ad-seo a {
+	text-decoration: none;
+	font-size: 13px;
+}
+
+#autodescription-title-wrap {
+	position: relative;
+	display: block;
+	padding: 0;
+	height: auto;
+	width: auto;
+}
+
+#autodescription-title-offset {
+	visibility: hidden;
+	height: 0;
+	display: inline-block;
+	position: absolute;
+	right: 0;
+	color: transparent;
+	white-space: pre;
+}
+
+#autodescription-title-placeholder {
+	position: absolute;
+	color: #777;
+	-webkit-user-select: none;
+	-moz-user-select: none;
+	-ms-user-select: none;
+	user-select: none;
+	box-sizing: content-box;
+	top: 0;
+	left: 0;
+	overflow: hidden;
+	white-space: nowrap;
+	text-overflow: ellipsis;
+}
+
+/* START Character Counters */
+
+.theseoframework-counter {
+	font-weight: 600;
+	cursor: pointer;
+	-webkit-user-select: none;
+	-moz-user-select: none;
+	-ms-user-select: none;
+	user-select: none;
+}
+
+span.ad-count-bad {
+	color: #dd3811;
+}
+
+span.ad-count-okay {
+	color: #ffa700;
+}
+
+span.ad-count-good {
+	color: #0cc34b;
+}
+
+span.tsf-counter-one {
+	color: #fff;
+	padding: 3px;
+	border-radius: 58px;
+	padding: 0 1px;
+	min-width: 29px;
+	display: inline-block;
+	text-align: center;
+	vertical-align: baseline;
+}
+span.tsf-counter-one.ad-count-bad {
+	background-color: #dd3811;
+}
+span.tsf-counter-one.ad-count-okay {
+	background-color: #ffa700;
+}
+span.tsf-counter-one.ad-count-good {
+	background-color: #0cc34b;
+}
+
+/* END Character Counters */
+
+#ad_seo {
+	width: 18%;
+}
+
+/* WooCommerce fix */
+th:last-of-type#ad_seo {
+	width: 160px;
+}
+
+span.ad-seo {
+	display: block;
+	width: 95%;
+	max-width: 220px;
+	border-radius: 0;
+	padding: 3px;
+	text-shadow: 0 0 3px rgba(0,0,0,0.3);
+}
+
+span.ad-seo.ad-100 {
+	width: 100%;
+}
+
+span.ad-bar-wrap {
+	display: table;
+	width: 100%;
+	border-radius: 0;
+	margin: 0 auto;
+	border-collapse: separate;
+	border-spacing: 0;
+	vertical-align: middle;
+	position: relative;
+}
+
+
+span.ad-sec-wrap {
+	display: table-cell;
+	border-collapse: collapse;
+}
+
+.ad-bar-wrap a {
+	display: table;
+	width: 100%;
+	color: #fff;
+	text-align: center;
+	cursor: help;
+	height: 100%;
+	min-width: 12px;
+	vertical-align: top;
+	line-height: 1.625em;
+	box-shadow: 2px 0px 0px -1px rgba(0,0,0,0.1) inset, -2px 0px 0px -1px rgba(0,0,0,0.1) inset;
+}
+
+span.ad-seo.pill,
+span.ad-seo.pill span.ad-bar-wrap {
+	border-radius: 30px;
+}
+
+span.ad-seo.pill span.ad-bar-wrap a {
+	box-shadow: 2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.2) inset,0 0 1px rgba(41,41,41,.6);
+}
+
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type,
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type a {
+	border-top-left-radius: 30px;
+	border-bottom-left-radius: 30px;
+}
+
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type,
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type a {
+	border-top-right-radius: 30px;
+	border-bottom-right-radius: 30px;
+}
+
+.ad-100 {
+	width: 100%;
+}
+
+.ad-60 {
+	width: 60%;
+}
+
+.ad-50 {
+	width: 50%;
+}
+
+.ad-40 {
+	width: 40%;
+}
+
+.ad-33 {
+	width: 33.333%;
+}
+
+.ad-25 {
+	width: 25%;
+}
+
+.ad-20 {
+	width: 20%;
+}
+
+.ad-16 {
+	width: 16.666%;
+}
+
+.ad-12-5 {
+	width: 12.5%;
+}
+
+.ad-11 {
+	width: 11.333%;
+}
+
+.ad-10 {
+	width: 10%;
+}
+
+.ad-seo-bad {
+	background-color: #dd3811;
+}
+
+.ad-seo-okay {
+	background-color: #ffa700;
+}
+
+.ad-seo-good {
+	background-color: #0cc34b;
+}
+
+.ad-seo-unknown {
+	background-color: #007bd2;
+}
+
+span.ad-seo .explanation-desc {
+	position: absolute;
+	width: auto;
+	min-width: 90%;
+	max-width: 220px;
+	font-weight: 600;
+	background: #007bd2;
+	padding: 8px 12px;
+	color: #fdfdfd;
+	border-radius: 0px;
+	z-index: 900142;
+	box-shadow: 0px 0px 2px rgba(0,0,0,0.6);
+	left: 0;
+	right: 0;
+	text-align: left;
+}
+
+span.ad-seo .explanation-desc span {
+	text-decoration: underline;
+}
+
+span.ad-seo .explanation-desc div {
+	width: 0;
+	height: 0;
+	border-left: 12px solid transparent;
+	border-right: 12px solid transparent;
+	border-top: 12px solid #007bd2;
+	position: absolute;
+	bottom: -8px;
+	z-index: 9999999;
+	left: 0;
+}
+
+/* Mobile support */
+/* Needs more refining.... e.g. iPhone 6 = good, iPhone 6+ = offscreen */
+.ad_seo.column-ad_seo {
+	overflow: initial !important;
+	min-width: 160px;
+}
+
+/* Taxonomies overflow fix */
+/* @todo Needs to be changed within Javascript to show information below bar on first 2 entries */
+#col-container, #col-right {
+	overflow: initial;
+}
+
+/* Site Settings */
+
+.autodescription-metaboxes {
+	box-sizing: border-box;
+	max-width: 690px;
+	padding-bottom: 20px;
+}
+
+.autodescription-metaboxes .top-wrap {
+	width: 100%;
+	display: inline-block;
+	vertical-align: top;
+}
+
+.autodescription-metaboxes .top-wrap > h1,
+.autodescription-metaboxes .top-wrap > h2 {
+	float: left;
+}
+
+.autodescription-metaboxes .metabox-holder {
+	clear: both;
+}
+
+.autodescription-metaboxes .top-buttons {
+	float: left;
+}
+
+.autodescription-metaboxes .bottom-buttons {
+	text-align: left;
+}
+
+.autodescription-metaboxes .top-buttons input,
+.autodescription-metaboxes .bottom-buttons input {
+	margin-left: 10px;
+}
+
+.seo-notice {
+	clear: both;
+}
+
+.autodescription-metaboxes #title-separator,
+.autodescription-metaboxes #description-separator {
+	display: table;
+	width: 100%;
+	border-collapse: collapse;
+	border-spacing: 0;
+}
+
+.autodescription-metaboxes #title-separator input,
+.autodescription-metaboxes #description-separator input {
+	display: none;
+	float: left;
+	width: 0;
+	min-width: 0;
+	opacity: 0;
+}
+
+.autodescription-metaboxes #title-separator label,
+.autodescription-metaboxes #description-separator label {
+	display: inline-block;
+	width: auto;
+	min-width: 28px;
+	min-height: 28px;
+	margin: 3px;
+	-moz-margin-end: 1.5px;
+	-moz-margin-start: 1.5px;
+	padding: 0 4px;
+	border: 1px solid #ccc;
+	line-height: 28px;
+	text-align: center;
+	cursor: pointer;
+	box-shadow: -1px -1px 1px #aaa inset;
+	font-size: 16px;
+}
+
+.autodescription-metaboxes #title-separator label.recommended,
+.autodescription-metaboxes #description-separator label.recommended {
+	border: 1px solid #0cc34b;
+	box-shadow: -1px -1px 1px #0cc34b inset;
+}
+
+.autodescription-metaboxes #title-separator input:hover + label,
+.autodescription-metaboxes #title-separator label:hover,
+.autodescription-metaboxes #description-separator input:hover + label,
+.autodescription-metaboxes #description-separator label:hover {
+	box-shadow: 1px 1px 1px #aaa inset;
+	background-color: #fff;
+}
+
+.autodescription-metaboxes #title-separator input:checked + label,
+.autodescription-metaboxes #description-separator input:checked + label {
+	box-shadow: 1px 1px 1px #333 inset;
+	background-color: #fff;
+}
+
+.autodescription-metaboxes #title-location,
+.autodescription-metaboxes #home-title-location {
+	display: block;
+}
+
+.autodescription-metaboxes #title-location label span,
+.autodescription-metaboxes #home-title-location label span,
+.autodescription-metaboxes #twitter-cards label span {
+	display: inline-block;
+	min-width: 60px;
+	vertical-align: baseline;
+}
+
+.autodescription-metaboxes #twitter-cards label span {
+	min-width: 150px;
+}
+
+.autodescription-metaboxes #home-title-location label span.custom-title-js,
+.autodescription-metaboxes #home-title-location label span.custom-blogname-js,
+.autodescription-metaboxes #home-title-location label span.custom-tagline-js,
+.autodescription-metaboxes #title-location label .autodescription-sep-js,
+.autodescription-metaboxes #home-title-location label .autodescription-sep-js {
+	display: inline;
+	min-width: 0;
+	white-space: pre;
+}
+
+/**
+ * Start Tabs.
+ */
+.autodescription-metaboxes .seoframework-tab-no-js,
+.autodescription-metaboxes .seoframework-nav-tab-wrapper {
+	position: relative;
+	clear: both;
+	width: 100%;
+	display: inline-block;
+	border-bottom: 1px solid #ccc;
+	line-height: inherit;
+	padding: 8px 12px 0;
+	margin: -4px -12px;
+}
+
+.autodescription-metaboxes .seoframework-nav-tab {
+	float: right;
+	border: 1px solid #ccc;
+	margin-right: .5em;
+	margin-bottom: -1px;
+	padding: 5px 14px;
+	font-size: 12px;
+	line-height: 16px;
+	background: #f1f1f1;
+	color: #555;
+	font-weight: 600;
+}
+
+.autodescription-metaboxes .seoframework-dashicons-tabs {
+	font-size: initial;
+	display: inline;
+	vertical-align: text-bottom;
+}
+
+.autodescription-metaboxes .seoframework-tabs-radio {
+	display: none;
+	width: 0;
+	height: 0;
+	position: absolute;
+	left: -9001px;
+}
+
+.autodescription-metaboxes .seoframework-tabs-radio:checked + label,
+.autodescription-metaboxes .seoframework-active-tab {
+	background-color: inherit;
+	border-bottom-color: #fff;
+	color: #000;
+}
+
+.autodescription-metaboxes .seoframework-tabs-content {
+	margin: 1.33em auto 0;
+}
+
+.autodescription-metaboxes .seoframework-content-no-js {
+	margin: 1.33em auto;
+}
+
+body.js .autodescription-metaboxes .seoframework-tabs-content {
+	display: none;
+}
+
+body.js .autodescription-metaboxes .seoframework-tabs-content.seoframework-active-tab-content {
+	display: block;
+}
+
+/**
+ * End tabs.
+ */
+
+.autodescription-metaboxes .seoframework-default-selected {
+	border-color: #1c9d38;
+}
+
+.autodescription-metaboxes .seoframework-default-selected:checked:before {
+	color: #1c9d38;
+}
+
+.autodescription-metaboxes .seoframework-warning-selected {
+	border-color: #dd3811;
+}
+
+.autodescription-metaboxes .seoframework-warning-selected:checked:before {
+	color: #dd3811;
+}
+
+.theseoframework-fields {
+	font-size: 13px;
+	line-height: 1.5;
+	margin: 1em 0;
+}
+
+.theseoframework-fields .toblock {
+	display: block;
+	width: 100%;
+	margin-bottom: 4px;
+}
+
+.theseoframework-fields p.description {
+	margin: 7px 0 5px;
+	color: #666;
+}
+
+.theseoframework-option-spacer {
+	margin: 1em 0;
+}
+
+@media screen and (max-width: 782px) {
+	.autodescription-metaboxes p.theseoframework-fields,
+	.theseoframework-inpost-box p.theseoframework-fields {
+		line-height: 2.8
+	}
+
+	.autodescription-metaboxes #title-location label span,
+	.autodescription-metaboxes #home-title-location label span {
+		min-width: 40px;
+	}
+}
+
+@media screen and (max-width: 642px) {
+	.autodescription-metaboxes span.seoframework-nav-desktop {
+		display: none;
+	}
+}
+
+@media screen and (max-width: 600px) {
+	.autodescription-metaboxes h3.nav-tab-wrapper {
+		border-bottom: 1px solid #ccc;
+	}
+
+	.autodescription-metaboxes h3 .nav-tab {
+		margin-right: 7px;
+		margin-bottom: -1px;
+	}
+}
+
+@media screen and (max-width: 510px) {
+	span.ad-seo.ad-100 {
+		width: inherit;
+	}
+}
+
+/* Firefix */
+@-moz-document url-prefix() {
+	.autodescription-metaboxes .seoframework-default-selected {
+		box-shadow: 0 0 2px 0 #1c9d38;
+	}
+
+	.autodescription-metaboxes .seoframework-warning-selected {
+		box-shadow: 0 0 2px 0 #dd3811;
+	}
+
+	.autodescription-metaboxes legend h4 {
+		margin: 2px 0;
+	}
+}
Index: lib/css/autodescription-rtl.min.css
===================================================================
--- lib/css/autodescription-rtl.min.css	(revision 1413572)
+++ lib/css/autodescription-rtl.min.css	(working copy)
@@ -1 +1 @@
-.autodescription-metaboxes .top-buttons,.autodescription-metaboxes .top-wrap>h1,.autodescription-metaboxes .top-wrap>h2{float:left}.autodescription-metaboxes #message,.autodescription-metaboxes .metabox-holder{clear:both}table.wp-list-table .column-name{width:15%}table.wp-list-table .column-is_in_stock,table.wp-list-table .column-price,table.wp-list-table .column-sku{width:8%}#ad_seo{width:20%}.ad-seo a{text-decoration:none;font-size:13px}#autodescription-title-wrap{position:relative;display:block;padding:0;height:auto;width:auto}#autodescription-title-offset{visibility:hidden;height:0;display:inline-block;position:absolute;right:0;color:transparent;white-space:pre}#autodescription-title-placeholder{position:absolute;color:#777;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;box-sizing:content-box;top:0;left:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}span.ad-count-bad{color:#dd3811;font-weight:600}span.ad-count-okay{color:#ffa700;font-weight:600}span.ad-count-good{color:#0cc34b;font-weight:600}th:last-of-type#ad_seo{width:160px}span.ad-seo{display:block;background-color:#f1f1f1;width:95%;max-width:260px;border-radius:30px;padding:3px}.ad-100,.ad-bar-wrap a,span.ad-seo.ad-100{width:100%}span.ad-seo.square{border-radius:0}span.ad-bar-wrap{display:table;width:100%;border-radius:30px;margin:0 auto;border-collapse:separate;border-spacing:0;vertical-align:middle;position:relative}span.ad-seo.square span.ad-bar-wrap{border-radius:0}span.ad-sec-wrap{display:table-cell;border-collapse:collapse}.ad-bar-wrap a{display:table;color:#fff;text-align:center;cursor:help;height:100%;vertical-align:top;line-height:1.625em;box-shadow:2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.2) inset,0 0 1px rgba(41,41,41,.6)}.ad-bar-wrap span.ad-sec-wrap:last-of-type,.ad-bar-wrap span.ad-sec-wrap:last-of-type a{border-top-left-radius:30px;border-bottom-left-radius:30px}.ad-bar-wrap span.ad-sec-wrap:first-of-type,.ad-bar-wrap span.ad-sec-wrap:first-of-type a{border-top-right-radius:30px;border-bottom-right-radius:30px}.ad-seo.square .ad-bar-wrap span.ad-sec-wrap,.ad-seo.square .ad-bar-wrap span.ad-sec-wrap a{border-radius:0}.ad-60{width:60%}.ad-50{width:50%}.ad-40{width:40%}.ad-33{width:33.333%}.ad-25{width:25%}.ad-20{width:20%}.ad-16{width:16.666%}.ad-12-5{width:12.5%}.ad-11{width:11.333%}.ad-10{width:10%}.ad-seo-bad{background-color:#dd3811}.ad-seo-okay{background-color:#ffa700}.ad-seo-good{background-color:#0cc34b}.ad-seo-unknown{background-color:#007bd2}span.ad-seo .explanation-desc{position:absolute;width:auto;min-width:90%;max-width:inherit;font-weight:600;background:#007bd2;padding:12px 16px;color:#fdfdfd;border-radius:3px;z-index:9999999;box-shadow:0 0 2px #ababab,2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.05) inset;border:1px solid #ccc;left:0;text-align:right}span.ad-seo .explanation-desc span{text-decoration:underline}span.ad-seo .explanation-desc div{width:0;height:0;border-left:10px solid transparent;border-right:10px solid transparent;border-top:10px solid #007bd2;position:absolute;bottom:-8px;z-index:9999999;left:0}.ad_seo.column-ad_seo{overflow:initial!important;min-width:160px}#col-container,#col-right{overflow:initial}.autodescription-metaboxes{box-sizing:border-box;max-width:690px;padding-bottom:20px}.autodescription-metaboxes .top-wrap{width:100%;display:inline-block;vertical-align:top}.postbox-container{width:100%}.autodescription-metaboxes .bottom-buttons{text-align:left}.autodescription-metaboxes .bottom-buttons input,.autodescription-metaboxes .top-buttons input{margin-left:10px}.autodescription-metaboxes #description-separator,.autodescription-metaboxes #title-separator{display:table;width:100%;border-collapse:collapse;border-spacing:0}.autodescription-metaboxes #description-separator input,.autodescription-metaboxes #title-separator input{display:none;float:left;width:0;min-width:0;opacity:0}.autodescription-metaboxes #description-separator label,.autodescription-metaboxes #title-separator label{display:inline-block;width:auto;min-width:28px;min-height:28px;margin:3px;-moz-margin-end:1.5px;-moz-margin-start:1.5px;padding:0 4px;border:1px solid #ccc;line-height:28px;text-align:center;cursor:pointer;box-shadow:-1px -1px 1px #aaa inset;font-size:16px}.autodescription-metaboxes #description-separator label.recommended,.autodescription-metaboxes #title-separator label.recommended{border:1px solid #0cc34b;box-shadow:-1px -1px 1px #0cc34b inset}.autodescription-metaboxes #description-separator input:hover+label,.autodescription-metaboxes #description-separator label:hover,.autodescription-metaboxes #title-separator input:hover+label,.autodescription-metaboxes #title-separator label:hover{box-shadow:1px 1px 1px #aaa inset;background-color:#fff}.autodescription-metaboxes #description-separator input:checked+label,.autodescription-metaboxes #title-separator input:checked+label{box-shadow:1px 1px 1px #333 inset;background-color:#fff}.autodescription-metaboxes #home-title-location,.autodescription-metaboxes #title-location{display:block}.autodescription-metaboxes #home-title-location span,.autodescription-metaboxes #title-location span{display:block;margin-bottom:4px}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span,.autodescription-metaboxes #twitter-cards label span{display:inline-block;min-width:60px;vertical-align:baseline}.autodescription-metaboxes #twitter-cards label span{min-width:150px}.autodescription-metaboxes #home-title-location label .autodescription-sep-js,.autodescription-metaboxes #home-title-location label span.custom-blogname-js,.autodescription-metaboxes #home-title-location label span.custom-tagline-js,.autodescription-metaboxes #home-title-location label span.custom-title-js,.autodescription-metaboxes #title-location label .autodescription-sep-js{display:inline;min-width:0;white-space:pre}.autodescription-metaboxes #knowledge-tabs-js,.autodescription-metaboxes #robots-tabs-js,.autodescription-metaboxes #sitemaps-tabs-js,.autodescription-metaboxes #social-tabs-js,.autodescription-metaboxes .inside .nav-tab-wrapper{position:relative;clear:both;width:100%;padding:8px 14px 0;margin:-4px -14px}.autodescription-metaboxes #knowledge-tabs-js .nav-tab-active,.autodescription-metaboxes #robots-tabs-js .nav-tab-active,.autodescription-metaboxes #sitemaps-tabs-js .nav-tab-active,.autodescription-metaboxes #social-tabs-js .nav-tab-active{background-color:inherit;border-bottom-color:#fff}.autodescription-metaboxes .dashicons-before:before,.autodescription-metaboxes .dashicons-tabs{font-size:initial;display:inline;vertical-align:text-bottom}.autodescription-metaboxes .knowledge-tabs-radio,.autodescription-metaboxes .robots-tabs-radio,.autodescription-metaboxes .sitemaps-tabs-radio,.autodescription-metaboxes .social-tabs-radio{display:none;width:0;height:0;position:absolute}.autodescription-metaboxes .knowledge-tab-content.checked-tab .autodescription-metaboxes .sitemaps-tab-content.checked-tab,.autodescription-metaboxes .robots-tab-content.checked-tab,.autodescription-metaboxes .social-tab-content.checked-tab{display:block}.autodescription-metaboxes .seoframework-default-selected{border-color:#1c9d38}.autodescription-metaboxes .seoframework-default-selected:checked:before{color:#1c9d38}.autodescription-metaboxes .seoframework-warning-selected{border-color:#dd3811}.autodescription-metaboxes .seoframework-warning-selected:checked:before{color:#dd3811}@media screen and (max-width:782px){.autodescription-metaboxes p.fields,.theseoframework-inpost-box p.fields{line-height:2.8}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span{min-width:40px}}@media screen and (max-width:642px){.autodescription-metaboxes span.seoframework-nav-desktop{display:none}}@media screen and (max-width:600px){.autodescription-metaboxes h3.nav-tab-wrapper{border-bottom:1px solid #ccc}.autodescription-metaboxes h3 .nav-tab{margin-right:7px;margin-bottom:-1px}}@-moz-document url-prefix(){.autodescription-metaboxes .seoframework-default-selected{box-shadow:0 0 2px 0 #1c9d38}.autodescription-metaboxes .seoframework-warning-selected{box-shadow:0 0 2px 0 #dd3811}.autodescription-metaboxes legend h4{margin:2px 0}}
+.autodescription-metaboxes .top-buttons,.autodescription-metaboxes .top-wrap>h1,.autodescription-metaboxes .top-wrap>h2{float:left}.seo-notice{position:relative;clear:both}a.autodescription-dismiss{position:absolute;top:0;left:1px;border:none;margin:0;padding:9px;background:0 0;color:#b4b9be;cursor:pointer;text-decoration:none}a.autodescription-dismiss:before{background:0 0;content:"\f153";display:block;font:400 16px/20px dashicons;speak:none;height:20px;text-align:center;width:20px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}a.autodescription-dismiss:hover{color:#c00}table.wp-list-table .column-name{width:15%}table.wp-list-table .column-is_in_stock,table.wp-list-table .column-price,table.wp-list-table .column-sku{width:8%}.ad-seo a{text-decoration:none;font-size:13px}#autodescription-title-wrap{position:relative;display:block;padding:0;height:auto;width:auto}#autodescription-title-offset{visibility:hidden;height:0;display:inline-block;position:absolute;right:0;color:transparent;white-space:pre}#autodescription-title-placeholder{position:absolute;color:#777;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;box-sizing:content-box;top:0;left:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.theseoframework-counter{font-weight:600;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}span.ad-count-bad{color:#dd3811}span.ad-count-okay{color:#ffa700}span.ad-count-good{color:#0cc34b}span.tsf-counter-one{color:#fff;border-radius:58px;padding:0 1px;min-width:29px;display:inline-block;text-align:center;vertical-align:baseline}span.tsf-counter-one.ad-count-bad{background-color:#dd3811}span.tsf-counter-one.ad-count-okay{background-color:#ffa700}span.tsf-counter-one.ad-count-good{background-color:#0cc34b}#ad_seo{width:18%}th:last-of-type#ad_seo{width:160px}span.ad-seo{display:block;width:95%;max-width:220px;border-radius:0;padding:3px;text-shadow:0 0 3px rgba(0,0,0,.3)}.ad-100,.ad-bar-wrap a,span.ad-seo.ad-100{width:100%}span.ad-bar-wrap{display:table;width:100%;border-radius:0;margin:0 auto;border-collapse:separate;border-spacing:0;vertical-align:middle;position:relative}span.ad-sec-wrap{display:table-cell;border-collapse:collapse}.ad-bar-wrap a{display:table;color:#fff;text-align:center;cursor:help;height:100%;min-width:12px;vertical-align:top;line-height:1.625em;box-shadow:2px 0 0 -1px rgba(0,0,0,.1) inset,-2px 0 0 -1px rgba(0,0,0,.1) inset}span.ad-seo.pill,span.ad-seo.pill span.ad-bar-wrap{border-radius:30px}span.ad-seo.pill span.ad-bar-wrap a{box-shadow:2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.2) inset,0 0 1px rgba(41,41,41,.6)}.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type,.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type a{border-top-left-radius:30px;border-bottom-left-radius:30px}.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type,.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type a{border-top-right-radius:30px;border-bottom-right-radius:30px}.ad-60{width:60%}.ad-50{width:50%}.ad-40{width:40%}.ad-33{width:33.333%}.ad-25{width:25%}.ad-20{width:20%}.ad-16{width:16.666%}.ad-12-5{width:12.5%}.ad-11{width:11.333%}.ad-10{width:10%}.ad-seo-bad{background-color:#dd3811}.ad-seo-okay{background-color:#ffa700}.ad-seo-good{background-color:#0cc34b}.ad-seo-unknown{background-color:#007bd2}span.ad-seo .explanation-desc{position:absolute;width:auto;min-width:90%;max-width:220px;font-weight:600;background:#007bd2;padding:8px 12px;color:#fdfdfd;border-radius:0;z-index:900142;box-shadow:0 0 2px rgba(0,0,0,.6);left:0;right:0;text-align:left}span.ad-seo .explanation-desc span{text-decoration:underline}span.ad-seo .explanation-desc div{width:0;height:0;border-left:12px solid transparent;border-right:12px solid transparent;border-top:12px solid #007bd2;position:absolute;bottom:-8px;z-index:9999999;left:0}.ad_seo.column-ad_seo{overflow:initial!important;min-width:160px}#col-container,#col-right{overflow:initial}.autodescription-metaboxes{box-sizing:border-box;max-width:690px;padding-bottom:20px}.autodescription-metaboxes .top-wrap{width:100%;display:inline-block;vertical-align:top}.autodescription-metaboxes .metabox-holder{clear:both}.autodescription-metaboxes .bottom-buttons{text-align:left}.autodescription-metaboxes .bottom-buttons input,.autodescription-metaboxes .top-buttons input{margin-left:10px}.autodescription-metaboxes #description-separator,.autodescription-metaboxes #title-separator{display:table;width:100%;border-collapse:collapse;border-spacing:0}.autodescription-metaboxes #description-separator input,.autodescription-metaboxes #title-separator input{display:none;float:left;width:0;min-width:0;opacity:0}.autodescription-metaboxes #description-separator label,.autodescription-metaboxes #title-separator label{display:inline-block;width:auto;min-width:28px;min-height:28px;margin:3px;-moz-margin-end:1.5px;-moz-margin-start:1.5px;padding:0 4px;border:1px solid #ccc;line-height:28px;text-align:center;cursor:pointer;box-shadow:-1px -1px 1px #aaa inset;font-size:16px}.autodescription-metaboxes #description-separator label.recommended,.autodescription-metaboxes #title-separator label.recommended{border:1px solid #0cc34b;box-shadow:-1px -1px 1px #0cc34b inset}.autodescription-metaboxes #description-separator input:hover+label,.autodescription-metaboxes #description-separator label:hover,.autodescription-metaboxes #title-separator input:hover+label,.autodescription-metaboxes #title-separator label:hover{box-shadow:1px 1px 1px #aaa inset;background-color:#fff}.autodescription-metaboxes #description-separator input:checked+label,.autodescription-metaboxes #title-separator input:checked+label{box-shadow:1px 1px 1px #333 inset;background-color:#fff}.autodescription-metaboxes #home-title-location,.autodescription-metaboxes #title-location{display:block}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span,.autodescription-metaboxes #twitter-cards label span{display:inline-block;min-width:60px;vertical-align:baseline}.autodescription-metaboxes #twitter-cards label span{min-width:150px}.autodescription-metaboxes #home-title-location label .autodescription-sep-js,.autodescription-metaboxes #home-title-location label span.custom-blogname-js,.autodescription-metaboxes #home-title-location label span.custom-tagline-js,.autodescription-metaboxes #home-title-location label span.custom-title-js,.autodescription-metaboxes #title-location label .autodescription-sep-js{display:inline;min-width:0;white-space:pre}.autodescription-metaboxes .seoframework-nav-tab-wrapper,.autodescription-metaboxes .seoframework-tab-no-js{position:relative;clear:both;width:100%;display:inline-block;border-bottom:1px solid #ccc;line-height:inherit;padding:8px 12px 0;margin:-4px -12px}.autodescription-metaboxes .seoframework-nav-tab{float:right;border:1px solid #ccc;margin-right:.5em;margin-bottom:-1px;padding:5px 14px;font-size:12px;line-height:16px;background:#f1f1f1;color:#555;font-weight:600}.autodescription-metaboxes .seoframework-dashicons-tabs{font-size:initial;display:inline;vertical-align:text-bottom}.autodescription-metaboxes .seoframework-tabs-radio{display:none;width:0;height:0;position:absolute;left:-9001px}.autodescription-metaboxes .seoframework-active-tab,.autodescription-metaboxes .seoframework-tabs-radio:checked+label{background-color:inherit;border-bottom-color:#fff;color:#000}.autodescription-metaboxes .seoframework-tabs-content{margin:1.33em auto 0}.autodescription-metaboxes .seoframework-content-no-js{margin:1.33em auto}body.js .autodescription-metaboxes .seoframework-tabs-content{display:none}body.js .autodescription-metaboxes .seoframework-tabs-content.seoframework-active-tab-content{display:block}.autodescription-metaboxes .seoframework-default-selected{border-color:#1c9d38}.autodescription-metaboxes .seoframework-default-selected:checked:before{color:#1c9d38}.autodescription-metaboxes .seoframework-warning-selected{border-color:#dd3811}.autodescription-metaboxes .seoframework-warning-selected:checked:before{color:#dd3811}.theseoframework-fields{font-size:13px;line-height:1.5;margin:1em 0}.theseoframework-fields .toblock{display:block;width:100%;margin-bottom:4px}.theseoframework-fields p.description{margin:7px 0 5px;color:#666}.theseoframework-option-spacer{margin:1em 0}@media screen and (max-width:782px){.autodescription-metaboxes p.theseoframework-fields,.theseoframework-inpost-box p.theseoframework-fields{line-height:2.8}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span{min-width:40px}}@media screen and (max-width:642px){.autodescription-metaboxes span.seoframework-nav-desktop{display:none}}@media screen and (max-width:600px){.autodescription-metaboxes h3.nav-tab-wrapper{border-bottom:1px solid #ccc}.autodescription-metaboxes h3 .nav-tab{margin-right:7px;margin-bottom:-1px}}@media screen and (max-width:510px){span.ad-seo.ad-100{width:inherit}}@-moz-document url-prefix(){.autodescription-metaboxes .seoframework-default-selected{box-shadow:0 0 2px 0 #1c9d38}.autodescription-metaboxes .seoframework-warning-selected{box-shadow:0 0 2px 0 #dd3811}.autodescription-metaboxes legend h4{margin:2px 0}}
Index: lib/css/autodescription.css
===================================================================
--- lib/css/autodescription.css	(revision 1413572)
+++ lib/css/autodescription.css	(working copy)
@@ -1,488 +1,593 @@
-/**
-* See, for colors:
-* https://color.adobe.com/create/color-wheel/?base=2&rule=Custom&selected=1&name=Mijn%20Color-thema&mode=rgb&rgbvalues=0,0,0,1,0.6289566724811484,0.10577297701442445,0.04724043389094745,0.7647058823529411,0.2945255209368204,0,0.4806705005377058,0.8235294117647058,0.8666666666666667,0.2196078431372549,0.06666666666666667&swatchOrder=0,1,2,3,4
-*/
-
-/**
-* WooCommerce fix
-*/
-table.wp-list-table .column-name {
-	width: 15%;
-}
-
-table.wp-list-table .column-is_in_stock,
-table.wp-list-table .column-sku,
-table.wp-list-table .column-price {
-	width: 8%;
-}
-
-#ad_seo {
-	width: 20%;
-}
-
-.ad-seo a {
-	text-decoration: none;
-	font-size: 13px;
-}
-
-#autodescription-title-wrap {
-	position: relative;
-	display: block;
-	padding: 0;
-	height: auto;
-	width: auto;
-}
-
-#autodescription-title-offset {
-	visibility: hidden;
-	height: 0;
-	display: inline-block;
-	position: absolute;
-	left: 0;
-	color: transparent;
-	white-space: pre;
-}
-
-#autodescription-title-placeholder {
-	position: absolute;
-	color: #777;
-	-webkit-user-select: none;
-	-moz-user-select: none;
-	-ms-user-select: none;
-	user-select: none;
-	box-sizing: content-box;
-	top: 0;
-	left: 0;
-	overflow: hidden;
-	white-space: nowrap;
-	text-overflow: ellipsis;
-}
-
-span.ad-count-bad {
-	color: #dd3811;
-	font-weight: 600;
-}
-
-span.ad-count-okay {
-	color: #ffa700;
-	font-weight: 600;
-}
-
-span.ad-count-good {
-	color: #0cc34b;
-	font-weight: 600;
-}
-
-/* WooCommerce fix */
-th:last-of-type#ad_seo {
-	width: 160px;
-}
-
-span.ad-seo {
-	display: block;
-	background-color: #f1f1f1;
-	width: 95%;
-	max-width: 260px;
-	border-radius: 30px;
-	padding: 3px;
-}
-
-span.ad-seo.square {
-	border-radius: 0px;
-}
-
-span.ad-seo.ad-100 {
-	width: 100%;
-}
-
-span.ad-bar-wrap {
-	display: table;
-	width: 100%;
-	border-radius: 30px;
-	margin: 0 auto;
-	border-collapse: separate;
-	border-spacing: 0;
-	vertical-align: middle;
-	position: relative;
-}
-
-span.ad-seo.square span.ad-bar-wrap {
-	border-radius: 0px;
-}
-
-span.ad-sec-wrap {
-	display: table-cell;
-	border-collapse: collapse;
-}
-
-.ad-bar-wrap a {
-	display: table;
-	width: 100%;
-	color: #fff;
-	text-align: center;
-	cursor: help;
-	height: 100%;
-	vertical-align: top;
-	line-height: 1.625em;
-	box-shadow: 2px 6px 3px -2px rgba(255,255,255,0.2) inset, -2px -6px 3px -2px rgba(41,41,41,0.2) inset, 0px 0px 1px rgba(41,41,41,0.6);
-}
-
-.ad-bar-wrap span.ad-sec-wrap:first-of-type,
-.ad-bar-wrap span.ad-sec-wrap:first-of-type a {
-	border-top-left-radius: 30px;
-	border-bottom-left-radius: 30px;
-}
-
-.ad-bar-wrap span.ad-sec-wrap:last-of-type,
-.ad-bar-wrap span.ad-sec-wrap:last-of-type a {
-	border-top-right-radius: 30px;
-	border-bottom-right-radius: 30px;
-}
-
-.ad-seo.square .ad-bar-wrap span.ad-sec-wrap,
-.ad-seo.square .ad-bar-wrap span.ad-sec-wrap a {
-	border-radius: 0px;
-}
-
-.ad-100 {
-	width: 100%;
-}
-
-.ad-60 {
-	width: 60%;
-}
-
-.ad-50 {
-	width: 50%;
-}
-
-.ad-40 {
-	width: 40%;
-}
-
-.ad-33 {
-	width: 33.333%;
-}
-
-.ad-25 {
-	width: 25%;
-}
-
-.ad-20 {
-	width: 20%;
-}
-
-.ad-16 {
-	width: 16.666%;
-}
-
-.ad-12-5 {
-	width: 12.5%;
-}
-
-.ad-11 {
-	width: 11.333%;
-}
-
-.ad-10 {
-	width: 10%;
-}
-
-.ad-seo-bad {
-	background-color: #dd3811;
-}
-
-.ad-seo-okay {
-	background-color: #ffa700;
-}
-
-.ad-seo-good {
-	background-color: #0cc34b;
-}
-
-.ad-seo-unknown {
-	background-color: #007bd2;
-}
-
-span.ad-seo .explanation-desc {
-	position: absolute;
-	width: auto;
-	min-width: 90%;
-	max-width: inherit;
-	font-weight: 600;
-	background: #007bd2;
-	padding: 12px 16px;
-	color: #fdfdfd;
-	border-radius: 3px;
-	z-index: 9999999;
-	box-shadow: 0px 0px 2px rgb(171, 171, 171), 2px 6px 3px -2px rgba(255,255,255,0.2) inset, -2px -6px 3px -2px rgba(41,41,41,0.05) inset;
-	border: 1px solid #ccc;
-	left: 0;
-	text-align: left;
-}
-
-span.ad-seo .explanation-desc span {
-	text-decoration: underline;
-}
-
-span.ad-seo .explanation-desc div {
-	width: 0;
-	height: 0;
-	border-left: 10px solid transparent;
-	border-right: 10px solid transparent;
-	border-top: 10px solid #007bd2;
-	position: absolute;
-	bottom: -8px;
-	z-index: 9999999;
-	left: 0;
-}
-
-/* Mobile support */
-/* Needs more refining.... e.g. iPhone 6 = good, iPhone 6+ = offscreen */
-.ad_seo.column-ad_seo {
-	overflow: initial !important;
-	min-width: 160px;
-}
-
-/* Taxonomies overflow fix */
-/* @todo Needs to be changed within Javascript to show information below bar on first 2 entries */
-#col-container, #col-right {
-	overflow: initial;
-}
-
-/* Site Settings */
-
-.autodescription-metaboxes {
-	box-sizing: border-box;
-	max-width: 690px;
-	padding-bottom: 20px;
-}
-
-.autodescription-metaboxes .top-wrap {
-	width: 100%;
-	display: inline-block;
-	vertical-align: top;
-}
-
-.autodescription-metaboxes .top-wrap > h1,
-.autodescription-metaboxes .top-wrap > h2 {
-	float: left;
-}
-
-.autodescription-metaboxes .metabox-holder {
-	clear: both;
-}
-
-.postbox-container {
-	width: 100%;
-}
-
-.autodescription-metaboxes .top-buttons {
-	float: right;
-}
-
-.autodescription-metaboxes .bottom-buttons {
-	text-align: right;
-}
-
-.autodescription-metaboxes .top-buttons input,
-.autodescription-metaboxes .bottom-buttons input {
-	margin-left: 10px;
-}
-
-.autodescription-metaboxes #message {
-	clear: both;
-}
-
-.autodescription-metaboxes #title-separator,
-.autodescription-metaboxes #description-separator {
-	display: table;
-	width: 100%;
-	border-collapse: collapse;
-	border-spacing: 0;
-}
-
-.autodescription-metaboxes #title-separator input,
-.autodescription-metaboxes #description-separator input {
-	display: none;
-	float: left;
-	width: 0;
-	min-width: 0;
-	opacity: 0;
-}
-
-.autodescription-metaboxes #title-separator label,
-.autodescription-metaboxes #description-separator label {
-	display: inline-block;
-	width: auto;
-	min-width: 28px;
-	min-height: 28px;
-	margin: 3px;
-	-moz-margin-end: 1.5px;
-	-moz-margin-start: 1.5px;
-	padding: 0 4px;
-	border: 1px solid #ccc;
-	line-height: 28px;
-	text-align: center;
-	cursor: pointer;
-	box-shadow: -1px -1px 1px #aaa inset;
-	font-size: 16px;
-}
-
-.autodescription-metaboxes #title-separator label.recommended,
-.autodescription-metaboxes #description-separator label.recommended {
-	border: 1px solid #0cc34b;
-	box-shadow: -1px -1px 1px #0cc34b inset;
-}
-
-.autodescription-metaboxes #title-separator input:hover + label,
-.autodescription-metaboxes #title-separator label:hover,
-.autodescription-metaboxes #description-separator input:hover + label,
-.autodescription-metaboxes #description-separator label:hover {
-	box-shadow: 1px 1px 1px #aaa inset;
-	background-color: #fff;
-}
-
-.autodescription-metaboxes #title-separator input:checked + label,
-.autodescription-metaboxes #description-separator input:checked + label {
-	box-shadow: 1px 1px 1px #333 inset;
-	background-color: #fff;
-}
-
-.autodescription-metaboxes #title-location,
-.autodescription-metaboxes #home-title-location {
-	display: block;
-}
-
-.autodescription-metaboxes #title-location span,
-.autodescription-metaboxes #home-title-location span {
-	display: block;
-	margin-bottom: 4px;
-}
-
-.autodescription-metaboxes #title-location label span,
-.autodescription-metaboxes #home-title-location label span,
-.autodescription-metaboxes #twitter-cards label span {
-	display: inline-block;
-	min-width: 60px;
-	vertical-align: baseline;
-}
-
-.autodescription-metaboxes #twitter-cards label span {
-	min-width: 150px;
-}
-
-.autodescription-metaboxes #home-title-location label span.custom-title-js,
-.autodescription-metaboxes #home-title-location label span.custom-blogname-js,
-.autodescription-metaboxes #home-title-location label span.custom-tagline-js,
-.autodescription-metaboxes #title-location label .autodescription-sep-js,
-.autodescription-metaboxes #home-title-location label .autodescription-sep-js {
-	display: inline;
-	min-width: 0;
-	white-space: pre;
-}
-
-.autodescription-metaboxes #social-tabs-js,
-.autodescription-metaboxes #robots-tabs-js,
-.autodescription-metaboxes #knowledge-tabs-js,
-.autodescription-metaboxes #sitemaps-tabs-js,
-.autodescription-metaboxes .inside .nav-tab-wrapper {
-	position:relative;
-	clear:both;
-	margin:0 auto;
-	width:100%;
-	padding:8px 14px 0px;
-	margin:-4px -14px -4px;
-}
-
-.autodescription-metaboxes #social-tabs-js .nav-tab-active,
-.autodescription-metaboxes #robots-tabs-js .nav-tab-active,
-.autodescription-metaboxes #knowledge-tabs-js .nav-tab-active,
-.autodescription-metaboxes #sitemaps-tabs-js .nav-tab-active {
-	background-color: inherit; /* Compatible with EM Dashboard */
-	border-bottom-color: #fff;
-}
-
-.autodescription-metaboxes .dashicons-tabs,
-.autodescription-metaboxes .dashicons-before:before {
-	font-size: initial;
-	display: inline;
-	vertical-align: text-bottom;
-}
-
-.autodescription-metaboxes .social-tabs-radio,
-.autodescription-metaboxes .robots-tabs-radio,
-.autodescription-metaboxes .knowledge-tabs-radio,
-.autodescription-metaboxes .sitemaps-tabs-radio {
-	display:none;
-	width:0;
-	height:0;
-	position:absolute;
-}
-
-.autodescription-metaboxes .social-tab-content.checked-tab,
-.autodescription-metaboxes .robots-tab-content.checked-tab,
-.autodescription-metaboxes .knowledge-tab-content.checked-tab,
-.autodescription-metaboxes .sitemaps-tab-content.checked-tab {
-	display: block;
-}
-
-.autodescription-metaboxes .seoframework-default-selected {
-	border-color: #1c9d38;
-}
-
-.autodescription-metaboxes .seoframework-default-selected:checked:before {
-	color: #1c9d38;
-}
-
-.autodescription-metaboxes .seoframework-warning-selected {
-	border-color: #dd3811;
-}
-
-.autodescription-metaboxes .seoframework-warning-selected:checked:before {
-	color: #dd3811;
-}
-
-@media screen and (max-width: 782px) {
-	.autodescription-metaboxes p.fields,
-	.theseoframework-inpost-box p.fields {
-		line-height: 2.8;
-	}
-
-	.autodescription-metaboxes #title-location label span,
-	.autodescription-metaboxes #home-title-location label span {
-		min-width: 40px;
-	}
-}
-
-@media screen and (max-width: 642px) {
-	.autodescription-metaboxes span.seoframework-nav-desktop {
-		display: none;
-	}
-}
-
-@media screen and (max-width: 600px) {
-	.autodescription-metaboxes h3.nav-tab-wrapper {
-		border-bottom: 1px solid #ccc;
-	}
-
-	.autodescription-metaboxes h3 .nav-tab {
-		margin-right: 7px;
-		margin-bottom: -1px;
-	}
-}
-
-/* Firefix */
-@-moz-document url-prefix() {
-	.autodescription-metaboxes .seoframework-default-selected {
-		box-shadow: 0 0 2px 0 #1c9d38;
-	}
-
-	.autodescription-metaboxes .seoframework-warning-selected {
-		box-shadow: 0 0 2px 0 #dd3811;
-	}
-
-	.autodescription-metaboxes legend h4 {
-		margin: 2px 0;
-	}
-}
+/**
+* See, for colors:
+* https://color.adobe.com/create/color-wheel/?base=2&rule=Custom&selected=1&name=Mijn%20Color-thema&mode=rgb&rgbvalues=0,0,0,1,0.6289566724811484,0.10577297701442445,0.04724043389094745,0.7647058823529411,0.2945255209368204,0,0.4806705005377058,0.8235294117647058,0.8666666666666667,0.2196078431372549,0.06666666666666667&swatchOrder=0,1,2,3,4
+*/
+
+/**
+ * Dismissible Notices.
+ */
+.seo-notice {
+	position: relative;
+}
+
+a.autodescription-dismiss {
+	position: absolute;
+	top: 0;
+	right: 1px;
+	border: none;
+	margin: 0;
+	padding: 9px;
+	background: 0 0;
+	color: #b4b9be;
+	cursor: pointer;
+	text-decoration: none;
+}
+
+a.autodescription-dismiss:before {
+	background: 0 0;
+	content: "\f153";
+	display: block;
+	font: 400 16px/20px dashicons;
+	speak: none;
+	height: 20px;
+	text-align: center;
+	width: 20px;
+	-webkit-font-smoothing: antialiased;
+	-moz-osx-font-smoothing: grayscale;
+}
+
+a.autodescription-dismiss:hover {
+	color: #c00;
+}
+
+/**
+* WooCommerce fix
+*/
+table.wp-list-table .column-name {
+	width: 15%;
+}
+
+table.wp-list-table .column-is_in_stock,
+table.wp-list-table .column-sku,
+table.wp-list-table .column-price {
+	width: 8%;
+}
+
+.ad-seo a {
+	text-decoration: none;
+	font-size: 13px;
+}
+
+#autodescription-title-wrap {
+	position: relative;
+	display: block;
+	padding: 0;
+	height: auto;
+	width: auto;
+}
+
+#autodescription-title-offset {
+	visibility: hidden;
+	height: 0;
+	display: inline-block;
+	position: absolute;
+	left: 0;
+	color: transparent;
+	white-space: pre;
+}
+
+#autodescription-title-placeholder {
+	position: absolute;
+	color: #777;
+	-webkit-user-select: none;
+	-moz-user-select: none;
+	-ms-user-select: none;
+	user-select: none;
+	box-sizing: content-box;
+	top: 0;
+	left: 0;
+	overflow: hidden;
+	white-space: nowrap;
+	text-overflow: ellipsis;
+}
+
+/* START Character Counters */
+
+.theseoframework-counter {
+	font-weight: 600;
+	cursor: pointer;
+	-webkit-user-select: none;
+	-moz-user-select: none;
+	-ms-user-select: none;
+	user-select: none;
+}
+
+span.ad-count-bad {
+	color: #dd3811;
+}
+
+span.ad-count-okay {
+	color: #ffa700;
+}
+
+span.ad-count-good {
+	color: #0cc34b;
+}
+
+span.tsf-counter-one {
+	color: #fff;
+	padding: 3px;
+	border-radius: 58px;
+	padding: 0 1px;
+	min-width: 29px;
+	display: inline-block;
+	text-align: center;
+	vertical-align: baseline;
+}
+span.tsf-counter-one.ad-count-bad {
+	background-color: #dd3811;
+}
+span.tsf-counter-one.ad-count-okay {
+	background-color: #ffa700;
+}
+span.tsf-counter-one.ad-count-good {
+	background-color: #0cc34b;
+}
+
+/* END Character Counters */
+
+#ad_seo {
+	width: 18%;
+}
+
+/* WooCommerce fix */
+th:last-of-type#ad_seo {
+	width: 160px;
+}
+
+span.ad-seo {
+	display: block;
+	width: 95%;
+	max-width: 220px;
+	border-radius: 0;
+	padding: 3px;
+	text-shadow: 0 0 3px rgba(0,0,0,0.3);
+}
+
+span.ad-seo.ad-100 {
+	width: 100%;
+}
+
+span.ad-bar-wrap {
+	display: table;
+	width: 100%;
+	border-radius: 0;
+	margin: 0 auto;
+	border-collapse: separate;
+	border-spacing: 0;
+	vertical-align: middle;
+	position: relative;
+}
+
+span.ad-sec-wrap {
+	display: table-cell;
+	border-collapse: collapse;
+}
+
+.ad-bar-wrap a {
+	display: table;
+	width: 100%;
+	color: #fff;
+	text-align: center;
+	cursor: help;
+	height: 100%;
+	min-width: 12px;
+	vertical-align: top;
+	line-height: 1.625em;
+	box-shadow: 2px 0px 0px -1px rgba(0,0,0,0.1) inset, -2px 0px 0px -1px rgba(0,0,0,0.1) inset;
+}
+
+span.ad-seo.pill,
+span.ad-seo.pill span.ad-bar-wrap {
+	border-radius: 30px;
+}
+
+span.ad-seo.pill span.ad-bar-wrap a {
+	box-shadow: 2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.2) inset,0 0 1px rgba(41,41,41,.6);
+}
+
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type,
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type a {
+	border-top-left-radius: 30px;
+	border-bottom-left-radius: 30px;
+}
+
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type,
+.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type a {
+	border-top-right-radius: 30px;
+	border-bottom-right-radius: 30px;
+}
+
+.ad-100 {
+	width: 100%;
+}
+
+.ad-60 {
+	width: 60%;
+}
+
+.ad-50 {
+	width: 50%;
+}
+
+.ad-40 {
+	width: 40%;
+}
+
+.ad-33 {
+	width: 33.333%;
+}
+
+.ad-25 {
+	width: 25%;
+}
+
+.ad-20 {
+	width: 20%;
+}
+
+.ad-16 {
+	width: 16.666%;
+}
+
+.ad-12-5 {
+	width: 12.5%;
+}
+
+.ad-11 {
+	width: 11.333%;
+}
+
+.ad-10 {
+	width: 10%;
+}
+
+.ad-seo-bad {
+	background-color: #dd3811;
+}
+
+.ad-seo-okay {
+	background-color: #ffa700;
+}
+
+.ad-seo-good {
+	background-color: #0cc34b;
+}
+
+.ad-seo-unknown {
+	background-color: #007bd2;
+}
+
+span.ad-seo .explanation-desc {
+	position: absolute;
+	width: auto;
+	min-width: 90%;
+	max-width: 220px;
+	font-weight: 600;
+	background: #007bd2;
+	padding: 8px 12px;
+	color: #fdfdfd;
+	border-radius: 0px;
+	z-index: 900142;
+	box-shadow: 0px 0px 2px rgba(0,0,0,0.6);
+	left: 0;
+	right: 0;
+	text-align: left;
+}
+
+span.ad-seo .explanation-desc span {
+	text-decoration: underline;
+}
+
+span.ad-seo .explanation-desc div {
+	width: 0;
+	height: 0;
+	border-left: 12px solid transparent;
+	border-right: 12px solid transparent;
+	border-top: 12px solid #007bd2;
+	position: absolute;
+	bottom: -8px;
+	z-index: 9999999;
+	left: 0;
+}
+
+/* Mobile support */
+/* Needs more refining.... e.g. iPhone 6 = good, iPhone 6+ = offscreen */
+.ad_seo.column-ad_seo {
+	overflow: initial !important;
+	min-width: 160px;
+}
+
+/* Taxonomies overflow fix */
+/* @todo Needs to be changed within Javascript to show information below bar on first 2 entries */
+#col-container, #col-right {
+	overflow: initial;
+}
+
+/* Site Settings */
+
+.autodescription-metaboxes {
+	box-sizing: border-box;
+	max-width: 690px;
+	padding-bottom: 20px;
+}
+
+.autodescription-metaboxes .top-wrap {
+	width: 100%;
+	display: inline-block;
+	vertical-align: top;
+}
+
+.autodescription-metaboxes .top-wrap > h1,
+.autodescription-metaboxes .top-wrap > h2 {
+	float: left;
+}
+
+.autodescription-metaboxes .metabox-holder {
+	clear: both;
+}
+
+.autodescription-metaboxes .top-buttons {
+	float: right;
+}
+
+.autodescription-metaboxes .bottom-buttons {
+	text-align: right;
+}
+
+.autodescription-metaboxes .top-buttons input,
+.autodescription-metaboxes .bottom-buttons input {
+	margin-left: 10px;
+}
+
+.seo-notice {
+	clear: both;
+}
+
+.autodescription-metaboxes #title-separator,
+.autodescription-metaboxes #description-separator {
+	display: table;
+	width: 100%;
+	border-collapse: collapse;
+	border-spacing: 0;
+}
+
+.autodescription-metaboxes #title-separator input,
+.autodescription-metaboxes #description-separator input {
+	display: none;
+	float: left;
+	width: 0;
+	min-width: 0;
+	opacity: 0;
+}
+
+.autodescription-metaboxes #title-separator label,
+.autodescription-metaboxes #description-separator label {
+	display: inline-block;
+	width: auto;
+	min-width: 28px;
+	min-height: 28px;
+	margin: 3px;
+	-moz-margin-end: 1.5px;
+	-moz-margin-start: 1.5px;
+	padding: 0 4px;
+	border: 1px solid #ccc;
+	line-height: 28px;
+	text-align: center;
+	cursor: pointer;
+	box-shadow: -1px -1px 1px #aaa inset;
+	font-size: 16px;
+}
+
+.autodescription-metaboxes #title-separator label.recommended,
+.autodescription-metaboxes #description-separator label.recommended {
+	border: 1px solid #0cc34b;
+	box-shadow: -1px -1px 1px #0cc34b inset;
+}
+
+.autodescription-metaboxes #title-separator input:hover + label,
+.autodescription-metaboxes #title-separator label:hover,
+.autodescription-metaboxes #description-separator input:hover + label,
+.autodescription-metaboxes #description-separator label:hover {
+	box-shadow: 1px 1px 1px #aaa inset;
+	background-color: #fff;
+}
+
+.autodescription-metaboxes #title-separator input:checked + label,
+.autodescription-metaboxes #description-separator input:checked + label {
+	box-shadow: 1px 1px 1px #333 inset;
+	background-color: #fff;
+}
+
+.autodescription-metaboxes #title-location,
+.autodescription-metaboxes #home-title-location {
+	display: block;
+}
+
+.autodescription-metaboxes #title-location label span,
+.autodescription-metaboxes #home-title-location label span,
+.autodescription-metaboxes #twitter-cards label span {
+	display: inline-block;
+	min-width: 60px;
+	vertical-align: baseline;
+}
+
+.autodescription-metaboxes #twitter-cards label span {
+	min-width: 150px;
+}
+
+.autodescription-metaboxes #home-title-location label span.custom-title-js,
+.autodescription-metaboxes #home-title-location label span.custom-blogname-js,
+.autodescription-metaboxes #home-title-location label span.custom-tagline-js,
+.autodescription-metaboxes #title-location label .autodescription-sep-js,
+.autodescription-metaboxes #home-title-location label .autodescription-sep-js {
+	display: inline;
+	min-width: 0;
+	white-space: pre;
+}
+
+/**
+ * Start Tabs.
+ */
+.autodescription-metaboxes .seoframework-tab-no-js,
+.autodescription-metaboxes .seoframework-nav-tab-wrapper {
+	position: relative;
+	clear: both;
+	width: 100%;
+	display: inline-block;
+	border-bottom: 1px solid #ccc;
+	line-height: inherit;
+	padding: 8px 12px 0;
+	margin: -4px -12px;
+}
+
+.autodescription-metaboxes .seoframework-nav-tab {
+	float: left;
+	border: 1px solid #ccc;
+	margin-left: .5em;
+	margin-bottom: -1px;
+	padding: 5px 14px;
+	font-size: 12px;
+	line-height: 16px;
+	background: #f1f1f1;
+	color: #555;
+	font-weight: 600;
+}
+
+.autodescription-metaboxes .seoframework-dashicons-tabs {
+	font-size: initial;
+	display: inline;
+	vertical-align: text-bottom;
+}
+
+.autodescription-metaboxes .seoframework-tabs-radio {
+	display: none;
+	width: 0;
+	height: 0;
+	position: absolute;
+	left: -9001px;
+}
+
+.autodescription-metaboxes .seoframework-tabs-radio:checked + label,
+.autodescription-metaboxes .seoframework-active-tab {
+	background-color: inherit;
+	border-bottom-color: #fff;
+	color: #000;
+}
+
+.autodescription-metaboxes .seoframework-tabs-content {
+	margin: 1.33em auto 0;
+}
+
+.autodescription-metaboxes .seoframework-content-no-js {
+	margin: 1.33em auto;
+}
+
+body.js .autodescription-metaboxes .seoframework-tabs-content {
+	display: none;
+}
+
+body.js .autodescription-metaboxes .seoframework-tabs-content.seoframework-active-tab-content {
+	display: block;
+}
+
+/**
+ * End tabs.
+ */
+
+.autodescription-metaboxes .seoframework-default-selected {
+	border-color: #1c9d38;
+}
+
+.autodescription-metaboxes .seoframework-default-selected:checked:before {
+	color: #1c9d38;
+}
+
+.autodescription-metaboxes .seoframework-warning-selected {
+	border-color: #dd3811;
+}
+
+.autodescription-metaboxes .seoframework-warning-selected:checked:before {
+	color: #dd3811;
+}
+
+.theseoframework-fields {
+	font-size: 13px;
+	line-height: 1.5;
+	margin: 1em 0;
+}
+
+.theseoframework-fields .toblock {
+	display: block;
+	width: 100%;
+	margin-bottom: 4px;
+}
+
+.theseoframework-fields p.description {
+	margin: 7px 0 5px;
+	color: #666;
+}
+
+.theseoframework-option-spacer {
+	margin: 1em 0;
+}
+
+@media screen and (max-width: 782px) {
+	.autodescription-metaboxes p.theseoframework-fields,
+	.theseoframework-inpost-box p.theseoframework-fields {
+		line-height: 2.8;
+	}
+
+	.autodescription-metaboxes #title-location label span,
+	.autodescription-metaboxes #home-title-location label span {
+		min-width: 40px;
+	}
+}
+
+@media screen and (max-width: 642px) {
+	.autodescription-metaboxes span.seoframework-nav-desktop {
+		display: none;
+	}
+}
+
+@media screen and (max-width: 600px) {
+	.autodescription-metaboxes h3.nav-tab-wrapper {
+		border-bottom: 1px solid #ccc;
+	}
+
+	.autodescription-metaboxes h3 .nav-tab {
+		margin-right: 7px;
+		margin-bottom: -1px;
+	}
+}
+
+@media screen and (max-width: 510px) {
+	span.ad-seo.ad-100 {
+		width: inherit;
+	}
+}
+
+/* Firefix */
+@-moz-document url-prefix() {
+	.autodescription-metaboxes .seoframework-default-selected {
+		box-shadow: 0 0 2px 0 #1c9d38;
+	}
+
+	.autodescription-metaboxes .seoframework-warning-selected {
+		box-shadow: 0 0 2px 0 #dd3811;
+	}
+
+	.autodescription-metaboxes legend h4 {
+		margin: 2px 0;
+	}
+}
Index: lib/css/autodescription.min.css
===================================================================
--- lib/css/autodescription.min.css	(revision 1413572)
+++ lib/css/autodescription.min.css	(working copy)
@@ -1 +1 @@
-.autodescription-metaboxes #message,.autodescription-metaboxes .metabox-holder{clear:both}table.wp-list-table .column-name{width:15%}table.wp-list-table .column-is_in_stock,table.wp-list-table .column-price,table.wp-list-table .column-sku{width:8%}#ad_seo{width:20%}.ad-seo a{text-decoration:none;font-size:13px}#autodescription-title-wrap{position:relative;display:block;padding:0;height:auto;width:auto}#autodescription-title-offset{visibility:hidden;height:0;display:inline-block;position:absolute;left:0;color:transparent;white-space:pre}#autodescription-title-placeholder{position:absolute;color:#777;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;box-sizing:content-box;top:0;left:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}span.ad-count-bad{color:#dd3811;font-weight:600}span.ad-count-okay{color:#ffa700;font-weight:600}span.ad-count-good{color:#0cc34b;font-weight:600}th:last-of-type#ad_seo{width:160px}span.ad-seo{display:block;background-color:#f1f1f1;width:95%;max-width:260px;border-radius:30px;padding:3px}.ad-100,.ad-bar-wrap a,span.ad-seo.ad-100{width:100%}span.ad-seo.square{border-radius:0}span.ad-bar-wrap{display:table;width:100%;border-radius:30px;margin:0 auto;border-collapse:separate;border-spacing:0;vertical-align:middle;position:relative}span.ad-seo.square span.ad-bar-wrap{border-radius:0}span.ad-sec-wrap{display:table-cell;border-collapse:collapse}.ad-bar-wrap a{display:table;color:#fff;text-align:center;cursor:help;height:100%;vertical-align:top;line-height:1.625em;box-shadow:2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.2) inset,0 0 1px rgba(41,41,41,.6)}.ad-bar-wrap span.ad-sec-wrap:first-of-type,.ad-bar-wrap span.ad-sec-wrap:first-of-type a{border-top-left-radius:30px;border-bottom-left-radius:30px}.ad-bar-wrap span.ad-sec-wrap:last-of-type,.ad-bar-wrap span.ad-sec-wrap:last-of-type a{border-top-right-radius:30px;border-bottom-right-radius:30px}.ad-seo.square .ad-bar-wrap span.ad-sec-wrap,.ad-seo.square .ad-bar-wrap span.ad-sec-wrap a{border-radius:0}.ad-60{width:60%}.ad-50{width:50%}.ad-40{width:40%}.ad-33{width:33.333%}.ad-25{width:25%}.ad-20{width:20%}.ad-16{width:16.666%}.ad-12-5{width:12.5%}.ad-11{width:11.333%}.ad-10{width:10%}.ad-seo-bad{background-color:#dd3811}.ad-seo-okay{background-color:#ffa700}.ad-seo-good{background-color:#0cc34b}.ad-seo-unknown{background-color:#007bd2}span.ad-seo .explanation-desc{position:absolute;width:auto;min-width:90%;max-width:inherit;font-weight:600;background:#007bd2;padding:12px 16px;color:#fdfdfd;border-radius:3px;z-index:9999999;box-shadow:0 0 2px #ababab,2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.05) inset;border:1px solid #ccc;left:0;text-align:left}span.ad-seo .explanation-desc span{text-decoration:underline}span.ad-seo .explanation-desc div{width:0;height:0;border-left:10px solid transparent;border-right:10px solid transparent;border-top:10px solid #007bd2;position:absolute;bottom:-8px;z-index:9999999;left:0}.ad_seo.column-ad_seo{overflow:initial!important;min-width:160px}#col-container,#col-right{overflow:initial}.autodescription-metaboxes{box-sizing:border-box;max-width:690px;padding-bottom:20px}.autodescription-metaboxes .top-wrap{width:100%;display:inline-block;vertical-align:top}.autodescription-metaboxes .top-wrap>h1,.autodescription-metaboxes .top-wrap>h2{float:left}.postbox-container{width:100%}.autodescription-metaboxes .top-buttons{float:right}.autodescription-metaboxes .bottom-buttons{text-align:right}.autodescription-metaboxes .bottom-buttons input,.autodescription-metaboxes .top-buttons input{margin-left:10px}.autodescription-metaboxes #description-separator,.autodescription-metaboxes #title-separator{display:table;width:100%;border-collapse:collapse;border-spacing:0}.autodescription-metaboxes #description-separator input,.autodescription-metaboxes #title-separator input{display:none;float:left;width:0;min-width:0;opacity:0}.autodescription-metaboxes #description-separator label,.autodescription-metaboxes #title-separator label{display:inline-block;width:auto;min-width:28px;min-height:28px;margin:3px;-moz-margin-end:1.5px;-moz-margin-start:1.5px;padding:0 4px;border:1px solid #ccc;line-height:28px;text-align:center;cursor:pointer;box-shadow:-1px -1px 1px #aaa inset;font-size:16px}.autodescription-metaboxes #description-separator label.recommended,.autodescription-metaboxes #title-separator label.recommended{border:1px solid #0cc34b;box-shadow:-1px -1px 1px #0cc34b inset}.autodescription-metaboxes #description-separator input:hover+label,.autodescription-metaboxes #description-separator label:hover,.autodescription-metaboxes #title-separator input:hover+label,.autodescription-metaboxes #title-separator label:hover{box-shadow:1px 1px 1px #aaa inset;background-color:#fff}.autodescription-metaboxes #description-separator input:checked+label,.autodescription-metaboxes #title-separator input:checked+label{box-shadow:1px 1px 1px #333 inset;background-color:#fff}.autodescription-metaboxes #home-title-location,.autodescription-metaboxes #title-location{display:block}.autodescription-metaboxes #home-title-location span,.autodescription-metaboxes #title-location span{display:block;margin-bottom:4px}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span,.autodescription-metaboxes #twitter-cards label span{display:inline-block;min-width:60px;vertical-align:baseline}.autodescription-metaboxes #twitter-cards label span{min-width:150px}.autodescription-metaboxes #home-title-location label .autodescription-sep-js,.autodescription-metaboxes #home-title-location label span.custom-blogname-js,.autodescription-metaboxes #home-title-location label span.custom-tagline-js,.autodescription-metaboxes #home-title-location label span.custom-title-js,.autodescription-metaboxes #title-location label .autodescription-sep-js{display:inline;min-width:0;white-space:pre}.autodescription-metaboxes #knowledge-tabs-js,.autodescription-metaboxes #robots-tabs-js,.autodescription-metaboxes #sitemaps-tabs-js,.autodescription-metaboxes #social-tabs-js,.autodescription-metaboxes .inside .nav-tab-wrapper{position:relative;clear:both;width:100%;padding:8px 14px 0;margin:-4px -14px}.autodescription-metaboxes #knowledge-tabs-js .nav-tab-active,.autodescription-metaboxes #robots-tabs-js .nav-tab-active,.autodescription-metaboxes #sitemaps-tabs-js .nav-tab-active,.autodescription-metaboxes #social-tabs-js .nav-tab-active{background-color:inherit;border-bottom-color:#fff}.autodescription-metaboxes .dashicons-before:before,.autodescription-metaboxes .dashicons-tabs{font-size:initial;display:inline;vertical-align:text-bottom}.autodescription-metaboxes .knowledge-tabs-radio,.autodescription-metaboxes .robots-tabs-radio,.autodescription-metaboxes .sitemaps-tabs-radio,.autodescription-metaboxes .social-tabs-radio{display:none;width:0;height:0;position:absolute}.autodescription-metaboxes .knowledge-tab-content.checked-tab,.autodescription-metaboxes .robots-tab-content.checked-tab,.autodescription-metaboxes .sitemaps-tab-content.checked-tab,.autodescription-metaboxes .social-tab-content.checked-tab{display:block}.autodescription-metaboxes .seoframework-default-selected{border-color:#1c9d38}.autodescription-metaboxes .seoframework-default-selected:checked:before{color:#1c9d38}.autodescription-metaboxes .seoframework-warning-selected{border-color:#dd3811}.autodescription-metaboxes .seoframework-warning-selected:checked:before{color:#dd3811}@media screen and (max-width:782px){.autodescription-metaboxes p.fields,.theseoframework-inpost-box p.fields{line-height:2.8}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span{min-width:40px}}@media screen and (max-width:642px){.autodescription-metaboxes span.seoframework-nav-desktop{display:none}}@media screen and (max-width:600px){.autodescription-metaboxes h3.nav-tab-wrapper{border-bottom:1px solid #ccc}.autodescription-metaboxes h3 .nav-tab{margin-right:7px;margin-bottom:-1px}}@-moz-document url-prefix(){.autodescription-metaboxes .seoframework-default-selected{box-shadow:0 0 2px 0 #1c9d38}.autodescription-metaboxes .seoframework-warning-selected{box-shadow:0 0 2px 0 #dd3811}.autodescription-metaboxes legend h4{margin:2px 0}}
+.seo-notice{position:relative;clear:both}a.autodescription-dismiss{position:absolute;top:0;right:1px;border:none;margin:0;padding:9px;background:0 0;color:#b4b9be;cursor:pointer;text-decoration:none}a.autodescription-dismiss:before{background:0 0;content:"\f153";display:block;font:400 16px/20px dashicons;speak:none;height:20px;text-align:center;width:20px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}a.autodescription-dismiss:hover{color:#c00}table.wp-list-table .column-name{width:15%}table.wp-list-table .column-is_in_stock,table.wp-list-table .column-price,table.wp-list-table .column-sku{width:8%}.ad-seo a{text-decoration:none;font-size:13px}#autodescription-title-wrap{position:relative;display:block;padding:0;height:auto;width:auto}#autodescription-title-offset{visibility:hidden;height:0;display:inline-block;position:absolute;left:0;color:transparent;white-space:pre}#autodescription-title-placeholder{position:absolute;color:#777;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;box-sizing:content-box;top:0;left:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.theseoframework-counter{font-weight:600;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}span.ad-count-bad{color:#dd3811}span.ad-count-okay{color:#ffa700}span.ad-count-good{color:#0cc34b}span.tsf-counter-one{color:#fff;border-radius:58px;padding:0 1px;min-width:29px;display:inline-block;text-align:center;vertical-align:baseline}span.tsf-counter-one.ad-count-bad{background-color:#dd3811}span.tsf-counter-one.ad-count-okay{background-color:#ffa700}span.tsf-counter-one.ad-count-good{background-color:#0cc34b}#ad_seo{width:18%}th:last-of-type#ad_seo{width:160px}span.ad-seo{display:block;width:95%;max-width:220px;border-radius:0;padding:3px;text-shadow:0 0 3px rgba(0,0,0,.3)}.ad-100,.ad-bar-wrap a,span.ad-seo.ad-100{width:100%}span.ad-bar-wrap{display:table;width:100%;border-radius:0;margin:0 auto;border-collapse:separate;border-spacing:0;vertical-align:middle;position:relative}span.ad-sec-wrap{display:table-cell;border-collapse:collapse}.ad-bar-wrap a{display:table;color:#fff;text-align:center;cursor:help;height:100%;min-width:12px;vertical-align:top;line-height:1.625em;box-shadow:2px 0 0 -1px rgba(0,0,0,.1) inset,-2px 0 0 -1px rgba(0,0,0,.1) inset}span.ad-seo.pill,span.ad-seo.pill span.ad-bar-wrap{border-radius:30px}span.ad-seo.pill span.ad-bar-wrap a{box-shadow:2px 6px 3px -2px rgba(255,255,255,.2) inset,-2px -6px 3px -2px rgba(41,41,41,.2) inset,0 0 1px rgba(41,41,41,.6)}.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type,.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:first-of-type a{border-top-left-radius:30px;border-bottom-left-radius:30px}.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type,.ad-seo.pill .ad-bar-wrap span.ad-sec-wrap:last-of-type a{border-top-right-radius:30px;border-bottom-right-radius:30px}.ad-60{width:60%}.ad-50{width:50%}.ad-40{width:40%}.ad-33{width:33.333%}.ad-25{width:25%}.ad-20{width:20%}.ad-16{width:16.666%}.ad-12-5{width:12.5%}.ad-11{width:11.333%}.ad-10{width:10%}.ad-seo-bad{background-color:#dd3811}.ad-seo-okay{background-color:#ffa700}.ad-seo-good{background-color:#0cc34b}.ad-seo-unknown{background-color:#007bd2}span.ad-seo .explanation-desc{position:absolute;width:auto;min-width:90%;max-width:220px;font-weight:600;background:#007bd2;padding:8px 12px;color:#fdfdfd;border-radius:0;z-index:900142;box-shadow:0 0 2px rgba(0,0,0,.6);left:0;right:0;text-align:left}span.ad-seo .explanation-desc span{text-decoration:underline}span.ad-seo .explanation-desc div{width:0;height:0;border-left:12px solid transparent;border-right:12px solid transparent;border-top:12px solid #007bd2;position:absolute;bottom:-8px;z-index:9999999;left:0}.ad_seo.column-ad_seo{overflow:initial!important;min-width:160px}#col-container,#col-right{overflow:initial}.autodescription-metaboxes{box-sizing:border-box;max-width:690px;padding-bottom:20px}.autodescription-metaboxes .top-wrap{width:100%;display:inline-block;vertical-align:top}.autodescription-metaboxes .top-wrap>h1,.autodescription-metaboxes .top-wrap>h2{float:left}.autodescription-metaboxes .metabox-holder{clear:both}.autodescription-metaboxes .top-buttons{float:right}.autodescription-metaboxes .bottom-buttons{text-align:right}.autodescription-metaboxes .bottom-buttons input,.autodescription-metaboxes .top-buttons input{margin-left:10px}.autodescription-metaboxes #description-separator,.autodescription-metaboxes #title-separator{display:table;width:100%;border-collapse:collapse;border-spacing:0}.autodescription-metaboxes #description-separator input,.autodescription-metaboxes #title-separator input{display:none;float:left;width:0;min-width:0;opacity:0}.autodescription-metaboxes #description-separator label,.autodescription-metaboxes #title-separator label{display:inline-block;width:auto;min-width:28px;min-height:28px;margin:3px;-moz-margin-end:1.5px;-moz-margin-start:1.5px;padding:0 4px;border:1px solid #ccc;line-height:28px;text-align:center;cursor:pointer;box-shadow:-1px -1px 1px #aaa inset;font-size:16px}.autodescription-metaboxes #description-separator label.recommended,.autodescription-metaboxes #title-separator label.recommended{border:1px solid #0cc34b;box-shadow:-1px -1px 1px #0cc34b inset}.autodescription-metaboxes #description-separator input:hover+label,.autodescription-metaboxes #description-separator label:hover,.autodescription-metaboxes #title-separator input:hover+label,.autodescription-metaboxes #title-separator label:hover{box-shadow:1px 1px 1px #aaa inset;background-color:#fff}.autodescription-metaboxes #description-separator input:checked+label,.autodescription-metaboxes #title-separator input:checked+label{box-shadow:1px 1px 1px #333 inset;background-color:#fff}.autodescription-metaboxes #home-title-location,.autodescription-metaboxes #title-location{display:block}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span,.autodescription-metaboxes #twitter-cards label span{display:inline-block;min-width:60px;vertical-align:baseline}.autodescription-metaboxes #twitter-cards label span{min-width:150px}.autodescription-metaboxes #home-title-location label .autodescription-sep-js,.autodescription-metaboxes #home-title-location label span.custom-blogname-js,.autodescription-metaboxes #home-title-location label span.custom-tagline-js,.autodescription-metaboxes #home-title-location label span.custom-title-js,.autodescription-metaboxes #title-location label .autodescription-sep-js{display:inline;min-width:0;white-space:pre}.autodescription-metaboxes .seoframework-nav-tab-wrapper,.autodescription-metaboxes .seoframework-tab-no-js{position:relative;clear:both;width:100%;display:inline-block;border-bottom:1px solid #ccc;line-height:inherit;padding:8px 12px 0;margin:-4px -12px}.autodescription-metaboxes .seoframework-nav-tab{float:left;border:1px solid #ccc;margin-left:.5em;margin-bottom:-1px;padding:5px 14px;font-size:12px;line-height:16px;background:#f1f1f1;color:#555;font-weight:600}.autodescription-metaboxes .seoframework-dashicons-tabs{font-size:initial;display:inline;vertical-align:text-bottom}.autodescription-metaboxes .seoframework-tabs-radio{display:none;width:0;height:0;position:absolute;left:-9001px}.autodescription-metaboxes .seoframework-active-tab,.autodescription-metaboxes .seoframework-tabs-radio:checked+label{background-color:inherit;border-bottom-color:#fff;color:#000}.autodescription-metaboxes .seoframework-tabs-content{margin:1.33em auto 0}.autodescription-metaboxes .seoframework-content-no-js{margin:1.33em auto}body.js .autodescription-metaboxes .seoframework-tabs-content{display:none}body.js .autodescription-metaboxes .seoframework-tabs-content.seoframework-active-tab-content{display:block}.autodescription-metaboxes .seoframework-default-selected{border-color:#1c9d38}.autodescription-metaboxes .seoframework-default-selected:checked:before{color:#1c9d38}.autodescription-metaboxes .seoframework-warning-selected{border-color:#dd3811}.autodescription-metaboxes .seoframework-warning-selected:checked:before{color:#dd3811}.theseoframework-fields{font-size:13px;line-height:1.5;margin:1em 0}.theseoframework-fields .toblock{display:block;width:100%;margin-bottom:4px}.theseoframework-fields p.description{margin:7px 0 5px;color:#666}.theseoframework-option-spacer{margin:1em 0}@media screen and (max-width:782px){.autodescription-metaboxes p.theseoframework-fields,.theseoframework-inpost-box p.theseoframework-fields{line-height:2.8}.autodescription-metaboxes #home-title-location label span,.autodescription-metaboxes #title-location label span{min-width:40px}}@media screen and (max-width:642px){.autodescription-metaboxes span.seoframework-nav-desktop{display:none}}@media screen and (max-width:600px){.autodescription-metaboxes h3.nav-tab-wrapper{border-bottom:1px solid #ccc}.autodescription-metaboxes h3 .nav-tab{margin-right:7px;margin-bottom:-1px}}@media screen and (max-width:510px){span.ad-seo.ad-100{width:inherit}}@-moz-document url-prefix(){.autodescription-metaboxes .seoframework-default-selected{box-shadow:0 0 2px 0 #1c9d38}.autodescription-metaboxes .seoframework-warning-selected{box-shadow:0 0 2px 0 #dd3811}.autodescription-metaboxes legend h4{margin:2px 0}}
Index: lib/js/autodescription.js
===================================================================
--- lib/js/autodescription.js	(revision 1413572)
+++ lib/js/autodescription.js	(working copy)
@@ -1,995 +1,1276 @@
-/**
- * This file holds The SEO Framework plugin's JS code.
- *
- * @author Sybre Waaijer https://cyberwire.nl/
- * @pluginURI https://wordpress.org/plugins/autodescription/
- *
- * @credits StudioPress (http://www.studiopress.com/) for some code.
- */
-
-/**
- * The SEO Framework plugin
- * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-
-// ==ClosureCompiler==
-// @compilation_level SIMPLE_OPTIMIZATIONS
-// @output_file_name autodescription.min.js
-// @externs_url https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.js
-// ==/ClosureCompiler==
-// http://closure-compiler.appspot.com/home
-
-/* global autodescription, autodescriptionL10n, docTitles, confirm, escapeStr */
-
-/* Advanced Optimizations don't work well with function tabToggle, nor with the title character length */
-
-/**
- * Holds AutoDescription values in an object to avoid polluting global namespace.
- *
- * @since 2.2.4
- *
- * @constructor
- */
-window[ 'autodescription' ] = {
-
-	settingsChanged: false,
-
-	titleTagline: autodescriptionL10n.titleTagline,
-	titleAdditions: autodescriptionL10n.titleAdditions,
-	titleLocation: autodescriptionL10n.titleLocation,
-	blogDescription: autodescriptionL10n.blogDescription,
-	siteTitle: autodescriptionL10n.siteTitle,
-	titleSeparator: autodescriptionL10n.titleSeparator,
-	isRTL: autodescriptionL10n.isRTL,
-	isHome: autodescriptionL10n.isHome,
-	saveAlert: autodescriptionL10n.saveAlert,
-	confirmReset: autodescriptionL10n.confirmReset,
-
-	/**
-	 * Cached doctitle function.
-	 *
-	 * @since 2.3.3
-	 *
-	 * @function
-	 *
-	 * @returns {Object} The jQuery doctitle ID's
-	 */
-	docTitles: function() {
-		'use strict';
-
-		var $doctitles = jQuery( '#autodescription_title, #autodescription-meta\\[doctitle\\], #autodescription-site-settings\\[homepage_title\\]' );
-
-		return $doctitles;
-	},
-
-	/**
-	 * Cached description function.
-	 *
-	 * @since 2.5.0
-	 *
-	 * @function
-	 *
-	 * @returns {Object} The jQuery description ID's
-	 */
-	docDescriptions: function() {
-		'use strict';
-
-		var $descriptions = jQuery( "#autodescription_description, #autodescription-meta\\[description\\], #autodescription-site-settings\\[homepage_description\\]" );
-
-		return $descriptions;
-	},
-
-	/**
-	 * Helper function for confirming a user action.
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 *
-	 * @param {String} text The text to display.
-	 * @returns {Boolean}
-	 */
-	confirm: function( text ) {
-		'use strict';
-
-		return confirm( text );
-	},
-
-	/**
-	 * Description length counter.
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 *
-	 * @return string The counter information
-	 */
-	updateCharacterCountDescription: function( event ) {
-		'use strict';
-
-		var $this = jQuery( event.target ),
-			$length = $this.val().length,
-			$phLength = $this.attr( 'placeholder' ).length,
-			$counter = jQuery( '#' + autodescription.escapeStr( event.target.id ) + '_chars' ),
-			$counterClass = '',
-			$output = '';
-
-		// Emptied input, get Description placeholder.
-		if ( $length === 0 ) {
-			//* Output length from placeholder.
-			$length = $phLength;
-		}
-
-		$output = $length.toString();
-
-		if ( $length < 100 || $length >= 175 ) {
-			$counterClass = 'ad-count-bad';
-		} else if ( $length < 145 || ( $length > 155 && $length < 175 ) ) {
-			$counterClass = 'ad-count-okay';
-		} else {
-			$counterClass = 'ad-count-good';
-		}
-
-		$counter.html( $output ).removeClass().addClass( $counterClass );
-	},
-
-	/**
-	 * Title length counter, with special characters
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 *
-	 * @return string The counter information
-	 */
-	updateCharacterCountTitle: function( event ) {
-		'use strict';
-
-		var $this = jQuery( event.target ),
-			$additions = autodescription.titleAdditions.length,
-			$description = autodescription.blogDescription.length,
-			$siteTitle = autodescription.siteTitle.length,
-			$titleLength = $this.val().length,
-			$placeholder = $this.attr('placeholder').length,
-			$tagline = jQuery( '#autodescription-site-settings\\[homepage_title_tagline\\]' ).val(),
-			$seplen = 3,
-			$counter = jQuery( '#' + autodescription.escapeStr( event.target.id ) + '_chars' ),
-			$length = 0,
-			$counterClass = '';
-
-		// Tagline removed, remove additions and separator.
-		if ( ! autodescription.titleTagline ) {
-			$additions = 0;
-			$seplen = 0;
-		}
-
-		// Emptied input, get Site title.
-		if ( $titleLength === 0 ) {
-			if ( $siteTitle !== 0 ) {
-				$titleLength = $siteTitle;
-			} else {
-				//* Output length from placeholder.
-				$length = $placeholder;
-			}
-		}
-
-		// Length should be something now.
-		if ( $titleLength !== 0 ) {
-
-			if ( $additions !== 0 && typeof $tagline !== 'undefined' ) {
-				var $tagLength = $tagline.length;
-
-				// Replace $additions with $tagline is $tagline isn't empty.
-				if ( $tagLength !== 0 ) {
-					$additions = $tagLength;
-				} else {
-					$additions = $description;
-				}
-			}
-
-			// Put it all together
-			if ( $additions === 0 ) {
-				$length = $titleLength;
-			} else {
-				$length = $titleLength + $seplen + $additions;
-			}
-		}
-
-		if ( $length < 25 || $length >= 75 ) {
-			$counterClass = 'ad-count-bad';
-		} else if ( $length < 42 || ( $length > 55 && $length < 75 ) ) {
-			$counterClass = 'ad-count-okay';
-		} else {
-			$counterClass = 'ad-count-good';
-		}
-
-		$counter.html( $length.toString() ).removeClass().addClass( $counterClass );
-	},
-
-	/**
-	 * Escapes HTML strings.
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 *
-	 * @param {String} str
-	 * @return {String} HTML to jQuery converted string
-	 */
-	escapeStr: function( str ) {
-		'use strict';
-
-		if ( str )
-			return str.replace(/([\[\]\/])/g,'\\$1');
-
-		return str;
-	},
-
-	/**
-	 * Escapes HTML entities.
-	 *
-	 * @since 2.5.2
-	 *
-	 * @function
-	 *
-	 * @param {String|null} str
-	 * @return {String} HTML to jQuery converted string
-	 */
-	escapeTags: function( str ) {
-		'use strict';
-
-		if ( str )
-			str.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' ).replace( />/g, '&gt;' );
-
-		return str;
-	},
-
-	/**
-	 * Dynamic Title separator replacement in metabox
-	 *
-	 * @since 2.2.2
-	 *
-	 * @function
-	 *
-	 * @return {Boolean} separator has Changed
-	 */
-	separatorSwitch: function( event ) {
-		'use strict';
-
-		var $sep = jQuery( ".autodescription-sep-js" ),
-			$val = jQuery( event.target ).val();
-
-		if ( $val == 'pipe' ) {
-			$sep.text( " | " );
-		} else if ( $val == 'dash' ) {
-			$sep.text( " - " );
-		} else {
-			$sep.html( " &" + $val + "; " );
-		}
-	},
-
-	/**
-	 * Dynamic Description separator replacement in metabox
-	 *
-	 * @since 2.3.4
-	 *
-	 * @function
-	 */
-	separatorSwitchDesc: function( event ) {
-		'use strict';
-
-		var $sep = jQuery( ".autodescription-descsep-js" ),
-			$val = jQuery( event.target ).val();
-
-		if ( $val == 'pipe' ) {
-			$sep.text(" | ");
-		} else if ( $val == 'dash' ) {
-			$sep.text(" - ");
-		} else {
-			$sep.html(" &" + $val + "; ");
-		}
-	},
-
-	/**
-	 * Status bar description output on hover
-	 *
-	 * @since 2.1.9
-	 *
-	 * @function
-	 *
-	 * @return {String} The information balloon
-	 */
-	statusBarHover: function() {
-		'use strict';
-
-		var $wrap = jQuery( '.ad-bar-wrap' ),
-			$wrapA = jQuery( '.ad-bar-wrap a' );
-
-		$wrapA.mouseenter( function() {
-			var $this = jQuery( this ),
-				$thisDesc = $this.attr( 'data-desc' );
-
-			if ( ( $thisDesc !== undefined ) && ( 0 === $this.find( 'div' ).length ) ) {
-				$this.append( '<div class="explanation-desc">' + $thisDesc + '<div></div></div>' );
-
-				var $thisHeight = $this.find( 'div.explanation-desc' ).height() + 36;
-
-				$this.find( 'div.explanation-desc' ).css( 'top', ( $this.position().top - $thisHeight ) + 'px' );
-			}
-		}).mousemove( function( event ) {
-			var $mousex = event.pageX - $wrap.offset().left - 10, // 20px width of arrow / 2 = 10 middle
-				$arrow = jQuery( 'span.ad-seo .explanation-desc div' ),
-				$left = jQuery( 'div.explanation-desc' ).offset().left,
-				$width = jQuery( 'div.explanation-desc' ).width(),
-				$maxOffset = $left + $width + 20;
-
-			if ( $mousex < 1 ) {
-				$arrow.css( 'left', 0 + "px" );
-			} else if ( event.pageX > $maxOffset ) {
-				$arrow.css( 'left', $width + 10 + "px" );
-			} else {
-				$arrow.css( 'left', $mousex + "px" );
-			}
-		}).mouseleave( function() {
-			jQuery( this ).find( 'div.explanation-desc' ).remove();
-		});
-
-	},
-
-	/**
-	 * Remove Status bar desc if clicked outside (touch support)
-	 *
-	 * @since 2.1.9
-	 *
-	 * @function
-	 */
-	removeDesc: function( event ) {
-		'use strict';
-
-		var $this = jQuery( event.target ),
-			$desc = jQuery('.ad-bar-wrap a');
-
-		if ( ! $this.closest( $desc ).length )
-			$desc.find( 'div.explanation-desc' ).remove();
-	},
-
-	/**
-	 * Refines Styling for the navigation tabs on the settings pages
-	 *
-	 * @since 2.2.2
-	 *
-	 * Rewritten
-	 * @since 2.2.4
-	 *
-	 * @function
-	 */
-	tabToggle: function( event ) {
-		'use strict';
-
-		jQuery( 'div.autodescription-metaboxes .nav-tab-wrapper :input' ).each( function() {
-			var $this = jQuery( this ),
-				$target	= jQuery( event.target ).attr('id');
-
-			// The second 'this' should be invalid? But it works D:
-			$this.next().toggleClass( 'nav-tab-active', this.checked );
-
-			if ( typeof $target !== 'undefined' && $target.indexOf( "-tabs-js" ) === -1 ) {
-				var $id = $target;
-
-				// Toggle content for the tabs in SEO settings page with the desired ID.
-				autodescription.tabContent( $id );
-			}
-
-		});
-	},
-
-	/**
-	 * Sets page output based on clicked input
-	 *
-	 * @since 2.2.2
-	 *
-	 * Rewritten
-	 * @since 2.2.4
-	 *
-	 * @function
-	 */
-	tabContent: function( id ) {
-		'use strict';
-
-		if ( typeof id != 'undefined' ) {
-			var $tab_id = id,
-				$slice = $tab_id.slice( 0, $tab_id.indexOf('-tab') ),
-				$hide = jQuery( '.' + $slice + '-tab-content' ),
-				$show = jQuery( "#" + $tab_id + '-box');
-
-			$hide.css( 'display', 'none' );
-			$show.css( 'display', 'block' );
-		}
-	},
-
-	/**
-	 * Toggle tagline within the Left/Right example for the HomePage Title
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 *
-	 * @return {Boolean} Title tagline removal
-	 */
-	taglineToggle: function( event ) {
-		'use strict';
-
-		var $this = jQuery( event.target ),
-			$tag = jQuery( '.custom-blogname-js' );
-
-		if ( $this.is(':checked') ) {
-			$tag.css( 'display', 'inline' );
-			autodescription.titleTagline = true;
-		} else {
-			$tag.css( 'display', 'none' );
-			autodescription.titleTagline = false;
-		}
-
-		return autodescription.docTitles().trigger( 'keyup', autodescription.updateCharacterCountTitle );
-	},
-
-	/**
-	 * Toggle tagline within Description example for the Example Description
-	 *
-	 * @since 2.3.4
-	 *
-	 * @function
-	 */
-	taglineToggleDesc: function( event ) {
-		'use strict';
-
-		var $this = jQuery( event.target ),
-			$tagDesc = jQuery( '.on-blogname-js' );
-
-		if ( $this.is(':checked') ) {
-			$tagDesc.css( 'display', 'inline' );
-		} else {
-			$tagDesc.css( 'display', 'none' );
-		}
-	},
-
-	/**
-	 * Toggle tagline within the Left/Right example for the HomePage Title or Description
-	 *
-	 * @since 2.2.7
-	 *
-	 * @function
-	 */
-	taglineToggleOnload: function( event ) {
-		'use strict';
-
-		var $tagbox = jQuery( '#title-tagline-toggle :input' ),
-			$tag = jQuery( '.custom-blogname-js' ),
-			$tagboxDesc = jQuery( '#description-onblogname-toggle :input' ),
-			$tagDesc = jQuery( '.on-blogname-js' ),
-			$title = jQuery( '#title-additions-toggle :input' ),
-			$titleExample = jQuery( '.title-additions-js' );
-
-		if ( $tagbox.is( ':checked' ) ) {
-			$tag.css( 'display', 'inline' );
-		} else {
-			$tag.css( 'display', 'none' );
-		}
-
-		if ( $tagboxDesc.is( ':checked' ) ) {
-			$tagDesc.css( 'display', 'inline' );
-		} else {
-			$tagDesc.css( 'display', 'none' );
-		}
-
-		// Reverse option.
-		if ( $title.is( ':checked' ) ) {
-			$titleExample.css( 'display', 'none' );
-		} else {
-			$titleExample.css( 'display', 'inline' );
-		}
-	},
-
-	/**
-	 * Change Title based on input of the Custom Title
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 */
-	titleProp: function( event ) {
-		'use strict';
-
-		var $val = jQuery( event.target ).val(),
-			$title = jQuery( '.custom-title-js' );
-
-		if ( $val.length === 0 ) {
-			$title.text( autodescription.siteTitle );
-		} else {
-			$title.text( $val );
-		}
-	},
-
-	/**
-	 * Change Title based on input of the Custom Title
-	 *
-	 * @since 2.3.8
-	 *
-	 * @function
-	 */
-	taglineProp: function( event ) {
-		'use strict';
-
-		var $val = jQuery( event.target ).val(),
-			$floatTag = jQuery( '.custom-tagline-js' ),
-			$target = jQuery( '#autodescription-site-settings\\[homepage_title\\]' ),
-			$leftRight = jQuery( '#home-title-location input:checked' ).val(),
-			$toggle = jQuery( '#autodescription-site-settings\\[homepage_tagline\\]' ),
-			$title = autodescriptionL10n.siteTitle,
-			$placeholder = $title,
-			$description = autodescription.blogDescription,
-			$sep = jQuery( '#title-separator input:checked' ).val(),
-			$sepOutput = autodescription.titleSeparator;
-
-		if ( $toggle.is( ':checked' ) ) {
-
-			if ( $val.length !== 0 ) {
-				$val = autodescription.escapeTags( $val );
-
-				// Create a memory div to store the html in, convert to text to append in $placeholder and $floatTag
-				$description = jQuery( '<div/>' ).text( $val ).html();
-			}
-
-			if ( $sep.length !== 0 ) {
-				if ( 'pipe' === $sep ) {
-					$sepOutput = ( "|" );
-				} else if ( 'dash' === $sep ) {
-					$sepOutput = ( "-" );
-				} else {
-					// Create a memory div to store the html in, convert to text to append in $placeholder
-					$sepOutput = jQuery( '<div/>' ).html( "&" + $sep + ";" ).text();
-				}
-			}
-
-			if ( $leftRight.length !== 0 && 'left' === $leftRight ) {
-				$placeholder = $title + ' ' + $sepOutput + ' ' + $description;
-			} else {
-				$placeholder = $description + ' ' + $sepOutput + ' ' + $title;
-			}
-		}
-
-		$floatTag.html( $description );
-		$target.attr( "placeholder", $placeholder );
-
-		// Notify tagline has changed.
-		autodescription.docTitles().trigger( 'keyup', autodescription.updateCharacterCountTitle );
-	},
-
-	/**
-	 * Trigger Change on Left/Right selection of Home Page Title
-	 *
-	 * @since 2.5.0
-	 *
-	 * @function
-	 */
-	taglinePropTrigger: function() {
-		'use strict';
-
-		jQuery( "#autodescription-site-settings\\[homepage_title_tagline\\]" ).trigger( 'keyup', autodescription.taglineProp );
-	},
-
-	/**
-	 * Trigger Change on Left/Right selection of Global Title
-	 *
-	 * @since 2.5.2
-	 *
-	 * @function
-	 */
-	titleToggle: function() {
-		'use strict';
-
-		var $this = jQuery( event.target ),
-			$tagDesc = jQuery( '.title-additions-js' );
-
-		if ( $this.is(':checked') ) {
-			$tagDesc.css( 'display', 'none' );
-		} else {
-			$tagDesc.css( 'display', 'inline' );
-		}
-	},
-
-	/**
-	 * Have all form fields in Genesis metaboxes set a dirty flag when changed.
-	 *
-	 * @since 2.0.0
-	 *
-	 * @function
-	 */
-	attachUnsavedChangesListener: function() {
-		'use strict';
-
-		jQuery( 'div.autodescription-metaboxes :input, div#theseoframework-inpost-box .inside :input' ).not('.nav-tab-wrapper :input').change( function() {
-			autodescription.registerChange();
-		});
-
-		jQuery( 'div.autodescription-metaboxes input[type=text], div.autodescription-metaboxes textarea, div#theseoframework-inpost-box .inside input[type=text], div#theseoframework-inpost-box .inside textarea' ).not('.nav-tab-wrapper :input').on( 'keyup', function() {
-			autodescription.registerChange();
-		});
-
-		window.onbeforeunload = function(){
-			if ( autodescription.settingsChanged ) {
-				return autodescription.saveAlert;
-			}
-		};
-
-		jQuery( 'div.autodescription-metaboxes input[type="submit"], div#publishing-action input[type="submit"], div#save-action input[type="submit"]' ).click( function() {
-			window.onbeforeunload = null;
-		});
-	},
-
-	/**
-	 * Set a flag, to indicate form fields have changed.
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 */
-	registerChange: function() {
-		'use strict';
-
-		autodescription.settingsChanged = true;
-	},
-
-	/**
-	 * Ask user to confirm that settings should now be reset.
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 *
-	 * @return {Boolean} True if reset should occur, false if not.
-	 */
-	confirmedReset: function() {
-		'use strict';
-
-		return confirm( autodescription.confirmReset );
-	},
-
-	/**
-	 * Adds dynamic placeholder to Title input based on site settings.
-	 *
-	 * @since 2.5.0
-	 *
-	 * @function
-	 *
-	 * @return {String} the placeholder additions.
-	 */
-	dynamicPlaceholder: function( event ) {
-		'use strict';
-
-		var $hasAdditions = autodescription.titleAdditions.length,
-			$placeholder = jQuery( '#autodescription-title-placeholder' );
-
-		// If check is defined, we're on SEO settings page.
-		if ( $hasAdditions !== 0 ) {
-
-			var $after = false,
-				$check = jQuery( '#home-title-location input:checked' ).val(),
-				$rtl = autodescription.isRTL;
-
-			if ( typeof $check !== 'undefined' && $check.length !== 0 ) {
-				//* We're in SEO Settings page.
-
-				if ( $rtl === '1' ) {
-					if ( $check === 'right' ) {
-						$after = true;
-					}
-				} else {
-					if ( $check === 'left' ) {
-						$after = true;
-					}
-				}
-			} else {
-				//* We're in post/page edit screen.
-
-				var $isHome = autodescription.isHome,
-					$titleLocation = autodescription.titleLocation,
-					$tagline = autodescription.titleTagline;
-
-				// We're on post/page screen.
-				if ( $isHome === '1' ) {
-					// Static Front page, switch check.
-					if ( $tagline === '1' ) {
-						if ( $rtl === '1' ) {
-							if ( $titleLocation === 'right' ) {
-								$after = true;
-							}
-						} else if ( $titleLocation === 'left' ) {
-							$after = true;
-						}
-					}
-				} else {
-					if ( $rtl === '1' ) {
-						if ( $titleLocation === 'left' ) {
-							$after = true;
-						}
-					} else if ( $titleLocation === 'right' ) {
-						$after = true;
-					}
-				}
-			}
-		} else {
-			var $this = jQuery( event.target );
-
-			// Empty the placeholder as we can't execute.
-			$this.css( 'text-indent', "initial" );
-			return $placeholder.empty();
-		}
-
-		var $tagbox = jQuery( '#title-tagline-toggle :input' );
-
-		if ( typeof $tagbox !== "undefined" && $tagbox.length > 0 && ! $tagbox.is( ':checked' ) ) {
-			//* We're on SEO Settings Page now, and tagline has been disabled.
-			var $this = jQuery( event.target );
-
-			$this.css( 'text-indent', "initial" );
-			$placeholder.css( 'display', 'none' );
-		} else {
-
-			var $this = jQuery( event.target ),
-				$inputVal = $this.val(),
-				$offsetTest = jQuery( "#autodescription-title-offset" ),
-				$offsetWidth = 0,
-				$heightPad = ( $this.outerHeight(true) - $this.height() ) / 2,
-				$horPad = ( $this.outerWidth() - $this.width() ) / 2,
-				$leftOffset = ( $this.outerWidth(true) - $this.width() ) / 2,
-				$taglineVal = jQuery( "#autodescription-site-settings\\[homepage_title_tagline\\]" ).val(),
-				$pos = 'left';
-
-			if ( $rtl === '1' ) {
-				$pos = 'right';
-			}
-
-			if ( $after ) {
-				var $additions = autodescription.titleSeparator + " " + autodescription.titleAdditions;
-
-				// Exchange the placeholder value of the custom Tagline in the HomePage Metabox
-				if ( typeof $taglineVal !== "undefined" && $taglineVal.length > 0 ) {
-					$additions = autodescription.titleSeparator + " " + $taglineVal;
-				}
-
-				$this.css( 'text-indent', "initial" );
-			} else {
-				var $additions = autodescription.titleAdditions + " " + autodescription.titleSeparator;
-
-				// Exchange the placeholder value of the custom Tagline in the HomePage Metabox
-				if ( typeof $taglineVal !== "undefined" && $taglineVal.length > 0 ) {
-					$additions = $taglineVal + " " + autodescription.titleSeparator;
-				}
-			}
-
-			// Width offset container, copy variables and remain hidden.
-			$offsetTest.text( $inputVal );
-			$offsetTest.css({
-				fontFamily: $this.css( "fontFamily" ),
-				fontWeight: $this.css( "fontWeight" ),
-				letterSpacing: $this.css( "letterSpacing" ),
-				fontSize: $this.css( "fontSize" ),
-			});
-			$offsetWidth = $offsetTest.width();
-
-			var $maxWidth = $this.width() - $horPad - $offsetWidth;
-
-			if ( $maxWidth < 0 )
-				$maxWidth = 0;
-
-			// Moving Placeholder output
-			$placeholder.css({
-				display: $this.css( "display" ),
-				lineHeight: $this.css( "lineHeight" ),
-				paddingTop: $heightPad + "px",
-				paddingBottom: $heightPad + "px",
-				fontFamily: $this.css( "fontFamily" ),
-				fontWeight: $this.css( "fontWeight" ),
-				fontSize: $this.css( "fontSize" ),
-				letterSpacing: $this.css( "letterSpacing" ),
-				maxWidth: $maxWidth + "px",
-			});
-
-			//* Empty or fill placeholder and offsets.
-			if ( typeof $inputVal === "undefined" || $inputVal.length < 1 ) {
-
-				if ( ! $after )
-					$this.css( 'text-indent', "initial" );
-
-				$placeholder.empty();
-			} else {
-				$placeholder.text( $additions );
-
-				// Don't calculate when empty.
-				if ( $this.outerWidth() > $leftOffset ) {
-					if ( $after ) {
-						$placeholder.css( $pos, $horPad + $leftOffset + $offsetTest.width() + "px" );
-					} else {
-						var $indent = $horPad + $placeholder.width();
-
-						if ( $indent < 0 )
-							$indent = 0;
-
-						$placeholder.css( $pos, $leftOffset + "px" );
-						$this.css( 'text-indent', $indent + "px" );
-					}
-				}
-			}
-		}
-	},
-
-	/**
-	 * Makes user click act natural by selecting the parent Title text input.
-	 *
-	 * @since 2.5.0
-	 *
-	 * @function
-	 */
-	selectTitleInput: function() {
-		'use strict';
-
-		var $input = autodescription.docTitles();
-
-		$input.focus();
-
-		if ( $input.setSelectionRange ) {
-			// Go to end times 2 if setSelectionRange exists.
-			var $length = $input.val().length * 2;
-			$input.setSelectionRange( $length, $length );
-		} else {
-			// Replace value with itself.
-			$input.val( $input.val() ).focus();
-		}
-	},
-
-	/**
-	 * Adds dynamic placeholder to Title input based on site settings on Load.
-	 *
-	 * @since 2.5.0
-	 *
-	 * @function
-	 */
-	dynamicPlaceholderOnLoad: function() {
-		'use strict';
-
-		var $input = autodescription.docTitles();
-
-		if ( typeof $input.val() !== "undefined" ) {
-			if ( $input.val().length > 0 ) {
-				$input.trigger( 'keyup', autodescription.dynamicPlaceholder );
-			} else {
-				$input.trigger( 'keyup', autodescription.updateCharacterCountTitle );
-			}
-		}
-
-	},
-
-	/**
-	 * Triggers keyup on description input so the counter can colorize.
-	 *
-	 * @since 2.5.0
-	 *
-	 * @function
-	 */
-	triggerDescriptionOnLoad: function() {
-		'use strict';
-
-		var $input = autodescription.docDescriptions();
-
-		$input.trigger( 'keyup', autodescription.updateCharacterCountDescription );
-
-	},
-
-	/**
-	 * OnLoad changes can affect settings changes. This function reverts those.
-	 *
-	 * @since 2.5.0
-	 *
-	 * @function
-	 */
-	onLoadUnregisterChange: function() {
-		'use strict';
-
-		//* Prevent trigger of settings change
-		autodescription.settingsChanged = false;
-	},
-
-	/**
-	 * Initialises all aspects of the scripts.
-	 *
-	 * Generally ordered with stuff that inserts new elements into the DOM first,
-	 * then stuff that triggers an event on existing DOM elements when ready,
-	 * followed by stuff that triggers an event only on user interaction. This
-	 * keeps any screen jumping from occuring later on.
-	 *
-	 * @since 2.2.4
-	 *
-	 * @function
-	 */
-	ready: function() {
-		'use strict';
-
-		// == Before Change listener
-
-		// Move the page updates notices below the top-wrap.
-		jQuery( 'div.updated, div.error, div.notice-warning' ).insertAfter( 'div.top-wrap' );
-
-		// Toggle Dynamic Title Placeholder onLoad, also toggles doing it right colors.
-		jQuery( document.body ).ready( autodescription.dynamicPlaceholderOnLoad );
-		// Toggle Description doing it right colors
-		jQuery( document.body ).ready( autodescription.triggerDescriptionOnLoad );
-
-		// Check if the Title Tagline or Description Additions should be removed when page is loaded.
-		jQuery( document.body ).ready( autodescription.taglineToggleOnload );
-
-		// Initialize the status bar hover balloon.
-		autodescription.statusBarHover();
-
-		// Initialize status bar removal hover for touch screens.
-		jQuery( document.body ).on( 'touchstart MSPointerDown', autodescription.removeDesc );
-
-		// Initialise form field changing flag.
-		autodescription.attachUnsavedChangesListener();
-
-		// Deregister changes.
-		jQuery( document.body ).ready( autodescription.onLoadUnregisterChange );
-
-		// == After Change listener
-
-		// Bind character counters.
-		autodescription.docDescriptions().on( 'keydown keyup paste', autodescription.updateCharacterCountDescription );
-		autodescription.docTitles().on( 'keydown keyup paste', autodescription.updateCharacterCountTitle );
-
-		// Allow the title separator to be changed dynamically.
-		jQuery( '#title-separator input' ).on( 'click', autodescription.separatorSwitch );
-		// Allow description separator to be changed dynamically.
-		jQuery( '#description-separator input' ).on( 'click', autodescription.separatorSwitchDesc );
-
-		// Bind reset confirmation.
-		jQuery( '.autodescription-js-confirm-reset' ).on( 'click.autodescription.autodescription_confirm_reset', autodescription.confirmedReset );
-
-		// Toggle Tabs in the SEO settings page. TODO pull from CDATA - @TODO use CSS and rewrite HTML.
-		jQuery( '#social-tabs-js, #robots-tabs-js, #knowledge-tabs-js, #sitemaps-tabs-js' ).on( 'click', autodescription.tabToggle );
-
-		// Toggle Title tagline aditions removal.
-		jQuery( '#title-tagline-toggle :input' ).on( 'click', autodescription.taglineToggle );
-
-		// Toggle Description additions removal.
-		jQuery( '#description-onblogname-toggle :input' ).on( 'click', autodescription.taglineToggleDesc );
-
-		// Change Home Page Title Example prop on input changes.
-		jQuery( '#autodescription-site-settings\\[homepage_title\\]' ).on( 'keydown keyup paste', autodescription.titleProp );
-		jQuery( '#home-title-location :input, #title-tagline-toggle :input, #title-separator input' ).on( 'click', autodescription.taglinePropTrigger );
-		jQuery( '#autodescription-site-settings\\[homepage_title_tagline\\]' ).on( 'keydown keyup paste', autodescription.taglineProp );
-
-		// Change Global Title Example prop on input changes.
-		jQuery( '#autodescription-site-settings\\[title_rem_additions\\]' ).on( 'click', autodescription.titleToggle );
-
-		// Dynamic Placeholder, acts on keydown for a11y, although more cpu intensive. Acts on keyup for perfect output.
-		autodescription.docTitles().on( 'keydown keyup paste', autodescription.dynamicPlaceholder );
-
-		// Move click on dynamic additions to focus input behind.
-		jQuery( "#autodescription-title-placeholder" ).on( 'click', autodescription.selectTitleInput );
-
-	}
-
-};
-jQuery( autodescription.ready );
+/**
+ * This file holds The SEO Framework plugin's JS code.\
+ * Serve JavaScript as an addition, not as a means.
+ *
+ * @author Sybre Waaijer https://cyberwire.nl/
+ * @pluginURI https://wordpress.org/plugins/autodescription/
+ *
+ * @credits StudioPress (http://www.studiopress.com/) for some code.
+ */
+
+/**
+ * The SEO Framework plugin
+ * Copyright (C) 2015 - 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+// ==ClosureCompiler==
+// @compilation_level ADVANCED_OPTIMIZATIONS
+// @output_file_name autodescription.min.js
+// @externs_url https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/jquery-1.9.js
+// @js_externs /** @constructor */ function autodescription() {}; /** @function */ autodescription.statusBarHover; /** @type {Array|string} */ var autodescriptionL10n;
+// ==/ClosureCompiler==
+// http://closure-compiler.appspot.com/home
+
+/* global autodescription, confirm, autodescriptionL10n  */
+
+/**
+ * Advanced Optimizations caused me to move away from dot annotations, as they
+ * get wrongfully minified.
+ */
+
+/**
+ * Holds AutoDescription values in an object to avoid polluting global namespace.
+ *
+ * @since 2.2.4
+ *
+ * @constructor
+ */
+window[ 'autodescription' ] = {
+
+	settingsChanged: false,
+
+	titleTagline : autodescriptionL10n['titleTagline'],
+
+	/**
+	 * Mixed string and int (i10n is string, JS is int).
+	 * @param {String|int} autodescription.counterType
+	 */
+	counterType : autodescriptionL10n['counterType'],
+
+	additionsClass : '',
+
+	/**
+	 * Cached doctitle function.
+	 *
+	 * @since 2.3.3
+	 *
+	 * @function
+	 *
+	 * @returns {Object} The jQuery doctitle ID's
+	 */
+	docTitles: function() {
+		'use strict';
+
+		var $doctitles = jQuery( '#autodescription_title, #autodescription-meta\\[doctitle\\], #autodescription-site-settings\\[homepage_title\\]' );
+
+		return $doctitles;
+	},
+
+	/**
+	 * Cached description function.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @function
+	 *
+	 * @returns {Object} The jQuery description ID's
+	 */
+	docDescriptions: function() {
+		'use strict';
+
+		var $descriptions = jQuery( "#autodescription_description, #autodescription-meta\\[description\\], #autodescription-site-settings\\[homepage_description\\]" );
+
+		return $descriptions;
+	},
+
+	/**
+	 * Helper function for confirming a user action.
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 *
+	 * @param {String} text The text to display.
+	 * @return {Boolean|null}
+	 */
+	confirm: function( text ) {
+		'use strict';
+
+		return confirm( text );
+	},
+
+	/**
+	 * Description length counter.
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	updateCharacterCountDescription: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$length = $this.val().length,
+			$phLength = $this.attr( 'placeholder' ).length,
+			$counter = jQuery( '#' + autodescription.escapeStr( event.target.id ) + '_chars' ),
+			$additionsClass = autodescription.additionsClass,
+			$counterType = autodescription.counterType,
+			$counterClass = '',
+			$name = '',
+			$output = '';
+
+		// Emptied input, get Description placeholder.
+		if ( 0 === $length ) {
+			//* Output length from placeholder.
+			$length = $phLength;
+		}
+
+		if ( $length < 100 || $length >= 175 ) {
+			$counterClass = 'ad-count-bad';
+			$name = autodescription.getCounterName( 'bad' );
+		} else if ( $length < 137 || ( $length > 155 && $length < 175 ) ) {
+			$counterClass = 'ad-count-okay';
+			$name = autodescription.getCounterName( 'okay' );
+		} else {
+			$counterClass = 'ad-count-good';
+			$name = autodescription.getCounterName( 'good' );
+		}
+
+		if ( $additionsClass )
+			$counterClass += ' ' + $additionsClass;
+
+		if ( ! $counterType || 1 == $counterType ) {
+			$output = $length.toString();
+		} else if ( 2 == $counterType ) {
+			$output = $name;
+		} else if ( 3 == $counterType ) {
+			$output = $length.toString() + ' - ' + $name;
+		}
+
+		$counter.html( $output ).removeClass().addClass( $counterClass );
+	},
+
+	/**
+	 * Title length counter, with special characters
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	updateCharacterCountTitle: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$additions = autodescriptionL10n['titleAdditions'].length,
+			$description = autodescriptionL10n['blogDescription'].length,
+			$siteTitle = autodescriptionL10n['siteTitle'].length,
+			$titleLength = $this.val().length,
+			$placeholder = $this.attr( 'placeholder' ).length,
+			$tagline = jQuery( '#autodescription-site-settings\\[homepage_title_tagline\\]' ).val(),
+			$seplen = 3,
+			$counter = jQuery( '#' + autodescription.escapeStr( event.target.id ) + '_chars' ),
+			$length = 0,
+			$additionsClass = autodescription.additionsClass,
+			$counterType = autodescription.counterType,
+			$counterClass = '',
+			$name = '',
+			$output = '';
+
+		// Additions or tagline removed, remove additions and separator.
+		if ( ! autodescription.titleTagline ) {
+			$additions = 0;
+			$seplen = 0;
+		}
+
+		// Emptied input, get Site title.
+		if ( 0 === $titleLength ) {
+			if ( 0 !== $siteTitle ) {
+				$titleLength = $siteTitle;
+			} else {
+				//* Output length from placeholder.
+				$length = $placeholder;
+			}
+		}
+
+		// Length should be something now.
+		if ( 0 !== $titleLength ) {
+
+			if ( 0 !== $additions && typeof $tagline !== 'undefined' ) {
+				var $tagLength = $tagline.length;
+
+				// Replace $additions with $tagline is $tagline isn't empty.
+				if ( 0 !== $tagLength ) {
+					$additions = $tagLength;
+				} else {
+					$additions = $description;
+				}
+			}
+
+			// Put it all together
+			if ( 0 === $additions ) {
+				$length = $titleLength;
+			} else {
+				$length = $titleLength + $seplen + $additions;
+			}
+		}
+
+		if ( $length < 25 || $length >= 75 ) {
+			$counterClass = 'ad-count-bad';
+			$name = autodescription.getCounterName( 'bad' );
+		} else if ( $length < 42 || ( $length > 55 && $length < 75 ) ) {
+			$counterClass = 'ad-count-okay';
+			$name = autodescription.getCounterName( 'okay' );
+		} else {
+			$counterClass = 'ad-count-good';
+			$name = autodescription.getCounterName( 'good' );
+		}
+
+		if ( $additionsClass )
+			$counterClass += ' ' + $additionsClass;
+
+		if ( ! $counterType || 1 == $counterType ) {
+			$output = $length.toString();
+		} else if ( 2 == $counterType ) {
+			$output = $name;
+		} else if ( 3 == $counterType ) {
+			$output = $length.toString() + ' - ' + $name;
+		}
+
+		$counter.html( $output ).removeClass().addClass( $counterClass );
+	},
+
+	/**
+	 * Escapes HTML strings.
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 *
+	 * @param {String} str
+	 * @return {String} HTML to jQuery converted string
+	 */
+	escapeStr: function( str ) {
+		'use strict';
+
+		if ( str )
+			return str.replace(/([\[\]\/])/g,'\\$1');
+
+		return str;
+	},
+
+	/**
+	 * Escapes HTML entities.
+	 *
+	 * @since 2.5.2.4
+	 * @function
+	 *
+	 * @param {String|null} str
+	 * @return {String} HTML to jQuery converted string
+	 */
+	escapeTags: function( str ) {
+		'use strict';
+
+		if ( str )
+			str.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' ).replace( />/g, '&gt;' );
+
+		return str;
+	},
+
+	/**
+	 * Dynamic Title separator replacement in metabox
+	 *
+	 * @since 2.2.2
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	separatorSwitch: function( event ) {
+		'use strict';
+
+		var $sep = jQuery( ".autodescription-sep-js" ),
+			$val = jQuery( event.target ).val();
+
+		if ( 'pipe' === $val ) {
+			$sep.text( " | " );
+		} else if ( 'dash' === $val ) {
+			$sep.text( " - " );
+		} else {
+			$sep.html( " &" + $val + "; " );
+		}
+	},
+
+	/**
+	 * Dynamic Description separator replacement in metabox
+	 *
+	 * @since 2.3.4
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	separatorSwitchDesc: function( event ) {
+		'use strict';
+
+		var $sep = jQuery( "#autodescription-descsep-js" ),
+			$val = jQuery( event.target ).val();
+
+		if ( 'pipe' === $val ) {
+			$sep.text( " | " );
+		} else if ( 'dash' === $val ) {
+			$sep.text( " - " );
+		} else {
+			$sep.html( " &" + $val + "; " );
+		}
+	},
+
+	/**
+	 * Status bar description init on hover actions.
+	 *
+	 * @since 2.1.9
+	 *
+	 * @function
+	 */
+	statusBarHover: function() {
+		'use strict';
+
+		var $wrap = jQuery( '.ad-bar-wrap' ).find( 'a' );
+
+		$wrap.on( "mouseenter", autodescription.statusBarHoverEnter );
+		$wrap.on( "mousemove", autodescription.statusBarHoverMove );
+		$wrap.on( "mouseleave", autodescription.statusBarHoverLeave );
+
+	},
+
+	/**
+	 * Status bar description output on hover enter.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 */
+	statusBarHoverEnter: function() {
+		'use strict';
+
+		var $this = jQuery( this ),
+			$thisDesc = $this.attr( 'data-desc' );
+
+		if ( $thisDesc !== undefined && 0 === $this.find( 'div' ).length ) {
+			$this.append( '<div class="explanation-desc">' + $thisDesc + '<div></div></div>' );
+
+			var $thisHeight = $this.find( 'div.explanation-desc' ).height() + 28;
+
+			$this.find( 'div.explanation-desc' ).css( 'top', ( $this.position().top - $thisHeight ) + 'px' );
+		}
+	},
+
+	/**
+	 * Status bar description output on hover move.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	statusBarHoverMove: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$pagex = event.pageX,
+			$mousex = $pagex - jQuery( '.ad-bar-wrap' ).offset().left - 11, // 22px width of arrow / 2 = 11 middle
+			$balloon = $this.find( '.explanation-desc' ),
+			$arrow = $balloon.find( 'div' );
+
+		if ( $mousex < 1 ) {
+			$arrow.css( 'left', 0 + "px" );
+		} else if ( $balloon.offset() !== undefined ) {
+			var $width = $balloon.width(),
+				$maxOffset = $balloon.offset().left + $width + 11;
+
+			if ( $pagex > $maxOffset ) {
+				$arrow.css( 'left', $width + "px" );
+			} else {
+				$arrow.css( 'left', $mousex + "px" );
+			}
+		}
+	},
+
+
+	/**
+	 * Status bar description removal on hover leave.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 */
+	statusBarHoverLeave: function() {
+		'use strict';
+
+		jQuery( this ).find( 'div.explanation-desc' ).remove();
+	},
+
+	/**
+	 * Remove Status bar desc if clicked outside (touch support)
+	 *
+	 * @since 2.1.9
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	removeDesc: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$desc = jQuery('.ad-bar-wrap a');
+
+		if ( ! $this.closest( $desc ).length )
+			$desc.find( 'div.explanation-desc' ).remove();
+	},
+
+	/**
+	 * Refines Styling for the navigation tabs on the settings pages
+	 *
+	 * @since 2.2.2
+	 *
+	 * Rewritten
+	 * @since 2.6.0
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	tabToggle: function( event ) {
+		'use strict';
+
+		var $target = jQuery( event.target ).attr( 'id' ),
+			$name = jQuery( event.target ).attr( 'name' );
+
+		if ( typeof $target !== 'undefined' ) {
+			var $content = jQuery( '#' + $target + '-content' ),
+				$other = jQuery( '.' + $name + '-content' );
+
+			if ( typeof $content !== 'undefined' ) {
+				$other.removeClass( 'seoframework-active-tab-content' );
+				$content.addClass( 'seoframework-active-tab-content' );
+			}
+		}
+
+	},
+
+	/**
+	 * Toggle tagline within the Left/Right example for the HomePage Title
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	taglineToggle: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$tag = jQuery( '.custom-blogname-js' );
+
+		if ( $this.is( ':checked' ) ) {
+			$tag.css( 'display', 'inline' );
+			autodescription.titleTagline = true;
+		} else {
+			$tag.css( 'display', 'none' );
+			autodescription.titleTagline = false;
+		}
+
+		autodescription.docTitles().trigger( 'keyup', autodescription.updateCharacterCountTitle );
+	},
+
+	/**
+	 * Toggle tagline within the Description Example.
+	 *
+	 * @since 2.3.4
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	taglineToggleDesc: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$tagDesc = jQuery( '#on-blogname-js' );
+
+		if ( $this.is(':checked') ) {
+			$tagDesc.css( 'display', 'inline' );
+		} else {
+			$tagDesc.css( 'display', 'none' );
+		}
+	},
+
+	/**
+	 * Toggle title additions location for the Title examples.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	titleLocationToggle: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ).val(),
+			$titleExampleLeft = jQuery( '.title-additions-example-left' ),
+			$titleExampleRight = jQuery( '.title-additions-example-right' );
+
+		if ( 'right' === $this ) {
+			$titleExampleLeft.css( 'display', 'none' );
+			$titleExampleRight.css( 'display', 'inline' );
+		} else {
+			$titleExampleLeft.css( 'display', 'inline' );
+			$titleExampleRight.css( 'display', 'none' );
+		}
+
+	},
+
+	/**
+	 * Toggle title prefixes for the Prefix Title example.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	titlePrefixToggle: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$prefix = jQuery( '.title-prefix-example' );
+
+		if ( $this.is(':checked') ) {
+			$prefix.css( 'display', 'none' );
+		} else {
+			$prefix.css( 'display', 'inline' );
+		}
+
+	},
+
+	/**
+	 * Toggle additions within Description example for the Example Description
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	additionsToggleDesc: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$tagDesc = jQuery( '#description-additions-js' );
+
+		if ( $this.is(':checked') ) {
+			$tagDesc.css( 'display', 'inline' );
+		} else {
+			$tagDesc.css( 'display', 'none' );
+		}
+	},
+
+	/**
+	 * Toggle tagline end examples within the Left/Right example for the
+	 * HomePage Title or Description.
+	 *
+	 * @since 2.2.7
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	taglineToggleOnload: function( event ) {
+		'use strict';
+
+		var $tagTitle = jQuery( '#title-tagline-toggle :input' ),
+			$title = jQuery( '.custom-blogname-js' ),
+			$tagDescAdditions = jQuery( '#description-additions-toggle :input' ),
+			$descAdditions = jQuery( '#description-additions-js' ),
+			$tagDescBlogname = jQuery( '#description-onblogname-toggle :input' ),
+			$descBlogname = jQuery( '#on-blogname-js' ),
+			$tagTitleAdditions = jQuery( '#title-additions-toggle :input' ),
+			$titleAdditions = jQuery( '.title-additions-js' );
+
+		if ( $tagTitle.is( ':checked' ) ) {
+			$title.css( 'display', 'inline' );
+		} else {
+			$title.css( 'display', 'none' );
+		}
+
+		if ( $tagDescAdditions.is( ':checked' ) ) {
+			$descAdditions.css( 'display', 'inline' );
+		} else {
+			$descAdditions.css( 'display', 'none' );
+		}
+
+		if ( $tagDescBlogname.is( ':checked' ) ) {
+			$descBlogname.css( 'display', 'inline' );
+		} else {
+			$descBlogname.css( 'display', 'none' );
+		}
+
+		// Reverse option.
+		if ( $tagTitleAdditions.is( ':checked' ) ) {
+			$titleAdditions.css( 'display', 'none' );
+		} else {
+			$titleAdditions.css( 'display', 'inline' );
+		}
+
+	},
+
+	/**
+	 * Change Home Page Title based on input of the Custom Title
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	titleProp: function( event ) {
+		'use strict';
+
+		var $val = jQuery( event.target ).val(),
+			$title = jQuery( '.custom-title-js' );
+
+		if ( $val.length === 0 ) {
+			$title.text( autodescriptionL10n['siteTitle'] );
+		} else {
+			$title.text( $val );
+		}
+
+	},
+
+	/**
+	 * Change Title based on input of the Custom Title
+	 *
+	 * @since 2.3.8
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	taglineProp: function( event ) {
+		'use strict';
+
+		var $val = jQuery( event.target ).val(),
+			$floatTag = jQuery( '.custom-tagline-js' ),
+			$target = jQuery( '#autodescription-site-settings\\[homepage_title\\]' ),
+			$leftRight = jQuery( '#home-title-location input:checked' ).val(),
+			$toggle = jQuery( '#autodescription-site-settings\\[homepage_tagline\\]' ),
+			$title = autodescriptionL10n['siteTitle'],
+			$placeholder = $title,
+			$description = autodescriptionL10n['blogDescription'],
+			$sep = jQuery( '#title-separator input:checked' ).val(),
+			$sepOutput = autodescriptionL10n['titleSeparator'];
+
+		if ( $toggle.is( ':checked' ) ) {
+
+			if ( $val.length !== 0 ) {
+				$val = autodescription.escapeTags( $val );
+
+				// Create a memory div to store the html in, convert to text to append in $placeholder and $floatTag
+				$description = jQuery( '<div/>' ).text( $val ).html();
+			}
+
+			if ( $sep.length !== 0 ) {
+				if ( 'pipe' === $sep ) {
+					$sepOutput = ( "|" );
+				} else if ( 'dash' === $sep ) {
+					$sepOutput = ( "-" );
+				} else {
+					// Create a memory div to store the html in, convert to text to append in $placeholder
+					$sepOutput = jQuery( '<div/>' ).html( "&" + $sep + ";" ).text();
+				}
+			}
+
+			if ( $leftRight.length !== 0 && 'left' === $leftRight ) {
+				$placeholder = $title + ' ' + $sepOutput + ' ' + $description;
+			} else {
+				$placeholder = $description + ' ' + $sepOutput + ' ' + $title;
+			}
+
+		}
+
+		$floatTag.html( $description );
+		$target.attr( "placeholder", $placeholder );
+
+		// Notify tagline has changed.
+		autodescription.docTitles().trigger( 'keyup', autodescription.updateCharacterCountTitle );
+	},
+
+	/**
+	 * Trigger Change on Left/Right selection of Home Page Title
+	 *
+	 * @since 2.5.0
+	 *
+	 * @function
+	 */
+	taglinePropTrigger: function() {
+		'use strict';
+
+		jQuery( "#autodescription-site-settings\\[homepage_title_tagline\\]" ).trigger( 'keyup', autodescription.taglineProp );
+	},
+
+	/**
+	 * Trigger Change on Left/Right selection of Global Title
+	 *
+	 * @since 2.5.2
+	 *
+	 * @function
+	 */
+	titleToggle: function() {
+		'use strict';
+
+		var $this = jQuery( event.target ),
+			$tagDesc = jQuery( '.title-additions-js' );
+
+		if ( $this.is( ':checked' ) ) {
+			$tagDesc.css( 'display', 'none' );
+		} else {
+			$tagDesc.css( 'display', 'inline' );
+		}
+	},
+
+	/**
+	 * Have all form fields in The SEO Framework metaboxes set a dirty flag when changed.
+	 *
+	 * @since 2.0.0
+	 *
+	 * @function
+	 */
+	attachUnsavedChangesListener: function() {
+		'use strict';
+
+		jQuery( 'div.autodescription-metaboxes :input, div#theseoframework-inpost-box .inside :input' ).not( '.seoframework-tab :input' ).change( function() {
+			autodescription.registerChange();
+		});
+
+		jQuery( 'div.autodescription-metaboxes input[type=text], div.autodescription-metaboxes textarea, div#theseoframework-inpost-box .inside input[type=text], div#theseoframework-inpost-box .inside textarea' ).not('.nav-tab-wrapper :input').on( 'keyup', function() {
+			autodescription.registerChange();
+		});
+
+		window.onbeforeunload = function(){
+			if ( autodescription.settingsChanged ) {
+				return autodescriptionL10n['saveAlert'];
+			}
+		};
+
+		jQuery( 'div.autodescription-metaboxes input[type="submit"], div#publishing-action input[type="submit"], div#save-action input[type="submit"], a.submitdelete' ).click( function() {
+			window.onbeforeunload = null;
+		});
+	},
+
+	/**
+	 * Set a flag, to indicate form fields have changed.
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 */
+	registerChange: function() {
+		'use strict';
+
+		autodescription.settingsChanged = true;
+	},
+
+	/**
+	 * Ask user to confirm that settings should now be reset.
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 *
+	 * @return {Boolean|null} True if reset should occur, false if not.
+	 */
+	confirmedReset: function() {
+		'use strict';
+
+		return confirm( autodescriptionL10n['confirmReset'] );
+	},
+
+	/**
+	 * Adds dynamic placeholder to Title input based on site settings.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 *
+	 * @return {String} the placeholder additions.
+	 */
+	dynamicPlaceholder: function( event ) {
+		'use strict';
+
+		var $hasAdditions = autodescriptionL10n['titleAdditions'].length,
+			$placeholder = jQuery( '#autodescription-title-placeholder' );
+
+		// If check is defined, we're on SEO settings page.
+		if ( 0 === $hasAdditions ) {
+			var $this = jQuery( event.target );
+
+			// Empty the placeholder as we can't execute.
+			$this.css( 'text-indent', "initial" );
+			return $placeholder.empty();
+		}
+
+		var $after = false,
+			$check = jQuery( '#home-title-location input:checked' ).val(),
+			$rtl = autodescriptionL10n['isRTL'],
+			$additions = '';
+
+		if ( typeof $check !== 'undefined' && $check.length !== 0 ) {
+			//* We're in SEO Settings page.
+
+			if ( '1' === $rtl ) {
+				if ( 'right' === $check ) {
+					$after = true;
+				}
+			} else {
+				if ( 'left' === $check ) {
+					$after = true;
+				}
+			}
+		} else {
+			//* We're in post/page edit screen.
+
+			var $isHome = autodescriptionL10n['isHome'],
+				$titleLocation = autodescriptionL10n['titleLocation'],
+				$tagline = autodescription.titleTagline;
+
+			// We're on post/page screen.
+			if ( '1' === $isHome ) {
+				// Static Front page, switch check.
+				if ( '1' === $tagline ) {
+					if ( '1' === $rtl ) {
+						if ( 'right' === $titleLocation ) {
+							$after = true;
+						}
+					} else if ( 'left' === $titleLocation ) {
+						$after = true;
+					}
+				}
+			} else {
+				if ( '1' === $rtl ) {
+					if ( 'left' === $titleLocation ) {
+						$after = true;
+					}
+				} else if ( 'right' === $titleLocation ) {
+					$after = true;
+				}
+			}
+		}
+
+		var $tagbox = jQuery( '#title-tagline-toggle :input' );
+
+		if ( typeof $tagbox !== "undefined" && $tagbox.length > 0 && ! $tagbox.is( ':checked' ) ) {
+			//* We're on SEO Settings Page now, and tagline has been disabled.
+			var $this = jQuery( event.target );
+
+			$this.css( 'text-indent', "initial" );
+			$placeholder.css( 'display', 'none' );
+		} else {
+
+			var $this = jQuery( event.target ),
+				$inputVal = $this.val(),
+				$offsetTest = jQuery( "#autodescription-title-offset" ),
+				$offsetWidth = 0,
+				$heightPad = ( $this.outerHeight( true ) - $this.height() ) / 2,
+				$horPad = ( $this.outerWidth() - $this.width() ) / 2,
+				$leftOffset = ( $this.outerWidth( true ) - $this.width() ) / 2,
+				$taglineVal = jQuery( "#autodescription-site-settings\\[homepage_title_tagline\\]" ).val(),
+				$pos = 'left',
+				$separator = autodescriptionL10n['titleSeparator'];
+
+			if ( '1' === $rtl ) {
+				$pos = 'right';
+			}
+
+			if ( typeof $taglineVal !== "undefined" && $taglineVal.length === 0) {
+				$taglineVal = autodescriptionL10n['blogDescription'];
+			}
+
+			if ( $after ) {
+				$additions = $separator + " " + autodescriptionL10n['titleAdditions'];
+
+				// Exchange the placeholder value of the custom Tagline in the HomePage Metabox
+				if ( typeof $taglineVal !== "undefined" && $taglineVal.length > 0 ) {
+					$additions = $separator + " " + $taglineVal;
+				}
+
+				$this.css( 'text-indent', "initial" );
+			} else {
+				$additions = autodescriptionL10n['titleAdditions'] + " " + $separator;
+
+				// Exchange the placeholder value of the custom Tagline in the HomePage Metabox
+				if ( typeof $taglineVal !== "undefined" && $taglineVal.length > 0 ) {
+					$additions = $taglineVal + " " + $separator;
+				}
+			}
+
+			// Width offset container, copy variables and remain hidden.
+			$offsetTest.text( $inputVal );
+			$offsetTest.css({
+				fontFamily: $this.css( "fontFamily" ),
+				fontWeight: $this.css( "fontWeight" ),
+				letterSpacing: $this.css( "letterSpacing" ),
+				fontSize: $this.css( "fontSize" ),
+			});
+			$offsetWidth = $offsetTest.width();
+
+			var $maxWidth = $this.width() - $horPad - $offsetWidth;
+
+			if ( $maxWidth < 0 )
+				$maxWidth = 0;
+
+			// Moving Placeholder output
+			$placeholder.css({
+				display: $this.css( "display" ),
+				lineHeight: $this.css( "lineHeight" ),
+				paddingTop: $heightPad + "px",
+				paddingBottom: $heightPad + "px",
+				fontFamily: $this.css( "fontFamily" ),
+				fontWeight: $this.css( "fontWeight" ),
+				fontSize: $this.css( "fontSize" ),
+				letterSpacing: $this.css( "letterSpacing" ),
+				maxWidth: $maxWidth + "px",
+			});
+
+			//* Empty or fill placeholder and offsets.
+			if ( typeof $inputVal === "undefined" || $inputVal.length < 1 ) {
+
+				if ( ! $after )
+					$this.css( 'text-indent', "initial" );
+
+				$placeholder.empty();
+			} else {
+				$placeholder.text( $additions );
+
+				// Don't calculate when empty.
+				if ( $this.outerWidth() > $leftOffset ) {
+					if ( $after ) {
+						$placeholder.css( $pos, $horPad + $leftOffset + $offsetTest.width() + "px" );
+					} else {
+						var $indent = $horPad + $placeholder.width();
+
+						if ( $indent < 0 )
+							$indent = 0;
+
+						$placeholder.css( $pos, $leftOffset + "px" );
+						$this.css( 'text-indent', $indent + "px" );
+					}
+				}
+			}
+		}
+	},
+
+	/**
+	 * Makes user click act natural by selecting the parent Title text input.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @function
+	 */
+	selectTitleInput: function() {
+		'use strict';
+
+		var $input = autodescription.docTitles();
+
+		$input.focus();
+
+		if ( $input.setSelectionRange ) {
+			// Go to end times 2 if setSelectionRange exists.
+			var $length = $input.val().length * 2;
+			$input.setSelectionRange( $length, $length );
+		} else {
+			// Replace value with itself.
+			$input.val( $input.val() ).focus();
+		}
+	},
+
+	/**
+	 * Adds dynamic placeholder to Title input based on site settings on Load.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @function
+	 */
+	dynamicPlaceholderOnLoad: function() {
+		'use strict';
+
+		var $input = autodescription.docTitles();
+
+		if ( typeof $input.val() !== "undefined" ) {
+			if ( $input.val().length > 0 ) {
+				$input.trigger( 'keyup', autodescription.dynamicPlaceholder );
+			} else {
+				$input.trigger( 'keyup', autodescription.updateCharacterCountTitle );
+			}
+		}
+
+	},
+
+	/**
+	 * Triggers keyup on description input so the counter can colorize.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @function
+	 */
+	triggerDescriptionOnLoad: function() {
+		'use strict';
+
+		var $input = autodescription.docDescriptions();
+
+		$input.trigger( 'keyup', autodescription.updateCharacterCountDescription );
+	},
+
+
+	/**
+	 * Triggers keyup on title input so the counter can colorize.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 */
+	triggerTitleOnLoad: function() {
+		'use strict';
+
+		var $input = autodescription.docTitles();
+
+		$input.trigger( 'keyup', autodescription.updateCharacterCountTitle );
+	},
+
+	/**
+	 * OnLoad changes can affect settings changes. This function reverts those.
+	 *
+	 * @since 2.5.0
+	 *
+	 * @function
+	 */
+	onLoadUnregisterChange: function() {
+		'use strict';
+
+		//* Prevent trigger of settings change
+		autodescription.settingsChanged = false;
+	},
+
+	/**
+	 * Dismissible notices. Uses class .seo-notice.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 * @param {jQuery.event} event
+	 */
+	dismissNotice: function( event ) {
+		'use strict';
+
+		var $this = jQuery( event.target );
+
+		$this.parents( '.seo-notice' ).slideUp( 200, function() {
+			$this.remove();
+		});
+
+	},
+
+	/**
+	 * Updates the counter type.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 */
+	counterUpdate: function() {
+		'use strict';
+
+		// Count up, reset to 0 if needed. We have 4 options: 0, 1, 2, 3
+		autodescription.counterType = autodescription.counterType + 1;
+		if ( autodescription.counterType > 3 )
+			autodescription.counterType = 0;
+
+		var data = {
+			'action': 'the_seo_framework_update_counter'
+		};
+
+		//* Call PHP function and update all visible counters.
+		jQuery.post( ajaxurl, data );
+
+		autodescription.additionsClassInit();
+	},
+
+	/**
+	 * Sets up additionsClass variable.
+	 * Also sets up browser caches correctly.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 */
+	additionsClassInit: function() {
+		'use strict';
+
+		/**
+		 * Mixed string and int (i10n is string, JS is int).
+		 * @param {String|int} $counterType
+		 */
+		var $counterType = autodescription.counterType;
+
+		if ( 1 == $counterType ) {
+			autodescription.additionsClass = 'tsf-counter-one';
+			autodescription.counterType = 1;
+		} else if ( 2 == $counterType ) {
+			autodescription.additionsClass = 'tsf-counter-two';
+			autodescription.counterType = 2;
+		} else if ( 3 == $counterType ) {
+			autodescription.additionsClass = 'tsf-counter-three';
+			autodescription.counterType = 3;
+		} else {
+			autodescription.additionsClass = 'tsf-counter-zero';
+			autodescription.counterType = 0;
+		}
+
+		autodescription.updateCounters();
+	},
+
+	/**
+	 * Update counters.
+	 *
+	 * @since 2.6.0
+	 *
+	 * @function
+	 */
+	updateCounters: function() {
+		'use strict';
+
+		autodescription.triggerTitleOnLoad();
+		autodescription.triggerDescriptionOnLoad();
+	},
+
+	/**
+	 * Returns counter name.
+	 *
+	 * @since 2.6.0
+	 * @function
+	 *
+	 * @param {String|null} type
+	 * @return {String} Human Readable Counter name.
+	 */
+	getCounterName: function( type ) {
+		'use strict';
+
+		var name = autodescriptionL10n[type];
+
+		return name;
+	},
+
+	/**
+	 * Initialises all aspects of the scripts.
+	 *
+	 * Generally ordered with stuff that inserts new elements into the DOM first,
+	 * then stuff that triggers an event on existing DOM elements when ready,
+	 * followed by stuff that triggers an event only on user interaction. This
+	 * keeps any screen jumping from occuring later on.
+	 *
+	 * @since 2.2.4
+	 *
+	 * @function
+	 */
+	ready: function() {
+		'use strict';
+
+		// Move the page updates notices below the top-wrap.
+		jQuery( 'div.updated, div.error, div.notice-warning' ).insertAfter( 'div.top-wrap' );
+
+		// Set up additions classes.
+		jQuery( document.body ).ready( autodescription.additionsClassInit );
+
+		// Toggle Dynamic Title Placeholder onLoad, also toggles doing it right colors.
+		jQuery( document.body ).ready( autodescription.dynamicPlaceholderOnLoad );
+		// Toggle Title doing it right colors.
+		jQuery( document.body ).ready( autodescription.triggerTitleOnLoad );
+		// Toggle Description doing it right colors.
+		jQuery( document.body ).ready( autodescription.triggerDescriptionOnLoad );
+
+		// Check if the Title Tagline or Description Additions should be removed when page is loaded.
+		jQuery( document.body ).ready( autodescription.taglineToggleOnload );
+
+		// Initialize the status bar hover balloon.
+		jQuery( document.body ).ready( autodescription.statusBarHover );
+
+		// Initialize status bar removal hover for touch screens.
+		jQuery( document.body ).on( 'click touchstart MSPointerDown', autodescription.removeDesc );
+
+		// #== Before Change listener
+
+		// Initialise form field changing flag.
+		autodescription.attachUnsavedChangesListener();
+
+		// Deregister changes.
+		jQuery( document.body ).ready( autodescription.onLoadUnregisterChange );
+
+		// #== After Change listener
+
+		// Bind character counters.
+		autodescription.docDescriptions().on( 'keydown keyup paste', autodescription.updateCharacterCountDescription );
+		autodescription.docTitles().on( 'keydown keyup paste', autodescription.updateCharacterCountTitle );
+
+		// Allow the title separator to be changed dynamically.
+		jQuery( '#title-separator input' ).on( 'click', autodescription.separatorSwitch );
+		// Allow description separator to be changed dynamically.
+		jQuery( '#description-separator input' ).on( 'click', autodescription.separatorSwitchDesc );
+
+		// Bind reset confirmation.
+		jQuery( '.autodescription-js-confirm-reset' ).on( 'click.autodescription.autodescription_confirm_reset', autodescription.confirmedReset );
+
+		// Toggle Tabs in the SEO settings page.
+		jQuery( '.seoframework-tab' ).on( 'click', autodescription.tabToggle );
+
+		// Toggle Title tagline aditions removal.
+		jQuery( '#title-tagline-toggle :input' ).on( 'click', autodescription.taglineToggle );
+		// Toggle Title additions location.
+		jQuery( '#title-location input' ).on( 'click', autodescription.titleLocationToggle );
+		// Toggle Title prefixes display.
+		jQuery( '#title-prefixes-toggle :input' ).on( 'click', autodescription.titlePrefixToggle );
+
+		// Toggle Description additions removal.
+		jQuery( '#description-onblogname-toggle :input' ).on( 'click', autodescription.taglineToggleDesc );
+		jQuery( '#description-additions-toggle :input' ).on( 'click', autodescription.additionsToggleDesc );
+
+		// Change Home Page Title Example prop on input changes.
+		jQuery( '#autodescription-site-settings\\[homepage_title\\]' ).on( 'keydown keyup paste', autodescription.titleProp );
+		jQuery( '#home-title-location :input, #title-tagline-toggle :input, #title-separator input' ).on( 'click', autodescription.taglinePropTrigger );
+		jQuery( '#autodescription-site-settings\\[homepage_title_tagline\\]' ).on( 'keydown keyup paste', autodescription.taglineProp );
+
+		// Make sure the titleProp is correctly rendered when revealed after being hidden.
+		jQuery( '#homepage-tab-general' ).on( 'change', autodescription.taglinePropTrigger );
+
+		// Change Global Title Example prop on input changes.
+		jQuery( '#autodescription-site-settings\\[title_rem_additions\\]' ).on( 'click', autodescription.titleToggle );
+
+		// Dynamic Placeholder, acts on keydown for a11y, although more cpu intensive. Acts on keyup for perfect output.
+		autodescription.docTitles().on( 'keydown keyup paste', autodescription.dynamicPlaceholder );
+
+		// Move click on dynamic additions to focus input behind.
+		jQuery( '#autodescription-title-placeholder' ).on( 'click', autodescription.selectTitleInput );
+
+		// Dismiss notices.
+		jQuery( '.autodescription-dismiss' ).on( 'click', autodescription.dismissNotice );
+
+		// AJAX counter
+		jQuery( '.theseoframework-counter' ).on( 'click', autodescription.counterUpdate );
+
+	}
+
+};
+jQuery( autodescription.ready );
Index: lib/js/autodescription.min.js
===================================================================
--- lib/js/autodescription.min.js	(revision 1413572)
+++ lib/js/autodescription.min.js	(working copy)
@@ -1,22 +1,24 @@
-window.autodescription={settingsChanged:!1,titleTagline:autodescriptionL10n.titleTagline,titleAdditions:autodescriptionL10n.titleAdditions,titleLocation:autodescriptionL10n.titleLocation,blogDescription:autodescriptionL10n.blogDescription,siteTitle:autodescriptionL10n.siteTitle,titleSeparator:autodescriptionL10n.titleSeparator,isRTL:autodescriptionL10n.isRTL,isHome:autodescriptionL10n.isHome,saveAlert:autodescriptionL10n.saveAlert,confirmReset:autodescriptionL10n.confirmReset,docTitles:function(){return jQuery("#autodescription_title, #autodescription-meta\\[doctitle\\], #autodescription-site-settings\\[homepage_title\\]")},
-docDescriptions:function(){return jQuery("#autodescription_description, #autodescription-meta\\[description\\], #autodescription-site-settings\\[homepage_description\\]")},confirm:function(a){return confirm(a)},updateCharacterCountDescription:function(a){var b=jQuery(a.target),c=b.val().length,b=b.attr("placeholder").length;a=jQuery("#"+autodescription.escapeStr(a.target.id)+"_chars");var d="",f="";0===c&&(c=b);f=c.toString();d=100>c||175<=c?"ad-count-bad":145>c||155<c&&175>c?"ad-count-okay":"ad-count-good";
-a.html(f).removeClass().addClass(d)},updateCharacterCountTitle:function(a){var b=jQuery(a.target),c=autodescription.titleAdditions.length,d=autodescription.blogDescription.length,f=autodescription.siteTitle.length,g=b.val().length,l=b.attr("placeholder").length,h=jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").val(),b=3;a=jQuery("#"+autodescription.escapeStr(a.target.id)+"_chars");var e=0,k="";autodescription.titleTagline||(b=c=0);0===g&&(0!==f?g=f:e=l);0!==g&&(0!==c&&"undefined"!==
-typeof h&&(c=h.length,c=0!==c?c:d),e=0===c?g:g+b+c);k=25>e||75<=e?"ad-count-bad":42>e||55<e&&75>e?"ad-count-okay":"ad-count-good";a.html(e.toString()).removeClass().addClass(k)},escapeStr:function(a){return a?a.replace(/([\[\]\/])/g,"\\$1"):a},escapeTags:function(a){a&&a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");return a},separatorSwitch:function(a){var b=jQuery(".autodescription-sep-js");a=jQuery(a.target).val();"pipe"==a?b.text(" | "):"dash"==a?b.text(" - "):b.html(" &"+a+
-"; ")},separatorSwitchDesc:function(a){var b=jQuery(".autodescription-descsep-js");a=jQuery(a.target).val();"pipe"==a?b.text(" | "):"dash"==a?b.text(" - "):b.html(" &"+a+"; ")},statusBarHover:function(){var a=jQuery(".ad-bar-wrap");jQuery(".ad-bar-wrap a").mouseenter(function(){var a=jQuery(this),c=a.attr("data-desc");void 0!==c&&0===a.find("div").length&&(a.append('<div class="explanation-desc">'+c+"<div></div></div>"),c=a.find("div.explanation-desc").height()+36,a.find("div.explanation-desc").css("top",
-a.position().top-c+"px"))}).mousemove(function(b){var c=b.pageX-a.offset().left-10,d=jQuery("span.ad-seo .explanation-desc div"),f=jQuery("div.explanation-desc").offset().left,g=jQuery("div.explanation-desc").width(),f=f+g+20;1>c?d.css("left","0px"):b.pageX>f?d.css("left",g+10+"px"):d.css("left",c+"px")}).mouseleave(function(){jQuery(this).find("div.explanation-desc").remove()})},removeDesc:function(a){a=jQuery(a.target);var b=jQuery(".ad-bar-wrap a");a.closest(b).length||b.find("div.explanation-desc").remove()},
-tabToggle:function(a){jQuery("div.autodescription-metaboxes .nav-tab-wrapper :input").each(function(){var b=jQuery(this),c=jQuery(a.target).attr("id");b.next().toggleClass("nav-tab-active",this.checked);"undefined"!==typeof c&&-1===c.indexOf("-tabs-js")&&autodescription.tabContent(c)})},tabContent:function(a){if("undefined"!=typeof a){var b=a.slice(0,a.indexOf("-tab")),b=jQuery("."+b+"-tab-content");a=jQuery("#"+a+"-box");b.css("display","none");a.css("display","block")}},taglineToggle:function(a){a=
-jQuery(a.target);var b=jQuery(".custom-blogname-js");a.is(":checked")?(b.css("display","inline"),autodescription.titleTagline=!0):(b.css("display","none"),autodescription.titleTagline=!1);return autodescription.docTitles().trigger("keyup",autodescription.updateCharacterCountTitle)},taglineToggleDesc:function(a){a=jQuery(a.target);var b=jQuery(".on-blogname-js");a.is(":checked")?b.css("display","inline"):b.css("display","none")},taglineToggleOnload:function(a){a=jQuery("#title-tagline-toggle :input");
-var b=jQuery(".custom-blogname-js"),c=jQuery("#description-onblogname-toggle :input"),d=jQuery(".on-blogname-js"),f=jQuery("#title-additions-toggle :input"),g=jQuery(".title-additions-js");a.is(":checked")?b.css("display","inline"):b.css("display","none");c.is(":checked")?d.css("display","inline"):d.css("display","none");f.is(":checked")?g.css("display","none"):g.css("display","inline")},titleProp:function(a){a=jQuery(a.target).val();var b=jQuery(".custom-title-js");0===a.length?b.text(autodescription.siteTitle):
-b.text(a)},taglineProp:function(a){a=jQuery(a.target).val();var b=jQuery(".custom-tagline-js"),c=jQuery("#autodescription-site-settings\\[homepage_title\\]"),d=jQuery("#home-title-location input:checked").val(),f=jQuery("#autodescription-site-settings\\[homepage_tagline\\]"),g=autodescriptionL10n.siteTitle,l=g,h=autodescription.blogDescription,e=jQuery("#title-separator input:checked").val(),k=autodescription.titleSeparator;f.is(":checked")&&(0!==a.length&&(a=autodescription.escapeTags(a),h=jQuery("<div/>").text(a).html()),
-0!==e.length&&(k="pipe"===e?"|":"dash"===e?"-":jQuery("<div/>").html("&"+e+";").text()),l=0!==d.length&&"left"===d?g+" "+k+" "+h:h+" "+k+" "+g);b.html(h);c.attr("placeholder",l);autodescription.docTitles().trigger("keyup",autodescription.updateCharacterCountTitle)},taglinePropTrigger:function(){jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").trigger("keyup",autodescription.taglineProp)},titleToggle:function(){var a=jQuery(event.target),b=jQuery(".title-additions-js");a.is(":checked")?
-b.css("display","none"):b.css("display","inline")},attachUnsavedChangesListener:function(){jQuery("div.autodescription-metaboxes :input, div#theseoframework-inpost-box .inside :input").not(".nav-tab-wrapper :input").change(function(){autodescription.registerChange()});jQuery("div.autodescription-metaboxes input[type=text], div.autodescription-metaboxes textarea, div#theseoframework-inpost-box .inside input[type=text], div#theseoframework-inpost-box .inside textarea").not(".nav-tab-wrapper :input").on("keyup",
-function(){autodescription.registerChange()});window.onbeforeunload=function(){if(autodescription.settingsChanged)return autodescription.saveAlert};jQuery('div.autodescription-metaboxes input[type="submit"], div#publishing-action input[type="submit"], div#save-action input[type="submit"]').click(function(){window.onbeforeunload=null})},registerChange:function(){autodescription.settingsChanged=!0},confirmedReset:function(){return confirm(autodescription.confirmReset)},dynamicPlaceholder:function(a){var b=
-autodescription.titleAdditions.length,c=jQuery("#autodescription-title-placeholder");if(0!==b){var b=!1,d=jQuery("#home-title-location input:checked").val(),f=autodescription.isRTL;if("undefined"!==typeof d&&0!==d.length)"1"===f?"right"===d&&(b=!0):"left"===d&&(b=!0);else{var d=autodescription.titleLocation,g=autodescription.titleTagline;"1"===autodescription.isHome?"1"===g&&("1"===f?"right"===d&&(b=!0):"left"===d&&(b=!0)):"1"===f?"left"===d&&(b=!0):"right"===d&&(b=!0)}}else return a=jQuery(a.target),
-a.css("text-indent","initial"),c.empty();d=jQuery("#title-tagline-toggle :input");if("undefined"!==typeof d&&0<d.length&&!d.is(":checked"))a=jQuery(a.target),a.css("text-indent","initial"),c.css("display","none");else{a=jQuery(a.target);var l=a.val(),h=jQuery("#autodescription-title-offset"),e=0,k=(a.outerHeight(!0)-a.height())/2,m=(a.outerWidth()-a.width())/2,d=(a.outerWidth(!0)-a.width())/2,e=jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").val(),g="left";"1"===f&&(g="right");
-b?(f=autodescription.titleSeparator+" "+autodescription.titleAdditions,"undefined"!==typeof e&&0<e.length&&(f=autodescription.titleSeparator+" "+e),a.css("text-indent","initial")):(f=autodescription.titleAdditions+" "+autodescription.titleSeparator,"undefined"!==typeof e&&0<e.length&&(f=e+" "+autodescription.titleSeparator));h.text(l);h.css({fontFamily:a.css("fontFamily"),fontWeight:a.css("fontWeight"),letterSpacing:a.css("letterSpacing"),fontSize:a.css("fontSize")});e=h.width();e=a.width()-m-e;0>
-e&&(e=0);c.css({display:a.css("display"),lineHeight:a.css("lineHeight"),paddingTop:k+"px",paddingBottom:k+"px",fontFamily:a.css("fontFamily"),fontWeight:a.css("fontWeight"),fontSize:a.css("fontSize"),letterSpacing:a.css("letterSpacing"),maxWidth:e+"px"});"undefined"===typeof l||1>l.length?(b||a.css("text-indent","initial"),c.empty()):(c.text(f),a.outerWidth()>d&&(b?c.css(g,m+d+h.width()+"px"):(b=m+c.width(),0>b&&(b=0),c.css(g,d+"px"),a.css("text-indent",b+"px"))))}},selectTitleInput:function(){var a=
-autodescription.docTitles();a.focus();if(a.setSelectionRange){var b=2*a.val().length;a.setSelectionRange(b,b)}else a.val(a.val()).focus()},dynamicPlaceholderOnLoad:function(){var a=autodescription.docTitles();"undefined"!==typeof a.val()&&(0<a.val().length?a.trigger("keyup",autodescription.dynamicPlaceholder):a.trigger("keyup",autodescription.updateCharacterCountTitle))},triggerDescriptionOnLoad:function(){autodescription.docDescriptions().trigger("keyup",autodescription.updateCharacterCountDescription)},
-onLoadUnregisterChange:function(){autodescription.settingsChanged=!1},ready:function(){jQuery("div.updated, div.error, div.notice-warning").insertAfter("div.top-wrap");jQuery(document.body).ready(autodescription.dynamicPlaceholderOnLoad);jQuery(document.body).ready(autodescription.triggerDescriptionOnLoad);jQuery(document.body).ready(autodescription.taglineToggleOnload);autodescription.statusBarHover();jQuery(document.body).on("touchstart MSPointerDown",autodescription.removeDesc);autodescription.attachUnsavedChangesListener();
-jQuery(document.body).ready(autodescription.onLoadUnregisterChange);autodescription.docDescriptions().on("keydown keyup paste",autodescription.updateCharacterCountDescription);autodescription.docTitles().on("keydown keyup paste",autodescription.updateCharacterCountTitle);jQuery("#title-separator input").on("click",autodescription.separatorSwitch);jQuery("#description-separator input").on("click",autodescription.separatorSwitchDesc);jQuery(".autodescription-js-confirm-reset").on("click.autodescription.autodescription_confirm_reset",
-autodescription.confirmedReset);jQuery("#social-tabs-js, #robots-tabs-js, #knowledge-tabs-js, #sitemaps-tabs-js").on("click",autodescription.tabToggle);jQuery("#title-tagline-toggle :input").on("click",autodescription.taglineToggle);jQuery("#description-onblogname-toggle :input").on("click",autodescription.taglineToggleDesc);jQuery("#autodescription-site-settings\\[homepage_title\\]").on("keydown keyup paste",autodescription.titleProp);jQuery("#home-title-location :input, #title-tagline-toggle :input, #title-separator input").on("click",
-autodescription.taglinePropTrigger);jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").on("keydown keyup paste",autodescription.taglineProp);jQuery("#autodescription-site-settings\\[title_rem_additions\\]").on("click",autodescription.titleToggle);autodescription.docTitles().on("keydown keyup paste",autodescription.dynamicPlaceholder);jQuery("#autodescription-title-placeholder").on("click",autodescription.selectTitleInput)}};jQuery(autodescription.ready);
+window.autodescription={i:!1,h:autodescriptionL10n.titleTagline,a:autodescriptionL10n.counterType,c:"",b:function(){return jQuery("#autodescription_title, #autodescription-meta\\[doctitle\\], #autodescription-site-settings\\[homepage_title\\]")},l:function(){return jQuery("#autodescription_description, #autodescription-meta\\[description\\], #autodescription-site-settings\\[homepage_description\\]")},confirm:function(a){return confirm(a)},B:function(a){var b=jQuery(a.target),c=b.val().length,b=b.attr("placeholder").length;
+a=jQuery("#"+autodescription.o(a.target.id)+"_chars");var e=autodescription.c,g=autodescription.a,d="",k="",h="";0===c&&(c=b);100>c||175<=c?(d="ad-count-bad",k=autodescription.f("bad")):137>c||155<c&&175>c?(d="ad-count-okay",k=autodescription.f("okay")):(d="ad-count-good",k=autodescription.f("good"));e&&(d+=" "+e);g&&1!=g?2==g?h=k:3==g&&(h=c.toString()+" - "+k):h=c.toString();a.html(h).removeClass().addClass(d)},g:function(a){var b=jQuery(a.target),c=autodescriptionL10n.titleAdditions.length,e=autodescriptionL10n.blogDescription.length,
+g=autodescriptionL10n.siteTitle.length,d=b.val().length,k=b.attr("placeholder").length,h=jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").val(),b=3;a=jQuery("#"+autodescription.o(a.target.id)+"_chars");var f=0,n=autodescription.c,p=autodescription.a,l="",m="",q="";autodescription.h||(b=c=0);0===d&&(0!==g?d=g:f=k);0!==d&&(0!==c&&"undefined"!==typeof h&&(c=h.length,c=0!==c?c:e),f=0===c?d:d+b+c);25>f||75<=f?(l="ad-count-bad",m=autodescription.f("bad")):42>f||55<f&&75>f?(l="ad-count-okay",
+m=autodescription.f("okay")):(l="ad-count-good",m=autodescription.f("good"));n&&(l+=" "+n);p&&1!=p?2==p?q=m:3==p&&(q=f.toString()+" - "+m):q=f.toString();a.html(q).removeClass().addClass(l)},o:function(a){return a?a.replace(/([\[\]\/])/g,"\\$1"):a},J:function(a){a&&a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");return a},N:function(a){var b=jQuery(".autodescription-sep-js");a=jQuery(a.target).val();"pipe"===a?b.text(" | "):"dash"===a?b.text(" - "):b.html(" &"+a+"; ")},O:function(a){var b=
+jQuery("#autodescription-descsep-js");a=jQuery(a.target).val();"pipe"===a?b.text(" | "):"dash"===a?b.text(" - "):b.html(" &"+a+"; ")},statusBarHover:function(){var a=jQuery(".ad-bar-wrap").find("a");a.on("mouseenter",autodescription.P);a.on("mousemove",autodescription.S);a.on("mouseleave",autodescription.R)},P:function(){var a=jQuery(this),b=a.attr("data-desc");void 0!==b&&0===a.find("div").length&&(a.append('<div class="explanation-desc">'+b+"<div></div></div>"),b=a.find("div.explanation-desc").height()+
+28,a.find("div.explanation-desc").css("top",a.position().top-b+"px"))},S:function(a){var b=jQuery(a.target);a=a.pageX;var c=a-jQuery(".ad-bar-wrap").offset().left-11,e=b.find(".explanation-desc"),b=e.find("div");if(1>c)b.css("left","0px");else if(void 0!==e.offset()){var g=e.width(),e=e.offset().left+g+11;a>e?b.css("left",g+"px"):b.css("left",c+"px")}},R:function(){jQuery(this).find("div.explanation-desc").remove()},L:function(a){a=jQuery(a.target);var b=jQuery(".ad-bar-wrap a");a.closest(b).length||
+b.find("div.explanation-desc").remove()},T:function(a){var b=jQuery(a.target).attr("id");a=jQuery(a.target).attr("name");"undefined"!==typeof b&&(b=jQuery("#"+b+"-content"),a=jQuery("."+a+"-content"),"undefined"!==typeof b&&(a.removeClass("seoframework-active-tab-content"),b.addClass("seoframework-active-tab-content")))},U:function(a){a=jQuery(a.target);var b=jQuery(".custom-blogname-js");a.is(":checked")?(b.css("display","inline"),autodescription.h=!0):(b.css("display","none"),autodescription.h=
+!1);autodescription.b().trigger("keyup",autodescription.g)},V:function(a){a=jQuery(a.target);var b=jQuery("#on-blogname-js");a.is(":checked")?b.css("display","inline"):b.css("display","none")},X:function(a){a=jQuery(a.target).val();var b=jQuery(".title-additions-example-left"),c=jQuery(".title-additions-example-right");"right"===a?(b.css("display","none"),c.css("display","inline")):(b.css("display","inline"),c.css("display","none"))},Y:function(a){a=jQuery(a.target);var b=jQuery(".title-prefix-example");
+a.is(":checked")?b.css("display","none"):b.css("display","inline")},C:function(a){a=jQuery(a.target);var b=jQuery("#description-additions-js");a.is(":checked")?b.css("display","inline"):b.css("display","none")},W:function(){var a=jQuery("#title-tagline-toggle :input"),b=jQuery(".custom-blogname-js"),c=jQuery("#description-additions-toggle :input"),e=jQuery("#description-additions-js"),g=jQuery("#description-onblogname-toggle :input"),d=jQuery("#on-blogname-js"),k=jQuery("#title-additions-toggle :input"),
+h=jQuery(".title-additions-js");a.is(":checked")?b.css("display","inline"):b.css("display","none");c.is(":checked")?e.css("display","inline"):e.css("display","none");g.is(":checked")?d.css("display","inline"):d.css("display","none");k.is(":checked")?h.css("display","none"):h.css("display","inline")},Z:function(a){a=jQuery(a.target).val();var b=jQuery(".custom-title-js");0===a.length?b.text(autodescriptionL10n.siteTitle):b.text(a)},u:function(a){a=jQuery(a.target).val();var b=jQuery(".custom-tagline-js"),
+c=jQuery("#autodescription-site-settings\\[homepage_title\\]"),e=jQuery("#home-title-location input:checked").val(),g=jQuery("#autodescription-site-settings\\[homepage_tagline\\]"),d=autodescriptionL10n.siteTitle,k=d,h=autodescriptionL10n.blogDescription,f=jQuery("#title-separator input:checked").val(),n=autodescriptionL10n.titleSeparator;g.is(":checked")&&(0!==a.length&&(a=autodescription.J(a),h=jQuery("<div/>").text(a).html()),0!==f.length&&(n="pipe"===f?"|":"dash"===f?"-":jQuery("<div/>").html("&"+
+f+";").text()),k=0!==e.length&&"left"===e?d+" "+n+" "+h:h+" "+n+" "+d);b.html(h);c.attr("placeholder",k);autodescription.b().trigger("keyup",autodescription.g)},v:function(){jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").trigger("keyup",autodescription.u)},aa:function(){var a=jQuery(event.target),b=jQuery(".title-additions-js");a.is(":checked")?b.css("display","none"):b.css("display","inline")},D:function(){jQuery("div.autodescription-metaboxes :input, div#theseoframework-inpost-box .inside :input").not(".seoframework-tab :input").change(function(){autodescription.s()});
+jQuery("div.autodescription-metaboxes input[type=text], div.autodescription-metaboxes textarea, div#theseoframework-inpost-box .inside input[type=text], div#theseoframework-inpost-box .inside textarea").not(".nav-tab-wrapper :input").on("keyup",function(){autodescription.s()});window.onbeforeunload=function(){if(autodescription.i)return autodescriptionL10n.saveAlert};jQuery('div.autodescription-metaboxes input[type="submit"], div#publishing-action input[type="submit"], div#save-action input[type="submit"], a.submitdelete').click(function(){window.onbeforeunload=
+null})},s:function(){autodescription.i=!0},F:function(){return confirm(autodescriptionL10n.confirmReset)},m:function(a){var b=autodescriptionL10n.titleAdditions.length,c=jQuery("#autodescription-title-placeholder");if(0===b)return a=jQuery(a.target),a.css("text-indent","initial"),c.empty();var b=!1,e=jQuery("#home-title-location input:checked").val(),g=autodescriptionL10n.isRTL,d="";"undefined"!==typeof e&&0!==e.length?"1"===g?"right"===e&&(b=!0):"left"===e&&(b=!0):(d=autodescriptionL10n.titleLocation,
+e=autodescription.h,"1"===autodescriptionL10n.isHome?"1"===e&&("1"===g?"right"===d&&(b=!0):"left"===d&&(b=!0)):"1"===g?"left"===d&&(b=!0):"right"===d&&(b=!0));d=jQuery("#title-tagline-toggle :input");if("undefined"!==typeof d&&0<d.length&&!d.is(":checked"))a=jQuery(a.target),a.css("text-indent","initial"),c.css("display","none");else{a=jQuery(a.target);var k=a.val(),h=jQuery("#autodescription-title-offset"),f=0,n=(a.outerHeight(!0)-a.height())/2,p=(a.outerWidth()-a.width())/2,e=(a.outerWidth(!0)-
+a.width())/2,f=jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").val(),l="left",m=autodescriptionL10n.titleSeparator;"1"===g&&(l="right");"undefined"!==typeof f&&0===f.length&&(f=autodescriptionL10n.blogDescription);b?(d=m+" "+autodescriptionL10n.titleAdditions,"undefined"!==typeof f&&0<f.length&&(d=m+" "+f),a.css("text-indent","initial")):(d=autodescriptionL10n.titleAdditions+" "+m,"undefined"!==typeof f&&0<f.length&&(d=f+" "+m));h.text(k);h.css({fontFamily:a.css("fontFamily"),
+fontWeight:a.css("fontWeight"),letterSpacing:a.css("letterSpacing"),fontSize:a.css("fontSize")});f=h.width();g=a.width()-p-f;0>g&&(g=0);c.css({display:a.css("display"),lineHeight:a.css("lineHeight"),paddingTop:n+"px",paddingBottom:n+"px",fontFamily:a.css("fontFamily"),fontWeight:a.css("fontWeight"),fontSize:a.css("fontSize"),letterSpacing:a.css("letterSpacing"),maxWidth:g+"px"});"undefined"===typeof k||1>k.length?(b||a.css("text-indent","initial"),c.empty()):(c.text(d),a.outerWidth()>e&&(b?c.css(l,
+p+e+h.width()+"px"):(b=p+c.width(),0>b&&(b=0),c.css(l,e+"px"),a.css("text-indent",b+"px"))))}},M:function(){var a=autodescription.b();a.focus();if(a.setSelectionRange){var b=2*a.val().length;a.setSelectionRange(b,b)}else a.val(a.val()).focus()},I:function(){var a=autodescription.b();"undefined"!==typeof a.val()&&(0<a.val().length?a.trigger("keyup",autodescription.m):a.trigger("keyup",autodescription.g))},w:function(){autodescription.l().trigger("keyup",autodescription.B)},A:function(){autodescription.b().trigger("keyup",
+autodescription.g)},K:function(){autodescription.i=!1},H:function(a){var b=jQuery(a.target);b.parents(".seo-notice").slideUp(200,function(){b.remove()})},G:function(){autodescription.a+=1;3<autodescription.a&&(autodescription.a=0);jQuery.post(ajaxurl,{action:"the_seo_framework_update_counter"});autodescription.j()},j:function(){var a=autodescription.a;1==a?(autodescription.c="tsf-counter-one",autodescription.a=1):2==a?(autodescription.c="tsf-counter-two",autodescription.a=2):3==a?(autodescription.c=
+"tsf-counter-three",autodescription.a=3):(autodescription.c="tsf-counter-zero",autodescription.a=0);autodescription.ba()},ba:function(){autodescription.A();autodescription.w()},f:function(a){return autodescriptionL10n[a]},ready:function(){jQuery("div.updated, div.error, div.notice-warning").insertAfter("div.top-wrap");jQuery(document.body).ready(autodescription.j);jQuery(document.body).ready(autodescription.I);jQuery(document.body).ready(autodescription.A);jQuery(document.body).ready(autodescription.w);
+jQuery(document.body).ready(autodescription.W);jQuery(document.body).ready(autodescription.statusBarHover);jQuery(document.body).on("click touchstart MSPointerDown",autodescription.L);autodescription.D();jQuery(document.body).ready(autodescription.K);autodescription.l().on("keydown keyup paste",autodescription.B);autodescription.b().on("keydown keyup paste",autodescription.g);jQuery("#title-separator input").on("click",autodescription.N);jQuery("#description-separator input").on("click",autodescription.O);
+jQuery(".autodescription-js-confirm-reset").on("click.autodescription.autodescription_confirm_reset",autodescription.F);jQuery(".seoframework-tab").on("click",autodescription.T);jQuery("#title-tagline-toggle :input").on("click",autodescription.U);jQuery("#title-location input").on("click",autodescription.X);jQuery("#title-prefixes-toggle :input").on("click",autodescription.Y);jQuery("#description-onblogname-toggle :input").on("click",autodescription.V);jQuery("#description-additions-toggle :input").on("click",
+autodescription.C);jQuery("#autodescription-site-settings\\[homepage_title\\]").on("keydown keyup paste",autodescription.Z);jQuery("#home-title-location :input, #title-tagline-toggle :input, #title-separator input").on("click",autodescription.v);jQuery("#autodescription-site-settings\\[homepage_title_tagline\\]").on("keydown keyup paste",autodescription.u);jQuery("#homepage-tab-general").on("change",autodescription.v);jQuery("#autodescription-site-settings\\[title_rem_additions\\]").on("click",autodescription.aa);
+autodescription.b().on("keydown keyup paste",autodescription.m);jQuery("#autodescription-title-placeholder").on("click",autodescription.M);jQuery(".autodescription-dismiss").on("click",autodescription.H);jQuery(".theseoframework-counter").on("click",autodescription.G)}};jQuery(autodescription.ready);
Index: load.class.php
===================================================================
--- load.class.php	(revision 1413572)
+++ load.class.php	(working copy)
@@ -54,13 +54,6 @@
  * @action plugins_loaded
  */
 function the_seo_framework_load() {
-	/**
-	 * New filter.
-	 * @since 2.3.0
-	 *
-	 * Removed previous filter.
-	 * @since 2.3.5
-	 */
 	return (bool) apply_filters( 'the_seo_framework_load', true );
 }
 
@@ -69,17 +62,34 @@
  * @uses THE_SEO_FRAMEWORK_DIR_PATH_FUNCT
  * @uses THE_SEO_FRAMEWORK_DIR_PATH_CLASS
  *
+ * @benchmarked require_once (file inclusion) takes less than 0.0001s.
+ *
  * @since 2.1.6
  */
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_FUNCT . 'compat.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_FUNCT . 'optionsapi.php' );
+//require_once( THE_SEO_FRAMEWORK_DIR_PATH_FUNCT . 'benchmark.php' );
 
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'core.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'debug.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'compat.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'query.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'init.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'admininit.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'render.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'detect.class.php' );
+
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'postdata.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'termdata.class.php' );
+
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'generate.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'generate-description.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'generate-title.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'generate-url.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'generate-image.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'generate-ldjson.class.php' );
+require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'generate-author.class.php' );
+
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'search.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'doingitright.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'pageoptions.class.php' );
@@ -87,7 +97,6 @@
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'adminpages.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'sanitize.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'siteoptions.class.php' );
-require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'networkoptions.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'metaboxes.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'sitemaps.class.php' );
 require_once( THE_SEO_FRAMEWORK_DIR_PATH_CLASS . 'transients.class.php' );
@@ -105,29 +114,46 @@
 class The_SEO_Framework_Load extends The_SEO_Framework_Deprecated {
 
 	/**
-	 * Cached debug constants. Initialized on plugins_loaded.
+	 * Cached debug/profile constants. Initialized on plugins_loaded priority 5.
 	 *
 	 * @since 2.2.9
 	 *
-	 * @var bool The SEO Framework Debug is defined.
+	 * @var bool The SEO Framework Debug/Profile constants is/are defined.
 	 */
 	public $the_seo_framework_debug = false;
-	public $the_seo_framework_debug_more = false;
 	public $the_seo_framework_debug_hidden = false;
+	public $the_seo_framework_use_transients = true;
+	public $script_debug = false;
+	public $debug_time;
 
 	/**
-	 * Constructor, load parent constructor
+	 * Constructor, setup debug vars and then load parent constructor.
 	 */
 	public function __construct() {
+		//* Setup debug vars before initializing parents.
+		$this->init_debug_vars();
+
 		parent::__construct();
+	}
 
+	/**
+	 * Initializes public debug variables for the class to use.
+	 *
+	 * @since 2.6.0
+	 */
+	public function init_debug_vars() {
+
 		$this->the_seo_framework_debug = defined( 'THE_SEO_FRAMEWORK_DEBUG' ) && THE_SEO_FRAMEWORK_DEBUG ? true : $this->the_seo_framework_debug;
-
 		if ( $this->the_seo_framework_debug ) {
 			//* No need to set these to true if no debugging is enabled.
-			$this->the_seo_framework_debug_more = defined( 'THE_SEO_FRAMEWORK_DEBUG_MORE' ) && THE_SEO_FRAMEWORK_DEBUG_MORE ? true : $this->the_seo_framework_debug_more;
 			$this->the_seo_framework_debug_hidden = defined( 'THE_SEO_FRAMEWORK_DEBUG_HIDDEN' ) && THE_SEO_FRAMEWORK_DEBUG_HIDDEN ? true : $this->the_seo_framework_debug_hidden;
 		}
+
+		$this->the_seo_framework_use_transients = defined( 'THE_SEO_FRAMEWORK_DISABLE_TRANSIENTS' ) && THE_SEO_FRAMEWORK_DISABLE_TRANSIENTS ? false : $this->the_seo_framework_use_transients;
+
+		//* WP Core definition.
+		$this->script_debug = defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ? true : $this->script_debug;
+
 	}
 
 	/**
@@ -142,6 +168,9 @@
 	 *
 	 * @return mixed $output The function called.
 	 *
+	 * @NOTE _doing_it_wrong notices go towards the callback. Unless this
+	 * function is used wrongfully. Then the notice is about this function.
+	 *
 	 * @param array|string $params The arguments passed to the function.
 	 * @since 2.2.4
 	 */
@@ -167,13 +196,16 @@
 			$args = (array) $params;
 		}
 
+		$class = reset( $function );
+		$method = next( $function );
+
 		/**
 		 * Fetch method/function
 		 */
-		if ( is_object( $function[0] ) ) {
-			$method = (string) $function[1];
+		if ( is_object( $class ) && is_string( $method ) ) {
+			$class = get_class( $class );
 
-			if ( $function[0] == $this ) {
+			if ( $class === get_class( $this ) ) {
 				if ( method_exists( $this, $method ) ) {
 					if ( empty( $args ) ) {
 						// In-Object calling.
@@ -180,48 +212,44 @@
 						$output = call_user_func( array( $this, $method ) );
 					} else {
 						// In-Object calling.
-						$output = call_user_func_array( array( $this, $method ), (array) $args );
+						$output = call_user_func_array( array( $this, $method ), $args );
 					}
-				} else if ( $version ) {
-					$version = $this->the_seo_framework_version( $version );
-					 _doing_it_wrong( (string) $this . '::' . (string) $method, __( "Class or Method not found.", 'autodescription' ), $version );
+				} else {
+					$this->_doing_it_wrong( (string) $class . '::' . (string) $method, __( "Class or Method not found.", 'autodescription' ), $version );
 				}
 			} else {
-				// This doesn't work in Apache configurations.
-				$class = get_class( $function[0] );
-				$method = (string) $function[1];
-
 				if ( method_exists( $class, $method ) ) {
 					if ( empty( $args ) ) {
-						// Static calling
-						$output = call_user_func( $class . '::'. $method );
+						$output = call_user_func( array( $class, $method ) );
 					} else {
-						// Static calling
-						$output = call_user_func_array( $class . '::'. $method, (array) $args );
+						$output = call_user_func_array( array( $class, $method ), $args );
 					}
-				} else if ( $version ) {
-					$version = $this->the_seo_framework_version( $version );
-					 _doing_it_wrong( (string) $class . '::' . (string) $method, __( "Class or Method not found. Needs to be called statically.", 'autodescription' ), $version );
+				} else {
+					$this->_doing_it_wrong( (string) $class . '::' . (string) $method, __( "Class or Method not found.", 'autodescription' ), $version );
 				}
 			}
-		} else if ( is_string( $function[0] ) && ! empty( $function[1] ) ) {
-			if ( empty( $args ) ) {
-				// Static calling
-				$output = call_user_func( $function[0] . '::' . $function[1] );
+		} else if ( is_string( $class ) && is_string( $method ) ) {
+			//* This could be combined with the one above.
+			if ( method_exists( $class, $method ) ) {
+				if ( empty( $args ) ) {
+					$output = call_user_func( array( $class, $method ) );
+				} else {
+					$output = call_user_func_array( array( $class, $method ), $args );
+				}
 			} else {
-				// Static calling
-				$output = call_user_func_array( $function[0] . '::' . $function[1], (array) $args );
+				$this->_doing_it_wrong( (string) $class . '::' . (string) $method, __( "Class or Method not found.", 'autodescription' ), $version );
 			}
-		} else if ( is_string( $function[0] ) ) {
-			$func = $function[0];
+		} else if ( is_string( $class ) ) {
+			//* Class is function.
+			$func = $class;
+
 			if ( empty( $args ) ) {
 				$output = call_user_func( $func );
 			} else {
-				$output = call_user_func_array( $func, (array) $args );
+				$output = call_user_func_array( $func, $args );
 			}
-		} else if ( $version ) {
-			$version = $this->the_seo_framework_version( $version );
-			_doing_it_wrong( (string) $callback, __( "Function needs to be called as string.", 'autodescription' ), $version );
+		} else {
+			$this->_doing_it_wrong( __CLASS__ . '::' . __FUNCTION__, __( "Function needs to be called as a string.", 'autodescription' ), $version );
 		}
 
 		return $output;
@@ -234,54 +262,9 @@
 	 */
 	public function the_seo_framework_version( $version = '' ) {
 
-		$output = empty( $version ) ? '' : sprintf( __( '%s of The SEO Framework', 'autodescription' ), esc_attr( $version ) );
+		$output = $version ? sprintf( __( '%s of The SEO Framework', 'autodescription' ), esc_attr( $version ) ) : '';
 
 		return $output;
 	}
 
-	/**
-	 * Faster way of doing an in_array search compared to default PHP behavior.
-	 * @NOTE only to show improvement with large arrays. Might slow down with small arrays.
-	 * @NOTE can't do type checks. Always assume the comparing value is a string.
-	 *
-	 * @uses array_flip()
-	 * @uses isset()
-	 *
-	 * @since 2.5.2
-	 *
-	 * @param string|array $needle The needle(s) to search for
-	 * @param array $array The single dimensional array to search in.
-	 *
-	 * @return bool true if value is in array.
-	 */
-	public function in_array( $needle, $array ) {
-
-		$array = array_flip( $array );
-
-		if ( is_string( $needle ) ) {
-			if ( isset( $array[$needle] ) )
-				return true;
-		} else if ( is_array( $needle ) ) {
-			foreach ( $needle as $str ) {
-				if ( isset( $array[$str] ) )
-					return true;
-			}
-		}
-
-		return false;
-	}
-
 }
-
-//* Load deprecated functions.
-require_once( THE_SEO_FRAMEWORK_DIR_PATH . 'inc/deprecated/deprecated.php' );
-
-/**
- * FLush permalinks on activation/deactivation
- *
- * Calls functions statically.
- *
- * @since 2.2.9
- */
-register_activation_hook( THE_SEO_FRAMEWORK_PLUGIN_BASE_FILE, array( 'The_SEO_Framework_Load', 'flush_rewrite_rules_activation' ) );
-register_deactivation_hook( THE_SEO_FRAMEWORK_PLUGIN_BASE_FILE, array( 'The_SEO_Framework_Load', 'flush_rewrite_rules_deactivation' ) );
Index: patch/index.php
===================================================================
--- patch/index.php	(nonexistent)
+++ patch/index.php	(working copy)
@@ -0,0 +1,10 @@
+<?php
+/**
+ * If you're reading this...
+ * Congratulations, you're alive.
+ * If that's not something to smile about,
+ * then I don't know what is.
+ * - Chad Sugg
+ *
+ * :)
+ */
Index: seotips/index.php
===================================================================
--- seotips/index.php	(nonexistent)
+++ seotips/index.php	(working copy)
@@ -0,0 +1,2 @@
+<?php
+//* Well-lit streets discourage sin, but don't overdo it. - William J. Kennedy
